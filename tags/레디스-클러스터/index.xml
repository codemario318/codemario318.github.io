<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>레디스 클러스터 on Mario Blog</title><link>https://codemario318.github.io/tags/%EB%A0%88%EB%94%94%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0/</link><description>Recent content in 레디스 클러스터 on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 07 Dec 2024 13:51:50 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/%EB%A0%88%EB%94%94%EC%8A%A4-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>12. 전자 지갑</title><link>https://codemario318.github.io/post/system-design-interview-2/12/</link><pubDate>Sat, 07 Dec 2024 13:51:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview-2/12/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/cover.png" alt="Featured image of post 12. 전자 지갑" />&lt;p>결제 플랫폼은 일반적으로 고객게에 전자 지갑 서비스를 제공하여 지갑에 돈을 넣어두고 필요할 때 사용할 수 있도록 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_10.png"
width="1920"
height="372"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_10_hu882c1f440f1b9829d468d598d006e286_33295_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_10_hu882c1f440f1b9829d468d598d006e286_33295_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="전자 지갑"
class="gallery-image"
data-flex-grow="516"
data-flex-basis="1238px"
>&lt;/p>
&lt;ul>
&lt;li>결제 기능&lt;/li>
&lt;li>다른 사용자의 지갑으로 직접 송금
&lt;ul>
&lt;li>은행 간 이체보다 빠르며, 일반적으로 추가 수수료를 부과하지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>전자 지갑 애플리케이션의 백엔드를 설계해본다.&lt;/p>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;ul>
&lt;li>전자 지갑 간 이체&lt;/li>
&lt;li>10,000,000 TPS&lt;/li>
&lt;li>99.99% 안정성&lt;/li>
&lt;li>트랜잭션&lt;/li>
&lt;li>재현성&lt;/li>
&lt;/ul>
&lt;h3 id="개략적-추정">개략적 추정&lt;/h3>
&lt;p>TPS를 거론한다는 것은 &lt;strong>트랜잭션 기반 데이터베이스&lt;/strong>를 사용한다는 것을 뜻한다.&lt;/p>
&lt;p>일반적인 데이터센터 노드에서 실행되는 관계형 데이터베이스는 초당 수천 건의 트랜잭션을 지원할 수 있다.&lt;/p>
&lt;ul>
&lt;li>설계안에서 사용할 데이터베이스 노드는 1,000 TPS를 지원할 수 있다고 가정&lt;/li>
&lt;li>1백만 TPS를 지원하려면 1,000개의 데이터베이스 노드가 필요함&lt;/li>
&lt;/ul>
&lt;p>이체 명령을 실행하려면 한 계좌에서 인출, 다른 계좌에서 입금을 실행해야하므로, 실제로는 2백만 TPS를 지원해야 하기 때문에, 2,000개의 데이터베이스 노드가 필요하다.&lt;/p>
&lt;p>하드웨어가 같아고 가정할 때, 한 노드가 초당 처리할 수 있는 트랜잭션 수가 많을수록 필요한 총 노드 수는 줄어들어 하드웨어 비용은 낮아진다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>노드당 TPS&lt;/th>
&lt;th>노드 수&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>100&lt;/td>
&lt;td>20,000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1,000&lt;/td>
&lt;td>2,000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10,000&lt;/td>
&lt;td>200&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>따라서 단일 노드가 처리할 수 있는 트랜잭션 수를 최대한 늘려 관리해야할 노드 수를 줄인다.&lt;/p>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;ul>
&lt;li>API 설계&lt;/li>
&lt;li>세가지 개략적 설계안
&lt;ul>
&lt;li>간단한 메모리 기반 솔루션&lt;/li>
&lt;li>데이터베이스 기반 분산 트랜잭션 솔루션&lt;/li>
&lt;li>재현성을 갖춘 이벤트 소싱(event sourcing) 솔루션&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="api-설계">API 설계&lt;/h3>
&lt;p>RESTful 규약을 따르는 하나의 API만 필요하다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>API&lt;/th>
&lt;th>기능&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>POST /v1/wallet/balance_transfer&lt;/td>
&lt;td>한 지갑에서 다른 지급으로 자금 이체&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>&lt;strong>요청 인자&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>필드&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>자료형&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>from_account&lt;/td>
&lt;td>인출 계좌&lt;/td>
&lt;td>string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>to_account&lt;/td>
&lt;td>이체 계좌&lt;/td>
&lt;td>string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>amount&lt;/td>
&lt;td>금액&lt;/td>
&lt;td>string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>currency&lt;/td>
&lt;td>통화 단위&lt;/td>
&lt;td>string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transaction_id&lt;/td>
&lt;td>중복 제거 ID&lt;/td>
&lt;td>uuid&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>유의할 부분은 &lt;code>amount&lt;/code> 필드의 자료형이 &lt;code>string&lt;/code> 이라는 점인데(11장 참고), 실제로는 &lt;code>float&lt;/code>이나 &lt;code>double&lt;/code>을 대부분의 프로그래밍 언어와 데이터베이스가 지원하기 때문에 택하는 경우도 많다.&lt;/p>
&lt;ul>
&lt;li>정밀도를 잃을 위험을 인지하고 사용한다면 적절한 선택일 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="인메모리-샤딩">인메모리 샤딩&lt;/h3>
&lt;p>지갑 애플리케이션은 모든 사용자 계정의 잔액을 유지한다.&lt;/p>
&lt;p>사용자와 잔액의 관계를 나타내기 좋은 자료 구조는 키-값 자료구조이고, 인메모리 키-값 저장소는 레디스가 가장 인기있다.&lt;/p>
&lt;p>그러나 레디스 노드 한대로 100만 TPS는 벅차기 때문에 클러스터를 구성하고 사용자 계정을 모든 노드에 균등하게 분산시켜야 한다.&lt;/p>
&lt;ul>
&lt;li>파티셔닝 또는 샤딩&lt;/li>
&lt;/ul>
&lt;p>키-값 데이터를 n개 파티션에 고르게 분배하려면 키의 해시 값을 계산하고 이를 파티션의 수 n으로 나누는 방법을 고려할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">String accountId = &amp;#34;A&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Int partitionNumber = 7;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Int myPartition = accountId.hashCode() % partitionNumber;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>모든 레디스 노드의 파티션 수 및 주소는 한 군데 저장해 둔다.&lt;/p>
&lt;ul>
&lt;li>높은 가용성을 보장하는 설정 정보 전문 저장소 **주키퍼(ZooKeeper)**를 이 용도로 쓰면 좋다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img.png"
width="1654"
height="906"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_huf72c0536c84b69c0b7ed32c59bc234de_79804_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_huf72c0536c84b69c0b7ed32c59bc234de_79804_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="메모리 기반 솔루션"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;p>이 방안의 마지막 구성 요소는 &lt;strong>이체 명령 처리를 담당하는 서비스&lt;/strong>로(지갑 서비스, wallet service) 다음과 같은 역할을 담당한다.&lt;/p>
&lt;ol>
&lt;li>이체 명령 수신&lt;/li>
&lt;li>이체 명령의 유효성 검증&lt;/li>
&lt;li>명령이 유효한 것으로 확인되면 이체에 관계된 두 계정의 잔액 갱신
&lt;ul>
&lt;li>두 계정은 다른 레디스 노드에 있을 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이 서비스는 무상태 서비스이므로 수평적 규모 확장에 유리하다.&lt;/p>
&lt;hr>
&lt;p>이 설계는 작동은 하지만 정확성 요구사항을 충족하지 못한다.&lt;/p>
&lt;ul>
&lt;li>두 개의 레디스 노드를 업데이트 하는데, 그 두 연산이 모두 성공한다는 보장을 할 수 없다.&lt;/li>
&lt;/ul>
&lt;p>따라서 두 업데이트 연산이 하나의 &lt;strong>원자적 트랜잭션&lt;/strong>(atomic transaction)으로 실행되어야한다.&lt;/p>
&lt;h3 id="분산-트랜잭션">분산 트랜잭션&lt;/h3>
&lt;h4 id="데이터베이스-샤딩">데이터베이스 샤딩&lt;/h4>
&lt;p>서로 다른 두 개 저장소 노드를 갱신하는 연산을 원자적으로 수행하려면 아래와 같은 방법들을 고려할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>레디스 노드를 트랜잭션을 지원하는 관계형 데이터베이스 노드로 교체&lt;/strong>&lt;/p>
&lt;p>클라이언트의 잔액 정보가 레디스 노드가 아닌 3개의 관계형 데이터베이스 노드로 분산된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_1.png"
width="1718"
height="1014"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_1_hu7e6610fae931e3e0420d5ef63bddb96b_77665_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_1_hu7e6610fae931e3e0420d5ef63bddb96b_77665_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="관계형 데이터 베이스"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>트랜잭션 데이터베이스를 사용해도 위와 같은 방식이라면 문제의 일부반 해결할 수 있다.&lt;/p>
&lt;ul>
&lt;li>한 이체 명령이 서로 다른 두 데이터베이스 서버에 있는 계정 두 개를 업데이트해야 할 가능성이 아주 높은데, 이 두 작업이 정확히 동시에 처리된다는 보장이 없다.&lt;/li>
&lt;/ul>
&lt;p>분산 시스템에서 한 트랜잭션에서는 여러 노드의 프로세스가 관여할 수 있다.&lt;/p>
&lt;p>분산 트랜잭션은 이들 프로세스를 원자적인 하나의 트랜잭션으로 묶는 방안인데, 구현법으로 &lt;strong>저수준 방안&lt;/strong>과 &lt;strong>고수준 방안&lt;/strong>을 고려할 수 있다.&lt;/p>
&lt;h4 id="2단계-커밋">2단계 커밋&lt;/h4>
&lt;p>데이터베이스 자체에 의존하는 방안인 저수준 방안에서 가장 일반적으로 사용되는 알고리즘이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_2.png"
width="1852"
height="646"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_2_hu19f6cccbd10b2e2248e252cbf00774d8_79244_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_2_hu19f6cccbd10b2e2248e252cbf00774d8_79244_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="2단계 커밋"
class="gallery-image"
data-flex-grow="286"
data-flex-basis="688px"
>&lt;/p>
&lt;ol>
&lt;li>조정자는 정상적으로 여러 데이터베이스에 읽기 및 쓰기 작업을 수행한다.
&lt;ul>
&lt;li>데이터베이스 A, C에는 락이 걸린다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>애플리케이션에서 트랜잭션을 커밋하려 할 때 조정자는 모든 데이터베이스에 트랜잭션 준비를 요청한다.&lt;/li>
&lt;li>조정자는 모든 데이터베이스의 등답을 받아 다음 절차를 수행한다.
&lt;ul>
&lt;li>모든 데이터베이스가 &amp;lsquo;예&amp;rsquo;라고 응답하면 모든 데이터베이스에 해당 트랜잭션 커밋을 요청한다.&lt;/li>
&lt;li>한 데이터베이스라도 &amp;lsquo;아니오&amp;rsquo;라고 응답하면 모든 데이터베이스에 트랜잭션 중단을 요청한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>준비 단계를 실행하려면 데이터베이스 트랜잭션 실행 방식을 변경해야 하기 때문에 저수준 방안으로 여겨진다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_3.png"
width="1852"
height="646"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_3_hu19f6cccbd10b2e2248e252cbf00774d8_79244_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_3_hu19f6cccbd10b2e2248e252cbf00774d8_79244_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="조정자 장애"
class="gallery-image"
data-flex-grow="286"
data-flex-basis="688px"
>&lt;/p>
&lt;ul>
&lt;li>2PC의 가장 큰 문제점은 다른 노드의 메시지를 기다리는 동안 락이 오랫동안 잠긴 상태로 남을 수 있어 성능이 좋지 않을 수 있다.&lt;/li>
&lt;li>조정자가 SPOF가 될 수 있다.&lt;/li>
&lt;li>모든 데이터베이스가 &lt;strong>X/Open XA 표준&lt;/strong>을 만족해야한다.&lt;/li>
&lt;/ul>
&lt;h3 id="분산-트랜잭션-tcc">분산 트랜잭션: TC/C&lt;/h3>
&lt;p>TC/C(시도-확정/취소, Try-Confirm/Cancel)는 두 단계로 구성된 보상 트랜잭션이다.&lt;/p>
&lt;ol>
&lt;li>조정자는 모든 데이터베이스에 트랜잭션에 필요한 자원 예약을 요청한다.&lt;/li>
&lt;li>조정자는 모든 데이터베이스로부터 회신을 받는다.
&lt;ul>
&lt;li>모두 &amp;lsquo;예&amp;rsquo; 라고 응답하면 모든 데이터베이스에 작업 확인을 요청한다.(시도-확정, Try-Confirm)&lt;/li>
&lt;li>하나라도 &amp;lsquo;아니오&amp;rsquo; 라고 응답하면 모든 데이터베이스에 작업 취소를 요청한다. (시도-취소, Try-Cancel)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>2PC의 두 단계는 한 트랜잭션이지만, TC/C에서는 각 단계가 별도 트랜잭션이라는 점을 유의하자.&lt;/p>
&lt;h4 id="tcc-사례">&lt;strong>TC/C 사례&lt;/strong>&lt;/h4>
&lt;p>계좌 A 에서 계좌 C로 1달러를 이체한다고 가정한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>단계&lt;/th>
&lt;th>실행연산&lt;/th>
&lt;th>A&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>시도&lt;/td>
&lt;td>잔액 변경: -$1&lt;/td>
&lt;td>아무것도 하지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>확인&lt;/td>
&lt;td>아무것도 하지 않음&lt;/td>
&lt;td>잔액 변경: +$1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>취소&lt;/td>
&lt;td>잔액 변경: +$1&lt;/td>
&lt;td>아무것도 하지 않음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>지갑 서비스가 TC/C의 조정자로고 가정하고, 분산 트랜잭션이 시작될 때 계정 A의 잔액은 1달러이고 계정 C의 잔액은 0달러이다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>첫 번째 단계: 시도&lt;/strong>&lt;/p>
&lt;p>시도 단계에서는 조정자 역할을 하는 지갑 서비스가 두 개의 트랜잭션 명령을 두 데이터베이스로 전송한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_4.png"
width="1384"
height="626"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_4_hud16c29872b996ec2beb3f34f5dddf1ea_58583_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_4_hud16c29872b996ec2beb3f34f5dddf1ea_58583_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="시도 단계"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p>
&lt;ul>
&lt;li>계정 A가 포함된 데이터베이스에 잔액을 1달러 감소시키는 트랜잭션을 시작한다.&lt;/li>
&lt;li>계정 C가 포함된 데이터베이스에는 아무 작업도 하지 않는다.
&lt;ul>
&lt;li>데이터베이스에 NOP(No Operation) 명령을 보내며, 항상 성공한다는 응답을 보낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>두 번째 단계: 확정&lt;/strong>&lt;/p>
&lt;p>두 데이터베이스가 모두 예라고 응답하면 지갑 서비스는 확정 단계를 시작한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_5.png"
width="2000"
height="724"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_5_hu9f66d079e3e4710ead273cc50adf3a3e_100091_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_5_hu9f66d079e3e4710ead273cc50adf3a3e_100091_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="확정 단계"
class="gallery-image"
data-flex-grow="276"
data-flex-basis="662px"
>&lt;/p>
&lt;p>계정 A의 잔액은 이미 첫 번째 단계에서 갱신되었으므로 잔액을 변경할 필요가 없으나, 계정 C에서 1달러를 받지 못했으므로 확인 단계에서 실행되어야한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>세 번째 단계: 취소&lt;/strong>&lt;/p>
&lt;p>첫번째 시도 단계에서 C 계정이 불법 계정이라던가하는 이유로 실패한다면 분산 트랜잭션을 취소하고 관련된 자원을 반환해야한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_6.png"
width="1986"
height="560"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_6_hud585c22ea7c26bf4e72e8f7a01cdf3a3_89572_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_6_hud585c22ea7c26bf4e72e8f7a01cdf3a3_89572_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="취소 단계"
class="gallery-image"
data-flex-grow="354"
data-flex-basis="851px"
>&lt;/p>
&lt;p>시도 단계의 트랜잭션에서 계정 A의 잔액은 이미 바뀌었기 때문에 &lt;strong>또 다른 트랜잭션을 시작하여 계정 A에 다시 1달라를 추가&lt;/strong>해야한다.&lt;/p>
&lt;ul>
&lt;li>시도 단계에서 계정 C의 잔액은 업데이트하지 않았으므로, 계정 C의 데이터베이스에는 NOP 명령만 보내면 된다.&lt;/li>
&lt;/ul>
&lt;h4 id="2pc와-tcc-비교">2PC와 TC/C 비교&lt;/h4>
&lt;p>2PC와 TC/C 간에는 많은 유사점이 있지만 차이점도 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>첫 번째 단계&lt;/th>
&lt;th>두 번째 단계: 성공&lt;/th>
&lt;th>두 번째 단계: 실패&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2PC&lt;/td>
&lt;td>로컬 트랜잭션은 아지 완료되지 않은 상태&lt;/td>
&lt;td>모든 로컬 트랜잭션을 커밋&lt;/td>
&lt;td>모든 로컬 트랜잭션을 취소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TC/C&lt;/td>
&lt;td>모든 로컬 트랜잭션이 커밋되거나 취소된 상태로 종료&lt;/td>
&lt;td>필요한 경우 새 로컬 트랜잭션 실행&lt;/td>
&lt;td>이미 커밋된 트랜잭션의 실행 결과를 되돌림&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>TC/C는 &lt;strong>보상 기반 분산 트랜잭션&lt;/strong>(distributed transaction by compensation)이라고도 부른다.&lt;/p>
&lt;ul>
&lt;li>실행 취소 절차를 비즈니스 로직으로 구현하므로 고수준 해법이다.&lt;/li>
&lt;/ul>
&lt;p>장점은 데이터베이스가 트랜잭션을 지원한다면 동작하므로 데이터베이스에 구애받지 않는다.&lt;/p>
&lt;p>하지만 애플리케이션 계층의 비즈니스 로직에서 세부 사항을 관리하고 분산 트랜잭션의 복잡성을 관리해야한다.&lt;/p>
&lt;h4 id="단계별-상태-테이블">단계별 상태 테이블&lt;/h4>
&lt;p>TC/C 실행 도중 지갑 서비스가 다시 시작된다면 과거 모든 작업 기록이 사라질 수 있으며, 이로인해 어떻게 복구해야 할지 알 수 없게 된다.&lt;/p>
&lt;p>해결책은 간단한데, TC/C의 진행 상황, 특히 각 단계 상태 정보를 트랜잭션 데이터베이스에 저장하면 된다.&lt;/p>
&lt;p>이를 위해 상태 정보는 최소한 다음 내용을 포함해야한다.&lt;/p>
&lt;ul>
&lt;li>분산 트랜잭션의 ID와 내용&lt;/li>
&lt;li>각 데이터베이스에 대한 시도(Try) 단계의 상태
&lt;ul>
&lt;li>&lt;code>not sent yet&lt;/code>, &lt;code>has been sent&lt;/code>, &lt;code>response received&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>두 번째 단계의 이름
&lt;ul>
&lt;li>&lt;code>Confirm&lt;/code>, &lt;code>Cancel&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>두 번째 단계의 상태&lt;/li>
&lt;li>순서가 어긋났음을 나타내는 플래그&lt;/li>
&lt;/ul>
&lt;p>단계별 상태 테이블(phase status table)은 일반적으로 돈을 인출할 지갑의 계정이 있는 데이터베이스에 둔다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_7.png"
width="1474"
height="800"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_7_hud4669546e1f63e17e27a3072a8f66c9b_70447_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_7_hud4669546e1f63e17e27a3072a8f66c9b_70447_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="단계별 상태 테이블"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;h4 id="불균형-상태">불균형 상태&lt;/h4>
&lt;p>모든 것이 순조롭게 진행된다고 가정하면 시도 단계가 끝났을 때 계정 A에서 1달러가 차감되고, 계정 C는 변화가 없다.&lt;/p>
&lt;p>이는 계좌의 총 잔고가 TC/C를 시작 시점보다 작은 값임을 의미하며, 거래 후에도 잔액 총합은 동일해야 한다는 회계 기본 원칙을 위반한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_8.png"
width="1972"
height="814"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_8_hucced9b9d9b1395df44ced0afa86b2d62_121957_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_8_hucced9b9d9b1395df44ced0afa86b2d62_121957_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="불균형 상태"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>다행스럽게도 트랜잭션 보증(transactional guarantee)은 TC/C 방안에서도 여전히 유효하다.&lt;/p>
&lt;p>TC/C는 여러 개의 독립적인 로컬 트랜잭션으로 구성된다.&lt;/p>
&lt;ul>
&lt;li>TC/C의 실행 주체는 애플리케이션이며, 애플리케이션은 이런 독립적 로컬 트랜잭션이 만드는 중간 결과를 볼 수 있다.&lt;/li>
&lt;li>데이터베이스 트랜잭션이나 2PC 같은 분산 트랜잭션의 경우 실행 주체는 데이터베이스이며 애플리케이션은 중간 실행 결과를 알 수 없다.&lt;/li>
&lt;/ul>
&lt;p>분산 트랜잭션 실행 도중에는 &lt;strong>항상 데이터의 불일치&lt;/strong>가 발생한다.&lt;/p>
&lt;p>데이터베이스와 같은 하위 시스템에서 불일치를 수정하는 경우에는 그 사실을 알 필요는 없지만, TC/C 같은 메커니즘을 사용하는 경우에는 직접 처리해야한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>유효한 연산 순서&lt;/strong>&lt;/p>
&lt;p>시도 단계에서 할 수 있는 일은 세 가지다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>선택지&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>선택 1&lt;/td>
&lt;td>-$1&lt;/td>
&lt;td>NOP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>선택 2&lt;/td>
&lt;td>NOP&lt;/td>
&lt;td>+$1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>선택 3&lt;/td>
&lt;td>-$1&lt;/td>
&lt;td>+$1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>두 번째 선택지의 경우, 계정 C의 연산은 성공하였으나 계정 A에서 실패한 경우(NOP) 지갑 서비스는 취소 단계를 실행해야 한다.&lt;/p>
&lt;ul>
&lt;li>취소 단계 실행 전 누군가 C 게정에서 1달러를 이체하였다면, C에서 1달러를 차감하려 할 때 남은 잔액이 없기때문에 분산 트랜잭션의 트랜잭션 보증을 위반하게된다.&lt;/li>
&lt;/ul>
&lt;p>세 번째 선택지의 경우, 1달러를 A에서 차감하고 동시에 C에 추가하면 많은 문제가 발생할 수 있다.&lt;/p>
&lt;ul>
&lt;li>C 계좌에서 1달러를 추가하였으나 A에서 1달러를 차감하는 연산을 실패한다면 유효하지 않다.&lt;/li>
&lt;/ul>
&lt;p>따라서 선택지 1만 올바른 방법이다.&lt;/p>
&lt;h4 id="잘못된-순서로-실행된-경우">잘못된 순서로 실행된 경우&lt;/h4>
&lt;p>TC/C에는 실행 순서가 어긋날 수 있다는 문제가 있다.&lt;/p>
&lt;p>시도 단계에서 A에 대한 작업이 실패하여 지갑 서비스에 실패를 반환한 다음 취소 단계로 진입하여 A와 C 모두에 취소 명령을 전송하는 과정에 계정 C를 관리하는 데이터베이스의 네트워크 문제로 시도 명령 전 취소 명령부터 받게 되었다고 가정한다.&lt;/p>
&lt;ul>
&lt;li>그 시점에서 취소할 것이 없는 상태&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_9.png"
width="1690"
height="720"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_9_hubc311339aed0d3059e9d61a5ed30dd39_75845_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_9_hubc311339aed0d3059e9d61a5ed30dd39_75845_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="잘못된 순서로 명령이 실행되는 시나리오"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="563px"
>&lt;/p>
&lt;p>순서가 바뀌어 도착하는 명령도 처리할 수 있도록 하려면 기존 로직을 다음과 같이 수정하면 된다.&lt;/p>
&lt;ul>
&lt;li>취소 명령이 먼저 도착하면 데이터베이스에 아직 상응하는 시도 명령을 못 보았음을 나타내는 플래그를 참으로 설정하여 저장해둔다.&lt;/li>
&lt;li>시도 명령이 도착하면 항상 먼저 도착한 취소 명령이 있었는지 확인한다.
&lt;ul>
&lt;li>있다면 바로 실패를 반환한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>단계별 상태 테이블 절에서 테이블에 순서가 어긋난 경우를 처리하기 위한 플래그를 마련했던 것은 이를 위해서이다.&lt;/p>
&lt;h3 id="분산-트랜잭션-사가">분산 트랜잭션: 사가&lt;/h3>
&lt;h4 id="선형적-명령-수행">선형적 명령 수행&lt;/h4>
&lt;p>사가는 유명한 분산 트랜잭션 솔루션 가운데 하나로 MSA 에서는 사실상 표준이다.&lt;/p>
&lt;ul>
&lt;li>모든 연산은 순서대로 정렬된다.
&lt;ul>
&lt;li>각 연산은 자기 데이터베이스에 독립적인 트랜잭션으로 실행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>연산은 첫 번째부터 마지막 순서대로 실행된다.
&lt;ul>
&lt;li>한 연산이 완료되면 다음 연산이 개시된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>연산이 실패하면 전체 프로세스는 실패한 연산부터 맨 처음 연산까지 역순으로 보상 트랜잭션을 통해 롤백된다.
&lt;ul>
&lt;li>n개의 연산을 실행하는 분산 트랜잭션은 보상 트랜잭션을 위한 n개의 연산까지 총 2n개의 연산을 준비해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_11.png"
width="1370"
height="858"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_11_hu7c215391fe3e027ba38ddce1f1c34f27_35915_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_11_hu7c215391fe3e027ba38ddce1f1c34f27_35915_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="사가의 작업 흐름"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>오류가 발생하면 이체는 롤백되고 클라이언트는 오류 메시지를 받는다.&lt;/p>
&lt;p>&lt;strong>유효한 연산 순서&lt;/strong>에서 언급했듯 입금 전 인출부터 해야하는데, &lt;strong>연산 실행 순서 조율&lt;/strong>은 2가지 방법을 활용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>분산 조율(Choreography, 안무)
&lt;ul>
&lt;li>사가 분산 트랜잭션에 관련된 모든 서비스가 다른 서비스의 이벤트를 구독하여 작업을 수행하는 방식&lt;/li>
&lt;li>완전히 탈 중앙화된 조율 방식&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>중앙 집중형 조율(Orchestration)
&lt;ul>
&lt;li>하나의 조정자(coordinator)가 모든 서비스가 올바른 순서로 작업을 실행하도록 조율&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>어떤 방식을 활용할지는 사업상의 필요와 목표에 따라 정한다.&lt;/p>
&lt;p>분산 조율 방식은 서비스가 서로 비동기식으로 통신하므로 모든 서버스는 다른 서비스가 발생시킨 이벤트 결과로 어떤 작업을 수행할지 정하기 위해 내부적으로 상태 기계를 유지해야한다.&lt;/p>
&lt;ul>
&lt;li>서비스가 많으면 관리가 어려워질 수 있다.&lt;/li>
&lt;/ul>
&lt;p>일반적으로 &lt;strong>복잡한 상황을 잘 처리하는 중앙 집중형 조율 방식&lt;/strong>이 선호된다.&lt;/p>
&lt;h3 id="tcc-vs-사가">TC/C vs 사가&lt;/h3>
&lt;p>모두 애플리케이션 수준 분산 트랜잭션이지만 차이점도 존재한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>TC/C&lt;/th>
&lt;th>사가&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>보상 트랜잭션 실행&lt;/td>
&lt;td>취소 단계에서&lt;/td>
&lt;td>롤백 단계에서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>중앙 조정&lt;/td>
&lt;td>예&lt;/td>
&lt;td>예(중앙 집중형 조율 모드)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>작업 실행 순서&lt;/td>
&lt;td>임의&lt;/td>
&lt;td>선형&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>병렬 실행 가능성&lt;/td>
&lt;td>예&lt;/td>
&lt;td>아니오(선형적 실행)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>일시적으로 일관되지 않은 상태 허용&lt;/td>
&lt;td>예&lt;/td>
&lt;td>예&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 계층: 애플리케이션 또는 데이터베이스&lt;/td>
&lt;td>애플리케이션&lt;/td>
&lt;td>애플리케이션&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>실무에서는 지연 시간(latency) 요구사항에 따라 둘 가운데 하나를 선택하면 된다.&lt;/p>
&lt;ul>
&lt;li>지연 시간 요구사항이 없거나 앞서 살펴본 송금 사례처럼 서비스 수가 매우 적다면 아무거나 쓴다.
&lt;ul>
&lt;li>MSA에서 흔히 하는데로 하고싶다면 사가를 선택&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지연 시간에 민감하고 많은 서비스/운영이 관계된 시스템이라면 TC/C가 더 낫다.&lt;/li>
&lt;/ul>
&lt;h3 id="이벤트-소싱">이벤트 소싱&lt;/h3>
&lt;p>분산 트랜잭션 방안도 제대로 작동하지 않는 경우가 있을 수 있다.&lt;/p>
&lt;ul>
&lt;li>애플리케이션 수준에서 잘못 된 작업을 입력(입력된 금액 자체가 잘못됨)&lt;/li>
&lt;/ul>
&lt;p>문제의 근본 원인을 역추적하고 모든 계정에서 발생하는 연산을 감사할 방법이 있으면 좋다.&lt;/p>
&lt;p>전자 지갑 서비스 제공 업체도 외부 감사를 받을 수 있다.&lt;/p>
&lt;ul>
&lt;li>특정 시점의 계정 잔액은?&lt;/li>
&lt;li>과거 및 현재 계정 잔액이 정확한지?&lt;/li>
&lt;li>코드 변경 후에도 시스템 로직이 올바른지 검증 방법은?&lt;/li>
&lt;/ul>
&lt;p>이러한 질문에 체계적으로 답할 수 있는 설계 철학 중 하나는 &lt;strong>도메인 주도 설계&lt;/strong>(Domain-Driven Design, DDD)에서 개발된 기법인 이벤트 소싱이다.&lt;/p>
&lt;h4 id="정의">정의&lt;/h4>
&lt;p>이벤트 소싱에는 네가지 중요한 용어가 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>명령&lt;/strong>&lt;/p>
&lt;p>명령은 외부에서 전달된, 의도가 명확한 요청이다.&lt;/p>
&lt;ul>
&lt;li>ex) A에서 C로 1달러 이체&lt;/li>
&lt;/ul>
&lt;p>이벤트 소싱에서 순서는 아주 중요하므로 명령은 일반적으로 FIFO 큐에 저장된다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>이벤트&lt;/strong>&lt;/p>
&lt;p>명령은 의도가 명확하지만 사실(fact)는 아니기 때문에 유효하지 않을 수도 있다.&lt;/p>
&lt;p>유효하지 않은 명령은 실행할 수 없다.&lt;/p>
&lt;ul>
&lt;li>ex) 이체 후 잔액이 음수가 된다면 이체는 실패한다.&lt;/li>
&lt;/ul>
&lt;p>작업 이행 전에는 반드시 명령의 유효성을 검사해야 한다. 그리고 검사를 통과한 명령은 반드시 이행(fulfill)되어야 한다.&lt;/p>
&lt;p>이렇게 이행된 결과를 이벤트라고 부른다.&lt;/p>
&lt;ul>
&lt;li>이벤트는 검증된 사실로 실행이 끝난 상태이다.
&lt;ul>
&lt;li>이벤트에 대해 이야기 할 때는 과거 시제를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>명령에는 무작위성(randomness)이나 I/O가 포함될 수 있지만 이벤트는 결정론적(deterministic)이다.
&lt;ul>
&lt;li>이벤트는 과거에 실제로 있었던 일이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이벤트 생성 프로세스에는 두 가지 중요한 특성이 있다.&lt;/p>
&lt;ul>
&lt;li>하나의 명령으로 여러 이벤트가 만들어질 수 있다.(0 이상)&lt;/li>
&lt;li>이벤트 생성 과정에는 무작위성이 개입될 수 있어 같은 명령에 항상 동일한 이벤트들이 만들어진다는 보장이 없다.
&lt;ul>
&lt;li>이벤트 생성 과정에는 외부 I/O 또는 난수가 개입될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이벤트 순서는 명령 순서를 따라야하므로 이벤트도 FIFO 큐에 저장한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>상태&lt;/strong>&lt;/p>
&lt;p>상태는 이벤트가 적용될 때 변경되는 내용이다.&lt;/p>
&lt;p>지갑 시스템에서 상태는 모든 클라이언트 계정의 잔액으로, 맵 자료 구조로 표현할 수 있다.&lt;/p>
&lt;ul>
&lt;li>키는 계정 이름 또는 ID&lt;/li>
&lt;li>값은 계정 잔액&lt;/li>
&lt;/ul>
&lt;p>관계형 데이터베이스도 키-값 저장소로 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>키는 PK, 값은 레코드&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>상태 기계&lt;/strong>&lt;/p>
&lt;p>상태 기계는 이벤트 소싱 프로세스를 구동한다.&lt;/p>
&lt;ul>
&lt;li>명령의 유효성을 검사하고 이벤트를 생성&lt;/li>
&lt;li>이벤트를 적용하여 상태를 갱신&lt;/li>
&lt;/ul>
&lt;p>이벤트 소싱을 위한 상태 기계는 결정론적으로 동작해야 하므로 무작위성을 내포할 수 없다.&lt;/p>
&lt;ul>
&lt;li>I/O를 통해 외부에서 무작위적 데이터를 읽거나 난수를 사용하는 것은 허용되지 않는다.&lt;/li>
&lt;li>이벤트를 상태에 반영하는 것 또한 항상 같은 결과를 보장해야한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_12.png"
width="1350"
height="586"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_12_hu75775d77e3a277a469275ba0db2d7fcb_32101_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_12_hu75775d77e3a277a469275ba0db2d7fcb_32101_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="정적 관점에서 표현한 이벤트 소싱 아키텍처"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;p>명령을 이벤트로 변환하고 이벤트르 적용하는 두 가지 기능을 지원해야 하므로 명령 유효성 검사를 위한 상태 기계 하나와 이벤트 적용을 위한 상태 기계 하나를 둔다.&lt;/p>
&lt;p>여기에 시간을 하나의 차원으로 추가하면 동적 관점으로도 표현할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_13.png"
width="1770"
height="472"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_13_hu9c945e56a87989f709ad84e26a9c6b8b_39233_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_13_hu9c945e56a87989f709ad84e26a9c6b8b_39233_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="동적 관점에서 표현한 이벤트 소싱 아키텍처"
class="gallery-image"
data-flex-grow="375"
data-flex-basis="900px"
>&lt;/p>
&lt;p>명령을 수신하고 처리하는 과정을 계속 반복하는 시스템이다.&lt;/p>
&lt;h4 id="지갑-서비스-예시">지갑 서비스 예시&lt;/h4>
&lt;p>지갑 서비스의 경우 명령은 &lt;strong>이체 요청&lt;/strong>일 것이다.&lt;/p>
&lt;p>명령은 FIFO 큐에 기록하며, 큐로는 카프카를 널리 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_14.png"
width="1418"
height="364"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_14_huc4e4e079d616645a799fbdc27878d67d_22905_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_14_huc4e4e079d616645a799fbdc27878d67d_22905_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="명령 큐"
class="gallery-image"
data-flex-grow="389"
data-flex-basis="934px"
>&lt;/p>
&lt;ul>
&lt;li>상태, 즉 계정 잔액은 관계형 데이터베이스에 있다고 가정&lt;/li>
&lt;/ul>
&lt;p>상태 기계는 명령 큐에 들어간 순서대로 확인한다.&lt;/p>
&lt;p>명령 하나를 읽을 때마다 계정에 충분한 잔액이 있는지 확인하며, 충분하다면 상태 기계는 각 계정에 대한 이벤트를 만든다.&lt;/p>
&lt;ul>
&lt;li>명령이 &lt;code>A -&amp;gt; $1 -&amp;gt; C&lt;/code>라면 &lt;code>A: -$1&lt;/code>, &lt;code>C: +$1&lt;/code> 두 이벤트를 만든다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_15.png"
width="1418"
height="364"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_15_huc4e4e079d616645a799fbdc27878d67d_22905_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_15_huc4e4e079d616645a799fbdc27878d67d_22905_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="상태 기계 동작 원리"
class="gallery-image"
data-flex-grow="389"
data-flex-basis="934px"
>&lt;/p>
&lt;ol>
&lt;li>명령 대기열에서 명령을 읽는다.&lt;/li>
&lt;li>데이터베이스에서 잔액 상태를 읽는다.&lt;/li>
&lt;li>명령의 유효성을 검사하고 유효하면 계정별로 이벤트를 생성한다.&lt;/li>
&lt;li>다음 이벤트를 읽는다.&lt;/li>
&lt;li>데이터베이스의 잔액을 갱신하여 이벤트 적용을 마친다.&lt;/li>
&lt;/ol>
&lt;h4 id="재현성">재현성&lt;/h4>
&lt;p>이벤트 소싱이 다른 아키텍처에 비해 갖는 가장 중요한 장점은 재현성(reproducibility)이다.&lt;/p>
&lt;p>분산 트랜잭션 방안의 경우 지갑 서비스는 갱신한 계정 잔액(상태)을 데이터베이스에 저장하며, 특정 시점의 잔액이 얼마인지만 보여준다.&lt;/p>
&lt;ul>
&lt;li>계정 잔액이 변경된 이유는 알기 어렵다.&lt;/li>
&lt;li>한번 업데이트가 이루어지고 나면 과거 잔액이 얼마였는지는 알 수 없다.&lt;/li>
&lt;/ul>
&lt;p>하지만 이벤트를 처음부터 다시 재생하면 과거 잔액 상태는 언제든 재구성할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_16.png"
width="1404"
height="1044"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_16_hu529a7607382b42a04dfe6f752d90cee3_74655_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_16_hu529a7607382b42a04dfe6f752d90cee3_74655_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="상태 재현"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>이벤트 리스트는 불변이고(과거의 발생한 이벤트 이력을 변경할 수 없다) 상태 기계 로직은 결정론적이므로 이벤트 이력을 재생하여 만들어낸 상태는 언제나 동일하다.&lt;/p>
&lt;p>재현성을 갖추면 감사관이 던지는 까다로운 질문에 쉽게 답할 수 있다.&lt;/p>
&lt;ul>
&lt;li>특정 시점의 계정 잔액을 알 수 있는가?
&lt;ul>
&lt;li>시작부터 계정 잔액을 알고싶은 시점까지 이벤트를 재생한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>과거 및 현재 계정 잔액이 정확한지 알 수 있는가?
&lt;ul>
&lt;li>이벤트 이력에서 계정 잔액을 다시 계산해 보면 잔액이 정확한지 확인할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>코드 변경 후에도 시스템 로직이 올바른지 증명할 수 있는가?
&lt;ul>
&lt;li>새로운 코드에 동일한 이벤트 이력을 입력으로 주고 같은 결과가 나오는지 확인한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="명령-질의-책임-분리cqrs">명령-질의 책임 분리(CQRS)&lt;/h4>
&lt;p>지금까지 효과적인 계좌 이체가 가능한 지갑 서비스를 설계했다.&lt;/p>
&lt;p>하지만 클라이언트는 여전히 계정 잔액을 알 수 없으므로, 이벤트 소싱 프레임워크 외부의 클라이언트가 상태(잔액)을 알도록 할 방법이 필요하다.&lt;/p>
&lt;p>직관적인 해결책 하나는 상태 이력 데이터베이스의 읽기 전용 사본을 생성한 후 외부와 공유하는 것인데 이벤트 소싱은 이와는 조금 다른 해결책을 제시한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_17.png"
width="1750"
height="1454"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_17_hu15cc75bbcc1ad3d80f056e38d4cac374_130803_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_17_hu15cc75bbcc1ad3d80f056e38d4cac374_130803_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="CQRS 아키텍처"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;p>이벤트 소싱은 상태, 즉 계정 잔액을 공개하는 대신 모든 이벤트를 외부에 보낸다.&lt;/p>
&lt;p>따라서 이벤트를 수신하는 외부 주체가 직접 상태를 재구축할 수 있다.&lt;/p>
&lt;p>이런 설계 철학을 &lt;strong>명령-질의 책임 분리&lt;/strong>(Command-Query Responsibility Separation, CQRS)라고 부른다.&lt;/p>
&lt;p>CQRS에서는 상태 기록을 담당하는 상태 기계는 하나고, 읽기 전용 상태 기계는 여러 개 있을 수 있다.&lt;/p>
&lt;p>읽기 전용 상태 기계는 상태 뷰를 만들고, 이 뷰는 질의에 이용된다.&lt;/p>
&lt;p>읽기 전용 상태 기계는 이벤트 큐에서 다양한 상태 표현을 도출할 수 있다.&lt;/p>
&lt;ul>
&lt;li>클라이언트의 잔액 질의 요청을 처리하기 위해 별도 데이터베이스에 상태를 기록한다.&lt;/li>
&lt;li>이중 청구 등의 문제를 쉽게 조사할 수 있도록 하기 위해 특정 기간 동안의 상태를 복원할 수도 있다.&lt;/li>
&lt;/ul>
&lt;p>읽기 전용 상태 기계는 실제 상태에 어느 정도 뒤처질 수 있으나 결국에는 같아지므로 결과적 일관성 모델을 따른다고 할 수 있다.&lt;/p>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;p>높은 성능과 안정성 및 확장성을 달성하기 위한 기술에 대해 자세히 살펴본다.&lt;/p>
&lt;h3 id="고성능-이벤트-소싱">고성능 이벤트 소싱&lt;/h3>
&lt;p>카프카를 명령 및 이벤트 저장소로, 데이터베이스를 상태 저장소로 사용했는데 가능한 최적화 방안을 살펴본다.&lt;/p>
&lt;h4 id="파일-기반-명령-및-이벤트-목록">파일 기반 명령 및 이벤트 목록&lt;/h4>
&lt;p>&lt;strong>로컬 디스크에 저장하는 방안&lt;/strong>&lt;/p>
&lt;p>명령과 이벤트를 카프카 같은 원격 저장소가 아닌 로컬 디스크에 저장하는 방안을 생각해 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>네트워크를 통한 전송 시간을 피할 수 있다.&lt;/li>
&lt;li>이벤트 목록은 추가 연산만 가능한 자료 구조에 저장한다.&lt;/li>
&lt;/ul>
&lt;p>추가는 순차적 쓰기 연산으로 일반적으로 매우 빠르다.&lt;/p>
&lt;ul>
&lt;li>운영체제는 보통 순차적 읽기 및 쓰기 연산에 최적화 되어있어 HDD에서도 잘 작동한다.&lt;/li>
&lt;li>경우에 따라서는 무작위 메모리 접근보다 빠르게 실행될 수 있다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>최근 명령과 이벤트를 메모리에 캐시하는 방안&lt;/strong>&lt;/p>
&lt;p>명령과 이벤트는 지속성 저장소에 보관된 이후에 처리되므로, 메모리에 캐시해 놓으면 로컬 디스크에서 다시 로드하지 않아도 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_18.png"
width="1346"
height="1096"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_18_huf431578dc5a373e9fad161237382f0ce_42241_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_18_huf431578dc5a373e9fad161237382f0ce_42241_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="파일 기반의 명령 및 이벤트 저장소"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;p>mmap 기술은 앞서 언급한 최적화 구현에 유용하다.&lt;/p>
&lt;ul>
&lt;li>로컬 디스크에 쓰는 동시에 최근 데이터는 메모리에 자동으로 캐시할 수 있다.&lt;/li>
&lt;li>디스크 파일을 메모리 배열에 대응시킨다.&lt;/li>
&lt;/ul>
&lt;p>운영체제는 파일의 특정 부분을 메모리에 캐시하여 읽기 및 쓰기 연산을 높히므로, 추가만 가능한 파일에 이루어지는 연산의 경우 필요한 모든 데이터는 거의 항상 메모리에 있으므로 실행 속도를 높힐 수 있다.&lt;/p>
&lt;h4 id="파일-기반-상태">파일 기반 상태&lt;/h4>
&lt;p>이번 설계안에서는 상태, 즉 잔액 정보를 관계형 데이터베이스에 저장했는데, 프로덕션 환경에서는 일반적으로 네트워크를 통해서만 접근 가능한 독립형 서버에서 데이터베이스를 실행한다.&lt;/p>
&lt;p>그러나 명령 및 이벤트 저장소 최적화 방안과 마찬가지로, 상태 정보도 로컬 디스크에 저장할 수 있다.&lt;/p>
&lt;ul>
&lt;li>파일 기반 로컬 관계형 데이터베이스 SQLite를 사용한다.&lt;/li>
&lt;li>로컬 파일 기반 키-값 저장소 RocksDB를 사용한다.&lt;/li>
&lt;/ul>
&lt;p>본 설계안에서는 쓰기 작업에 최적화된 자료 구조인 LSM(Log-Structured Merge-tree)를 사용하는 RocksDB를 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_19.png"
width="1352"
height="1076"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_19_hud7385ca1b5ecf0e28d3f616ea8ad9a8c_54361_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_19_hud7385ca1b5ecf0e28d3f616ea8ad9a8c_54361_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="명령, 이벤트 및 상태 저장을 위한 파일 기반 아키텍처"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;h4 id="스냅숏">스냅숏&lt;/h4>
&lt;p>모든 것이 파일 기반일 때 재현 프로세스의 속도를 높힐 방법을 고민해보자.&lt;/p>
&lt;p>재현성 확보를 위해 사용한 방법은 상태 기계로 하여금 이벤트를 항상 처음부터 다시 읽도록 하는 것 이었는데, 그 대신 주기적으로 상태 기계를 멈추고 현재 상태를 파일에 저장한다면 시간을 절약할 수 있다. 이 파일을 스냅숏 이라고 한다.&lt;/p>
&lt;ul>
&lt;li>스냅숏은 과거 특정 시점의 상태로 변경 불가능하다.&lt;/li>
&lt;li>스냅숏을 저장하고나면 상태 기계는 더 이상 최초 이벤트에서 시작할 필요가 없어진다.
&lt;ul>
&lt;li>어느 시점에 만들어졌는지 확인 후 그 시점부터 이벤트 처리를 시작한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>지갑 서비스 같은 금융 애플리케이션은 00:00에 스냅숏을 찍는 일이 많다.&lt;/p>
&lt;ul>
&lt;li>그래야만 재무팀이 당일 발생한 모든 거래를 확인할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>스냅숏을 사용하면 읽기 전용 상태 기계는 해당 데이터가 포함된 스냅숏 하나만 로드하면 된다.&lt;/p>
&lt;p>일반적으로 스냅숏은 거대한 이진 파일이며, 일반적으로는 HDFS(Hadoop Distributed File System)과 같은 &lt;strong>객체 저장소&lt;/strong>에 저장한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_20.png"
width="1976"
height="952"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_20_hu60d89f48231c83556200ca53f86f867b_88111_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_20_hu60d89f48231c83556200ca53f86f867b_88111_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="스냅숏"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="498px"
>&lt;/p>
&lt;p>모든 것이 파일 기반일 때 시스템은 컴퓨터 하드웨어의 I/O 처리량을 그 한계까지 최대로 활용할 수 있다.&lt;/p>
&lt;h3 id="신뢰할-수-있는-이벤트-소싱">신뢰할 수 있는 이벤트 소싱&lt;/h3>
&lt;p>로컬 파일 기반의 솔루션 성능은 원격 카프카나 데이터베이스에 저장된 데이터를 액세스하는 시스템보다는 좋다고 할 수 있으나, 로컬 디스크에 데이터를 저장하는 서버는 더 이상 무상태 서버가 아니며, 단일 장애 지점이 될 수 있다.&lt;/p>
&lt;h4 id="신뢰성-분석">신뢰성 분석&lt;/h4>
&lt;p>개념적으로 서버 노드가 하는 일은 데이터와 연산이라는 두 가지 개념에 관계되어 있다.&lt;/p>
&lt;p>그러나 데이터 내구성이 보장되는 한, 계산 결과는 코드를 다른 노드에서 돌리면 복구할 수 있다.&lt;/p>
&lt;ul>
&lt;li>데이터 신뢰성이 훨씬 중요하다.&lt;/li>
&lt;li>데이터가 손실되면 계산 결과를 복원할 방법이 없기 때문&lt;/li>
&lt;/ul>
&lt;p>이러한 이유로 시스템 신뢰성 문제는 대부분 데이터 신뢰성 문제이다.&lt;/p>
&lt;ul>
&lt;li>파일 기반 명령
&lt;ul>
&lt;li>이벤트는 명령을 통해 만들어지니 명령의 신뢰성만 강력하게 보장하면 충분할 것 같지만 아니다.&lt;/li>
&lt;li>이벤트 생성은 결정론적 과정이 아니며, 난수나 외부 입축력 등의 무작위적 요소가 포함될 수 있다.&lt;/li>
&lt;li>명령의 신뢰성 만으로는 이벤트의 재현성을 보장할 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>파일 기반 이벤트
&lt;ul>
&lt;li>상태(잔액)에 변화를 가져오는 과저의 사실이다.&lt;/li>
&lt;li>이벤트는 불변이며 상태 재구성에 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>파일 기반 상태
&lt;ul>
&lt;li>이벤트 목록을 재생하면 언제든 다시 만들 수 있다.(이벤트 목록의 신뢰성을 보장하면 따라온다.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 스냅숏
&lt;ul>
&lt;li>이벤트 목록을 재생하면 언제든 다시 만들 수 있다.(이벤트 목록의 신뢰성을 보장하면 따라온다.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;strong>높은 신뢰성을 보장할 유일한 데이터는 이벤트 뿐&lt;/strong>이다.&lt;/p>
&lt;h4 id="합의">합의&lt;/h4>
&lt;p>높은 안정성을 제공하려면 이벤트 목록을 여러 노드에 복제해야 하며 다음을 보장해야한다.&lt;/p>
&lt;ul>
&lt;li>데이터 손실 없음&lt;/li>
&lt;li>로그 파일 내 데이터의 상대적 순서는 모든 노드에 동일&lt;/li>
&lt;/ul>
&lt;p>이러한 목표를 달성하는 데는 &lt;strong>합의 기반 복제&lt;/strong>(consensus-based replication) 방안이 적합하다.&lt;/p>
&lt;ul>
&lt;li>모든 노드가 동일한 이벤트 목록에 합의하도록 보장한다.&lt;/li>
&lt;/ul>
&lt;p>래프트 알고리즘을 사용하면 노드의 절반 이상이 온라인 상태일 때 그 모두에 보관된 추가 전용 리스트는 같은 데이터를 가진다.&lt;/p>
&lt;p>래프트 알고리즘에서 노드는 세 가지 역할을 가질 수 있다.&lt;/p>
&lt;ul>
&lt;li>리더&lt;/li>
&lt;li>후보&lt;/li>
&lt;li>팔로어&lt;/li>
&lt;/ul>
&lt;p>최대 하나의 노드만 클러스터의 리더가 되고 나머지 노드는 팔로어가 된다.&lt;/p>
&lt;p>리더는 외부 명령을 수신하고 클러스터 노드 간에 데이터를 안정적으로 복제하는 역할을 담당한다.&lt;/p>
&lt;h4 id="고신뢰성-솔루션">고신뢰성 솔루션&lt;/h4>
&lt;p>복제 매커니즘을 활용하면 파일 기반 이벤트 소싱 아키텍처에서 단일 장애 지점 문제를 없앨 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_21.png"
width="1588"
height="982"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_21_hu3c5751a41f69567bce8871525f956c20_71049_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_21_hu3c5751a41f69567bce8871525f956c20_71049_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="래프트 노드 그룹"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>리더는 외부 사용자로 부터 들어오는 명령 요청을 받아 이벤트로 변환하고 로컬 이벤트 목록에 추가한다.&lt;/p>
&lt;ul>
&lt;li>래프트 알고리즘은 새로운 이벤트를 모든 팔로워에 복제한다.&lt;/li>
&lt;/ul>
&lt;p>팔로어를 포함한 모든 노드가 이벤트 목록을 처리하고 상태를 업데이트한다.&lt;/p>
&lt;p>래프트 알고리즘은 리더와 팔로어가 동일한 이벤트 목록을 갖도록 하며, 이벤트 소싱은 동일한 이벤트 목록에서 항상 동일한 상태가 만드러지도록 한다.&lt;/p>
&lt;hr>
&lt;p>리더에 장애가 발생하면 래프트 알고리즘은 나머지 정상 노드 중에서 새 리더를 선출한다.&lt;/p>
&lt;p>유의할 것은 리더 장애가 명령 목록이 이벤트로 변환되기 전에 발생 하는 경우이다.&lt;/p>
&lt;ul>
&lt;li>클라이언트는 시간 초과 또는 오류 응답을 받고 새로 선출된 리더에게 같은 명령을 다시 보내야한다.&lt;/li>
&lt;/ul>
&lt;p>팔로어에 장애가 생기면 래프트는 죽은 노드가 다시 시작되거나 새로운 노드로 대체될 때 까지 기한없이 재시도하여 장애를 처리한다.&lt;/p>
&lt;h3 id="분산-이벤트-소싱">분산 이벤트 소싱&lt;/h3>
&lt;p>100만 TPS를 처리하려면 서버 한 대로는 충분하지 않다.&lt;/p>
&lt;p>지금까지 설계한 아키텍처는 신뢰성 문제는 해결하지만 다른 문제가 있다.&lt;/p>
&lt;ul>
&lt;li>전자 지갑 업데이트 결과는 즉시 받고 싶다.
&lt;ul>
&lt;li>CQRS 시스템에서는 요청/응답 흐름이 느릴 수 있다.&lt;/li>
&lt;li>클라이언트가 지갑의 업데이트 시점을 정확히 알 수 없어 주기적 폴링에 의존해야 할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단일 래프트 그룹의 용량은 제한되어 있다.
&lt;ul>
&lt;li>일정 규모 이상에서는 데이터를 샤딩하고 분산 트랜잭션을 구현해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="풀-vs-푸시">풀 vs 푸시&lt;/h4>
&lt;p>풀 모델에서는 외부 사용자가 읽기 전용 상태 기계에서 주기적으로 실행 상태를 읽는다.&lt;/p>
&lt;p>모델은 실시간이 아니므로 읽는 주기를 너무 짧게 설정하면 지갑 서비스에 과부하가 걸릴 수도 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_22.png"
width="1734"
height="1226"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_22_hu0b1fb98fa497bc80e07967ba8b35831a_91564_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_22_hu0b1fb98fa497bc80e07967ba8b35831a_91564_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="풀 모델"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>외부 사용자와 이벤트 소싱 사이에 역방향 프락시를 추가하면 개선될 수 있다.&lt;/p>
&lt;p>외부 사용자는 역방향 프락시에 명령을 보내고, 역방향 프락시는 명령을 이벤트 소싱 노드로 전달하는 한편 주기적으로 실행 상태를 질의한다.&lt;/p>
&lt;ul>
&lt;li>여전히 통신이 실시간으로 이루어지지는 앖지만 클라이언트의 로직은 단순해진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_23.png"
width="1800"
height="1106"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_23_hubdb7fad968784b5f01bb1aa614072f63_92888_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_23_hubdb7fad968784b5f01bb1aa614072f63_92888_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="역방향 프락시가 있는 풀 모델"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>역방향 프락시르 두고 나면 읽기 전용 상태 기계를 수정하여 응답 속도를 높힐 수 있다.&lt;/p>
&lt;p>일기 전용 상태 기계로 하여금 이벤트를 수신하자마자 &lt;strong>실행 상태를 역방향 프락시에 푸시&lt;/strong>하도록 하면, 사용자에게 실시간으로 응답이 이루어지는 느낌을 줄 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_24.png"
width="1762"
height="1098"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_24_hub9e1ac66749a75fd0bc98ec293c14240_97776_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_24_hub9e1ac66749a75fd0bc98ec293c14240_97776_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="푸시 모델"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;h4 id="분산-트랜잭션-1">분산 트랜잭션&lt;/h4>
&lt;p>모든 이벤트 소싱 노드 그룹이 동기적 실행 모델을 채택하면 TC/C나 사가 같은 분산 트랜잭션 솔루션을 재사용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>키의 해시 값을 2로 나누어 데이터가 위치할 파티션을 정한다고 가정&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_25.png"
width="1428"
height="1564"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_25_hu8559c9e43bde10a3e1479c822f75107b_153809_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_25_hu8559c9e43bde10a3e1479c822f75107b_153809_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="최종 설계"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="219px"
>&lt;/p>
&lt;p>송금에는 2개의 분산 연산(&lt;code>A: -$1&lt;/code>, &lt;code>C: +$1&lt;/code>)이 필요하다.&lt;/p>
&lt;ol>
&lt;li>A가 사가 조정자에게 분산 트랜잭션을 보낸다.(&lt;code>A: -$1&lt;/code>, &lt;code>C: +$1&lt;/code>)&lt;/li>
&lt;li>사가 조정자는 단계별 상태 테이블에 레코드를 생성하여 트랜잭션 상태를 추적한다.&lt;/li>
&lt;li>사가 조정자는 작업 순서를 검토한 후 &lt;code>A: -$1&lt;/code>를 먼저 처리하기로 결정하고 &lt;code>A: -$1&lt;/code> 명령을 계정 정보 A가 있는 파티션 1로 보낸다.&lt;/li>
&lt;li>파티션 1의 래프트 리더는 &lt;code>A: -$1&lt;/code> 명령을 수신하고 명령 목록에 저장한 후, 명령의 유효성을 검사하고 이벤트로 변환한다.
&lt;ul>
&lt;li>래프트 합의 알고리즘을 통해 동기화가 완료되면 이벤트가 실행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이벤트가 동기화도면 파이션 1의 이벤트 소싱 프레임워크가 CQRS를 사용하여 데이터를 읽기 경로로 동기화한다. 읽기 경로는 상태 및 실행 상태를 재구성한다.&lt;/li>
&lt;li>파티션 1의 읽기 경로는 이벤트 소싱 프레임워크를 호출한 사가 조정자에게 상태를 푸시한다.&lt;/li>
&lt;li>사가 조정자는 파티션 1에서 성공 상태를 수신한다.&lt;/li>
&lt;li>사가 조정자는 단계별 상태 테이블에 파티션 1의 작업이 성공했음을 나타내는 레코드를 생성한다.&lt;/li>
&lt;li>첫 번째 작업이 성공했으므로 사가 조정자는 두 번째 작업인 &lt;code>C: +$1&lt;/code>를 실행한다. 조정자는 계정 C의 정보가 포함된 파티션 2에 명령을 보낸다.&lt;/li>
&lt;li>파티션 2의 래프트 리더가 &lt;code>C: +$1&lt;/code> 명령을 수신하여 명령 목록에 저장한다. 유효한 명령이면 이벤트로 변환되고 데이터를 동기화한다. 동기화가 끝나면 해당 이벤트가 실행된다.&lt;/li>
&lt;li>이벤트가 동기화되면 파티션 2의 이벤트 소싱 프레임워크는 CQRS를 사용하여 데이터 읽기 경로로 동기화한다. 읽기 경로는 상태 및 실행 상태를 재구성ㅎ나다.&lt;/li>
&lt;li>파티션 2읽기 경로는 이벤트 소싱 프레임위크를 호출한 사가 조장자에 상태를 푸시한다.&lt;/li>
&lt;li>사가 조정자는 파티션 2로부터 성공 상태를 받는다.&lt;/li>
&lt;li>사가 조정자는 단계별 상태 테이블에 파티션 2의 작업이 성공했음을 나타내는 레코드를 생성한다.&lt;/li>
&lt;li>모든 작업이 성공하고 분산 트랜잭션이 완료되며 사가 조정자는 호출자에게 결과를 응답한다.&lt;/li>
&lt;/ol>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>이번 장에서는 초당 100만 건 이상 결제 명령을 처리할 수 있는 지갑 서비스를 설계해 보았다.&lt;/p>
&lt;ol>
&lt;li>레디스 같은 인베모리 키-값 저장소를 사용하는 솔루션
&lt;ul>
&lt;li>데이터가 내구성이 없는 문제점&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>인메모리 캐시를 트랜잭션 데이터베이스로 바꿈
&lt;ul>
&lt;li>여러 노드에 걸친 분산 트랜잭션을 지원하기 위한 2PC, TC/C, 사가와 같은 트랜잭션 프로토콜&lt;/li>
&lt;li>데이터 감사가 어렵다는 문제점&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이벤트 소싱 방안
&lt;ol>
&lt;li>외부 데이터베이스와 큐를 사용
&lt;ul>
&lt;li>성능이 떨어짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>명령 이벤트, 상태 데이터를 로컬 파일 시스템에 저장하도록 개선
&lt;ul>
&lt;li>데이터를 한 곳에 두면 SPOF가 되는 문제가 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>래프트 합의 알고리즘을 사용하여 이벤트 목록을 여러 노드에 복제&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>이벤트 소싱에 CQRS 개념 도입&lt;/li>
&lt;li>외부 사용자에게 비동기 이벤트 소싱 프레임워크를 동기식처럼 제공하기 위한 역방향 프락시 추가&lt;/li>
&lt;li>TC/C, 사가 프로토콜을 사용하여 어러 노드에 명령 실행을 조율하는 방법&lt;/li>
&lt;/ol></description></item><item><title>10. 실시간 게임 순위표</title><link>https://codemario318.github.io/post/system-design-interview-2/10/</link><pubDate>Sun, 17 Nov 2024 14:41:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview-2/10/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/cover.png" alt="Featured image of post 10. 실시간 게임 순위표" />&lt;p>이번 장에서는 &lt;strong>온라인 게임 리더보드&lt;/strong>, 즉 순위표를 설계해본다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>순위표?&lt;/strong>&lt;br>
누가 선두를 달리고 있는지 보여주기 위해 게임 등에서 흔히 사용하는 장치로, 가장 많은 포인트를 획득한 사람이 순위표의 맨 위에 자리한다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img.png"
width="1390"
height="560"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_hu968a6c0a83c3daa84d4ec97bc604aae0_41694_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_hu968a6c0a83c3daa84d4ec97bc604aae0_41694_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="순위표"
class="gallery-image"
data-flex-grow="248"
data-flex-basis="595px"
>&lt;/p>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;ul>
&lt;li>게임에 승리하면 포인트 획득&lt;/li>
&lt;li>모든 플레이어가 순위표에 포함&lt;/li>
&lt;li>새로운 토너먼트를 시작할 때 마다 새로운 순위표 생성&lt;/li>
&lt;li>상위 10명의 사용자와 특정 사용자의 순위를 순위표에 표시
&lt;ul>
&lt;li>특정 사용자의 순위를 보여줄 때 위, 아래로 4순위 차이 사용자 포함(추가 요구사항)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DAU 500만명, MAU 2,500만명&lt;/li>
&lt;li>각 선수는 하루에 평균 10 경기 진행&lt;/li>
&lt;li>실시간 또는 실시간에 가깝게 결과를 표시&lt;/li>
&lt;li>누적된 결과 이력을 보여주는건 바람직하지 않음&lt;/li>
&lt;/ul>
&lt;h3 id="기능-요구사항">기능 요구사항&lt;/h3>
&lt;ul>
&lt;li>순위표에 상위 10명의 플레이어를 표시&lt;/li>
&lt;li>특정 사용자의 순위를 표시&lt;/li>
&lt;li>어떤 사용자보다 4순위 위, 아래에 있는 사용자를 표시(추가 요구 사항)&lt;/li>
&lt;/ul>
&lt;h3 id="비기능-요구사항">비기능 요구사항&lt;/h3>
&lt;ul>
&lt;li>점수 업데이트는 실시간으로 순위표에 반영&lt;/li>
&lt;li>일반적인 확장성, 가용성 및 안정성 요구사항&lt;/li>
&lt;/ul>
&lt;h3 id="개략적인-규모-추정">개략적인 규모 추정&lt;/h3>
&lt;p>설계를 통해 해결해야 할 문제의 잠재적 규모와 과제를 결정하기 위한 몇가지 계산 결과를 살펴본다.&lt;/p>
&lt;p>게임은 대부분 사용량이 균등한 경우가 없으며, 북미 기준 저녁 시간이 피크 시간대일 가능성이 높다.&lt;/p>
&lt;p>이를 고려하여 최대 부하는 평균의 다섯배 정도로 가정한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>사용자 수&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>500만 / 10^5 초 =~ 50 * 5 = 초당 250 사용자&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>점수 획득 QPS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>한 사용자가 하루 평균 10개의 게임을 플레이한다고 가정&lt;/li>
&lt;li>점수를 획득하는 이벤트가 발생하는 평균 QPS는 &lt;code>50 * 10 =~ 500&lt;/code>&lt;/li>
&lt;li>최대 QPS는 평균의 5배로 가정하였으므로 &lt;code>500 * 5 = 2,500&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>상위 10명 순위표 가져오기&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>각 사용자가 하루 한 번 게임을 실행&lt;/li>
&lt;li>상위 10명 순위표는 사용자가 처음 게임을 열 때만 표시한다고 가정&lt;/li>
&lt;li>&lt;code>QPS =~ 50&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;h3 id="api-설계">API 설계&lt;/h3>
&lt;p>개략적으로 3가지 API가 필요하다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>&lt;code>POST /v1/scores&lt;/code>&lt;/strong>&lt;/p>
&lt;p>사용자가 게임에서 승리하면 순위표에서 사용자의 순위를 갱신한다.&lt;/p>
&lt;p>API는 게임 서버에서만 호출할 수 있는 내부 API로 클라이언트는 해당 API를 통하지 않고 순위표 점수를 직접 업데이트 할 수 없다.&lt;/p>
&lt;ul>
&lt;li>요청&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>필드&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>user_id&lt;/code>&lt;/td>
&lt;td>게임에서 승리한 사용자&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>points&lt;/code>&lt;/td>
&lt;td>사용자가 게임에서 승리하여 획득한 포인트 수&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>응답&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>이름&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>200 OK&lt;/code>&lt;/td>
&lt;td>사용자 점수를 성공적으로 갱신&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>400 Bad Request&lt;/code>&lt;/td>
&lt;td>잘못된 인자가 전달되어 사용자 점수를 갱신할 수 없음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>&lt;strong>&lt;code>GET /v1/scores&lt;/code>&lt;/strong>&lt;/p>
&lt;p>순위표에서 상위 10명의 플레이어를 조회&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;user_id1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;user_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;rank&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;score&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">12543&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;user_id2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;user_name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;rank&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;score&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">11500&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;total&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>`GET /v1/scores/{:user_id}&lt;/strong>&lt;/p>
&lt;p>특정 사용자의 순위를 가져옴&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>필드&lt;/th>
&lt;th>설명&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>user_id&lt;/code>&lt;/td>
&lt;td>순위 정보를 가져올 사용자 ID&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;user_info&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;user_id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;user5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;score&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;rank&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="개략적-설계안">개략적 설계안&lt;/h3>
&lt;p>두 가지 서비스가 포함된다.&lt;/p>
&lt;ul>
&lt;li>게임 서비스
&lt;ul>
&lt;li>사용자가 게임을 플레이할 수 있도록 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>순위표 서비스
&lt;ul>
&lt;li>순위표를 생성하고 표시하는 역할 담당&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_1.png"
width="1102"
height="1066"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_1_hu51c0eaf019b910cb8404ff183ad3d839_54249_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_1_hu51c0eaf019b910cb8404ff183ad3d839_54249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="개략적 설계"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="248px"
>&lt;/p>
&lt;ol>
&lt;li>사용자가 게임에서 승리하면 클라이언트는 게임 서비스에 요청을 보낸다.&lt;/li>
&lt;li>게임 서비스는 해당 승리가 정당하고 유효한 것인지 확인한 다음 순위표 서비스에 점수 갱신 요청을 보낸다.&lt;/li>
&lt;li>순위표 서비스는 순위표 저장소에 기록된 해당 사용자의 점수를 갱신한다.&lt;/li>
&lt;li>해당 사용자의 클라이언트는 순위표 서비스에 직접 요청하여 다음과 같은 데이터를 가져온다.
&lt;ul>
&lt;li>상위 10명 순위표&lt;/li>
&lt;li>해당 사용자 순위&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>다른 대안들도 있지만 채택하지 않은 이유를 살펴보면 도움이 될 것이다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>클라이언트가 순위표 서비스와 직접 통신해야 하나?&lt;/strong>&lt;/p>
&lt;p>클라이언트가 점수를 정하는 방식(클라이언트가 직접 순위표 서비스에 요청하는 방식)은, 사용자가 프락시를 설치하고 점수를 마음대로 바꾸는 중간자 공격을 할 수 있기 때문에 보안상 안전하지 않다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_2.png"
width="1366"
height="1108"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_2_hu9c2130220f7a6e4a19f502b9d6fb58c8_75990_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_2_hu9c2130220f7a6e4a19f502b9d6fb58c8_75990_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="순위표 점수는 누가 설정하는가"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;p>서버가 게임 전반을 통솔하는 경우 클라이언트가 점수를 설정하기 위해서 게임 서버를 명시적으로 호출할 필요가 없을수도 있다.&lt;/p>
&lt;ul>
&lt;li>게임 서버가 모든 게임 로직을 처리하고 게임이 언제 끝나는지 알기 때문에 클라이언트의 개입 없이도 점수를 정할 수 있다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>게임 서비스와 순위표 서버 사이에 메시지 큐가 필요한가?&lt;/strong>&lt;/p>
&lt;p>게임 점수가 어떻게 사용되는지에 따라 크게 달라질 수 있다.&lt;/p>
&lt;p>해당 데이터가 다른 곳에서도 이용되거나 여러 기능을 지원해야 한다면 카프카에 데이터를 넣는 것이 합리적일 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_3.png"
width="1372"
height="516"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_3_hu1571b99ddafa8ab0beb62502c9444491_33359_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_3_hu1571b99ddafa8ab0beb62502c9444491_33359_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="게임 점수를 여러 서비스에서 사용하는 방안"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="638px"
>&lt;/p>
&lt;h3 id="데이터-모델">데이터 모델&lt;/h3>
&lt;p>순위표 저장소는 시스템의 핵심 구성 요소 중 하나다.&lt;/p>
&lt;p>저장소 구현에 사용할 수 있는 세 가지 기술을 살펴본다.&lt;/p>
&lt;h4 id="관계형-데이터베이스">&lt;strong>관계형 데이터베이스&lt;/strong>&lt;/h4>
&lt;p>규모 확정성이 중요하지 않고, 사용자 수가 적다면 관계형 데이터베이스 시스템을 활용할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_4.png"
width="884"
height="580"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_4_hu87323fa7d86eb1b53840a0a18b78a259_68258_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_4_hu87323fa7d86eb1b53840a0a18b78a259_68258_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="leaderboard 테이블"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="365px"
>&lt;/p>
&lt;p>각 &lt;strong>월별 순위표&lt;/strong>는 사용자 ID와 점수 열을 갖는 데이블로 표현할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>사용자가 점수를 딴 경우&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_5.png"
width="1354"
height="216"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_5_hu0a7ccfe89d76bf8da6055832ddc6d048_15214_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_5_hu0a7ccfe89d76bf8da6055832ddc6d048_15214_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="사용자가 점수를 획득한 경우"
class="gallery-image"
data-flex-grow="626"
data-flex-basis="1504px"
>&lt;/p>
&lt;p>점수가 1점씩만 늘어난다고 가정하면 해당 월의 순위표에 아직 햊당 사용자가 없다면 새로운 레코드를 만들어 넣고,&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">leaderboard&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mary1934&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>있다면 증가시킨다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">UPDATE leaderboard set score=score + 1 where user_id=&amp;#39;mary1934&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>특정 사용자 순위 검색&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_6.png"
width="1364"
height="242"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_6_hu9653a2a00caf7b6c21525c7fedeabb71_17500_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_6_hu9653a2a00caf7b6c21525c7fedeabb71_17500_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="사용자의 순위 검색"
class="gallery-image"
data-flex-grow="563"
data-flex-basis="1352px"
>&lt;/p>
&lt;p>사용자의 순위를 가져오려면 순위표 테이블을 점수 기준으로 정렬한 후 순위를 매긴다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">rownum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">rownum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rank&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">leaderboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>이 방안은 데이터가 많지 않을 때는 효과적이지만, 레코드가 수백만 개 정도로 많아지면 성능이 너무 나빠지는 문제가 있다.&lt;/p>
&lt;ul>
&lt;li>사용자의 순위를 파악하려면 모든 플레이어를 순외표의 정확산 위치에 정렬해야한다.&lt;/li>
&lt;li>같은 점수를 받은 사용자가 여럿일 수 있으므로, 순위는 단순히 해당 목록 내의 사용자 위치라고도 할 수 없다.&lt;/li>
&lt;/ul>
&lt;p>SQL 데이터베이스는 지속적으로 변화하는 대량의 정보를 신속하게 처리하지 못한다.&lt;/p>
&lt;ul>
&lt;li>수백만 개 레코드에 순위를 매기려면 대략 수십 초 정도가 걸린다.&lt;/li>
&lt;/ul>
&lt;p>따라서 실시간성을 요구하는 애플레키에션에는 적합하지 않고, 데이터가 지속적으로 변경되므로 캐시 도입도 어렵다.&lt;/p>
&lt;ul>
&lt;li>일괄 작업(배치)로 처리하면 가능할 수 있지만 실시간 순위를 보여주어야 한다는 요구사항에는 적절치 않다.&lt;/li>
&lt;/ul>
&lt;p>인덱스를 추가하고 &lt;code>LIMIT&lt;/code> 절을 사용하여 스캔할 페이지 수를 제한할 수 있지만, 확장성이 좋지 않다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">rownum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">rownum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rank&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">leaderboard&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DESC&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>특정 사용자의 순위를 알아내려면 기본적으로 전체 테이블을 훑어야 한다.&lt;/li>
&lt;li>순위표 상단에 있지 않은 사용자의 순위를 간단히 찾을 수 없다.&lt;/li>
&lt;/ul>
&lt;h4 id="레디스">레디스&lt;/h4>
&lt;p>레디스는 메모리 기반 키-값 저장소 시스템으로 메모리에서 동작하여 빠른 읽기 및 쓰기가 가능하다.&lt;/p>
&lt;p>이를 통해 수백만 명의 사용자에 대해서도 예측 가능한 ㅅ어능ㅇ르 제공하고 복잡한 DB 쿼리 없이도 일반적인 순위표 작업을 쉽게 수행할 수 있다.&lt;/p>
&lt;p>아울러 순위표 시스템 설계 문제를 해결하는 데 이상적인 &lt;strong>정렬 집합&lt;/strong>(sorted set)이라는 자료형을 제공한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>정렬 집합이란?&lt;/strong>&lt;/p>
&lt;p>집합과 유사항 자료형으로 저장된 각 원소는 점수에 연결되어 있다.&lt;/p>
&lt;p>집합 내 원소는 고유해야 하지만 같은 점수는 있을 수도 있고, 정렬 집합 내 원소를 오름차순 정렬하는 데 이용된다.&lt;/p>
&lt;p>정렬 집합은 내부적으로 해시 테이블과 스킵 리스트라는 두 가지 자료 구조를 사용한다.&lt;/p>
&lt;ul>
&lt;li>해시 테이블: 사용자의 점수를 저장&lt;/li>
&lt;li>스킵 리스트: 특정 점수를 딴 사용자들의 목록을 저장&lt;/li>
&lt;/ul>
&lt;p>사용자는 점수를 기준으로 정렬한다.&lt;/p>
&lt;ul>
&lt;li>점수 및 사용자 열이 있는 테이블로 생각하면 이해하기 쉽다.
&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_7.png"
width="1352"
height="760"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_7_hu85fd85f56d1e350543434c4ec022a6b0_119803_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_7_hu85fd85f56d1e350543434c4ec022a6b0_119803_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="정렬 집합으로 표현한 2월 순위표"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>스킵 리스트&lt;/strong>&lt;/p>
&lt;p>빠른 검색을 가능하게 하는 자료구조로, 정렬된 연결 리스트에 다단계 색인을 두는 구조이다.&lt;/p>
&lt;p>이 자료 구조의 근간은 정렬된 단방향 연결 리스트로, 이 연결 리스트에 삽입, 삭제, 검색 연산을 실행하는 시간 복잡도는 &lt;code>O(n)&lt;/code>이다.&lt;/p>
&lt;p>연산이 더 빨리 실행할 수 있도록 하기 위해 이진 검색 알고리즘을 통해 중간 지점에 더 빨리 도달할 수 있도록 한다.&lt;/p>
&lt;ul>
&lt;li>중간 노드를 하나씩 건너뛰는 1차 색인과 1차 색인 노드를 하나씩 건너 뛰는 2차 색인을 추가한다.&lt;/li>
&lt;/ul>
&lt;p>새로운 색인을 추가할 때마다 이전 차수의 노드를 하나씩 건너뛸 수 있다.&lt;/p>
&lt;ul>
&lt;li>노드 사이의 거리가 &lt;code>n-1&lt;/code>이 되면 더 이상의 색인을 추가하지 않는다.&lt;/li>
&lt;li>n은 총 노드의 개수&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_8.png"
width="1342"
height="1182"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_8_hu61e3939b81b6b789001ba6d07810bb60_81509_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_8_hu61e3939b81b6b789001ba6d07810bb60_81509_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="스킵 리스트"
class="gallery-image"
data-flex-grow="113"
data-flex-basis="272px"
>&lt;/p>
&lt;p>다단계 색인을 사용하면 특정 값을 훨씬 빠르게 찾을 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_9.png"
width="1956"
height="322"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_9_hu9354600d37260ed8b8d530bf7b5a8225_24588_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_9_hu9354600d37260ed8b8d530bf7b5a8225_24588_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="5차 색인까지 사용하는 스킵 리스트"
class="gallery-image"
data-flex-grow="607"
data-flex-basis="1457px"
>&lt;/p>
&lt;p>데이터 양이 적을 때는 스킵 리스트의 속도 개선 효과가 분명하지 않지만, 5차 색인까지 사용하는 스킵 리스트를 예시로 들면 개선을 확인할 수 있다.&lt;/p>
&lt;p>기본 리스트만 있는 경우 찾는 노드에 도달하기 위해 62개의 노드를 거쳐야하지만, 스킵 리스트의 경우에는 11개의 노드만 통과하면 된다.&lt;/p>
&lt;p>정렬 집합은 삽입이나 갱신 연산을 할 때 모든 원소가 올바른 위치에 자동으로 배치되며 새 원소를 추가하거나 기존 원소를 검색하는 연산의 시간 복잡도가 &lt;code>O(log(n))&lt;/code>이므로 관계형 데이터베이스보다 성능이 좋다.&lt;/p>
&lt;p>관계형 데이터베이스에서 특정 사용자의 순위를 계산하려면 중첩 질의문을 수행해야한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COUNT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">leaderboard&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lb2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lb2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lb1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">score&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RANK&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">leaderboard&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lb1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lb1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">{&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">user_id&lt;/span>&lt;span class="err">}&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>레디스 정렬 집합을 사용한 구현&lt;/strong>&lt;/p>
&lt;p>순위표 구현에 사용할 레디스 연산들을 살펴본다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>ZADD&lt;/code>
&lt;ul>
&lt;li>기존에 없던 사용자를 집합에 추가한다.&lt;/li>
&lt;li>기존 사용자의 경우에는 점수를 업데이트한다.&lt;/li>
&lt;li>&lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ZINCRBY&lt;/code>
&lt;ul>
&lt;li>사용자 점수를 지정된 값 만큼 증가시킨다.&lt;/li>
&lt;li>집합에 없는 사용자는 0점으로 가정한다.&lt;/li>
&lt;li>&lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ZRANGE&lt;/code>/&lt;code>ZREVRANGE&lt;/code>
&lt;ul>
&lt;li>점수에 따라 정렬된 사용자 중 특정 범위에 드는 사용자들을 가져온다.&lt;/li>
&lt;li>순서, 항목 수, 시작 위치를 지정할 수 있다.&lt;/li>
&lt;li>&lt;code>O(log(n) + m)&lt;/code>
&lt;ul>
&lt;li>&lt;code>m&lt;/code>: 가져올 항목 수&lt;/li>
&lt;li>&lt;code>n&lt;/code>: 정렬 집합의 크기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ZRANK&lt;/code>/&lt;code>ZREVRANK&lt;/code>
&lt;ul>
&lt;li>오름차순/내림차순 정렬하였을 때 특정 사용자의 위치를 가져온다.&lt;/li>
&lt;li>&lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>ZREVRANGE&lt;/code>는 향후 사용이 중단될 명령으로, &lt;code>ZRANGE&lt;/code> 명령에 추가 속성을 전달하면 같은 결과를 얻을 수 있다.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>&lt;strong>사용자가 점수를 획득한 경우&lt;/strong>&lt;/p>
&lt;p>매 월 새로운 순위표를 위한 정렬 집합을 만들고 이전 순위표는 이력 데이터 저장소로 보낸다.&lt;/p>
&lt;p>사용자는 승리하면 점수를 얻은데, &lt;code>ZINCRBY&lt;/code>를 호출하여 사용자 점수를 증가시키거나 순위표 세트에 없는 경우 사용자를 순위표 집합에 추가한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ZINCRBY leaderboard_feb_2021 1 &amp;#39;mary1934&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>사용자가 순위표 상위 10명을 조회하는 경우&lt;/strong>&lt;/p>
&lt;p>가장 높은 점수를 받은 사용자로부터 내림차순으로 정렬한 결과를 가져와야 하므로 &lt;code>ZREVRANGE&lt;/code>를 호출한다.&lt;/p>
&lt;p>사용자 목록뿐 아니라 각 사용자의 현재 점수도 가져와야 하므로 &lt;code>WITHSCORES&lt;/code> 속성도 전달한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ZREVRANGE leaderboard_feb_2021 0 9 WITHSCORES
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>다음과 같은 목록이 반환된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[(user2,score2),(user1,score1),(user5,score5)...]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>사용자가 자기 순위를 조회하는 경우&lt;/strong>&lt;/p>
&lt;p>&lt;code>ZREVRANK&lt;/code>를 호출하면 특정 사용자의 순위를 가져올 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ZREVRANGE leaderboard_feb_2021 357 365
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>특정 사용자 순위를 기준으로 일정 범위 내 사용자를 질의하는 경우&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_10.png"
width="1344"
height="1112"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_10_hucd013a2567009eacc82bc2b2f59fca18_84653_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_10_hucd013a2567009eacc82bc2b2f59fca18_84653_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="특정 사용자 직전 순위 사용자 4명, 직후 순위 사용자 4명"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>&lt;code>ZREVRANGE&lt;/code>를 활용하면 특정한 사용자 전/후 순위 사용자 목록을 얻어낼 수 있다.&lt;/p>
&lt;p>&lt;code>Mallow007&lt;/code>의 사용자가 361등이고, 전 후로 4명씩 조회한다면&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ZREVRANGE leaderboard_feb_2021 357 365
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="저장소-요구사항">저장소 요구사항&lt;/h3>
&lt;p>최소한 &lt;code>사용자 ID&lt;/code>와 &lt;code>점수&lt;/code>는 저장해야 한다.&lt;/p>
&lt;p>최악의 시나리오는 월간 활성 사용자 2,500만 명 모두가 최소 한 번 이상 게임에서 승리하는 바람에 모두 월 순위표에 올라야 하는 경우이다.&lt;/p>
&lt;ul>
&lt;li>ID: 24자 문자열&lt;/li>
&lt;li>점수: 16비트 정수&lt;/li>
&lt;li>순위표 한 항목당 26바이트 필요&lt;/li>
&lt;li>MAU 순위표 항목이 하나라는 최악의 시나리오를 가정하면 &lt;code>26바이트 * 2,500만 = 650MB&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>이 정도라면 스킵 리스트 구현에 필요한 오베헤드와 정렬 집합 해시를 고려해 메모리 사용량을 두 배로 늘린다고 해도 최신 레디스 서버 한 대만으로도 데이터를 충분히 저장할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>CPU 및 I/O 사용량&lt;/strong>&lt;/p>
&lt;p>개략적인 추정치에 따르면 갱신 연산의 최대 QPS는 2500/초 정도로 레디스 서버로도 충분히 감당할 수 있는 부하이다.&lt;/p>
&lt;p>하지만 레디스 노드에 장애 발생으로 인한 영속성을 고려해야한다.&lt;/p>
&lt;p>레디스는 데이터를 디스크에 영속적으로 보관하는 옵션도 지원하나, 디스크에서 데이터를 읽어 대규모 레디스 인스턴스를 재시작하려면 시간이 많이 걸린다.&lt;/p>
&lt;ul>
&lt;li>그래서 보통은 레디스에 읽기 사본을 두는 방식으로 구성한다.&lt;/li>
&lt;/ul>
&lt;p>MySQL과 같은 관계형 데이터베이스를 사용하는 경우에는 사용자와 점수 테이블이 필요하다.&lt;/p>
&lt;p>점수 테이블에는 사용자 ID, 점수, 게임에서 승리한 시각(타임스템프)를 저장하여 경연 기록 등과 같은 다른 게임 기능 구현에 활용될 수 있고, 인프라 장애 발생 시 레디스 순위표를 복구하는 데에도 활용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>가장 자주 검색되는 상위 10명의 사용자 정보를 캐시하면 쉽게 성능을 최적화 할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;h3 id="클라우드-서비스-사용-여부">클라우드 서비스 사용 여부&lt;/h3>
&lt;p>솔루션 배포 방식은 기존 인프라 구성 형태에 따라 일반적으로 두 가지로 나눌 수 있다.&lt;/p>
&lt;h4 id="자체-서비스-사용">자체 서비스 사용&lt;/h4>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_11.png"
width="1836"
height="770"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_11_huc99aadd03e637796689cc9fe1c2d43ef_172903_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_11_huc99aadd03e637796689cc9fe1c2d43ef_172903_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="자체 서버스를 이용하는 방안"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="572px"
>&lt;/p>
&lt;ul>
&lt;li>매월 정렬 집합을 생성하여 사용자 및 점수 정보를 이용해 해당 기간의 순위표를 저장한다.&lt;/li>
&lt;li>이름 및 프로필 이미지와 같은 사용자 세부 정보는 MySQL 데이터베이스에 저장한다.&lt;/li>
&lt;/ul>
&lt;p>순위표를 가져올 때 API 서버는 순위 데이터와 더불어 데이터베이스에 저장된 사용자 이름과 프로필 이미지도 가져온다.&lt;/p>
&lt;ul>
&lt;li>이 작업이 장기적으로 너무 비효율적이면 상위 사용자 10명의 세부 정보를 저장하는 프로필 캐시를 두어 해결할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="클라우드-서비스-이용">클라우드 서비스 이용&lt;/h4>
&lt;blockquote>
&lt;p>기존 인프라가 AWS에 있어 클라우드로 순위표를 구축하는 것이 자연스러운 상황이라 가정한다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>아마존 API 게이트웨이&lt;/strong>와 &lt;strong>AWS 람다&lt;/strong>(Lambda) 두 가지를 활용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>API 게이트웨이를 사용하면 RESTful API의 HTTP 엔드포인트를 정의하고 아무 백엔드 서비스에나 연결할 수 있다.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>API&lt;/th>
&lt;th>람다 함수&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>GET /v1/scores&lt;/code>&lt;/td>
&lt;td>&lt;code>LeaderboardFetchTop10&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>GET /v1/scores/{:user_id}&lt;/code>&lt;/td>
&lt;td>&lt;code>LeaderboardFetchPlayerRank&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>GET /v1/scores&lt;/code>&lt;/td>
&lt;td>&lt;code>LeaderboardUpdateScores&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>&lt;strong>AWS 람다&lt;/strong>&lt;br>
가장 인기있는 서버리스 컴퓨팅 플랫폼 중 하나로 서버를 직접 준비하거나 관리할 필요 없이 코드를 실행할 수 있다.&lt;br>
람다는 필요할 때만 실행되며 트래픽에 따라 규모가 자동으로 확장된다.&lt;/p>
&lt;/blockquote>
&lt;p>개략적으로 설명하면&lt;/p>
&lt;ol>
&lt;li>API 게이트웨이를 호출&lt;/li>
&lt;li>게이트웨이는 적절한 람다 함수를 호출&lt;/li>
&lt;li>스토리지 계층(레디스 및 MySQL)의 명령을 호출하여 얻은 결과를 API 게이트웨이에 반환&lt;/li>
&lt;li>API 게이트웨이는 그 결과를 애플리케이션에 전달&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>람다 함수를 사용하면 서버 인스턴스를 만들지 않아도 질의를 실행할 수 있다.
&lt;ul>
&lt;li>레디스를 호출할 수 있도록 하는 클라이언트를 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>람다를 사용하면 DAU 성장세에 맞춰 자동으로 서비스 규모를 확장할 수 있다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>점수 획득&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_12.png"
width="1978"
height="496"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_12_hua00e417a6ce8d46751065c258b5a49fc_148407_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_12_hua00e417a6ce8d46751065c258b5a49fc_148407_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="점수 획득"
class="gallery-image"
data-flex-grow="398"
data-flex-basis="957px"
>&lt;/p>
&lt;hr>
&lt;p>&lt;strong>순위 검색&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_13.png"
width="1964"
height="506"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_13_hud870a85155701f522546b2affcdafcf0_158178_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_13_hud870a85155701f522546b2affcdafcf0_158178_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="순위 검색"
class="gallery-image"
data-flex-grow="388"
data-flex-basis="931px"
>&lt;/p>
&lt;hr>
&lt;p>람다는 서비리스 접근 방식이라 인프라의 규모가 필요에 맞게 자동으로 확장되며, 환경 설정, 유지 보수 등의 문제를 직접 관리할 필요가 없다.&lt;/p>
&lt;h3 id="레디스-규모-확장">레디스 규모 확장&lt;/h3>
&lt;p>5백만 DAU 정도라면 한 대의 레디스 캐시 서버로도 충분히 지원 가능하나, 원래 규모의 100배인 5억 DAU를 처리해야한다면 규모 확장이 필요하다.&lt;/p>
&lt;ul>
&lt;li>저장 용량은 65GB&lt;/li>
&lt;li>250,000 QPS 처리&lt;/li>
&lt;/ul>
&lt;p>이 정도 규모를 감당하려면 샤딩이 필요하다.&lt;/p>
&lt;h4 id="데이터-샤딩-방안">데이터 샤딩 방안&lt;/h4>
&lt;p>고정 파티션과 해시 파티션 방식을 고려할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>고정 파티션&lt;/strong>&lt;/p>
&lt;p>순위표에 등장하는 점수의 범위에 따라 파티션을 나누는 방안이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_14.png"
width="1856"
height="206"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_14_hu7658f9e716ce647a0256027405e30bb0_20879_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_14_hu7658f9e716ce647a0256027405e30bb0_20879_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="고정 파티션"
class="gallery-image"
data-flex-grow="900"
data-flex-basis="2162px"
>&lt;/p>
&lt;ul>
&lt;li>획득할 수 있는 점수가 1~1000 이라면 데이터를 범위별로 나눈다.&lt;/li>
&lt;li>(1~100), (101~200) &amp;hellip;, (901, 1000)&lt;/li>
&lt;/ul>
&lt;p>이 기능이 제대로 작동하려면 순위표 전반에 점수가 고르게 분포되어야 하며, 그렇지 않다면 각 샤드에 할당되는 점수 범위를 조정하여 비교적 고른 분포가 되도록 해야한다.&lt;/p>
&lt;hr>
&lt;p>애플리케이션이 샤딩 처리의 추제라면 특정 사용자의 점수를 입력하거나 갱신할 때 해당 사용자가 어느 샤드에 있는지 알아야 한다.&lt;/p>
&lt;ul>
&lt;li>MySQL 질의로 사용자의 현재 점수를 계산하여 알아낼 수도 있다.&lt;/li>
&lt;li>사용자 ID와 점수 사이의 관계를 저장하는 2차 캐시를 활용하면 성능을 더 높일 수 있다.&lt;/li>
&lt;/ul>
&lt;p>사용자의 점수가 높아져서 다른 샤드로 옮겨야 할 때는 기존 샤드에서 해당 사용자를 제거한 다음 새 샤드로 옮겨야 한다.&lt;/p>
&lt;hr>
&lt;p>순위표에서 상위 10명의 플레이어를 가져오려면, 가장 높은 점수가 저장되는 샤드에서 상위 10명을 가져온다.&lt;/p>
&lt;p>특정 사용자의 순위를 알려면 해당 사용자가 속한 샤드 내 순위뿐 아니라 해당 샤드보다 높은 점수를 커버하는 모든 샤드의 모든 사용자 수를 알아야 한다.&lt;/p>
&lt;ul>
&lt;li>특정 샤드에 속한 모든 사용자 수는 &lt;code>info keyspace&lt;/code> 명령을 통해 &lt;code>O(1)&lt;/code>시간에 알아낼 수 있다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>해시 파티션&lt;/strong>&lt;/p>
&lt;p>레디스 클러스터를 사용하는 방법으로 사용자들의 점수가 특정 대역에 과도하게 모여있는 경우 효과적이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_15.png"
width="1694"
height="1344"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_15_huf77687aca255ea1376fddaaa280306c9_415936_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_15_huf77687aca255ea1376fddaaa280306c9_415936_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="해시 파티션"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="302px"
>&lt;/p>
&lt;blockquote>
&lt;p>레디스 클러스터&lt;br>
안정 해시는 사용하지 않지만 각 키가 특정한 해시 슬롯에 속하도록 하는 샤딩 기법을 사용한다.&lt;/p>
&lt;ul>
&lt;li>총 16384개 해시 슬롯이 있으며, &lt;code>CRC16(key) % 16384&lt;/code>의 연산을 수행하여 어떤 키가 어느 슬롯에 속하는지 계산한다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>모든 키를 재분배하지 않아도 클러스터에 쉽게 노드를 추가하거나 제거할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>점수 갱신&lt;/strong>&lt;br>
점수를 갱신하려면 해당 사용자의 샤드를 찾아(&lt;code>CRC16(key) % 16394&lt;/code>) 해당 사용자의 점수를 변경한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>상위 10명 플레이어 검색&lt;/strong>&lt;/p>
&lt;p>모든 샤드에서 상위 10명을 받아 애플리케이션 내에서 다시 정렬하는 &lt;strong>분산-수집&lt;/strong>(scatter-gather) 접근법을 사용해야 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_16.png"
width="1460"
height="1388"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_16_hu1e8e084fe62cd2c4275cacc14a07a2eb_271118_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_16_hu1e8e084fe62cd2c4275cacc14a07a2eb_271118_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="분산-수집 방안"
class="gallery-image"
data-flex-grow="105"
data-flex-basis="252px"
>&lt;/p>
&lt;p>모든 샤드에 사용자를 질의하는 절차를 병렬화하면 지연 시간을 줄일수 있지만 다음과 같은 문제가 있다.&lt;/p>
&lt;ul>
&lt;li>상위 k개의 결과를 반환해야 하는 경우(k는 매우 큰 값) 각 샤드에서 많은 데이터를 읽고 정렬해야 하므로 지연 시간이 늘어난다.&lt;/li>
&lt;li>가장 느린 파티션에서 데이터를 다 읽고 나서야 질의 결과를 계산할 수 있으므로 지연 시간이 길어진다.&lt;/li>
&lt;li>특정 사용자의 순위를 결정할 간단한 방법이 없다.&lt;/li>
&lt;/ul>
&lt;p>따라서 고정 파티션 방안을 활용한다.&lt;/p>
&lt;h4 id="레디스-노드-크기-조정">&lt;strong>레디스 노드 크기 조정&lt;/strong>&lt;/h4>
&lt;p>레디스 노드의 크기를 조정할 때 여러가지를 고려해야한다.&lt;/p>
&lt;p>쓰기 작업이 많은 애플리케이션에서는 장애에 대비해 스냇숏을 생성할 때 필요한 모든 쓰기 연산을 감당할 수 있어야 하므로 많은 메모리가 필요하다.&lt;/p>
&lt;ul>
&lt;li>메모리를 두 배 더 할당하는 것이 안전하다.&lt;/li>
&lt;/ul>
&lt;p>레디스는 성능 밴체마킹을 위해 &lt;code>redis-benchmark&lt;/code>라는 도구를 제공하므로, 여러 클라이언트가 동시에 여러 질의를 실행하는 것을 실뮬레이션하여 주어진 하드웨어로 초당 얼마나 많은 요청을 처리할 수 있는지 측정할 수 있다.&lt;/p>
&lt;h4 id="대안-nosql">대안: NoSQL&lt;/h4>
&lt;p>NoSQL 데이터베이스를 다른 솔루션으로 고려할 수 있으며, 다음과 같은 데이터베이스가 이상적이다.&lt;/p>
&lt;ul>
&lt;li>쓰기 연산에 최적화&lt;/li>
&lt;li>같은 파티션 내의 항목을 점수에 따라 효율적으로 정렬 가능&lt;/li>
&lt;/ul>
&lt;p>아마존 DynamoDB, 카산드라, MongoDB 등을 고려할 수 있는데, DynamoDB를 예시로 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_17.png"
width="1344"
height="286"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_17_huc61d6265b699516ef39c14922102b774_97876_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_17_huc61d6265b699516ef39c14922102b774_97876_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="DynamoDB 기반 솔루션"
class="gallery-image"
data-flex-grow="469"
data-flex-basis="1127px"
>&lt;/p>
&lt;blockquote>
&lt;p>DynamoDB&lt;br>
안정적인 성능과 뛰어난 확장성을 제공하는 완전 관리형 NoSQL 데이터베이스로, 기본키 이외의 속성을 활용하여 데이터를 효과적으로 질의할 수 있도록, 전역 보조 색인을 제공한다.&lt;/p>
&lt;/blockquote>
&lt;p>전역 보조 색인은 부모 테이블의 속성들로 구성되지만 기본 키는 부모 테이블과는 다르다.&lt;/p>
&lt;hr>
&lt;p>체스 게임의 순위표를 설계하고, 데이터베이스 테이블은 순위표와 사용자 테이블을 비정규화 한 것으로 순위표를 화면에 표시하는 데 필요한 모든 정보를 담고 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_18.png"
width="1452"
height="532"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_18_hu9da5772d01231304c597cd3dfad33994_246694_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_18_hu9da5772d01231304c597cd3dfad33994_246694_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="순위표 및 사용자 테이블의 비정규화"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="655px"
>&lt;/p>
&lt;p>이 방안은 레코드가 많아지면 상위 점수를 찾기 위해 전체 테이블을 뒤져야 하므로 사용자가 많아지면 성능이 떨어져 규모 확장이 어렵다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_19.png"
width="1464"
height="614"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_19_hua32ae9c65839c9e9bdba8742ab5270bb_257414_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_19_hua32ae9c65839c9e9bdba8742ab5270bb_257414_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="파티션 키 및 정렬 키"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="572px"
>&lt;/p>
&lt;p>위와 같이 &lt;code>game_name#{year-month}&lt;/code>를 파티션 키로, 점수를 정렬 키로 사용하면 테이블 전체를 읽어야 하는 일을 피할 수 있지만, 부하가 높을 때 문제가 발생한다.&lt;/p>
&lt;p>DynamoDB는 안정 해시를 사용하여 여러 노드에 데이터를 분산하는데, 각 항목이 파티션 키에 따라 선정된 노드에 저장된다.&lt;/p>
&lt;p>위와 같이 테이블을 설계하면 가장 최근 한 달치 데이터가 동일한 파티션에 저장될 뿐 아니라 핫 파티션이 되고 만다.&lt;/p>
&lt;p>따라서 데이터를 n개 파티션으로 분할하고 파티션 번호(&lt;code>user_id % number_of_partitinons&lt;/code>)를 파티션 키에 추가하는 &lt;strong>쓰기 샤딩&lt;/strong>이라고 부르틑 패턴을 활용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>하지만 읽기 및 쓰기 작업 모두를 복잡하게 만드므로, 장단점을 꼼꼼히 따져봐야 한다.&lt;/li>
&lt;/ul>
&lt;p>쓰기 볼륨 또는 DAU를 기준으로 파티션의 수를 결정할 수 있으나 파티션이 받는 부하와 읽기 복잡도 사이에는 타협적인 부분이 있다.&lt;/p>
&lt;ul>
&lt;li>같은 달 데이터를 여러 파티션에 고르게 분산시키면 한 파티션이 받는 부하는 낮아짐&lt;/li>
&lt;li>특정한 달의 데이터를 읽으려고 하면 모든 파티션을 질의한 결과를 합쳐야 하므로 구현은 복잡해짐&lt;/li>
&lt;/ul>
&lt;p>파티션 키는 &lt;code>game#{year-moth}#p{partition_number}&lt;/code>와 같이 지정할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_20.png"
width="1450"
height="598"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_20_hu3a0e87c0bef2264457ba3bd9686d164f_269843_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_20_hu3a0e87c0bef2264457ba3bd9686d164f_269843_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="새로운 파티션 키"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>전역 보조 색인은 &lt;code>game#{year-moth}#p{partition_number}&lt;/code>를 파티션 키로, 점수를 정렬 키로 사용하게 구성한다.&lt;/p>
&lt;ul>
&lt;li>같은 파티션 내 데이터는 전부 점수 기준으로 정렬된 n개의 파티션이 만들어진다.&lt;/li>
&lt;/ul>
&lt;p>3개 파티션이 있다고 했을 때 상위 10명의 사용자를 가져오려면 &lt;strong>분산-수집&lt;/strong> 접근법을 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/10/img_21.png"
width="1744"
height="1284"
srcset="https://codemario318.github.io/post/system-design-interview-2/10/img_21_hu7ef60b94fc6260de3accc6dec63a7cc1_363372_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/10/img_21_hu7ef60b94fc6260de3accc6dec63a7cc1_363372_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="분산 수집"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/p>
&lt;p>파티션 수는 신중한 벤치마킹이 필요할 수 있다.&lt;/p>
&lt;ul>
&lt;li>파티션이 많으면 각 파티션의 부하는 줄지만 최종 순위표를 만들기 위해 읽어야 하는 파티션은 더 많으므로 복잡성은 증가&lt;/li>
&lt;/ul>
&lt;p>그러나 앞서 언급한 레디스 파티션 기법과 마찬가지로, 사용자의 상대적 순위를 쉽게 정할 수 없다.&lt;/p>
&lt;p>하지만 사용자의 위치의 백분위수를 구하는 것은 가능하며, 충분히 괜찮은 방법일 수 있다.&lt;/p>
&lt;ul>
&lt;li>ex) 상위 10~20%에 속함&lt;/li>
&lt;li>규모가 충분히 커서 샤딩이 필요한 상황이라면 모든 샤드의 점수 분포는 거의 같다고 가정할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>이 가정이 사실이라면 각 샤드의 점수 분포를 분석한 결과를 캐시하는 크론 작업을 만들어 볼 수도 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">10th percentile = score &amp;lt; 100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">20th percentile = score &amp;lt; 500
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">90th percentile = score &amp;lt; 6500
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이를 통해 사용자의 상대적 순위를 빠르게 계산할 수 있다.&lt;/p>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>이번 장에서는 수백만 DAU 규모의 실시간 게임 순위표를 구축하기 위한 솔루션을 설계해 보았다.&lt;/p>
&lt;ul>
&lt;li>MySQL 데이터베이스를 사용하는 간단한 솔루션부터 검토하여, 정렬 집합을 사용하여 순위표를 구현하기로 했다.&lt;/li>
&lt;li>여러 레디스 캐시에 데이터르 샤딩하여 5억 DAU도 지언할 수 있도록 규모를 확장하는 방안도 살펴보았다.&lt;/li>
&lt;li>대안으로 NoSQL 데이터베이스를 이용하는 방법도 살펴보았다.&lt;/li>
&lt;/ul>
&lt;p>시간이 남는다면 아래와 같은 주제도 살펴볼 수 있을것이다.&lt;/p>
&lt;h3 id="더-빠른-조회-및-동점자-순위-판정">더 빠른 조회 및 동점자 순위 판정&lt;/h3>
&lt;p>레디스 해시를 사용하면 문자열 필드와 값 사이의 대응 관계를 저장해 둘 수 있으며 아래와 같이 활용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>순위표에 표시할 사용자 ID와 사용자 객체 사이의 대응 관계를 저장하여 데이터베이스 질의를 줄일 수 있다.&lt;/li>
&lt;li>동점자는 누가 먼저 점수를 받았는지에 따라 순위를 정할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="시스템-장애-복구">시스템 장애 복구&lt;/h3>
&lt;p>레디스 클러스터에도 대규모 장애는 발생할 수 있다.&lt;/p>
&lt;p>지금까지 살펴본 설계안에서는 사용자가 게임에서 이길 때마다 MySQL 데이터베이스에 타임 스탬프와 함께 저장하므로, 이를 활용한 스크립트를 만들어 간단히 복구할 수 있다.&lt;/p>
&lt;ul>
&lt;li>사용자별로 모든 레코드를 훑으며 레코드당 한 번씩 &lt;code>ZINFRBY&lt;/code>를 호출&lt;/li>
&lt;/ul></description></item></channel></rss>