<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>도메인 주도 설계 on Mario Blog</title><link>https://codemario318.github.io/tags/%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84/</link><description>Recent content in 도메인 주도 설계 on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Thu, 27 Feb 2025 09:54:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84/index.xml" rel="self" type="application/rss+xml"/><item><title>전략적 설계: 비즈니스 도메인 분석하기</title><link>https://codemario318.github.io/post/learning-domain-driven-design/1/</link><pubDate>Thu, 27 Feb 2025 09:54:49 +0900</pubDate><guid>https://codemario318.github.io/post/learning-domain-driven-design/1/</guid><description>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/cover.png" alt="Featured image of post 전략적 설계: 비즈니스 도메인 분석하기" />&lt;p>도메인 주도 설계 방법론(Domain-Driven Design: DDD)은 크게 두 가지 주요 부분으로 나눌 수 있다.&lt;/p>
&lt;ul>
&lt;li>전략적 설계
&lt;ul>
&lt;li>&lt;strong>What&lt;/strong>과 &lt;strong>Why&lt;/strong> 질문에 대한 답을 찾는 것&lt;/li>
&lt;li>어떤 소프트웨어를 만드는지, 왜 그 소프트웨어를 만드는지에 대한 해답을 찾는 것&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전술적 설계
&lt;ul>
&lt;li>&lt;strong>How&lt;/strong> 라는 방법에 대한 것&lt;/li>
&lt;li>소프트웨어 각각의 구성 요소가 구현되는 방법을 찾는 것&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이번 장에서는 &lt;strong>기업이 존재하는 이유&lt;/strong>와 &lt;strong>추구하는 목표&lt;/strong>가 무엇이며, 그 &lt;strong>목표를 달성하기 위한 전략&lt;/strong>을 논의한다.&lt;/p>
&lt;p>효과적인 솔루션을 설계하고 구축하기 위해서는 그것의 &lt;strong>바탕이 되는 문제&lt;/strong>를 이해해야 하고, 해결하고자 하는 문제를 이해하려면 그것이 &lt;strong>존재하는 맥락&lt;/strong>을 이해해야햔다.&lt;/p>
&lt;blockquote>
&lt;p>즉, 그 조직의 비즈니스 전략과 소프트웨어를 만들면서 얻고자 하는 가치를 이해해야 한다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="비즈니스-도메인이란">비즈니스 도메인이란?&lt;/h2>
&lt;p>비즈니스 도메인은 &lt;strong>기업의 주요 활동 영역을 정의&lt;/strong>한다. (회사가 고객에게 제공하는 서비스)&lt;/p>
&lt;ul>
&lt;li>페덱스: 배송 서비스&lt;/li>
&lt;li>스타벅스: 커피&lt;/li>
&lt;li>월마트: 소매업체&lt;/li>
&lt;/ul>
&lt;p>기업은 &lt;strong>여러 비즈니스 도메인&lt;/strong>을 운영할 수 있으며, 비즈니스 도메인을 자주 변경할 수 있다는 점도 주목해야한다.&lt;/p>
&lt;h2 id="하위-도메인">하위 도메인&lt;/h2>
&lt;p>기업은 비즈니스 도메인의 목표를 달성하기 위해 여러가지 &lt;strong>하위 도메인&lt;/strong>(subdomain)을 운영해야한다.&lt;/p>
&lt;p>하위 도메인은 &lt;strong>비즈니스 활동의 세분화된 영역&lt;/strong>으로 전체 시스템의 하나의 구성요소로, 각각의 하위 도메인은 회사의 비즈니스 도메인에서 목표를 달성하기 위해 서로 상호작용해야 한다.&lt;/p>
&lt;ul>
&lt;li>스타벅스
&lt;ul>
&lt;li>훌륭한 커피&lt;/li>
&lt;li>좋은 위치의 부동산&lt;/li>
&lt;li>직원 관리&lt;/li>
&lt;li>재정 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>하위 도메인 중 어느 것도 자체적으로 수익을 낼 수 없기 때문에, 회사가 비즈니스 도메인에서 경쟁하려면 이 모든 것이 함께 필요하다.&lt;/p>
&lt;h3 id="하위-도메인의-유형">하위 도메인의 유형&lt;/h3>
&lt;p>하위 도메인은 서로 다른 전략적 비즈니스 가치를 가진다.&lt;/p>
&lt;p>도메인 주도 설계에서 하위 도메인은 &lt;strong>핵심&lt;/strong>, &lt;strong>일반&lt;/strong>, &lt;strong>지원&lt;/strong> 세가지 유형으로 구분한다.&lt;/p>
&lt;h4 id="핵심-하위-도메인">핵심 하위 도메인&lt;/h4>
&lt;p>핵심 하위 도메인(core subdomain)은 &lt;strong>회사가 경쟁업체와 다르게 수행하고 있는 것&lt;/strong>을 의미한다.&lt;/p>
&lt;ul>
&lt;li>새로운 재품이나 서비스&lt;/li>
&lt;li>기존 프로세스를 최적화하여 비용을 줄이는 것 등&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>우버: 승차 공유 서비스&lt;/li>
&lt;li>구글: 검색 순위 알고리즘
&lt;ul>
&lt;li>구글 애즈는 많은 수익을 내는 하위 도메인에 있는 별도의 비즈니스 도메인&lt;/li>
&lt;li>검색 엔진을 통해 트래픽을 유도함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>복잡성&lt;/strong>&lt;/p>
&lt;p>누구나 구현할 수 있는 핵심 하위 도메인은 일시적인 경쟁 우위만 제공하므로, 핵심 하위 도메인은 자연스럽게 복잡해진다.&lt;/p>
&lt;p>회사의 핵심 비즈니스는 &lt;strong>높은 진입장벽&lt;/strong>이 있어야 경쟁력을 유지할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>경쟁 우위의 원천&lt;/strong>&lt;/p>
&lt;p>핵심 하위 도메인에 반드시 기술이 들어가야하는 것은 아니며, 회사의 경쟁 우위는 다양한 원천에서 나올 수 있다.&lt;/p>
&lt;ul>
&lt;li>모든 비즈니스 문제가 알고리즘이나 기술 솔루션으로 해결되지 않음&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>온라인으로 제품을 판매하는 보석 제조 업체: 보석의 디자인이 회사의 경쟁력&lt;/li>
&lt;li>수동 사기 탐지를 전문으로 하는 회사: 분석가가 수행하는 작업&lt;/li>
&lt;/ol>
&lt;h4 id="일반-하위-도메인">일반 하위 도메인&lt;/h4>
&lt;p>일반 하위 도메인(generic subdomain)은 &lt;strong>모든 회사가 같은 방식으로 수행하는 비즈니스 활동&lt;/strong>을 말한다.&lt;/p>
&lt;p>핵심 하위 도메인 처럼 복잡하고 구현하기 어려우나, 회사에 경쟁력을 제공하지 않는다.&lt;/p>
&lt;ul>
&lt;li>이미 실무에서 검증된 솔루션으로 널리 이용 가능&lt;/li>
&lt;li>모든 회사에서 사용하고 있어 더 이상 혁신이나 최적화가 필요 없음&lt;/li>
&lt;/ul>
&lt;p>대표 적인 예시로 아래와 같은 것 들이 있다:&lt;/p>
&lt;ul>
&lt;li>사용자 인증 및 권한 부여 등&lt;/li>
&lt;li>온라인으로 제품을 판매하는 보석 제조 업체의 온라인 소핑몰 자체&lt;/li>
&lt;/ul>
&lt;h4 id="지원-하위-도메인">지원 하위 도메인&lt;/h4>
&lt;p>지원 하위 도메인(supporting subdomain)은 &lt;strong>회사의 비즈니스를 지원하는 활동&lt;/strong>을 말하며, 핵심 하위 도메인과 달리 어떠한 경쟁 우위도 제공하지 않는다.&lt;/p>
&lt;p>지원 하위 도메인은 대부분 비즈니스 로직이 간단하다.&lt;/p>
&lt;ul>
&lt;li>데이터 입력 화면과 ETL(extract, transform, load)&lt;/li>
&lt;li>CRUD 인터페이스&lt;/li>
&lt;/ul>
&lt;p>회사에 어떠한 경쟁 우위도 제공하지 않으므로 높은 진입장벽이 필요하지 않다.&lt;/p>
&lt;h3 id="하위-도메인-비교">하위 도메인 비교&lt;/h3>
&lt;p>다른 각도에서 차이점을 살펴보고, 전략적인 소프트웨어 설계 의사결정에 미치는 영향을 살펴본다.&lt;/p>
&lt;h4 id="경쟁-우위">경쟁 우위&lt;/h4>
&lt;ul>
&lt;li>핵심 하위 도메인: 경쟁 우위 제공
&lt;ul>
&lt;li>경쟁사와 차별화하기 위한 회사의 전략&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반 하위 도메인: 경쟁 우위의 원천이 될 수는 없음
&lt;ul>
&lt;li>일반적인 솔루션&lt;/li>
&lt;li>경쟁 업체가 동일한 솔루션을 활용하므로 경쟁 우위를 제공할 수 없음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지원 하위 도메인: 진입 장벽이 낮으며, 경쟁 우위도 제공할 수 없음
&lt;ul>
&lt;li>경쟁력에 영향을 주지 않음&lt;/li>
&lt;li>일반적인 솔루션을 사용하는 것을 선호&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>회사가 해결할 수 있는 문제가 더 복잡할수록 더 많은 비즈니스 가치를 제공할 수 있지만, 복잡한 문제는 소비자에게 서비스를 제공하는 것에 국한되지는 않는다.&lt;/p>
&lt;ul>
&lt;li>비즈니스 최적화는 낮은 운영 비용으로 경쟁 우위를 얻을 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="복잡성">복잡성&lt;/h4>
&lt;p>조금 더 기술적인 관점에서 하위 도메인의 유형에 따라 복잡성의 수준이 다르고, 소프트웨어를 설계할 때 비즈니스 요구사항의 복잡성을 수용할 수 있는 도구와 기술을 선택해야하므로, &lt;strong>견고한 소프트웨어 솔루션을 설계&lt;/strong>하기 위해 하위 도메인을 식별하는 것이 반드시 필요하다.&lt;/p>
&lt;ul>
&lt;li>지원 하위 도메인: 일반적으로 비즈니스 로직이 매우 간단
&lt;ul>
&lt;li>기본적인 ETL 작업과, CRUD 인터페이스&lt;/li>
&lt;li>입력의 유효성 검증 또는 다른 구조의 데이터로 변환하는 정도&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반하위 도메인: 훨씬 더 복잡
&lt;ul>
&lt;li>지식 가용성 관점에서 &amp;lsquo;알려진 미지&amp;rsquo;에 해당(모른 다는 사실을 알고있음)&lt;/li>
&lt;li>지식 자체는 쉽게 구할 수 있음&lt;/li>
&lt;li>업계에서 인정하는 모범 사례를 사용하거나 전문 컨설턴트를 고용하여 맞춤형 솔루션을 설계할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>핵심 하위 도메인: 복잡함
&lt;ul>
&lt;li>회사의 수익성이 좌우되므로 경쟁업체가 최대한 모방하기 어려워야함&lt;/li>
&lt;li>전략적으로 핵심 하위 도메인으로 복잡한 문제를 해결하려고함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이러한 특성으로 &lt;strong>복잡성&lt;/strong>은 하위 도메인을 구별하는 기준으로 활용될 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/img.png"
width="728"
height="455"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/1/img_hu4f32797cb34ef597bfcf264f2fe48bcc_65622_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/1/img_hu4f32797cb34ef597bfcf264f2fe48bcc_65622_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="세 가지 유형의 하위 도메인의 비즈니스 차별화 및 비즈니스 로직 복잡성"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;ul>
&lt;li>하위 도메인을 부업으로 전환할 수 있는가? -&amp;gt; 핵심 하위 도메인&lt;/li>
&lt;li>외부 솔루션을 연동하는 것 보다 자체 솔루션을 구현하는 것이 더 간단하고 저렴한가? -&amp;gt; 지원 하위 도메인&lt;/li>
&lt;/ul>
&lt;p>또 다른 방법으로 &lt;strong>코드로 구현해야 하는 비즈니스 로직의 복잡성&lt;/strong>을 기준으로 삼을 수 있다.&lt;/p>
&lt;ul>
&lt;li>데이터 입력을 위한 CRUD 인터페이스와 유사한가? -&amp;gt; 지원 하위 도메인&lt;/li>
&lt;li>복잡한 알고리즘 또는 비즈니스 프로세스 규칙과 변하지 않는 속성에 의해 조정되는 비즈니스 프로세스를 구현해야 하는가? -&amp;gt; 핵심 하위 도메인&lt;/li>
&lt;li>기능 자체를 구현하기보다 일반적인 솔루션을 연동하는 편이 더 간단하거나 저렴한가? -&amp;gt; 일반 하위 도메인&lt;/li>
&lt;li>자체 구현이 더 간단하고 저렴한가? -&amp;gt; 지원 하위 도메인&lt;/li>
&lt;/ul>
&lt;h4 id="변동성">변동성&lt;/h4>
&lt;ul>
&lt;li>핵심 하위 도메인: 자주 변경될 수 있다.
&lt;ul>
&lt;li>한 번의 시도로 문제가 해결될 수 있다면 경쟁자들도 빠르게 따라잡을 수 있기 때문에 경쟁 우위에서 좋은 위치는 아닐 것&lt;/li>
&lt;li>다양한 구현 방법을 시도하고 개선하고 최적해야 핵심 하위 도메인에 대한 솔루션을 찾을 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지원 하위 도메인: 자주 변경되지 않는다.
&lt;ul>
&lt;li>어떠한 경쟁 우위를 제공하지 않기 때문에 투자한 노력에 비해 아주 작은 비즈니스 가치를 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반 하위 도메인: 시간이 지남에 따라 변경될 수 있다.
&lt;ul>
&lt;li>보안 패치, 버그 수정&lt;/li>
&lt;li>일반적인 문제에 대한 새로운 솔루션으로 대체&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="솔루션-전략">솔루션 전략&lt;/h4>
&lt;p>하위 도메인은 기본적인 구성요소이므로 하나를 제거하면 전체 구조가 무너질 수 있다.&lt;/p>
&lt;p>하위 도메인 가각의 고유한 속성을 활용하면 서로 다른 유형의 하위 도메인을 구현하기 위한 가장 효율적인 전략을 선택할 수 있다.&lt;/p>
&lt;ul>
&lt;li>핵심 하위 도메인: 사내에서 구현되어야 한다.
&lt;ul>
&lt;li>솔루션을 구매하거나 외부에서 도입 가능한 경우 경쟁업체들이 똑같이 할 수 있기 때문에 우위 개념을 약화시킨다.&lt;/li>
&lt;li>핵심 하위 도메인 구현은 전략적인 투자이므로 하청은 현명하지 않다.&lt;/li>
&lt;li>절차를 무시하고 대충 진행하는 것은 위험하며 장기적으로 치명적이다.
&lt;ul>
&lt;li>유지보수가 불가능한 코드는 회사의 목표를 지원할 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>조직의 가장 숙련된 인재는 핵심 하위 도메인에서 일하도록 업무가 할당되어야 한다.&lt;/li>
&lt;li>사내에서 핵심 하위 도메인을 개발하면 더 빠르게 변경하고 발전시킬 수 있기 때문에 더 짧은 시간에 경쟁 우위를 갖출 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>핵심 하위 도메인의 요구사항은 자주, 지속적으로 변경될 것으로 예사오디므로 솔루션은 유지보수가 가능하고 쉽게 개선될 수 있어야 한다. 따라서 핵심 하위 도메인은 가장 진보된 엔지니어링 기술로 구현해야한다.&lt;/p>
&lt;ul>
&lt;li>일반 하위 도메인: 어렵지만 이미 문제가 해결된 것들
&lt;ul>
&lt;li>사내에서 구현하는 데 시간과 노력을 투자하는 것 보다 이미 만들어진 제품을 구입하거나 오픈소스 솔루션을 채택하는 것이 비용 면에서 더 효율적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지원 하위 도메인: 경쟁 우위가 없음
&lt;ul>
&lt;li>사내에서 지원 하위 도메인을 구현하지 않는 것이 합리적&lt;/li>
&lt;li>일반 하위 도메인과 달리 솔루션이 없는 경우가 있고, 이러한 경우 직접 구현&lt;/li>
&lt;li>비즈니스 로직이 단순하고 변경의 빈도가 적기 때문에 원칙을 생략하고 적당히 진행하기 쉬움&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>지원 하위 도메인에는 정교한 디자인 패턴이나 고급 엔지니어링 기술이 필요 없다. 인력 관점에서도 고도로 숙련된 기술이 필요하지 않기 때문에 새로운 인재를 양성할 수 있는 좋은 연습 기회를 제공한다.&lt;/p>
&lt;hr>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>하위 도메인 유형&lt;/th>
&lt;th>경쟁 우위&lt;/th>
&lt;th>복잡성&lt;/th>
&lt;th>변동성&lt;/th>
&lt;th>구현 방식&lt;/th>
&lt;th>문제&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>핵심&lt;/td>
&lt;td>예&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>사내 개발&lt;/td>
&lt;td>흥미로움&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>일반&lt;/td>
&lt;td>아니오&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>구매/도입&lt;/td>
&lt;td>해결됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>지원&lt;/td>
&lt;td>아니오&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>사내 가발/하청&lt;/td>
&lt;td>뻔함&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="하위-도메인-경계-식별">하위 도메인 경계 식별&lt;/h3>
&lt;p>하위 도메인과 해당 유형으로 식별하면 설계와 관련된 의사결정에 상당한 도움이 된다.&lt;/p>
&lt;p>하위 도메인과 그 유형은 &lt;strong>기업의 비즈니스 전략&lt;/strong>에 따라 정의되며, 이를 동일한 분야에서 다른 회사와 경쟁하기 위해 자신을 차별화하는 방법으로 대다수의 소프트웨어 프로젝트에서 하위 도메인은 어떤 식으로든 &lt;strong>이미 존재&lt;/strong>한다. 이미 존재하는 하위 도메인을 식별하고 분류하려면 도메인 분석을 직접 수행해야 한다.&lt;/p>
&lt;p>회사의 부서와 기타 조직 단위는 좋은 출발점이다.&lt;/p>
&lt;h4 id="하위-도메인-정제">하위 도메인 정제&lt;/h4>
&lt;p>하위 도메인을 식별하기 위한 문제는 세부사항에 있으므로 비즈니스 기능의 복잡한 내용에 숨겨진 중요한 정보를 놓치지 말아야한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/img_1.png"
width="729"
height="308"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/1/img_1_hu9e5571290e517d4dbda2cbea95316a6f_128302_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/1/img_1_hu9e5571290e517d4dbda2cbea95316a6f_128302_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="내부 업부를 분석하여 세분하된 하위 도메인으로 나눈 결과"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="568px"
>&lt;/p>
&lt;ul>
&lt;li>고객 서비스 부서
&lt;ul>
&lt;li>헬프데스크 시스템: 일반 하위 도메인&lt;/li>
&lt;li>교대 근무 관리 및 일정: 지원 하위 도메인&lt;/li>
&lt;li>전화 시스템: 일반 하위 도메인&lt;/li>
&lt;li>상담 사례 라우팅: 핵심 하위 도메인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>과거 비슷한 상담 사례를 성공적으로 처리한 상담원에게 상담을 전달할 수 있는 알고리즘은 데이터를 분석하여 알고리즘을 설계해야하고, 경쟁업체보다 더 나은 고객 서비스를 제공할 수 있게 하므로 핵심 하위 도메인으로 볼 수 있다.&lt;/p>
&lt;h4 id="응집된-유스케이스를-하위-도메인으로">응집된 유스케이스를 하위 도메인으로&lt;/h4>
&lt;p>기술적 관점에서 하위 도메인은 상호 연관되고 응집된 유스케이스의 집합과 유사하다.&lt;/p>
&lt;ul>
&lt;li>유스케이스 집합
&lt;ul>
&lt;li>동일한 행위자(actor)&lt;/li>
&lt;li>비즈니스 엔티티(business entity)&lt;/li>
&lt;li>두 요소 모두 밀접하게 관련된 데이터의 집합을 다룸&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>세분화된 하위 도메인을 찾는 것을 중단하는 시점을 결장하기 위한 지침으로 &lt;strong>응집된 유스케이스의 집합인 하위 도메인&lt;/strong>이라는 정의를 사용할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/img_2.png"
width="727"
height="360"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/1/img_2_hu41f77d34d0ad981d442dc552154bd7d7_190213_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/1/img_2_hu41f77d34d0ad981d442dc552154bd7d7_190213_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="신용카드 결제 하위 도메인의 유스케이스 다이어그램"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;p>위 유스케이스는 작업 중인 데이터 및 관련된 행위자와 밀접한 연관이 있으므로, 모든 유스케이스는 신용카드 결제 하위 도메인을 형성한다.&lt;/p>
&lt;p>핵심 하위 도메인은 가장 중요하고 변동성이 있고 복잡하므로, 경계를 식별하기 위해 큰 노력을 기울여야한다.&lt;/p>
&lt;p>이를 통해 일반 및 지원 기능 모두를 추출하고 훨씬 더 집중하고 있는 기능에 시간을 투자할 수 있게 한다.&lt;/p>
&lt;p>하지만 지원 및 일반 하위 도메인의 경우 이러한 정제 작업을 완화해도 괜찮다.&lt;/p>
&lt;ul>
&lt;li>의사 결정을 내리는 데 도움이 될 수 있는 새로운 통찰이 나오지 않으면 중단하는 것이 좋다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/img_3.png"
width="726"
height="197"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/1/img_3_hue273eaac2e98d17046a7986b5189cfe7_105476_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/1/img_3_hue273eaac2e98d17046a7986b5189cfe7_105476_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="헬프 데스크 시스템의 하위 도메인을 정제해서 일반적인 내부 구성요소를 보여줌"
class="gallery-image"
data-flex-grow="368"
data-flex-basis="884px"
>&lt;/p>
&lt;p>위처럼 헬프 데스크 시스템의 하위 도메인을 추가로 정리한다고 전략적으로 유용한 정보가 나오지 않으므로, 하위 도메인을 크게 나눠서 이미 만들어져 있는 도구를 솔루션으로 사용한다.&lt;/p>
&lt;h4 id="핵심에-집중">핵심에 집중&lt;/h4>
&lt;p>하위 도메인을 식별할 때 하위 도메인이 모두 필요한지 여부를 고려해야한다.&lt;/p>
&lt;p>하위 도메인은 &lt;strong>소프트웨어 설계 의사결정을 내리는 프로세스의 어려움을 쉽게 해결하도록 돕는 도구&lt;/strong>로, 모든 조직에는 경쟁 우위를 제공하기는 하지만 소프트웨어와는 아무 관련이 없는 비즈니스 기능이 많이 존재한다.&lt;/p>
&lt;p>하위 도메인을 찾을 때 소프트웨어와 관련되지 않은 비즈니스 기능을 식별하고, 그 자체로 인정하며, 작업 중인 소프트웨어 시스템과 관련된 비즈니스에 집중하는 것이 중요하다.&lt;/p>
&lt;h2 id="도메인-전문가란">도메인 전문가란?&lt;/h2>
&lt;p>도메인 전문가는 &lt;strong>모델링하고 코드로 구현할 비즈니스의 모든 복잡성을 알고 있는 주제 전문가&lt;/strong>이다.(소프트웨어 비즈니스 도메인에 대한 권위자)&lt;/p>
&lt;p>비즈니스 지식의 근원이 되는 비즈니스 문제를 처음 파악한 사람들로, 시스템 분석가와 엔지니어는 비즈니스 도메인의 &lt;strong>멘탈 모델&lt;/strong>을 소프트웨어 요구사항과 소스코드로 변환한다.&lt;/p>
&lt;p>일반적으로 도메인 전문가는 &lt;strong>요구사항을 제시하는 사람&lt;/strong> 또는 &lt;strong>소프트웨어의 최종 사용자&lt;/strong>이며 소프트웨어는 그들의 문제를 해결해야한다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>비즈니스가 운영되는 영역과 고객에 제공하는 서비스는 모두 비즈니스 도메인과 함께 시작한다.&lt;/p>
&lt;p>비즈니스 도메인에서 성공하고 기업이 경쟁업체와 차별화하는 데 필요한 구성 요소를 확인했다.&lt;/p>
&lt;ul>
&lt;li>핵심 하위 도메인
&lt;ul>
&lt;li>흥미로운 문제들&lt;/li>
&lt;li>기업이 경쟁자로부터 차별화하고 경쟁 우위를 얻는 활동&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반 하위 도메인
&lt;ul>
&lt;li>해결된 문제들, 모든 회사가 같은 방식으로 하고 있는 일&lt;/li>
&lt;li>혁신이 필요하지 않음&lt;/li>
&lt;li>직접 개발하기 보다는 기존 솔루션을 사용하는 것이 더 효과적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지원 하위 도메인
&lt;ul>
&lt;li>분명한 해결책이 있는 문제들&lt;/li>
&lt;li>사내에서 구현해야할 수 있지만 경쟁 우위를 제공하지는 않음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>도메인 전문가는 비즈니스의 주제 전문가로 회사의 비즈니스 도메인 또는 하나 이상의 하위 도메인에 대한 심층적인 지식을 가지고 있으며 프로젝트 성공에 매우 중요한 역할을 한다.&lt;/p></description></item><item><title>12. 전자 지갑</title><link>https://codemario318.github.io/post/system-design-interview-2/12/</link><pubDate>Sat, 07 Dec 2024 13:51:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview-2/12/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/cover.png" alt="Featured image of post 12. 전자 지갑" />&lt;p>결제 플랫폼은 일반적으로 고객게에 전자 지갑 서비스를 제공하여 지갑에 돈을 넣어두고 필요할 때 사용할 수 있도록 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_10.png"
width="1920"
height="372"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_10_hu882c1f440f1b9829d468d598d006e286_33295_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_10_hu882c1f440f1b9829d468d598d006e286_33295_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="전자 지갑"
class="gallery-image"
data-flex-grow="516"
data-flex-basis="1238px"
>&lt;/p>
&lt;ul>
&lt;li>결제 기능&lt;/li>
&lt;li>다른 사용자의 지갑으로 직접 송금
&lt;ul>
&lt;li>은행 간 이체보다 빠르며, 일반적으로 추가 수수료를 부과하지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>전자 지갑 애플리케이션의 백엔드를 설계해본다.&lt;/p>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;ul>
&lt;li>전자 지갑 간 이체&lt;/li>
&lt;li>10,000,000 TPS&lt;/li>
&lt;li>99.99% 안정성&lt;/li>
&lt;li>트랜잭션&lt;/li>
&lt;li>재현성&lt;/li>
&lt;/ul>
&lt;h3 id="개략적-추정">개략적 추정&lt;/h3>
&lt;p>TPS를 거론한다는 것은 &lt;strong>트랜잭션 기반 데이터베이스&lt;/strong>를 사용한다는 것을 뜻한다.&lt;/p>
&lt;p>일반적인 데이터센터 노드에서 실행되는 관계형 데이터베이스는 초당 수천 건의 트랜잭션을 지원할 수 있다.&lt;/p>
&lt;ul>
&lt;li>설계안에서 사용할 데이터베이스 노드는 1,000 TPS를 지원할 수 있다고 가정&lt;/li>
&lt;li>1백만 TPS를 지원하려면 1,000개의 데이터베이스 노드가 필요함&lt;/li>
&lt;/ul>
&lt;p>이체 명령을 실행하려면 한 계좌에서 인출, 다른 계좌에서 입금을 실행해야하므로, 실제로는 2백만 TPS를 지원해야 하기 때문에, 2,000개의 데이터베이스 노드가 필요하다.&lt;/p>
&lt;p>하드웨어가 같아고 가정할 때, 한 노드가 초당 처리할 수 있는 트랜잭션 수가 많을수록 필요한 총 노드 수는 줄어들어 하드웨어 비용은 낮아진다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>노드당 TPS&lt;/th>
&lt;th>노드 수&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>100&lt;/td>
&lt;td>20,000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1,000&lt;/td>
&lt;td>2,000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10,000&lt;/td>
&lt;td>200&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>따라서 단일 노드가 처리할 수 있는 트랜잭션 수를 최대한 늘려 관리해야할 노드 수를 줄인다.&lt;/p>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;ul>
&lt;li>API 설계&lt;/li>
&lt;li>세가지 개략적 설계안
&lt;ul>
&lt;li>간단한 메모리 기반 솔루션&lt;/li>
&lt;li>데이터베이스 기반 분산 트랜잭션 솔루션&lt;/li>
&lt;li>재현성을 갖춘 이벤트 소싱(event sourcing) 솔루션&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="api-설계">API 설계&lt;/h3>
&lt;p>RESTful 규약을 따르는 하나의 API만 필요하다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>API&lt;/th>
&lt;th>기능&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>POST /v1/wallet/balance_transfer&lt;/td>
&lt;td>한 지갑에서 다른 지급으로 자금 이체&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;p>&lt;strong>요청 인자&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>필드&lt;/th>
&lt;th>설명&lt;/th>
&lt;th>자료형&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>from_account&lt;/td>
&lt;td>인출 계좌&lt;/td>
&lt;td>string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>to_account&lt;/td>
&lt;td>이체 계좌&lt;/td>
&lt;td>string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>amount&lt;/td>
&lt;td>금액&lt;/td>
&lt;td>string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>currency&lt;/td>
&lt;td>통화 단위&lt;/td>
&lt;td>string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>transaction_id&lt;/td>
&lt;td>중복 제거 ID&lt;/td>
&lt;td>uuid&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>유의할 부분은 &lt;code>amount&lt;/code> 필드의 자료형이 &lt;code>string&lt;/code> 이라는 점인데(11장 참고), 실제로는 &lt;code>float&lt;/code>이나 &lt;code>double&lt;/code>을 대부분의 프로그래밍 언어와 데이터베이스가 지원하기 때문에 택하는 경우도 많다.&lt;/p>
&lt;ul>
&lt;li>정밀도를 잃을 위험을 인지하고 사용한다면 적절한 선택일 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="인메모리-샤딩">인메모리 샤딩&lt;/h3>
&lt;p>지갑 애플리케이션은 모든 사용자 계정의 잔액을 유지한다.&lt;/p>
&lt;p>사용자와 잔액의 관계를 나타내기 좋은 자료 구조는 키-값 자료구조이고, 인메모리 키-값 저장소는 레디스가 가장 인기있다.&lt;/p>
&lt;p>그러나 레디스 노드 한대로 100만 TPS는 벅차기 때문에 클러스터를 구성하고 사용자 계정을 모든 노드에 균등하게 분산시켜야 한다.&lt;/p>
&lt;ul>
&lt;li>파티셔닝 또는 샤딩&lt;/li>
&lt;/ul>
&lt;p>키-값 데이터를 n개 파티션에 고르게 분배하려면 키의 해시 값을 계산하고 이를 파티션의 수 n으로 나누는 방법을 고려할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">String accountId = &amp;#34;A&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Int partitionNumber = 7;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Int myPartition = accountId.hashCode() % partitionNumber;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>모든 레디스 노드의 파티션 수 및 주소는 한 군데 저장해 둔다.&lt;/p>
&lt;ul>
&lt;li>높은 가용성을 보장하는 설정 정보 전문 저장소 **주키퍼(ZooKeeper)**를 이 용도로 쓰면 좋다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img.png"
width="1654"
height="906"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_huf72c0536c84b69c0b7ed32c59bc234de_79804_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_huf72c0536c84b69c0b7ed32c59bc234de_79804_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="메모리 기반 솔루션"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="438px"
>&lt;/p>
&lt;p>이 방안의 마지막 구성 요소는 &lt;strong>이체 명령 처리를 담당하는 서비스&lt;/strong>로(지갑 서비스, wallet service) 다음과 같은 역할을 담당한다.&lt;/p>
&lt;ol>
&lt;li>이체 명령 수신&lt;/li>
&lt;li>이체 명령의 유효성 검증&lt;/li>
&lt;li>명령이 유효한 것으로 확인되면 이체에 관계된 두 계정의 잔액 갱신
&lt;ul>
&lt;li>두 계정은 다른 레디스 노드에 있을 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이 서비스는 무상태 서비스이므로 수평적 규모 확장에 유리하다.&lt;/p>
&lt;hr>
&lt;p>이 설계는 작동은 하지만 정확성 요구사항을 충족하지 못한다.&lt;/p>
&lt;ul>
&lt;li>두 개의 레디스 노드를 업데이트 하는데, 그 두 연산이 모두 성공한다는 보장을 할 수 없다.&lt;/li>
&lt;/ul>
&lt;p>따라서 두 업데이트 연산이 하나의 &lt;strong>원자적 트랜잭션&lt;/strong>(atomic transaction)으로 실행되어야한다.&lt;/p>
&lt;h3 id="분산-트랜잭션">분산 트랜잭션&lt;/h3>
&lt;h4 id="데이터베이스-샤딩">데이터베이스 샤딩&lt;/h4>
&lt;p>서로 다른 두 개 저장소 노드를 갱신하는 연산을 원자적으로 수행하려면 아래와 같은 방법들을 고려할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>레디스 노드를 트랜잭션을 지원하는 관계형 데이터베이스 노드로 교체&lt;/strong>&lt;/p>
&lt;p>클라이언트의 잔액 정보가 레디스 노드가 아닌 3개의 관계형 데이터베이스 노드로 분산된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_1.png"
width="1718"
height="1014"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_1_hu7e6610fae931e3e0420d5ef63bddb96b_77665_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_1_hu7e6610fae931e3e0420d5ef63bddb96b_77665_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="관계형 데이터 베이스"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>트랜잭션 데이터베이스를 사용해도 위와 같은 방식이라면 문제의 일부반 해결할 수 있다.&lt;/p>
&lt;ul>
&lt;li>한 이체 명령이 서로 다른 두 데이터베이스 서버에 있는 계정 두 개를 업데이트해야 할 가능성이 아주 높은데, 이 두 작업이 정확히 동시에 처리된다는 보장이 없다.&lt;/li>
&lt;/ul>
&lt;p>분산 시스템에서 한 트랜잭션에서는 여러 노드의 프로세스가 관여할 수 있다.&lt;/p>
&lt;p>분산 트랜잭션은 이들 프로세스를 원자적인 하나의 트랜잭션으로 묶는 방안인데, 구현법으로 &lt;strong>저수준 방안&lt;/strong>과 &lt;strong>고수준 방안&lt;/strong>을 고려할 수 있다.&lt;/p>
&lt;h4 id="2단계-커밋">2단계 커밋&lt;/h4>
&lt;p>데이터베이스 자체에 의존하는 방안인 저수준 방안에서 가장 일반적으로 사용되는 알고리즘이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_2.png"
width="1852"
height="646"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_2_hu19f6cccbd10b2e2248e252cbf00774d8_79244_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_2_hu19f6cccbd10b2e2248e252cbf00774d8_79244_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="2단계 커밋"
class="gallery-image"
data-flex-grow="286"
data-flex-basis="688px"
>&lt;/p>
&lt;ol>
&lt;li>조정자는 정상적으로 여러 데이터베이스에 읽기 및 쓰기 작업을 수행한다.
&lt;ul>
&lt;li>데이터베이스 A, C에는 락이 걸린다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>애플리케이션에서 트랜잭션을 커밋하려 할 때 조정자는 모든 데이터베이스에 트랜잭션 준비를 요청한다.&lt;/li>
&lt;li>조정자는 모든 데이터베이스의 등답을 받아 다음 절차를 수행한다.
&lt;ul>
&lt;li>모든 데이터베이스가 &amp;lsquo;예&amp;rsquo;라고 응답하면 모든 데이터베이스에 해당 트랜잭션 커밋을 요청한다.&lt;/li>
&lt;li>한 데이터베이스라도 &amp;lsquo;아니오&amp;rsquo;라고 응답하면 모든 데이터베이스에 트랜잭션 중단을 요청한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>준비 단계를 실행하려면 데이터베이스 트랜잭션 실행 방식을 변경해야 하기 때문에 저수준 방안으로 여겨진다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_3.png"
width="1852"
height="646"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_3_hu19f6cccbd10b2e2248e252cbf00774d8_79244_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_3_hu19f6cccbd10b2e2248e252cbf00774d8_79244_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="조정자 장애"
class="gallery-image"
data-flex-grow="286"
data-flex-basis="688px"
>&lt;/p>
&lt;ul>
&lt;li>2PC의 가장 큰 문제점은 다른 노드의 메시지를 기다리는 동안 락이 오랫동안 잠긴 상태로 남을 수 있어 성능이 좋지 않을 수 있다.&lt;/li>
&lt;li>조정자가 SPOF가 될 수 있다.&lt;/li>
&lt;li>모든 데이터베이스가 &lt;strong>X/Open XA 표준&lt;/strong>을 만족해야한다.&lt;/li>
&lt;/ul>
&lt;h3 id="분산-트랜잭션-tcc">분산 트랜잭션: TC/C&lt;/h3>
&lt;p>TC/C(시도-확정/취소, Try-Confirm/Cancel)는 두 단계로 구성된 보상 트랜잭션이다.&lt;/p>
&lt;ol>
&lt;li>조정자는 모든 데이터베이스에 트랜잭션에 필요한 자원 예약을 요청한다.&lt;/li>
&lt;li>조정자는 모든 데이터베이스로부터 회신을 받는다.
&lt;ul>
&lt;li>모두 &amp;lsquo;예&amp;rsquo; 라고 응답하면 모든 데이터베이스에 작업 확인을 요청한다.(시도-확정, Try-Confirm)&lt;/li>
&lt;li>하나라도 &amp;lsquo;아니오&amp;rsquo; 라고 응답하면 모든 데이터베이스에 작업 취소를 요청한다. (시도-취소, Try-Cancel)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>2PC의 두 단계는 한 트랜잭션이지만, TC/C에서는 각 단계가 별도 트랜잭션이라는 점을 유의하자.&lt;/p>
&lt;h4 id="tcc-사례">&lt;strong>TC/C 사례&lt;/strong>&lt;/h4>
&lt;p>계좌 A 에서 계좌 C로 1달러를 이체한다고 가정한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>단계&lt;/th>
&lt;th>실행연산&lt;/th>
&lt;th>A&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>시도&lt;/td>
&lt;td>잔액 변경: -$1&lt;/td>
&lt;td>아무것도 하지 않음&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>확인&lt;/td>
&lt;td>아무것도 하지 않음&lt;/td>
&lt;td>잔액 변경: +$1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>취소&lt;/td>
&lt;td>잔액 변경: +$1&lt;/td>
&lt;td>아무것도 하지 않음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>지갑 서비스가 TC/C의 조정자로고 가정하고, 분산 트랜잭션이 시작될 때 계정 A의 잔액은 1달러이고 계정 C의 잔액은 0달러이다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>첫 번째 단계: 시도&lt;/strong>&lt;/p>
&lt;p>시도 단계에서는 조정자 역할을 하는 지갑 서비스가 두 개의 트랜잭션 명령을 두 데이터베이스로 전송한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_4.png"
width="1384"
height="626"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_4_hud16c29872b996ec2beb3f34f5dddf1ea_58583_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_4_hud16c29872b996ec2beb3f34f5dddf1ea_58583_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="시도 단계"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p>
&lt;ul>
&lt;li>계정 A가 포함된 데이터베이스에 잔액을 1달러 감소시키는 트랜잭션을 시작한다.&lt;/li>
&lt;li>계정 C가 포함된 데이터베이스에는 아무 작업도 하지 않는다.
&lt;ul>
&lt;li>데이터베이스에 NOP(No Operation) 명령을 보내며, 항상 성공한다는 응답을 보낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>두 번째 단계: 확정&lt;/strong>&lt;/p>
&lt;p>두 데이터베이스가 모두 예라고 응답하면 지갑 서비스는 확정 단계를 시작한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_5.png"
width="2000"
height="724"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_5_hu9f66d079e3e4710ead273cc50adf3a3e_100091_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_5_hu9f66d079e3e4710ead273cc50adf3a3e_100091_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="확정 단계"
class="gallery-image"
data-flex-grow="276"
data-flex-basis="662px"
>&lt;/p>
&lt;p>계정 A의 잔액은 이미 첫 번째 단계에서 갱신되었으므로 잔액을 변경할 필요가 없으나, 계정 C에서 1달러를 받지 못했으므로 확인 단계에서 실행되어야한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>세 번째 단계: 취소&lt;/strong>&lt;/p>
&lt;p>첫번째 시도 단계에서 C 계정이 불법 계정이라던가하는 이유로 실패한다면 분산 트랜잭션을 취소하고 관련된 자원을 반환해야한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_6.png"
width="1986"
height="560"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_6_hud585c22ea7c26bf4e72e8f7a01cdf3a3_89572_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_6_hud585c22ea7c26bf4e72e8f7a01cdf3a3_89572_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="취소 단계"
class="gallery-image"
data-flex-grow="354"
data-flex-basis="851px"
>&lt;/p>
&lt;p>시도 단계의 트랜잭션에서 계정 A의 잔액은 이미 바뀌었기 때문에 &lt;strong>또 다른 트랜잭션을 시작하여 계정 A에 다시 1달라를 추가&lt;/strong>해야한다.&lt;/p>
&lt;ul>
&lt;li>시도 단계에서 계정 C의 잔액은 업데이트하지 않았으므로, 계정 C의 데이터베이스에는 NOP 명령만 보내면 된다.&lt;/li>
&lt;/ul>
&lt;h4 id="2pc와-tcc-비교">2PC와 TC/C 비교&lt;/h4>
&lt;p>2PC와 TC/C 간에는 많은 유사점이 있지만 차이점도 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>첫 번째 단계&lt;/th>
&lt;th>두 번째 단계: 성공&lt;/th>
&lt;th>두 번째 단계: 실패&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2PC&lt;/td>
&lt;td>로컬 트랜잭션은 아지 완료되지 않은 상태&lt;/td>
&lt;td>모든 로컬 트랜잭션을 커밋&lt;/td>
&lt;td>모든 로컬 트랜잭션을 취소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>TC/C&lt;/td>
&lt;td>모든 로컬 트랜잭션이 커밋되거나 취소된 상태로 종료&lt;/td>
&lt;td>필요한 경우 새 로컬 트랜잭션 실행&lt;/td>
&lt;td>이미 커밋된 트랜잭션의 실행 결과를 되돌림&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>TC/C는 &lt;strong>보상 기반 분산 트랜잭션&lt;/strong>(distributed transaction by compensation)이라고도 부른다.&lt;/p>
&lt;ul>
&lt;li>실행 취소 절차를 비즈니스 로직으로 구현하므로 고수준 해법이다.&lt;/li>
&lt;/ul>
&lt;p>장점은 데이터베이스가 트랜잭션을 지원한다면 동작하므로 데이터베이스에 구애받지 않는다.&lt;/p>
&lt;p>하지만 애플리케이션 계층의 비즈니스 로직에서 세부 사항을 관리하고 분산 트랜잭션의 복잡성을 관리해야한다.&lt;/p>
&lt;h4 id="단계별-상태-테이블">단계별 상태 테이블&lt;/h4>
&lt;p>TC/C 실행 도중 지갑 서비스가 다시 시작된다면 과거 모든 작업 기록이 사라질 수 있으며, 이로인해 어떻게 복구해야 할지 알 수 없게 된다.&lt;/p>
&lt;p>해결책은 간단한데, TC/C의 진행 상황, 특히 각 단계 상태 정보를 트랜잭션 데이터베이스에 저장하면 된다.&lt;/p>
&lt;p>이를 위해 상태 정보는 최소한 다음 내용을 포함해야한다.&lt;/p>
&lt;ul>
&lt;li>분산 트랜잭션의 ID와 내용&lt;/li>
&lt;li>각 데이터베이스에 대한 시도(Try) 단계의 상태
&lt;ul>
&lt;li>&lt;code>not sent yet&lt;/code>, &lt;code>has been sent&lt;/code>, &lt;code>response received&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>두 번째 단계의 이름
&lt;ul>
&lt;li>&lt;code>Confirm&lt;/code>, &lt;code>Cancel&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>두 번째 단계의 상태&lt;/li>
&lt;li>순서가 어긋났음을 나타내는 플래그&lt;/li>
&lt;/ul>
&lt;p>단계별 상태 테이블(phase status table)은 일반적으로 돈을 인출할 지갑의 계정이 있는 데이터베이스에 둔다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_7.png"
width="1474"
height="800"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_7_hud4669546e1f63e17e27a3072a8f66c9b_70447_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_7_hud4669546e1f63e17e27a3072a8f66c9b_70447_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="단계별 상태 테이블"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;h4 id="불균형-상태">불균형 상태&lt;/h4>
&lt;p>모든 것이 순조롭게 진행된다고 가정하면 시도 단계가 끝났을 때 계정 A에서 1달러가 차감되고, 계정 C는 변화가 없다.&lt;/p>
&lt;p>이는 계좌의 총 잔고가 TC/C를 시작 시점보다 작은 값임을 의미하며, 거래 후에도 잔액 총합은 동일해야 한다는 회계 기본 원칙을 위반한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_8.png"
width="1972"
height="814"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_8_hucced9b9d9b1395df44ced0afa86b2d62_121957_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_8_hucced9b9d9b1395df44ced0afa86b2d62_121957_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="불균형 상태"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="581px"
>&lt;/p>
&lt;p>다행스럽게도 트랜잭션 보증(transactional guarantee)은 TC/C 방안에서도 여전히 유효하다.&lt;/p>
&lt;p>TC/C는 여러 개의 독립적인 로컬 트랜잭션으로 구성된다.&lt;/p>
&lt;ul>
&lt;li>TC/C의 실행 주체는 애플리케이션이며, 애플리케이션은 이런 독립적 로컬 트랜잭션이 만드는 중간 결과를 볼 수 있다.&lt;/li>
&lt;li>데이터베이스 트랜잭션이나 2PC 같은 분산 트랜잭션의 경우 실행 주체는 데이터베이스이며 애플리케이션은 중간 실행 결과를 알 수 없다.&lt;/li>
&lt;/ul>
&lt;p>분산 트랜잭션 실행 도중에는 &lt;strong>항상 데이터의 불일치&lt;/strong>가 발생한다.&lt;/p>
&lt;p>데이터베이스와 같은 하위 시스템에서 불일치를 수정하는 경우에는 그 사실을 알 필요는 없지만, TC/C 같은 메커니즘을 사용하는 경우에는 직접 처리해야한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>유효한 연산 순서&lt;/strong>&lt;/p>
&lt;p>시도 단계에서 할 수 있는 일은 세 가지다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>선택지&lt;/th>
&lt;th>A&lt;/th>
&lt;th>B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>선택 1&lt;/td>
&lt;td>-$1&lt;/td>
&lt;td>NOP&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>선택 2&lt;/td>
&lt;td>NOP&lt;/td>
&lt;td>+$1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>선택 3&lt;/td>
&lt;td>-$1&lt;/td>
&lt;td>+$1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>두 번째 선택지의 경우, 계정 C의 연산은 성공하였으나 계정 A에서 실패한 경우(NOP) 지갑 서비스는 취소 단계를 실행해야 한다.&lt;/p>
&lt;ul>
&lt;li>취소 단계 실행 전 누군가 C 게정에서 1달러를 이체하였다면, C에서 1달러를 차감하려 할 때 남은 잔액이 없기때문에 분산 트랜잭션의 트랜잭션 보증을 위반하게된다.&lt;/li>
&lt;/ul>
&lt;p>세 번째 선택지의 경우, 1달러를 A에서 차감하고 동시에 C에 추가하면 많은 문제가 발생할 수 있다.&lt;/p>
&lt;ul>
&lt;li>C 계좌에서 1달러를 추가하였으나 A에서 1달러를 차감하는 연산을 실패한다면 유효하지 않다.&lt;/li>
&lt;/ul>
&lt;p>따라서 선택지 1만 올바른 방법이다.&lt;/p>
&lt;h4 id="잘못된-순서로-실행된-경우">잘못된 순서로 실행된 경우&lt;/h4>
&lt;p>TC/C에는 실행 순서가 어긋날 수 있다는 문제가 있다.&lt;/p>
&lt;p>시도 단계에서 A에 대한 작업이 실패하여 지갑 서비스에 실패를 반환한 다음 취소 단계로 진입하여 A와 C 모두에 취소 명령을 전송하는 과정에 계정 C를 관리하는 데이터베이스의 네트워크 문제로 시도 명령 전 취소 명령부터 받게 되었다고 가정한다.&lt;/p>
&lt;ul>
&lt;li>그 시점에서 취소할 것이 없는 상태&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_9.png"
width="1690"
height="720"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_9_hubc311339aed0d3059e9d61a5ed30dd39_75845_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_9_hubc311339aed0d3059e9d61a5ed30dd39_75845_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="잘못된 순서로 명령이 실행되는 시나리오"
class="gallery-image"
data-flex-grow="234"
data-flex-basis="563px"
>&lt;/p>
&lt;p>순서가 바뀌어 도착하는 명령도 처리할 수 있도록 하려면 기존 로직을 다음과 같이 수정하면 된다.&lt;/p>
&lt;ul>
&lt;li>취소 명령이 먼저 도착하면 데이터베이스에 아직 상응하는 시도 명령을 못 보았음을 나타내는 플래그를 참으로 설정하여 저장해둔다.&lt;/li>
&lt;li>시도 명령이 도착하면 항상 먼저 도착한 취소 명령이 있었는지 확인한다.
&lt;ul>
&lt;li>있다면 바로 실패를 반환한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>단계별 상태 테이블 절에서 테이블에 순서가 어긋난 경우를 처리하기 위한 플래그를 마련했던 것은 이를 위해서이다.&lt;/p>
&lt;h3 id="분산-트랜잭션-사가">분산 트랜잭션: 사가&lt;/h3>
&lt;h4 id="선형적-명령-수행">선형적 명령 수행&lt;/h4>
&lt;p>사가는 유명한 분산 트랜잭션 솔루션 가운데 하나로 MSA 에서는 사실상 표준이다.&lt;/p>
&lt;ul>
&lt;li>모든 연산은 순서대로 정렬된다.
&lt;ul>
&lt;li>각 연산은 자기 데이터베이스에 독립적인 트랜잭션으로 실행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>연산은 첫 번째부터 마지막 순서대로 실행된다.
&lt;ul>
&lt;li>한 연산이 완료되면 다음 연산이 개시된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>연산이 실패하면 전체 프로세스는 실패한 연산부터 맨 처음 연산까지 역순으로 보상 트랜잭션을 통해 롤백된다.
&lt;ul>
&lt;li>n개의 연산을 실행하는 분산 트랜잭션은 보상 트랜잭션을 위한 n개의 연산까지 총 2n개의 연산을 준비해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_11.png"
width="1370"
height="858"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_11_hu7c215391fe3e027ba38ddce1f1c34f27_35915_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_11_hu7c215391fe3e027ba38ddce1f1c34f27_35915_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="사가의 작업 흐름"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="383px"
>&lt;/p>
&lt;p>오류가 발생하면 이체는 롤백되고 클라이언트는 오류 메시지를 받는다.&lt;/p>
&lt;p>&lt;strong>유효한 연산 순서&lt;/strong>에서 언급했듯 입금 전 인출부터 해야하는데, &lt;strong>연산 실행 순서 조율&lt;/strong>은 2가지 방법을 활용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>분산 조율(Choreography, 안무)
&lt;ul>
&lt;li>사가 분산 트랜잭션에 관련된 모든 서비스가 다른 서비스의 이벤트를 구독하여 작업을 수행하는 방식&lt;/li>
&lt;li>완전히 탈 중앙화된 조율 방식&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>중앙 집중형 조율(Orchestration)
&lt;ul>
&lt;li>하나의 조정자(coordinator)가 모든 서비스가 올바른 순서로 작업을 실행하도록 조율&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>어떤 방식을 활용할지는 사업상의 필요와 목표에 따라 정한다.&lt;/p>
&lt;p>분산 조율 방식은 서비스가 서로 비동기식으로 통신하므로 모든 서버스는 다른 서비스가 발생시킨 이벤트 결과로 어떤 작업을 수행할지 정하기 위해 내부적으로 상태 기계를 유지해야한다.&lt;/p>
&lt;ul>
&lt;li>서비스가 많으면 관리가 어려워질 수 있다.&lt;/li>
&lt;/ul>
&lt;p>일반적으로 &lt;strong>복잡한 상황을 잘 처리하는 중앙 집중형 조율 방식&lt;/strong>이 선호된다.&lt;/p>
&lt;h3 id="tcc-vs-사가">TC/C vs 사가&lt;/h3>
&lt;p>모두 애플리케이션 수준 분산 트랜잭션이지만 차이점도 존재한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>TC/C&lt;/th>
&lt;th>사가&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>보상 트랜잭션 실행&lt;/td>
&lt;td>취소 단계에서&lt;/td>
&lt;td>롤백 단계에서&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>중앙 조정&lt;/td>
&lt;td>예&lt;/td>
&lt;td>예(중앙 집중형 조율 모드)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>작업 실행 순서&lt;/td>
&lt;td>임의&lt;/td>
&lt;td>선형&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>병렬 실행 가능성&lt;/td>
&lt;td>예&lt;/td>
&lt;td>아니오(선형적 실행)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>일시적으로 일관되지 않은 상태 허용&lt;/td>
&lt;td>예&lt;/td>
&lt;td>예&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>구현 계층: 애플리케이션 또는 데이터베이스&lt;/td>
&lt;td>애플리케이션&lt;/td>
&lt;td>애플리케이션&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>실무에서는 지연 시간(latency) 요구사항에 따라 둘 가운데 하나를 선택하면 된다.&lt;/p>
&lt;ul>
&lt;li>지연 시간 요구사항이 없거나 앞서 살펴본 송금 사례처럼 서비스 수가 매우 적다면 아무거나 쓴다.
&lt;ul>
&lt;li>MSA에서 흔히 하는데로 하고싶다면 사가를 선택&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지연 시간에 민감하고 많은 서비스/운영이 관계된 시스템이라면 TC/C가 더 낫다.&lt;/li>
&lt;/ul>
&lt;h3 id="이벤트-소싱">이벤트 소싱&lt;/h3>
&lt;p>분산 트랜잭션 방안도 제대로 작동하지 않는 경우가 있을 수 있다.&lt;/p>
&lt;ul>
&lt;li>애플리케이션 수준에서 잘못 된 작업을 입력(입력된 금액 자체가 잘못됨)&lt;/li>
&lt;/ul>
&lt;p>문제의 근본 원인을 역추적하고 모든 계정에서 발생하는 연산을 감사할 방법이 있으면 좋다.&lt;/p>
&lt;p>전자 지갑 서비스 제공 업체도 외부 감사를 받을 수 있다.&lt;/p>
&lt;ul>
&lt;li>특정 시점의 계정 잔액은?&lt;/li>
&lt;li>과거 및 현재 계정 잔액이 정확한지?&lt;/li>
&lt;li>코드 변경 후에도 시스템 로직이 올바른지 검증 방법은?&lt;/li>
&lt;/ul>
&lt;p>이러한 질문에 체계적으로 답할 수 있는 설계 철학 중 하나는 &lt;strong>도메인 주도 설계&lt;/strong>(Domain-Driven Design, DDD)에서 개발된 기법인 이벤트 소싱이다.&lt;/p>
&lt;h4 id="정의">정의&lt;/h4>
&lt;p>이벤트 소싱에는 네가지 중요한 용어가 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>명령&lt;/strong>&lt;/p>
&lt;p>명령은 외부에서 전달된, 의도가 명확한 요청이다.&lt;/p>
&lt;ul>
&lt;li>ex) A에서 C로 1달러 이체&lt;/li>
&lt;/ul>
&lt;p>이벤트 소싱에서 순서는 아주 중요하므로 명령은 일반적으로 FIFO 큐에 저장된다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>이벤트&lt;/strong>&lt;/p>
&lt;p>명령은 의도가 명확하지만 사실(fact)는 아니기 때문에 유효하지 않을 수도 있다.&lt;/p>
&lt;p>유효하지 않은 명령은 실행할 수 없다.&lt;/p>
&lt;ul>
&lt;li>ex) 이체 후 잔액이 음수가 된다면 이체는 실패한다.&lt;/li>
&lt;/ul>
&lt;p>작업 이행 전에는 반드시 명령의 유효성을 검사해야 한다. 그리고 검사를 통과한 명령은 반드시 이행(fulfill)되어야 한다.&lt;/p>
&lt;p>이렇게 이행된 결과를 이벤트라고 부른다.&lt;/p>
&lt;ul>
&lt;li>이벤트는 검증된 사실로 실행이 끝난 상태이다.
&lt;ul>
&lt;li>이벤트에 대해 이야기 할 때는 과거 시제를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>명령에는 무작위성(randomness)이나 I/O가 포함될 수 있지만 이벤트는 결정론적(deterministic)이다.
&lt;ul>
&lt;li>이벤트는 과거에 실제로 있었던 일이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이벤트 생성 프로세스에는 두 가지 중요한 특성이 있다.&lt;/p>
&lt;ul>
&lt;li>하나의 명령으로 여러 이벤트가 만들어질 수 있다.(0 이상)&lt;/li>
&lt;li>이벤트 생성 과정에는 무작위성이 개입될 수 있어 같은 명령에 항상 동일한 이벤트들이 만들어진다는 보장이 없다.
&lt;ul>
&lt;li>이벤트 생성 과정에는 외부 I/O 또는 난수가 개입될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이벤트 순서는 명령 순서를 따라야하므로 이벤트도 FIFO 큐에 저장한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>상태&lt;/strong>&lt;/p>
&lt;p>상태는 이벤트가 적용될 때 변경되는 내용이다.&lt;/p>
&lt;p>지갑 시스템에서 상태는 모든 클라이언트 계정의 잔액으로, 맵 자료 구조로 표현할 수 있다.&lt;/p>
&lt;ul>
&lt;li>키는 계정 이름 또는 ID&lt;/li>
&lt;li>값은 계정 잔액&lt;/li>
&lt;/ul>
&lt;p>관계형 데이터베이스도 키-값 저장소로 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>키는 PK, 값은 레코드&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>상태 기계&lt;/strong>&lt;/p>
&lt;p>상태 기계는 이벤트 소싱 프로세스를 구동한다.&lt;/p>
&lt;ul>
&lt;li>명령의 유효성을 검사하고 이벤트를 생성&lt;/li>
&lt;li>이벤트를 적용하여 상태를 갱신&lt;/li>
&lt;/ul>
&lt;p>이벤트 소싱을 위한 상태 기계는 결정론적으로 동작해야 하므로 무작위성을 내포할 수 없다.&lt;/p>
&lt;ul>
&lt;li>I/O를 통해 외부에서 무작위적 데이터를 읽거나 난수를 사용하는 것은 허용되지 않는다.&lt;/li>
&lt;li>이벤트를 상태에 반영하는 것 또한 항상 같은 결과를 보장해야한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_12.png"
width="1350"
height="586"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_12_hu75775d77e3a277a469275ba0db2d7fcb_32101_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_12_hu75775d77e3a277a469275ba0db2d7fcb_32101_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="정적 관점에서 표현한 이벤트 소싱 아키텍처"
class="gallery-image"
data-flex-grow="230"
data-flex-basis="552px"
>&lt;/p>
&lt;p>명령을 이벤트로 변환하고 이벤트르 적용하는 두 가지 기능을 지원해야 하므로 명령 유효성 검사를 위한 상태 기계 하나와 이벤트 적용을 위한 상태 기계 하나를 둔다.&lt;/p>
&lt;p>여기에 시간을 하나의 차원으로 추가하면 동적 관점으로도 표현할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_13.png"
width="1770"
height="472"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_13_hu9c945e56a87989f709ad84e26a9c6b8b_39233_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_13_hu9c945e56a87989f709ad84e26a9c6b8b_39233_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="동적 관점에서 표현한 이벤트 소싱 아키텍처"
class="gallery-image"
data-flex-grow="375"
data-flex-basis="900px"
>&lt;/p>
&lt;p>명령을 수신하고 처리하는 과정을 계속 반복하는 시스템이다.&lt;/p>
&lt;h4 id="지갑-서비스-예시">지갑 서비스 예시&lt;/h4>
&lt;p>지갑 서비스의 경우 명령은 &lt;strong>이체 요청&lt;/strong>일 것이다.&lt;/p>
&lt;p>명령은 FIFO 큐에 기록하며, 큐로는 카프카를 널리 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_14.png"
width="1418"
height="364"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_14_huc4e4e079d616645a799fbdc27878d67d_22905_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_14_huc4e4e079d616645a799fbdc27878d67d_22905_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="명령 큐"
class="gallery-image"
data-flex-grow="389"
data-flex-basis="934px"
>&lt;/p>
&lt;ul>
&lt;li>상태, 즉 계정 잔액은 관계형 데이터베이스에 있다고 가정&lt;/li>
&lt;/ul>
&lt;p>상태 기계는 명령 큐에 들어간 순서대로 확인한다.&lt;/p>
&lt;p>명령 하나를 읽을 때마다 계정에 충분한 잔액이 있는지 확인하며, 충분하다면 상태 기계는 각 계정에 대한 이벤트를 만든다.&lt;/p>
&lt;ul>
&lt;li>명령이 &lt;code>A -&amp;gt; $1 -&amp;gt; C&lt;/code>라면 &lt;code>A: -$1&lt;/code>, &lt;code>C: +$1&lt;/code> 두 이벤트를 만든다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_15.png"
width="1418"
height="364"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_15_huc4e4e079d616645a799fbdc27878d67d_22905_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_15_huc4e4e079d616645a799fbdc27878d67d_22905_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="상태 기계 동작 원리"
class="gallery-image"
data-flex-grow="389"
data-flex-basis="934px"
>&lt;/p>
&lt;ol>
&lt;li>명령 대기열에서 명령을 읽는다.&lt;/li>
&lt;li>데이터베이스에서 잔액 상태를 읽는다.&lt;/li>
&lt;li>명령의 유효성을 검사하고 유효하면 계정별로 이벤트를 생성한다.&lt;/li>
&lt;li>다음 이벤트를 읽는다.&lt;/li>
&lt;li>데이터베이스의 잔액을 갱신하여 이벤트 적용을 마친다.&lt;/li>
&lt;/ol>
&lt;h4 id="재현성">재현성&lt;/h4>
&lt;p>이벤트 소싱이 다른 아키텍처에 비해 갖는 가장 중요한 장점은 재현성(reproducibility)이다.&lt;/p>
&lt;p>분산 트랜잭션 방안의 경우 지갑 서비스는 갱신한 계정 잔액(상태)을 데이터베이스에 저장하며, 특정 시점의 잔액이 얼마인지만 보여준다.&lt;/p>
&lt;ul>
&lt;li>계정 잔액이 변경된 이유는 알기 어렵다.&lt;/li>
&lt;li>한번 업데이트가 이루어지고 나면 과거 잔액이 얼마였는지는 알 수 없다.&lt;/li>
&lt;/ul>
&lt;p>하지만 이벤트를 처음부터 다시 재생하면 과거 잔액 상태는 언제든 재구성할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_16.png"
width="1404"
height="1044"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_16_hu529a7607382b42a04dfe6f752d90cee3_74655_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_16_hu529a7607382b42a04dfe6f752d90cee3_74655_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="상태 재현"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>이벤트 리스트는 불변이고(과거의 발생한 이벤트 이력을 변경할 수 없다) 상태 기계 로직은 결정론적이므로 이벤트 이력을 재생하여 만들어낸 상태는 언제나 동일하다.&lt;/p>
&lt;p>재현성을 갖추면 감사관이 던지는 까다로운 질문에 쉽게 답할 수 있다.&lt;/p>
&lt;ul>
&lt;li>특정 시점의 계정 잔액을 알 수 있는가?
&lt;ul>
&lt;li>시작부터 계정 잔액을 알고싶은 시점까지 이벤트를 재생한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>과거 및 현재 계정 잔액이 정확한지 알 수 있는가?
&lt;ul>
&lt;li>이벤트 이력에서 계정 잔액을 다시 계산해 보면 잔액이 정확한지 확인할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>코드 변경 후에도 시스템 로직이 올바른지 증명할 수 있는가?
&lt;ul>
&lt;li>새로운 코드에 동일한 이벤트 이력을 입력으로 주고 같은 결과가 나오는지 확인한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="명령-질의-책임-분리cqrs">명령-질의 책임 분리(CQRS)&lt;/h4>
&lt;p>지금까지 효과적인 계좌 이체가 가능한 지갑 서비스를 설계했다.&lt;/p>
&lt;p>하지만 클라이언트는 여전히 계정 잔액을 알 수 없으므로, 이벤트 소싱 프레임워크 외부의 클라이언트가 상태(잔액)을 알도록 할 방법이 필요하다.&lt;/p>
&lt;p>직관적인 해결책 하나는 상태 이력 데이터베이스의 읽기 전용 사본을 생성한 후 외부와 공유하는 것인데 이벤트 소싱은 이와는 조금 다른 해결책을 제시한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_17.png"
width="1750"
height="1454"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_17_hu15cc75bbcc1ad3d80f056e38d4cac374_130803_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_17_hu15cc75bbcc1ad3d80f056e38d4cac374_130803_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="CQRS 아키텍처"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;p>이벤트 소싱은 상태, 즉 계정 잔액을 공개하는 대신 모든 이벤트를 외부에 보낸다.&lt;/p>
&lt;p>따라서 이벤트를 수신하는 외부 주체가 직접 상태를 재구축할 수 있다.&lt;/p>
&lt;p>이런 설계 철학을 &lt;strong>명령-질의 책임 분리&lt;/strong>(Command-Query Responsibility Separation, CQRS)라고 부른다.&lt;/p>
&lt;p>CQRS에서는 상태 기록을 담당하는 상태 기계는 하나고, 읽기 전용 상태 기계는 여러 개 있을 수 있다.&lt;/p>
&lt;p>읽기 전용 상태 기계는 상태 뷰를 만들고, 이 뷰는 질의에 이용된다.&lt;/p>
&lt;p>읽기 전용 상태 기계는 이벤트 큐에서 다양한 상태 표현을 도출할 수 있다.&lt;/p>
&lt;ul>
&lt;li>클라이언트의 잔액 질의 요청을 처리하기 위해 별도 데이터베이스에 상태를 기록한다.&lt;/li>
&lt;li>이중 청구 등의 문제를 쉽게 조사할 수 있도록 하기 위해 특정 기간 동안의 상태를 복원할 수도 있다.&lt;/li>
&lt;/ul>
&lt;p>읽기 전용 상태 기계는 실제 상태에 어느 정도 뒤처질 수 있으나 결국에는 같아지므로 결과적 일관성 모델을 따른다고 할 수 있다.&lt;/p>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;p>높은 성능과 안정성 및 확장성을 달성하기 위한 기술에 대해 자세히 살펴본다.&lt;/p>
&lt;h3 id="고성능-이벤트-소싱">고성능 이벤트 소싱&lt;/h3>
&lt;p>카프카를 명령 및 이벤트 저장소로, 데이터베이스를 상태 저장소로 사용했는데 가능한 최적화 방안을 살펴본다.&lt;/p>
&lt;h4 id="파일-기반-명령-및-이벤트-목록">파일 기반 명령 및 이벤트 목록&lt;/h4>
&lt;p>&lt;strong>로컬 디스크에 저장하는 방안&lt;/strong>&lt;/p>
&lt;p>명령과 이벤트를 카프카 같은 원격 저장소가 아닌 로컬 디스크에 저장하는 방안을 생각해 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>네트워크를 통한 전송 시간을 피할 수 있다.&lt;/li>
&lt;li>이벤트 목록은 추가 연산만 가능한 자료 구조에 저장한다.&lt;/li>
&lt;/ul>
&lt;p>추가는 순차적 쓰기 연산으로 일반적으로 매우 빠르다.&lt;/p>
&lt;ul>
&lt;li>운영체제는 보통 순차적 읽기 및 쓰기 연산에 최적화 되어있어 HDD에서도 잘 작동한다.&lt;/li>
&lt;li>경우에 따라서는 무작위 메모리 접근보다 빠르게 실행될 수 있다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>최근 명령과 이벤트를 메모리에 캐시하는 방안&lt;/strong>&lt;/p>
&lt;p>명령과 이벤트는 지속성 저장소에 보관된 이후에 처리되므로, 메모리에 캐시해 놓으면 로컬 디스크에서 다시 로드하지 않아도 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_18.png"
width="1346"
height="1096"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_18_huf431578dc5a373e9fad161237382f0ce_42241_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_18_huf431578dc5a373e9fad161237382f0ce_42241_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="파일 기반의 명령 및 이벤트 저장소"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="294px"
>&lt;/p>
&lt;p>mmap 기술은 앞서 언급한 최적화 구현에 유용하다.&lt;/p>
&lt;ul>
&lt;li>로컬 디스크에 쓰는 동시에 최근 데이터는 메모리에 자동으로 캐시할 수 있다.&lt;/li>
&lt;li>디스크 파일을 메모리 배열에 대응시킨다.&lt;/li>
&lt;/ul>
&lt;p>운영체제는 파일의 특정 부분을 메모리에 캐시하여 읽기 및 쓰기 연산을 높히므로, 추가만 가능한 파일에 이루어지는 연산의 경우 필요한 모든 데이터는 거의 항상 메모리에 있으므로 실행 속도를 높힐 수 있다.&lt;/p>
&lt;h4 id="파일-기반-상태">파일 기반 상태&lt;/h4>
&lt;p>이번 설계안에서는 상태, 즉 잔액 정보를 관계형 데이터베이스에 저장했는데, 프로덕션 환경에서는 일반적으로 네트워크를 통해서만 접근 가능한 독립형 서버에서 데이터베이스를 실행한다.&lt;/p>
&lt;p>그러나 명령 및 이벤트 저장소 최적화 방안과 마찬가지로, 상태 정보도 로컬 디스크에 저장할 수 있다.&lt;/p>
&lt;ul>
&lt;li>파일 기반 로컬 관계형 데이터베이스 SQLite를 사용한다.&lt;/li>
&lt;li>로컬 파일 기반 키-값 저장소 RocksDB를 사용한다.&lt;/li>
&lt;/ul>
&lt;p>본 설계안에서는 쓰기 작업에 최적화된 자료 구조인 LSM(Log-Structured Merge-tree)를 사용하는 RocksDB를 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_19.png"
width="1352"
height="1076"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_19_hud7385ca1b5ecf0e28d3f616ea8ad9a8c_54361_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_19_hud7385ca1b5ecf0e28d3f616ea8ad9a8c_54361_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="명령, 이벤트 및 상태 저장을 위한 파일 기반 아키텍처"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;h4 id="스냅숏">스냅숏&lt;/h4>
&lt;p>모든 것이 파일 기반일 때 재현 프로세스의 속도를 높힐 방법을 고민해보자.&lt;/p>
&lt;p>재현성 확보를 위해 사용한 방법은 상태 기계로 하여금 이벤트를 항상 처음부터 다시 읽도록 하는 것 이었는데, 그 대신 주기적으로 상태 기계를 멈추고 현재 상태를 파일에 저장한다면 시간을 절약할 수 있다. 이 파일을 스냅숏 이라고 한다.&lt;/p>
&lt;ul>
&lt;li>스냅숏은 과거 특정 시점의 상태로 변경 불가능하다.&lt;/li>
&lt;li>스냅숏을 저장하고나면 상태 기계는 더 이상 최초 이벤트에서 시작할 필요가 없어진다.
&lt;ul>
&lt;li>어느 시점에 만들어졌는지 확인 후 그 시점부터 이벤트 처리를 시작한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>지갑 서비스 같은 금융 애플리케이션은 00:00에 스냅숏을 찍는 일이 많다.&lt;/p>
&lt;ul>
&lt;li>그래야만 재무팀이 당일 발생한 모든 거래를 확인할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>스냅숏을 사용하면 읽기 전용 상태 기계는 해당 데이터가 포함된 스냅숏 하나만 로드하면 된다.&lt;/p>
&lt;p>일반적으로 스냅숏은 거대한 이진 파일이며, 일반적으로는 HDFS(Hadoop Distributed File System)과 같은 &lt;strong>객체 저장소&lt;/strong>에 저장한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_20.png"
width="1976"
height="952"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_20_hu60d89f48231c83556200ca53f86f867b_88111_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_20_hu60d89f48231c83556200ca53f86f867b_88111_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="스냅숏"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="498px"
>&lt;/p>
&lt;p>모든 것이 파일 기반일 때 시스템은 컴퓨터 하드웨어의 I/O 처리량을 그 한계까지 최대로 활용할 수 있다.&lt;/p>
&lt;h3 id="신뢰할-수-있는-이벤트-소싱">신뢰할 수 있는 이벤트 소싱&lt;/h3>
&lt;p>로컬 파일 기반의 솔루션 성능은 원격 카프카나 데이터베이스에 저장된 데이터를 액세스하는 시스템보다는 좋다고 할 수 있으나, 로컬 디스크에 데이터를 저장하는 서버는 더 이상 무상태 서버가 아니며, 단일 장애 지점이 될 수 있다.&lt;/p>
&lt;h4 id="신뢰성-분석">신뢰성 분석&lt;/h4>
&lt;p>개념적으로 서버 노드가 하는 일은 데이터와 연산이라는 두 가지 개념에 관계되어 있다.&lt;/p>
&lt;p>그러나 데이터 내구성이 보장되는 한, 계산 결과는 코드를 다른 노드에서 돌리면 복구할 수 있다.&lt;/p>
&lt;ul>
&lt;li>데이터 신뢰성이 훨씬 중요하다.&lt;/li>
&lt;li>데이터가 손실되면 계산 결과를 복원할 방법이 없기 때문&lt;/li>
&lt;/ul>
&lt;p>이러한 이유로 시스템 신뢰성 문제는 대부분 데이터 신뢰성 문제이다.&lt;/p>
&lt;ul>
&lt;li>파일 기반 명령
&lt;ul>
&lt;li>이벤트는 명령을 통해 만들어지니 명령의 신뢰성만 강력하게 보장하면 충분할 것 같지만 아니다.&lt;/li>
&lt;li>이벤트 생성은 결정론적 과정이 아니며, 난수나 외부 입축력 등의 무작위적 요소가 포함될 수 있다.&lt;/li>
&lt;li>명령의 신뢰성 만으로는 이벤트의 재현성을 보장할 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>파일 기반 이벤트
&lt;ul>
&lt;li>상태(잔액)에 변화를 가져오는 과저의 사실이다.&lt;/li>
&lt;li>이벤트는 불변이며 상태 재구성에 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>파일 기반 상태
&lt;ul>
&lt;li>이벤트 목록을 재생하면 언제든 다시 만들 수 있다.(이벤트 목록의 신뢰성을 보장하면 따라온다.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 스냅숏
&lt;ul>
&lt;li>이벤트 목록을 재생하면 언제든 다시 만들 수 있다.(이벤트 목록의 신뢰성을 보장하면 따라온다.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;strong>높은 신뢰성을 보장할 유일한 데이터는 이벤트 뿐&lt;/strong>이다.&lt;/p>
&lt;h4 id="합의">합의&lt;/h4>
&lt;p>높은 안정성을 제공하려면 이벤트 목록을 여러 노드에 복제해야 하며 다음을 보장해야한다.&lt;/p>
&lt;ul>
&lt;li>데이터 손실 없음&lt;/li>
&lt;li>로그 파일 내 데이터의 상대적 순서는 모든 노드에 동일&lt;/li>
&lt;/ul>
&lt;p>이러한 목표를 달성하는 데는 &lt;strong>합의 기반 복제&lt;/strong>(consensus-based replication) 방안이 적합하다.&lt;/p>
&lt;ul>
&lt;li>모든 노드가 동일한 이벤트 목록에 합의하도록 보장한다.&lt;/li>
&lt;/ul>
&lt;p>래프트 알고리즘을 사용하면 노드의 절반 이상이 온라인 상태일 때 그 모두에 보관된 추가 전용 리스트는 같은 데이터를 가진다.&lt;/p>
&lt;p>래프트 알고리즘에서 노드는 세 가지 역할을 가질 수 있다.&lt;/p>
&lt;ul>
&lt;li>리더&lt;/li>
&lt;li>후보&lt;/li>
&lt;li>팔로어&lt;/li>
&lt;/ul>
&lt;p>최대 하나의 노드만 클러스터의 리더가 되고 나머지 노드는 팔로어가 된다.&lt;/p>
&lt;p>리더는 외부 명령을 수신하고 클러스터 노드 간에 데이터를 안정적으로 복제하는 역할을 담당한다.&lt;/p>
&lt;h4 id="고신뢰성-솔루션">고신뢰성 솔루션&lt;/h4>
&lt;p>복제 매커니즘을 활용하면 파일 기반 이벤트 소싱 아키텍처에서 단일 장애 지점 문제를 없앨 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_21.png"
width="1588"
height="982"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_21_hu3c5751a41f69567bce8871525f956c20_71049_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_21_hu3c5751a41f69567bce8871525f956c20_71049_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="래프트 노드 그룹"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="388px"
>&lt;/p>
&lt;p>리더는 외부 사용자로 부터 들어오는 명령 요청을 받아 이벤트로 변환하고 로컬 이벤트 목록에 추가한다.&lt;/p>
&lt;ul>
&lt;li>래프트 알고리즘은 새로운 이벤트를 모든 팔로워에 복제한다.&lt;/li>
&lt;/ul>
&lt;p>팔로어를 포함한 모든 노드가 이벤트 목록을 처리하고 상태를 업데이트한다.&lt;/p>
&lt;p>래프트 알고리즘은 리더와 팔로어가 동일한 이벤트 목록을 갖도록 하며, 이벤트 소싱은 동일한 이벤트 목록에서 항상 동일한 상태가 만드러지도록 한다.&lt;/p>
&lt;hr>
&lt;p>리더에 장애가 발생하면 래프트 알고리즘은 나머지 정상 노드 중에서 새 리더를 선출한다.&lt;/p>
&lt;p>유의할 것은 리더 장애가 명령 목록이 이벤트로 변환되기 전에 발생 하는 경우이다.&lt;/p>
&lt;ul>
&lt;li>클라이언트는 시간 초과 또는 오류 응답을 받고 새로 선출된 리더에게 같은 명령을 다시 보내야한다.&lt;/li>
&lt;/ul>
&lt;p>팔로어에 장애가 생기면 래프트는 죽은 노드가 다시 시작되거나 새로운 노드로 대체될 때 까지 기한없이 재시도하여 장애를 처리한다.&lt;/p>
&lt;h3 id="분산-이벤트-소싱">분산 이벤트 소싱&lt;/h3>
&lt;p>100만 TPS를 처리하려면 서버 한 대로는 충분하지 않다.&lt;/p>
&lt;p>지금까지 설계한 아키텍처는 신뢰성 문제는 해결하지만 다른 문제가 있다.&lt;/p>
&lt;ul>
&lt;li>전자 지갑 업데이트 결과는 즉시 받고 싶다.
&lt;ul>
&lt;li>CQRS 시스템에서는 요청/응답 흐름이 느릴 수 있다.&lt;/li>
&lt;li>클라이언트가 지갑의 업데이트 시점을 정확히 알 수 없어 주기적 폴링에 의존해야 할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단일 래프트 그룹의 용량은 제한되어 있다.
&lt;ul>
&lt;li>일정 규모 이상에서는 데이터를 샤딩하고 분산 트랜잭션을 구현해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="풀-vs-푸시">풀 vs 푸시&lt;/h4>
&lt;p>풀 모델에서는 외부 사용자가 읽기 전용 상태 기계에서 주기적으로 실행 상태를 읽는다.&lt;/p>
&lt;p>모델은 실시간이 아니므로 읽는 주기를 너무 짧게 설정하면 지갑 서비스에 과부하가 걸릴 수도 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_22.png"
width="1734"
height="1226"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_22_hu0b1fb98fa497bc80e07967ba8b35831a_91564_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_22_hu0b1fb98fa497bc80e07967ba8b35831a_91564_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="풀 모델"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>외부 사용자와 이벤트 소싱 사이에 역방향 프락시를 추가하면 개선될 수 있다.&lt;/p>
&lt;p>외부 사용자는 역방향 프락시에 명령을 보내고, 역방향 프락시는 명령을 이벤트 소싱 노드로 전달하는 한편 주기적으로 실행 상태를 질의한다.&lt;/p>
&lt;ul>
&lt;li>여전히 통신이 실시간으로 이루어지지는 앖지만 클라이언트의 로직은 단순해진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_23.png"
width="1800"
height="1106"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_23_hubdb7fad968784b5f01bb1aa614072f63_92888_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_23_hubdb7fad968784b5f01bb1aa614072f63_92888_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="역방향 프락시가 있는 풀 모델"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>역방향 프락시르 두고 나면 읽기 전용 상태 기계를 수정하여 응답 속도를 높힐 수 있다.&lt;/p>
&lt;p>일기 전용 상태 기계로 하여금 이벤트를 수신하자마자 &lt;strong>실행 상태를 역방향 프락시에 푸시&lt;/strong>하도록 하면, 사용자에게 실시간으로 응답이 이루어지는 느낌을 줄 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_24.png"
width="1762"
height="1098"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_24_hub9e1ac66749a75fd0bc98ec293c14240_97776_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_24_hub9e1ac66749a75fd0bc98ec293c14240_97776_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="푸시 모델"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="385px"
>&lt;/p>
&lt;h4 id="분산-트랜잭션-1">분산 트랜잭션&lt;/h4>
&lt;p>모든 이벤트 소싱 노드 그룹이 동기적 실행 모델을 채택하면 TC/C나 사가 같은 분산 트랜잭션 솔루션을 재사용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>키의 해시 값을 2로 나누어 데이터가 위치할 파티션을 정한다고 가정&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview-2/12/img_25.png"
width="1428"
height="1564"
srcset="https://codemario318.github.io/post/system-design-interview-2/12/img_25_hu8559c9e43bde10a3e1479c822f75107b_153809_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview-2/12/img_25_hu8559c9e43bde10a3e1479c822f75107b_153809_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="최종 설계"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="219px"
>&lt;/p>
&lt;p>송금에는 2개의 분산 연산(&lt;code>A: -$1&lt;/code>, &lt;code>C: +$1&lt;/code>)이 필요하다.&lt;/p>
&lt;ol>
&lt;li>A가 사가 조정자에게 분산 트랜잭션을 보낸다.(&lt;code>A: -$1&lt;/code>, &lt;code>C: +$1&lt;/code>)&lt;/li>
&lt;li>사가 조정자는 단계별 상태 테이블에 레코드를 생성하여 트랜잭션 상태를 추적한다.&lt;/li>
&lt;li>사가 조정자는 작업 순서를 검토한 후 &lt;code>A: -$1&lt;/code>를 먼저 처리하기로 결정하고 &lt;code>A: -$1&lt;/code> 명령을 계정 정보 A가 있는 파티션 1로 보낸다.&lt;/li>
&lt;li>파티션 1의 래프트 리더는 &lt;code>A: -$1&lt;/code> 명령을 수신하고 명령 목록에 저장한 후, 명령의 유효성을 검사하고 이벤트로 변환한다.
&lt;ul>
&lt;li>래프트 합의 알고리즘을 통해 동기화가 완료되면 이벤트가 실행된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이벤트가 동기화도면 파이션 1의 이벤트 소싱 프레임워크가 CQRS를 사용하여 데이터를 읽기 경로로 동기화한다. 읽기 경로는 상태 및 실행 상태를 재구성한다.&lt;/li>
&lt;li>파티션 1의 읽기 경로는 이벤트 소싱 프레임워크를 호출한 사가 조정자에게 상태를 푸시한다.&lt;/li>
&lt;li>사가 조정자는 파티션 1에서 성공 상태를 수신한다.&lt;/li>
&lt;li>사가 조정자는 단계별 상태 테이블에 파티션 1의 작업이 성공했음을 나타내는 레코드를 생성한다.&lt;/li>
&lt;li>첫 번째 작업이 성공했으므로 사가 조정자는 두 번째 작업인 &lt;code>C: +$1&lt;/code>를 실행한다. 조정자는 계정 C의 정보가 포함된 파티션 2에 명령을 보낸다.&lt;/li>
&lt;li>파티션 2의 래프트 리더가 &lt;code>C: +$1&lt;/code> 명령을 수신하여 명령 목록에 저장한다. 유효한 명령이면 이벤트로 변환되고 데이터를 동기화한다. 동기화가 끝나면 해당 이벤트가 실행된다.&lt;/li>
&lt;li>이벤트가 동기화되면 파티션 2의 이벤트 소싱 프레임워크는 CQRS를 사용하여 데이터 읽기 경로로 동기화한다. 읽기 경로는 상태 및 실행 상태를 재구성ㅎ나다.&lt;/li>
&lt;li>파티션 2읽기 경로는 이벤트 소싱 프레임위크를 호출한 사가 조장자에 상태를 푸시한다.&lt;/li>
&lt;li>사가 조정자는 파티션 2로부터 성공 상태를 받는다.&lt;/li>
&lt;li>사가 조정자는 단계별 상태 테이블에 파티션 2의 작업이 성공했음을 나타내는 레코드를 생성한다.&lt;/li>
&lt;li>모든 작업이 성공하고 분산 트랜잭션이 완료되며 사가 조정자는 호출자에게 결과를 응답한다.&lt;/li>
&lt;/ol>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>이번 장에서는 초당 100만 건 이상 결제 명령을 처리할 수 있는 지갑 서비스를 설계해 보았다.&lt;/p>
&lt;ol>
&lt;li>레디스 같은 인베모리 키-값 저장소를 사용하는 솔루션
&lt;ul>
&lt;li>데이터가 내구성이 없는 문제점&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>인메모리 캐시를 트랜잭션 데이터베이스로 바꿈
&lt;ul>
&lt;li>여러 노드에 걸친 분산 트랜잭션을 지원하기 위한 2PC, TC/C, 사가와 같은 트랜잭션 프로토콜&lt;/li>
&lt;li>데이터 감사가 어렵다는 문제점&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이벤트 소싱 방안
&lt;ol>
&lt;li>외부 데이터베이스와 큐를 사용
&lt;ul>
&lt;li>성능이 떨어짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>명령 이벤트, 상태 데이터를 로컬 파일 시스템에 저장하도록 개선
&lt;ul>
&lt;li>데이터를 한 곳에 두면 SPOF가 되는 문제가 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>래프트 합의 알고리즘을 사용하여 이벤트 목록을 여러 노드에 복제&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>이벤트 소싱에 CQRS 개념 도입&lt;/li>
&lt;li>외부 사용자에게 비동기 이벤트 소싱 프레임워크를 동기식처럼 제공하기 위한 역방향 프락시 추가&lt;/li>
&lt;li>TC/C, 사가 프로토콜을 사용하여 어러 노드에 명령 실행을 조율하는 방법&lt;/li>
&lt;/ol></description></item></channel></rss>