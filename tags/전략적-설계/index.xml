<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>전략적 설계 on Mario Blog</title><link>https://codemario318.github.io/tags/%EC%A0%84%EB%9E%B5%EC%A0%81-%EC%84%A4%EA%B3%84/</link><description>Recent content in 전략적 설계 on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Wed, 05 Mar 2025 11:27:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/%EC%A0%84%EB%9E%B5%EC%A0%81-%EC%84%A4%EA%B3%84/index.xml" rel="self" type="application/rss+xml"/><item><title>전략적 설계: 도메인 지식 찾아내기</title><link>https://codemario318.github.io/post/learning-domain-driven-design/2/</link><pubDate>Wed, 05 Mar 2025 11:27:49 +0900</pubDate><guid>https://codemario318.github.io/post/learning-domain-driven-design/2/</guid><description>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/2/cover.png" alt="Featured image of post 전략적 설계: 도메인 지식 찾아내기" />&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;운영환경에 배포되는 것은 도메인 전문가의 지식이 아니라 개발자의 이해 혹은 오해다.&amp;rdquo; - Alberto Brandolini&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>이번 장에서는 비즈니스 도메인 분석 주제를 좀 더 깊이 있게 &lt;strong>하위 도메인 내부에서 일어나는 일&lt;/strong>, 즉 &lt;strong>비즈니스 기능&lt;/strong>과 &lt;strong>로직&lt;/strong>에 초첨을 맞춘다.&lt;/p>
&lt;p>효과적인 커뮤니케이션과 지식 공유를 위한 도메인 주도 설계 도구인 &lt;strong>유비쿼터스 언어&lt;/strong>를 배우고, 이를 통해 비즈니스 도메인의 복잡성을 배우며, 비즈니스 로직을 소프트웨어 모델로 만들고 구현하는데 이를 활용한다.&lt;/p>
&lt;h2 id="비즈니스-문제">비즈니스 문제&lt;/h2>
&lt;p>소프트웨어 시스템은 &lt;strong>비즈니스 문제를 해결하는 솔루션&lt;/strong>이다.&lt;/p>
&lt;p>비즈니스 도메인에서 &lt;strong>문제&lt;/strong>(problem)의 의미는 광범위하다.&lt;/p>
&lt;ul>
&lt;li>워크플로와 프로세스 최적화&lt;/li>
&lt;li>수작업 최소화&lt;/li>
&lt;li>자원 관리&lt;/li>
&lt;li>의사결정 지원&lt;/li>
&lt;li>데이터 관리 등&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>비즈니스 문제&lt;/strong>는 &lt;strong>비즈니스 도메인과 하위 도메인의 모든 수준에서 발생&lt;/strong>할 수 있다.&lt;/p>
&lt;p>하위 도메인은 &lt;strong>세분화된 문제 도메인&lt;/strong>(problem domain)으로 특정 비즈니스 기능에 대한 솔루션을 제공하는 것이 목적이다.&lt;/p>
&lt;ul>
&lt;li>지식 관리 하위 도메인: 정보를 저장하고 추출하는 프로세스&lt;/li>
&lt;li>어음 교환 하위 도메인: 재무 거래 실행 프로세스를 최적화하는 솔루션&lt;/li>
&lt;li>회계 하위 도메인: 기업의 자금을 관리하는 솔루션&lt;/li>
&lt;/ul>
&lt;h2 id="도메인-지식-찾아내기">도메인 지식 찾아내기&lt;/h2>
&lt;p>효과적인 소프트웨어 솔루션을 서례하려면 적어도 &lt;strong>기본적인 비즈니스 도메인 지식&lt;/strong>이 있어야한다.&lt;/p>
&lt;p>이러한 지식은 도메인 전문가의 몫으로, 개발자가 도메인 전문가가 되는 것은 비효율적이다.&lt;/p>
&lt;p>따라서 &lt;strong>도메인 전문가를 이해&lt;/strong>하는 것이 더 효율적이며, 이를 위해 그들이 쓰는 &lt;strong>동일한 비즈니스 용어&lt;/strong>를 사용하는 것이 중요하다.&lt;/p>
&lt;p>효과적은 소프트웨어는 도메인 전문가가 &lt;strong>문제를 생각하는 방식&lt;/strong>, 즉 &lt;strong>멘탈 모델&lt;/strong>을 모방해야한다.&lt;/p>
&lt;p>비즈니스 문제와 요구사항 이면에 있는 이유에 대한 이해가 없다면 솔루션은 비즈니스 요구사항을 소스코드로 &amp;lsquo;번역&amp;rsquo;한 것에 불과하다.&lt;/p>
&lt;p>알베르토 브랜돌리니는 &lt;strong>소프트웨어 개발&lt;/strong>은 &lt;strong>배우는 과정&lt;/strong>이고, &lt;strong>작동하는 코드&lt;/strong>는 그 부산물이라고 설명한다.&lt;/p>
&lt;p>이는 소프트웨어 프로젝트의 성공은 문제 해결을 위해 문제를 배우는(이해하는) 것이 중요하다고 해석될 수 있고, 이는 도메인 전문가와 소프트웨어 엔지니어 간의 &lt;strong>효과적인 지식 공유&lt;/strong>에 달렸다.&lt;/p>
&lt;p>결국 소프트웨어 엔지니어와 도메인 전문가의 효과적인 지식 공유를 위해 &lt;strong>효과적인 커뮤니케이션&lt;/strong>이 필요하다.&lt;/p>
&lt;h2 id="커뮤니케이션">커뮤니케이션&lt;/h2>
&lt;p>거의 모든 소프트웨어 프로젝트에는 도메인 전문가를 비롯한 다양한 역할의 이해관계자의 협업이 필요하다.&lt;/p>
&lt;ul>
&lt;li>엔지니어, 디자이너, 프로젝트 매니저, 테스터, 분석가 등&lt;/li>
&lt;/ul>
&lt;p>좋은 결과물은 모든 참여자가 얼마나 잘 협력할 수 있느냐에 달려있다.&lt;/p>
&lt;ul>
&lt;li>해결하려는 문제에 대해 모든 이해관계자가 동의하고 있는가?&lt;/li>
&lt;li>개발하고 있는 솔루션의 기능 또는 비기능 요구사항 중 서로 충돌하는 가정이 있는가? 등&lt;/li>
&lt;/ul>
&lt;p>모든 참여자의 협력을 이끌어내기 위해 프로젝트와 연관된 모든 것에 대한 합의와 일치는 프로젝트의 성공에 필수이다.&lt;/p>
&lt;p>효과적인 커뮤니케이션이 필수적이지만 소프트웨어 프로젝트에서 찾기는 여러운데, 그 이유중 하나는 비즈니스 담당자와 엔지니어가 서로 직접 협업하지 않는 것이다.&lt;/p>
&lt;p>대부분 도메인 전문가가 여러 이해 관계자를 거쳐 도메인 지식을 일반적으로 엔지니어에게 전달한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/2/img.png"
width="724"
height="289"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/2/img_huc2dda173e2ce7892d3c1c9e316e63c7f_120237_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/2/img_huc2dda173e2ce7892d3c1c9e316e63c7f_120237_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="소프트웨어 프로젝트에서의 지식 공유 흐름"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="601px"
>&lt;/p>
&lt;p>이러한 과정에서 도메인 지식은 &lt;strong>분석 모델&lt;/strong>(analysis model, 명세?)로 알려진 엔지니어 친화적인 형태로 &lt;strong>변환&lt;/strong>되어 전달되며, 이러한 과정에서 비즈니스 문제 해결에 중요한 도메인 지식이 손실된다. (반대로도 마찬가지)&lt;/p>
&lt;p>이러한 문서화된 커뮤니케이션은 최신 정보를 담아내지 못하며, 결국 소스코드가 이후 프로젝트 유지관리할 엔지니어에게까지도 비즈니스 도메인 지식을 전달하는 데 사용되기 때문에 비즈니스 도메인에 대한 이해는 더욱 멀어진다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/2/img_1.png"
width="723"
height="245"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/2/img_1_hucb3fcbc7e85658086ab64513b0e94320_105756_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/2/img_1_hucb3fcbc7e85658086ab64513b0e94320_105756_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="모델 변환"
class="gallery-image"
data-flex-grow="295"
data-flex-basis="708px"
>&lt;/p>
&lt;p>이런 소프트웨어 개발 과정은 전화 게임과 비슷하게 점점 왜곡된 형태로 전달될 수 있고, 이런 정보는 소프트웨어 엔지니어가 잘못된 솔루션을 구현하게 하거나, 솔루션이 올바르더라도 해결하려는 문제가 잘못된 경우로 이어질 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/2/img_2.png"
width="1280"
height="720"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/2/img_2_hu077d8b1cc3d9451694c409f982a6d8df_975481_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/2/img_2_hu077d8b1cc3d9451694c409f982a6d8df_975481_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="고요속 외침"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>이 같은 문제를 해결하기 위해 도메인 주도 설계는 도메인 전문가가 소프트웨어 엔지니어에게 지식을 전달하기 위한 더 나은 방법을 제안하며, 유비쿼터스 언어가 바로 그것이다.&lt;/p>
&lt;h2 id="유비쿼터스-언어란-무엇인가">유비쿼터스 언어란 무엇인가?&lt;/h2>
&lt;p>유비쿼터스 언어는 프로젝트 참가자들이 효과적으로 소통하기 위해 변환에 의존하지 말고 같은 언어를 사용하는 것을 의미하며, 이는 도메인 주도 설계의 초석이 된다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;우리가 말하는 상식은 실제로 일반적이지 않다.&amp;rdquo; - Voltaire&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>전통적인 소프트웨어 개발 생애 주기에서 변호나이 어떻게 일어나는지 정리해보면 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>도메인 지식 -&amp;gt; 분석 모델&lt;/li>
&lt;li>분석 모델 -&amp;gt; 요구사항&lt;/li>
&lt;li>요구사항 -&amp;gt; 시스템 설계&lt;/li>
&lt;li>시스템 설계 -&amp;gt; 소스코드&lt;/li>
&lt;/ul>
&lt;p>도메인 주도 설계에서는 도메인 지식을 계속해서 변환하는 대신, 비즈니스 도메인을 설명하기 위한 단일화된 언어 체계를 세운다(유비쿼터스 언어).&lt;/p>
&lt;p>소프트웨어 프로젝트의 모든 이해 관계자는 비즈니스 도메인을 설명할 때 유비쿼터스 언어를 사용해야 하며, 핵심은 도메인 전문가가 유비쿼터스 언어를 사용해 비즈니스 도메인을 추론하는 데 편안함을 느껴야 하ㄴ다는 점이다.&lt;/p>
&lt;p>모든 프로젝트 참가자의 공통된 이해는 오직 유비쿼터스 언어와 그 용어의 지속적인 사용을 통해서만 함양될 수 있다.&lt;/p>
&lt;h2 id="비즈니스-언어">비즈니스 언어&lt;/h2>
&lt;p>유비쿼터스 언어는 비즈니스 언어이므로 기술 용어는 빼고 비즈니스 도메인에 관련된 용어로만 구성해야 한다.&lt;/p>
&lt;p>유비쿼터스 언어는 도메인 전문가의 이해와 비즈니스 도메인에 대한 멘탈 모델을 쉽게 이해할 수 있는 관점으로 표현하는 것을 목표로 한다.&lt;/p>
&lt;h3 id="시나리오">시나리오&lt;/h3>
&lt;p>광고 캠페인 관리 시스템 예시를 살펴본다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>비즈니스 언어&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>광고 캠페인은 다양한 창의적인 자료를 전시할 수 있다.&lt;/li>
&lt;li>캠페인은 최소한 하나의 광고 할당이 활성화되어야 게시된다.&lt;/li>
&lt;li>판매 커미션은 거래가 승인된 후 회계 처리된다.&lt;/li>
&lt;/ul>
&lt;p>모든 문장은 비즈니스 도메인을 바라보는 도메인 전문가의 시각을 반영한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>기술적 언어&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>광고의 아이프레임(iframe)은 HTML 파일을 표시한다.&lt;/li>
&lt;li>캠페인은 &amp;lsquo;활성-할당(active-placement)&amp;rsquo; 테이블에 하나의 연관 레코드가 있어야 게시된다.&lt;/li>
&lt;li>판매 커미션은 거래(transaction) 테이블과 판매-승인(aspproved-sales) 테이블의 연관 레코드에 근거하여 처리된다.&lt;/li>
&lt;/ul>
&lt;p>순수하게 기술적이어서 도메인 전문가가 이해하기에 명확하지 않을 것이다.&lt;/p>
&lt;hr>
&lt;p>개발자가 기술적인 관점에서만 비즈니스 도메인을 바라보는게 익숙하다면, 비즈니스 로직을 완전히 이해할 수 없거나, 비즈니스 로직이 왜 그렇게 운영되는지 이해할 수 없어 결국 효과적으로 솔루션을 구현하는 능력이 제한될 것이다.&lt;/p>
&lt;ul>
&lt;li>실제 비즈니스에서 해결하려는 문제의 를 자체적인 해석을 통해 변환되므로 근본적인 이해와 멀어질 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="일관성">일관성&lt;/h3>
&lt;p>유비쿼터스 언어는 반드시 정확하고 일관성이 있어야 한다.&lt;/p>
&lt;ul>
&lt;li>가정할 필요가 없어야 하고 비즈니스 도메인의 로직을 명료하게 표현해야 함&lt;/li>
&lt;/ul>
&lt;p>모호성이 커뮤니케이션을 방해하기 때문에 용어는 오직 하나의 의미를 가져야한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>모호한 용어&lt;/strong>&lt;/p>
&lt;p>비즈니스 도메인에서는 &lt;strong>정책&lt;/strong>(policy)이라는 용어가 여러 의미를 가지며, 정확한 의미는 맥락에 따라 사람 간의 상호작용을 통해서만 알 수 있다.&lt;/p>
&lt;p>규제 규칙, 보험 계약 이라는 정책을 예시로 들면,&lt;/p>
&lt;p>소프트웨어는 이러한 모호성에 잘 대처하지 못하며, &amp;ldquo;정책&amp;quot;이라는 개체(entity)를 코드로 모델링하기가 어려울 수 있다.&lt;/p>
&lt;p>유비쿼터스 언어는 용어마다 단일 의미를 갖게 하기 때문에 &amp;ldquo;정책&amp;quot;의 경우 &lt;strong>규제 규칙&lt;/strong>(regulatory rule)과 &lt;strong>보험 계약&lt;/strong>(insurance contract) 두 용어를 사용하여 명확한 모델을 만들어야 한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>동의어&lt;/strong>&lt;/p>
&lt;p>유비쿼터스 언어에서 두 용어는 서로 바꿔 사용할 수 없다.&lt;/p>
&lt;p>&lt;strong>사용자&lt;/strong>라는 용어는 수많은 시스템에서 사용하지만, 도메인 전문가의 언어로 신중하게 설명하면 &lt;strong>사용자&lt;/strong>와 &lt;strong>방문자&lt;/strong>, &lt;strong>관리자&lt;/strong>, &lt;strong>계정&lt;/strong> 등의 다른 용어가 혼용된다는 것을 발견할 수 있다.&lt;/p>
&lt;p>&lt;strong>사용자&lt;/strong>가 맥락에 따라 다른 역할을 가지고 다른 행동을 하는 것 처럼 동의어는 대부분 맥락에 따라 다른 개념을 가지며, 이는 비즈니스 도메인에 대한 이해를 복잡하게 만들 수 있다.&lt;/p>
&lt;p>따라서 특정 컨텍스트 안에서 각각의 용어를 사용해야하며, 용어의 차이점을 이해해야 간단하고 명확한 모델을 구축하고 비즈니스 도메인 객체의 구현이 가능해진다.&lt;/p>
&lt;h2 id="비즈니스-도메인-모델">비즈니스 도메인 모델&lt;/h2>
&lt;p>모델링 관점에서 유비쿼터스 언어를 살펴보자&lt;/p>
&lt;h3 id="모델이란-무엇인가">모델이란 무엇인가?&lt;/h3>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;모델이란 사물이나 현상에서 의도한 관점만 강조하고 다른 측면은 무시하여 간략히 표현한 것이다. 즉 특정 용도를 마음에 둔 추상화의 결과다.&amp;rdquo; - Rebecca Wirfs-Brock&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>모델은 실세계의 복제가 아니라 &lt;strong>실제 시스템을 이해하는 데 우움을 주는 인간의 창조물&lt;/strong>이다.&lt;/p>
&lt;p>좋은 예시로 지도가 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/2/img_3.png"
width="723"
height="349"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/2/img_3_hu17fce62deaeef7427ef9cc3a81256c34_643147_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/2/img_3_hu17fce62deaeef7427ef9cc3a81256c34_643147_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="목적에 따른 지도들"
class="gallery-image"
data-flex-grow="207"
data-flex-basis="497px"
>&lt;/p>
&lt;p>각 지도는 특정 목적을 지원하는 데 충분한 자료만 담고 있으며, 이 특정 목적이 해당 지도가 풀고자 하는 문제이다.&lt;/p>
&lt;h3 id="효과적인-모델링">효과적인 모델링&lt;/h3>
&lt;p>모든 모델에는 목적이 있고 효과적인 모델은 그 목적을 달성하는 데 필요한 세부사항만 포함한다.&lt;/p>
&lt;ul>
&lt;li>지하철 노선도는 거리를 측정할 수 없음&lt;/li>
&lt;/ul>
&lt;p>유용한 모델은 실세계의 복사본이 아니라 문제를 해결하려는 의도가 있으며, 그 목적에 필요한 정보만을 제공해야 한다.&lt;/p>
&lt;p>모델은 본질적으로 추상화의 결과이며, 추상화는 &lt;strong>불필요한 상세 정보를 생략&lt;/strong>하여 복잡한 문제를 다룰 수 있게하고 당면한 문제를 푸는 데 필요한 정보만 남게 한다.&lt;/p>
&lt;p>반대로 비효과적인 추상화는 &lt;strong>필요한 정보를 제거&lt;/strong>하거나, &lt;strong>불필요한 정보를 포함&lt;/strong>해 잡음을 유발하는 것이다.&lt;/p>
&lt;p>추상화의 목적은 모호함이 아니라 절대적으로 정확할 수 있는 새로운 의미론적 수준을 만드는 것이다.&lt;/p>
&lt;h3 id="비즈니스-도메인-모델링">비즈니스 도메인 모델링&lt;/h3>
&lt;p>유비쿼터스 언어를 발전시키는 것은 사실상 비즈니스 도메인 모델을 구축하는 것이다.&lt;/p>
&lt;ul>
&lt;li>비즈니스가 기능을 어떻게 구현하느냐에 대한 도메인 전문가의 사고 프로세스인 멘탈 모델을 포착해야함&lt;/li>
&lt;li>관련된 비즈니스 엔티티와 그것의 행동, 인과 관계, 불변성 등을 반영해야함&lt;/li>
&lt;/ul>
&lt;p>유비쿼터스 언어는 도메인의 모든 가능한 상세 정보를 포함하는게 아닌 소프트웨어가 해결하고자 하는 특정 문제를 해결하는 데 필요한 만큼의 비즈니스 도메인 관점을 포함하면 된다.&lt;/p>
&lt;p>이 때문에 엔지니어링 팀과 도메인 전문가의 효과적인 커뮤니케이션은 필수적이며, 비즈니스 도메인이 복잡할 수록 커뮤니케이션의 중요성은 커진다.&lt;/p>
&lt;h3 id="지속적인-노력">지속적인 노력&lt;/h3>
&lt;p>유비쿼터스 언어를 정형화(formulation) 하려면 언어의 소유자인 도메인 전문가와의 상호작용이 필요하다.&lt;/p>
&lt;p>오직 실제 도메인 전문가와의 상호작용만이 비즈니스 도메인에 대한 부정확함이나 잘못된 가정, 또는 전체적인 이해 오류를 발견할 수 있다.&lt;/p>
&lt;p>모든 이해관계자는 모든 커뮤니케이션에 유비쿼터스 언어를 지속적으로 사용해서 지식 공유를 확산하고 비즈니스 도메인에 대한 공유된 이해를 강화해야한다.&lt;/p>
&lt;ul>
&lt;li>테스트, 문서화, 소스코드 자체 등&lt;/li>
&lt;/ul>
&lt;p>가장 중요한 점은 유비쿼터스 언어를 발전시키는 것은 진행형이라는 것으로, 지속해서 검증하고 발전시켜야 한다.&lt;/p>
&lt;h3 id="도구">도구&lt;/h3>
&lt;p>유비쿼터스 언어를 수집하고 관리하는 과정을 돕는 도구와 기술이 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>위키&lt;/strong>&lt;/p>
&lt;p>유비쿼터스 언어를 수집하고 관리하는 &lt;strong>용어집&lt;/strong>(glossary)으로 사용될 수 있다.&lt;/p>
&lt;ul>
&lt;li>도메인의 용어에 대한 정보를 얻을 수 있는 거점 역할&lt;/li>
&lt;li>새로운 팀원이 쉽게 적응하게 해줌&lt;/li>
&lt;/ul>
&lt;p>용어집을 유지보수하는 것이 매우 중요하기 때문에 유비쿼터스 언어가 변경되면 모든 팀원이 수정할 수 있게 독려해야 한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>유스케이스 또는 거킨테스트&lt;/strong>&lt;br>
용어집은 장점이 명백하지만 엔티티의 이름, 과정, 역할 등의 명사(noun)에만 효과적이라는 본질적인 한계가 존재한다.&lt;/p>
&lt;p>행동(behavior)은 단순히 명사와 관련된 동사의 목록이 아닌 &lt;strong>규칙&lt;/strong>, &lt;strong>가정&lt;/strong>, &lt;strong>불변성&lt;/strong>을 가진 실제 비즈니스 로직이다.&lt;/p>
&lt;p>이러한 개념은 용어집으로 문서화하기 훨씬 어렵기 때문에 용어집은 &lt;strong>유스케이스&lt;/strong>또는 &lt;strong>거킨테스트&lt;/strong>(Gherkin test)처럼 행동을 포착하는 데 적합한 다른 도구와 함께 사용하는 것이 좋다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>거킨테스트&lt;/strong>&lt;br>
거킨테스트(Gherkin Test)는 행동 주도 개발(BDD, Behavior-Driven Development)에서 사용하는 테스트 명세 언어로 개발자가 아닌 이해관계자들도 쉽게 이해할 수 있는 자연어에 가까운 형태로 테스트 시나리오를 작성할 수 있게 해줌&lt;/p>
&lt;ul>
&lt;li>Feature: 테스트할 기능이나 사용자 스토리를 설명합니다.&lt;/li>
&lt;li>Scenario: 특정 상황이나 테스트 케이스를 정의합니다.&lt;/li>
&lt;li>Given: 테스트의 전제 조건을 설명합니다.&lt;/li>
&lt;li>When: 사용자의 행동이나 이벤트를 설명합니다.&lt;/li>
&lt;li>Then: 예상되는 결과나 상태를 설명합니다.&lt;/li>
&lt;li>And, But: 추가적인 조건이나 결과를 설명할 때 사용합니다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>거긴 언어(Gherkin language)로 작성된 자동화 테스트는 유비쿼터스 언어를 포착하기에 좋은 언어일 뿐 아니라 도메인 전문가와 소프트웨어 엔지니어의 간극을 메우는 보조 도구로서의 역할을 할 수 있다.&lt;/p>
&lt;ul>
&lt;li>도메인 전문가가 테스트를 읽고 시스템의 기대 행동을 검증할 수 있다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Scenario: 에이전트에게 새로운 지원 케이스에 대해 알린다.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Given: 빈센트 줄스는 다음 내용을 담은 새로운 지원 케이스를 제출한다.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;#34;&amp;#34; 나는 AWS Infinidash를 설정하는 데 도움이 필요하다 &amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> When: 티켓이 울프 에게 할당된다.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Then: 에이전트는 새로운 티켓에 대해 알림을 받는다.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>거킨 기반의 테스트 스위트를 관리하는 것은 어려운 일이지만 복잡한 비즈니스 도메인의 경우 확실히 가치가 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>정적 코드 분석 도구&lt;/strong>&lt;/p>
&lt;p>유비쿼터스 언어의 용어의 사용을 검증할 수 있는 정적 코드 분석 도구도 있다. (NDepend)&lt;/p>
&lt;hr>
&lt;p>이런 도구들이 유용하긴 하지만 &lt;strong>일상적인 상호작용에서 실제로 유비쿼터스 언어를 사용하는 것&lt;/strong>보다는 못하다.&lt;/p>
&lt;p>애자일 매니페스토에서는 &amp;ldquo;프로세스나 도구보다 개인과의 상호작용이 우선이다.&amp;ldquo;라고 강조한다.&lt;/p>
&lt;h3 id="도전과제">도전과제&lt;/h3>
&lt;hr>
&lt;p>&lt;strong>질문하기&lt;/strong>&lt;/p>
&lt;p>도메인 지식을 수집하는 신뢰할 만한 유일한 방법은 도메인 전문가와 대화를 하는 것이다.&lt;/p>
&lt;p>대부분의 경우 가장 중요한 지식은 암묵지 이며, 이는 도메인 전문가의 정신에만 존재하므로, 여기에 접근하는 유일한 방법은 질문하는 것이다.&lt;/p>
&lt;p>도메인 전문가에게 질문하는 것에 경험이 쌓이면 이 과정이 단순히 존재하는 지식을 발견하는 것뿐만 아니라 도메인 전문가와 협력해서 모델을 함께 만들어가는 것이 자주 포함된다는 사실을 알게된다.&lt;/p>
&lt;p>도메인 전문가라도 자신의 비즈니스 도메인에 대한 이해가 모호하거나 공백이 있을 수 있으며, 명시적 정의가 없는 비즈니스 도메인 개념을 발견할 수도 있다.&lt;/p>
&lt;p>그러므로 비즈니스 도메인 특성에 대해 질문하면 종종 숨어있던 충돌과 공백을 찾아내 명확하게 할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>개선하기&lt;/strong>&lt;/p>
&lt;p>이미 프로젝트에 사용중인 도메인 관련 언어들이 DDD 원칙을 따르지 않아 비즈니스 도메인을 효과적으로 반영하지 않을 수 있다.&lt;/p>
&lt;p>이러한 경우 필요한 도구는 인내심으로, 문서화나 소스코드와 같이 제어하기 쉬운 부분부터 올바른 언어를 사용한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>영어 명사&lt;/strong>&lt;/p>
&lt;p>회사에서 영어를 사용하지 않는다고 하더라도, 비즈니스 도메인의 엔티티(entity) 만큼은 영어 명사로 사용하는 것이 좋다.&lt;/p>
&lt;ul>
&lt;li>자연스럽게 코드에서도 쉽게 동일한 용어를 사용하게 된다.&lt;/li>
&lt;/ul>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>효과적인 커뮤니케이션과 지식 공유는 성공적인 소프트웨어 프로젝트에 필수이며, 소프트웨어 엔지니어가 소프트웨어 솔루션을 설계하고 개발하기 위해서는 반드시 비즈니스 도메인을 이해해야한다.&lt;/p>
&lt;p>유비쿼터스 언어는 도메인 전문가와 소프트웨어 엔지니어의 지식 간극을 메워주는 효과적인 도구이다.&lt;/p>
&lt;ul>
&lt;li>대화, 문서화, 테스트, 다이어그램, 소스코드 등 프로젝트 전반에 걸쳐 모든 이해관계자가 공유된 언어를 사용함으로써 커뮤니케이션과 지식 공유를 강화할 수 있음&lt;/li>
&lt;/ul>
&lt;p>효과적인 커뮤니케이션을 위해 유비쿼터스 언어에서 반드시 모호성과 암묵적 가정을 제거해야한다.&lt;/p>
&lt;ul>
&lt;li>모든 용어는 일관성이 있어야함&lt;/li>
&lt;li>모호하지 않고 동의허가 없어야함&lt;/li>
&lt;/ul>
&lt;p>유비쿼터스 언어를 육성하는 것은 지속적인 과정이다.&lt;/p>
&lt;ul>
&lt;li>프로젝트가 발전함에 따라 더 많은 도메인 지식이 발견되며 이러한 통찰이 유비쿼터스 언어에 반영되는 것이 중요함&lt;/li>
&lt;/ul>
&lt;p>위키 기반 용어집, 거킨 테스트 같은 도구는 유비쿼터스 언어를 문서화하고 유지보수 하는 과정을 상당히 쉽게 해주지만, 효과적인 유비쿼터스 언어의 전제 조건은 언어를 사용해야한다는 것이다.&lt;/p>
&lt;ul>
&lt;li>모든 프로젝트 관련 커뮤니케이션에서 유비쿼터스 언어를 일관되게 사용해야함&lt;/li>
&lt;/ul></description></item><item><title>전략적 설계: 비즈니스 도메인 분석하기</title><link>https://codemario318.github.io/post/learning-domain-driven-design/1/</link><pubDate>Thu, 27 Feb 2025 09:54:49 +0900</pubDate><guid>https://codemario318.github.io/post/learning-domain-driven-design/1/</guid><description>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/cover.png" alt="Featured image of post 전략적 설계: 비즈니스 도메인 분석하기" />&lt;p>도메인 주도 설계 방법론(Domain-Driven Design: DDD)은 크게 두 가지 주요 부분으로 나눌 수 있다.&lt;/p>
&lt;ul>
&lt;li>전략적 설계
&lt;ul>
&lt;li>&lt;strong>What&lt;/strong>과 &lt;strong>Why&lt;/strong> 질문에 대한 답을 찾는 것&lt;/li>
&lt;li>어떤 소프트웨어를 만드는지, 왜 그 소프트웨어를 만드는지에 대한 해답을 찾는 것&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전술적 설계
&lt;ul>
&lt;li>&lt;strong>How&lt;/strong> 라는 방법에 대한 것&lt;/li>
&lt;li>소프트웨어 각각의 구성 요소가 구현되는 방법을 찾는 것&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이번 장에서는 &lt;strong>기업이 존재하는 이유&lt;/strong>와 &lt;strong>추구하는 목표&lt;/strong>가 무엇이며, 그 &lt;strong>목표를 달성하기 위한 전략&lt;/strong>을 논의한다.&lt;/p>
&lt;p>효과적인 솔루션을 설계하고 구축하기 위해서는 그것의 &lt;strong>바탕이 되는 문제&lt;/strong>를 이해해야 하고, 해결하고자 하는 문제를 이해하려면 그것이 &lt;strong>존재하는 맥락&lt;/strong>을 이해해야햔다.&lt;/p>
&lt;blockquote>
&lt;p>즉, 그 조직의 비즈니스 전략과 소프트웨어를 만들면서 얻고자 하는 가치를 이해해야 한다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="비즈니스-도메인이란">비즈니스 도메인이란?&lt;/h2>
&lt;p>비즈니스 도메인은 &lt;strong>기업의 주요 활동 영역을 정의&lt;/strong>한다. (회사가 고객에게 제공하는 서비스)&lt;/p>
&lt;ul>
&lt;li>페덱스: 배송 서비스&lt;/li>
&lt;li>스타벅스: 커피&lt;/li>
&lt;li>월마트: 소매업체&lt;/li>
&lt;/ul>
&lt;p>기업은 &lt;strong>여러 비즈니스 도메인&lt;/strong>을 운영할 수 있으며, 비즈니스 도메인을 자주 변경할 수 있다는 점도 주목해야한다.&lt;/p>
&lt;h2 id="하위-도메인">하위 도메인&lt;/h2>
&lt;p>기업은 비즈니스 도메인의 목표를 달성하기 위해 여러가지 &lt;strong>하위 도메인&lt;/strong>(subdomain)을 운영해야한다.&lt;/p>
&lt;p>하위 도메인은 &lt;strong>비즈니스 활동의 세분화된 영역&lt;/strong>으로 전체 시스템의 하나의 구성요소로, 각각의 하위 도메인은 회사의 비즈니스 도메인에서 목표를 달성하기 위해 서로 상호작용해야 한다.&lt;/p>
&lt;ul>
&lt;li>스타벅스
&lt;ul>
&lt;li>훌륭한 커피&lt;/li>
&lt;li>좋은 위치의 부동산&lt;/li>
&lt;li>직원 관리&lt;/li>
&lt;li>재정 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>하위 도메인 중 어느 것도 자체적으로 수익을 낼 수 없기 때문에, 회사가 비즈니스 도메인에서 경쟁하려면 이 모든 것이 함께 필요하다.&lt;/p>
&lt;h3 id="하위-도메인의-유형">하위 도메인의 유형&lt;/h3>
&lt;p>하위 도메인은 서로 다른 전략적 비즈니스 가치를 가진다.&lt;/p>
&lt;p>도메인 주도 설계에서 하위 도메인은 &lt;strong>핵심&lt;/strong>, &lt;strong>일반&lt;/strong>, &lt;strong>지원&lt;/strong> 세가지 유형으로 구분한다.&lt;/p>
&lt;h4 id="핵심-하위-도메인">핵심 하위 도메인&lt;/h4>
&lt;p>핵심 하위 도메인(core subdomain)은 &lt;strong>회사가 경쟁업체와 다르게 수행하고 있는 것&lt;/strong>을 의미한다.&lt;/p>
&lt;ul>
&lt;li>새로운 재품이나 서비스&lt;/li>
&lt;li>기존 프로세스를 최적화하여 비용을 줄이는 것 등&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>우버: 승차 공유 서비스&lt;/li>
&lt;li>구글: 검색 순위 알고리즘
&lt;ul>
&lt;li>구글 애즈는 많은 수익을 내는 하위 도메인에 있는 별도의 비즈니스 도메인&lt;/li>
&lt;li>검색 엔진을 통해 트래픽을 유도함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>복잡성&lt;/strong>&lt;/p>
&lt;p>누구나 구현할 수 있는 핵심 하위 도메인은 일시적인 경쟁 우위만 제공하므로, 핵심 하위 도메인은 자연스럽게 복잡해진다.&lt;/p>
&lt;p>회사의 핵심 비즈니스는 &lt;strong>높은 진입장벽&lt;/strong>이 있어야 경쟁력을 유지할 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>경쟁 우위의 원천&lt;/strong>&lt;/p>
&lt;p>핵심 하위 도메인에 반드시 기술이 들어가야하는 것은 아니며, 회사의 경쟁 우위는 다양한 원천에서 나올 수 있다.&lt;/p>
&lt;ul>
&lt;li>모든 비즈니스 문제가 알고리즘이나 기술 솔루션으로 해결되지 않음&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>온라인으로 제품을 판매하는 보석 제조 업체: 보석의 디자인이 회사의 경쟁력&lt;/li>
&lt;li>수동 사기 탐지를 전문으로 하는 회사: 분석가가 수행하는 작업&lt;/li>
&lt;/ol>
&lt;h4 id="일반-하위-도메인">일반 하위 도메인&lt;/h4>
&lt;p>일반 하위 도메인(generic subdomain)은 &lt;strong>모든 회사가 같은 방식으로 수행하는 비즈니스 활동&lt;/strong>을 말한다.&lt;/p>
&lt;p>핵심 하위 도메인 처럼 복잡하고 구현하기 어려우나, 회사에 경쟁력을 제공하지 않는다.&lt;/p>
&lt;ul>
&lt;li>이미 실무에서 검증된 솔루션으로 널리 이용 가능&lt;/li>
&lt;li>모든 회사에서 사용하고 있어 더 이상 혁신이나 최적화가 필요 없음&lt;/li>
&lt;/ul>
&lt;p>대표 적인 예시로 아래와 같은 것 들이 있다:&lt;/p>
&lt;ul>
&lt;li>사용자 인증 및 권한 부여 등&lt;/li>
&lt;li>온라인으로 제품을 판매하는 보석 제조 업체의 온라인 소핑몰 자체&lt;/li>
&lt;/ul>
&lt;h4 id="지원-하위-도메인">지원 하위 도메인&lt;/h4>
&lt;p>지원 하위 도메인(supporting subdomain)은 &lt;strong>회사의 비즈니스를 지원하는 활동&lt;/strong>을 말하며, 핵심 하위 도메인과 달리 어떠한 경쟁 우위도 제공하지 않는다.&lt;/p>
&lt;p>지원 하위 도메인은 대부분 비즈니스 로직이 간단하다.&lt;/p>
&lt;ul>
&lt;li>데이터 입력 화면과 ETL(extract, transform, load)&lt;/li>
&lt;li>CRUD 인터페이스&lt;/li>
&lt;/ul>
&lt;p>회사에 어떠한 경쟁 우위도 제공하지 않으므로 높은 진입장벽이 필요하지 않다.&lt;/p>
&lt;h3 id="하위-도메인-비교">하위 도메인 비교&lt;/h3>
&lt;p>다른 각도에서 차이점을 살펴보고, 전략적인 소프트웨어 설계 의사결정에 미치는 영향을 살펴본다.&lt;/p>
&lt;h4 id="경쟁-우위">경쟁 우위&lt;/h4>
&lt;ul>
&lt;li>핵심 하위 도메인: 경쟁 우위 제공
&lt;ul>
&lt;li>경쟁사와 차별화하기 위한 회사의 전략&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반 하위 도메인: 경쟁 우위의 원천이 될 수는 없음
&lt;ul>
&lt;li>일반적인 솔루션&lt;/li>
&lt;li>경쟁 업체가 동일한 솔루션을 활용하므로 경쟁 우위를 제공할 수 없음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지원 하위 도메인: 진입 장벽이 낮으며, 경쟁 우위도 제공할 수 없음
&lt;ul>
&lt;li>경쟁력에 영향을 주지 않음&lt;/li>
&lt;li>일반적인 솔루션을 사용하는 것을 선호&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>회사가 해결할 수 있는 문제가 더 복잡할수록 더 많은 비즈니스 가치를 제공할 수 있지만, 복잡한 문제는 소비자에게 서비스를 제공하는 것에 국한되지는 않는다.&lt;/p>
&lt;ul>
&lt;li>비즈니스 최적화는 낮은 운영 비용으로 경쟁 우위를 얻을 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="복잡성">복잡성&lt;/h4>
&lt;p>조금 더 기술적인 관점에서 하위 도메인의 유형에 따라 복잡성의 수준이 다르고, 소프트웨어를 설계할 때 비즈니스 요구사항의 복잡성을 수용할 수 있는 도구와 기술을 선택해야하므로, &lt;strong>견고한 소프트웨어 솔루션을 설계&lt;/strong>하기 위해 하위 도메인을 식별하는 것이 반드시 필요하다.&lt;/p>
&lt;ul>
&lt;li>지원 하위 도메인: 일반적으로 비즈니스 로직이 매우 간단
&lt;ul>
&lt;li>기본적인 ETL 작업과, CRUD 인터페이스&lt;/li>
&lt;li>입력의 유효성 검증 또는 다른 구조의 데이터로 변환하는 정도&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반하위 도메인: 훨씬 더 복잡
&lt;ul>
&lt;li>지식 가용성 관점에서 &amp;lsquo;알려진 미지&amp;rsquo;에 해당(모른 다는 사실을 알고있음)&lt;/li>
&lt;li>지식 자체는 쉽게 구할 수 있음&lt;/li>
&lt;li>업계에서 인정하는 모범 사례를 사용하거나 전문 컨설턴트를 고용하여 맞춤형 솔루션을 설계할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>핵심 하위 도메인: 복잡함
&lt;ul>
&lt;li>회사의 수익성이 좌우되므로 경쟁업체가 최대한 모방하기 어려워야함&lt;/li>
&lt;li>전략적으로 핵심 하위 도메인으로 복잡한 문제를 해결하려고함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이러한 특성으로 &lt;strong>복잡성&lt;/strong>은 하위 도메인을 구별하는 기준으로 활용될 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/img.png"
width="728"
height="455"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/1/img_hu4f32797cb34ef597bfcf264f2fe48bcc_65622_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/1/img_hu4f32797cb34ef597bfcf264f2fe48bcc_65622_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="세 가지 유형의 하위 도메인의 비즈니스 차별화 및 비즈니스 로직 복잡성"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;ul>
&lt;li>하위 도메인을 부업으로 전환할 수 있는가? -&amp;gt; 핵심 하위 도메인&lt;/li>
&lt;li>외부 솔루션을 연동하는 것 보다 자체 솔루션을 구현하는 것이 더 간단하고 저렴한가? -&amp;gt; 지원 하위 도메인&lt;/li>
&lt;/ul>
&lt;p>또 다른 방법으로 &lt;strong>코드로 구현해야 하는 비즈니스 로직의 복잡성&lt;/strong>을 기준으로 삼을 수 있다.&lt;/p>
&lt;ul>
&lt;li>데이터 입력을 위한 CRUD 인터페이스와 유사한가? -&amp;gt; 지원 하위 도메인&lt;/li>
&lt;li>복잡한 알고리즘 또는 비즈니스 프로세스 규칙과 변하지 않는 속성에 의해 조정되는 비즈니스 프로세스를 구현해야 하는가? -&amp;gt; 핵심 하위 도메인&lt;/li>
&lt;li>기능 자체를 구현하기보다 일반적인 솔루션을 연동하는 편이 더 간단하거나 저렴한가? -&amp;gt; 일반 하위 도메인&lt;/li>
&lt;li>자체 구현이 더 간단하고 저렴한가? -&amp;gt; 지원 하위 도메인&lt;/li>
&lt;/ul>
&lt;h4 id="변동성">변동성&lt;/h4>
&lt;ul>
&lt;li>핵심 하위 도메인: 자주 변경될 수 있다.
&lt;ul>
&lt;li>한 번의 시도로 문제가 해결될 수 있다면 경쟁자들도 빠르게 따라잡을 수 있기 때문에 경쟁 우위에서 좋은 위치는 아닐 것&lt;/li>
&lt;li>다양한 구현 방법을 시도하고 개선하고 최적해야 핵심 하위 도메인에 대한 솔루션을 찾을 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지원 하위 도메인: 자주 변경되지 않는다.
&lt;ul>
&lt;li>어떠한 경쟁 우위를 제공하지 않기 때문에 투자한 노력에 비해 아주 작은 비즈니스 가치를 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반 하위 도메인: 시간이 지남에 따라 변경될 수 있다.
&lt;ul>
&lt;li>보안 패치, 버그 수정&lt;/li>
&lt;li>일반적인 문제에 대한 새로운 솔루션으로 대체&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="솔루션-전략">솔루션 전략&lt;/h4>
&lt;p>하위 도메인은 기본적인 구성요소이므로 하나를 제거하면 전체 구조가 무너질 수 있다.&lt;/p>
&lt;p>하위 도메인 가각의 고유한 속성을 활용하면 서로 다른 유형의 하위 도메인을 구현하기 위한 가장 효율적인 전략을 선택할 수 있다.&lt;/p>
&lt;ul>
&lt;li>핵심 하위 도메인: 사내에서 구현되어야 한다.
&lt;ul>
&lt;li>솔루션을 구매하거나 외부에서 도입 가능한 경우 경쟁업체들이 똑같이 할 수 있기 때문에 우위 개념을 약화시킨다.&lt;/li>
&lt;li>핵심 하위 도메인 구현은 전략적인 투자이므로 하청은 현명하지 않다.&lt;/li>
&lt;li>절차를 무시하고 대충 진행하는 것은 위험하며 장기적으로 치명적이다.
&lt;ul>
&lt;li>유지보수가 불가능한 코드는 회사의 목표를 지원할 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>조직의 가장 숙련된 인재는 핵심 하위 도메인에서 일하도록 업무가 할당되어야 한다.&lt;/li>
&lt;li>사내에서 핵심 하위 도메인을 개발하면 더 빠르게 변경하고 발전시킬 수 있기 때문에 더 짧은 시간에 경쟁 우위를 갖출 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>핵심 하위 도메인의 요구사항은 자주, 지속적으로 변경될 것으로 예사오디므로 솔루션은 유지보수가 가능하고 쉽게 개선될 수 있어야 한다. 따라서 핵심 하위 도메인은 가장 진보된 엔지니어링 기술로 구현해야한다.&lt;/p>
&lt;ul>
&lt;li>일반 하위 도메인: 어렵지만 이미 문제가 해결된 것들
&lt;ul>
&lt;li>사내에서 구현하는 데 시간과 노력을 투자하는 것 보다 이미 만들어진 제품을 구입하거나 오픈소스 솔루션을 채택하는 것이 비용 면에서 더 효율적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지원 하위 도메인: 경쟁 우위가 없음
&lt;ul>
&lt;li>사내에서 지원 하위 도메인을 구현하지 않는 것이 합리적&lt;/li>
&lt;li>일반 하위 도메인과 달리 솔루션이 없는 경우가 있고, 이러한 경우 직접 구현&lt;/li>
&lt;li>비즈니스 로직이 단순하고 변경의 빈도가 적기 때문에 원칙을 생략하고 적당히 진행하기 쉬움&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>지원 하위 도메인에는 정교한 디자인 패턴이나 고급 엔지니어링 기술이 필요 없다. 인력 관점에서도 고도로 숙련된 기술이 필요하지 않기 때문에 새로운 인재를 양성할 수 있는 좋은 연습 기회를 제공한다.&lt;/p>
&lt;hr>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>하위 도메인 유형&lt;/th>
&lt;th>경쟁 우위&lt;/th>
&lt;th>복잡성&lt;/th>
&lt;th>변동성&lt;/th>
&lt;th>구현 방식&lt;/th>
&lt;th>문제&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>핵심&lt;/td>
&lt;td>예&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>사내 개발&lt;/td>
&lt;td>흥미로움&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>일반&lt;/td>
&lt;td>아니오&lt;/td>
&lt;td>높음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>구매/도입&lt;/td>
&lt;td>해결됨&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>지원&lt;/td>
&lt;td>아니오&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>낮음&lt;/td>
&lt;td>사내 가발/하청&lt;/td>
&lt;td>뻔함&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="하위-도메인-경계-식별">하위 도메인 경계 식별&lt;/h3>
&lt;p>하위 도메인과 해당 유형으로 식별하면 설계와 관련된 의사결정에 상당한 도움이 된다.&lt;/p>
&lt;p>하위 도메인과 그 유형은 &lt;strong>기업의 비즈니스 전략&lt;/strong>에 따라 정의되며, 이를 동일한 분야에서 다른 회사와 경쟁하기 위해 자신을 차별화하는 방법으로 대다수의 소프트웨어 프로젝트에서 하위 도메인은 어떤 식으로든 &lt;strong>이미 존재&lt;/strong>한다. 이미 존재하는 하위 도메인을 식별하고 분류하려면 도메인 분석을 직접 수행해야 한다.&lt;/p>
&lt;p>회사의 부서와 기타 조직 단위는 좋은 출발점이다.&lt;/p>
&lt;h4 id="하위-도메인-정제">하위 도메인 정제&lt;/h4>
&lt;p>하위 도메인을 식별하기 위한 문제는 세부사항에 있으므로 비즈니스 기능의 복잡한 내용에 숨겨진 중요한 정보를 놓치지 말아야한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/img_1.png"
width="729"
height="308"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/1/img_1_hu9e5571290e517d4dbda2cbea95316a6f_128302_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/1/img_1_hu9e5571290e517d4dbda2cbea95316a6f_128302_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="내부 업부를 분석하여 세분하된 하위 도메인으로 나눈 결과"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="568px"
>&lt;/p>
&lt;ul>
&lt;li>고객 서비스 부서
&lt;ul>
&lt;li>헬프데스크 시스템: 일반 하위 도메인&lt;/li>
&lt;li>교대 근무 관리 및 일정: 지원 하위 도메인&lt;/li>
&lt;li>전화 시스템: 일반 하위 도메인&lt;/li>
&lt;li>상담 사례 라우팅: 핵심 하위 도메인&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>과거 비슷한 상담 사례를 성공적으로 처리한 상담원에게 상담을 전달할 수 있는 알고리즘은 데이터를 분석하여 알고리즘을 설계해야하고, 경쟁업체보다 더 나은 고객 서비스를 제공할 수 있게 하므로 핵심 하위 도메인으로 볼 수 있다.&lt;/p>
&lt;h4 id="응집된-유스케이스를-하위-도메인으로">응집된 유스케이스를 하위 도메인으로&lt;/h4>
&lt;p>기술적 관점에서 하위 도메인은 상호 연관되고 응집된 유스케이스의 집합과 유사하다.&lt;/p>
&lt;ul>
&lt;li>유스케이스 집합
&lt;ul>
&lt;li>동일한 행위자(actor)&lt;/li>
&lt;li>비즈니스 엔티티(business entity)&lt;/li>
&lt;li>두 요소 모두 밀접하게 관련된 데이터의 집합을 다룸&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>세분화된 하위 도메인을 찾는 것을 중단하는 시점을 결장하기 위한 지침으로 &lt;strong>응집된 유스케이스의 집합인 하위 도메인&lt;/strong>이라는 정의를 사용할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/img_2.png"
width="727"
height="360"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/1/img_2_hu41f77d34d0ad981d442dc552154bd7d7_190213_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/1/img_2_hu41f77d34d0ad981d442dc552154bd7d7_190213_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="신용카드 결제 하위 도메인의 유스케이스 다이어그램"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;p>위 유스케이스는 작업 중인 데이터 및 관련된 행위자와 밀접한 연관이 있으므로, 모든 유스케이스는 신용카드 결제 하위 도메인을 형성한다.&lt;/p>
&lt;p>핵심 하위 도메인은 가장 중요하고 변동성이 있고 복잡하므로, 경계를 식별하기 위해 큰 노력을 기울여야한다.&lt;/p>
&lt;p>이를 통해 일반 및 지원 기능 모두를 추출하고 훨씬 더 집중하고 있는 기능에 시간을 투자할 수 있게 한다.&lt;/p>
&lt;p>하지만 지원 및 일반 하위 도메인의 경우 이러한 정제 작업을 완화해도 괜찮다.&lt;/p>
&lt;ul>
&lt;li>의사 결정을 내리는 데 도움이 될 수 있는 새로운 통찰이 나오지 않으면 중단하는 것이 좋다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/learning-domain-driven-design/1/img_3.png"
width="726"
height="197"
srcset="https://codemario318.github.io/post/learning-domain-driven-design/1/img_3_hue273eaac2e98d17046a7986b5189cfe7_105476_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/learning-domain-driven-design/1/img_3_hue273eaac2e98d17046a7986b5189cfe7_105476_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="헬프 데스크 시스템의 하위 도메인을 정제해서 일반적인 내부 구성요소를 보여줌"
class="gallery-image"
data-flex-grow="368"
data-flex-basis="884px"
>&lt;/p>
&lt;p>위처럼 헬프 데스크 시스템의 하위 도메인을 추가로 정리한다고 전략적으로 유용한 정보가 나오지 않으므로, 하위 도메인을 크게 나눠서 이미 만들어져 있는 도구를 솔루션으로 사용한다.&lt;/p>
&lt;h4 id="핵심에-집중">핵심에 집중&lt;/h4>
&lt;p>하위 도메인을 식별할 때 하위 도메인이 모두 필요한지 여부를 고려해야한다.&lt;/p>
&lt;p>하위 도메인은 &lt;strong>소프트웨어 설계 의사결정을 내리는 프로세스의 어려움을 쉽게 해결하도록 돕는 도구&lt;/strong>로, 모든 조직에는 경쟁 우위를 제공하기는 하지만 소프트웨어와는 아무 관련이 없는 비즈니스 기능이 많이 존재한다.&lt;/p>
&lt;p>하위 도메인을 찾을 때 소프트웨어와 관련되지 않은 비즈니스 기능을 식별하고, 그 자체로 인정하며, 작업 중인 소프트웨어 시스템과 관련된 비즈니스에 집중하는 것이 중요하다.&lt;/p>
&lt;h2 id="도메인-전문가란">도메인 전문가란?&lt;/h2>
&lt;p>도메인 전문가는 &lt;strong>모델링하고 코드로 구현할 비즈니스의 모든 복잡성을 알고 있는 주제 전문가&lt;/strong>이다.(소프트웨어 비즈니스 도메인에 대한 권위자)&lt;/p>
&lt;p>비즈니스 지식의 근원이 되는 비즈니스 문제를 처음 파악한 사람들로, 시스템 분석가와 엔지니어는 비즈니스 도메인의 &lt;strong>멘탈 모델&lt;/strong>을 소프트웨어 요구사항과 소스코드로 변환한다.&lt;/p>
&lt;p>일반적으로 도메인 전문가는 &lt;strong>요구사항을 제시하는 사람&lt;/strong> 또는 &lt;strong>소프트웨어의 최종 사용자&lt;/strong>이며 소프트웨어는 그들의 문제를 해결해야한다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>비즈니스가 운영되는 영역과 고객에 제공하는 서비스는 모두 비즈니스 도메인과 함께 시작한다.&lt;/p>
&lt;p>비즈니스 도메인에서 성공하고 기업이 경쟁업체와 차별화하는 데 필요한 구성 요소를 확인했다.&lt;/p>
&lt;ul>
&lt;li>핵심 하위 도메인
&lt;ul>
&lt;li>흥미로운 문제들&lt;/li>
&lt;li>기업이 경쟁자로부터 차별화하고 경쟁 우위를 얻는 활동&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반 하위 도메인
&lt;ul>
&lt;li>해결된 문제들, 모든 회사가 같은 방식으로 하고 있는 일&lt;/li>
&lt;li>혁신이 필요하지 않음&lt;/li>
&lt;li>직접 개발하기 보다는 기존 솔루션을 사용하는 것이 더 효과적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지원 하위 도메인
&lt;ul>
&lt;li>분명한 해결책이 있는 문제들&lt;/li>
&lt;li>사내에서 구현해야할 수 있지만 경쟁 우위를 제공하지는 않음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>도메인 전문가는 비즈니스의 주제 전문가로 회사의 비즈니스 도메인 또는 하나 이상의 하위 도메인에 대한 심층적인 지식을 가지고 있으며 프로젝트 성공에 매우 중요한 역할을 한다.&lt;/p></description></item></channel></rss>