<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database on Mario Blog</title><link>https://codemario318.github.io/tags/database/</link><description>Recent content in Database on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 22 Apr 2025 13:58:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/database/index.xml" rel="self" type="application/rss+xml"/><item><title>B-Tree와 LSM Tree</title><link>https://codemario318.github.io/post/db/rdbms-nosql/</link><pubDate>Tue, 22 Apr 2025 13:58:49 +0900</pubDate><guid>https://codemario318.github.io/post/db/rdbms-nosql/</guid><description>&lt;img src="https://codemario318.github.io/post/db/rdbms-nosql/cover.png" alt="Featured image of post B-Tree와 LSM Tree" />&lt;p>최근 &amp;ldquo;&lt;strong>데이터 중심 애플리케이션 개발&lt;/strong>&amp;ldquo;을 읽으면서 RDBMS와 NoSQL의 쓰기 작업의 차이를 설명하는 내용을 접하게 되었습니다. 이 내용을 기반으로 두 가지 데이터베이스를 비교해보려고 합니다.&lt;/p>
&lt;h2 id="b-tree와-lsm-tree의-기본-구조">B-Tree와 LSM Tree의 기본 구조&lt;/h2>
&lt;p>MySQL InnoDB와 같은 RDBMS는 B-Tree 기반의 저장소 엔진을 사용하는 반면, MongoDB와 같은 NoSQL 데이터베이스는 주로 로그 기반(LSM Tree) 구조를 활용합니다. 이 두 방식은 근본적인 설계 철학부터 성능 특성까지 다양한 차이점을 가지고 있습니다.&lt;/p>
&lt;h3 id="b-tree-구조">B-Tree 구조&lt;/h3>
&lt;p>B-Tree는 RDBMS에서 널리 사용되는 색인 구조입니다. B-Tree는 데이터를 균형 잡힌 트리 형태로 구성하며, 고정 크기의 페이지 단위로 디스크에 저장합니다. 트리의 각 노드(페이지)는 키와 그에 해당하는 하위 페이지 참조를 포함하고 있습니다. 일반적으로 데이터를 삽입, 삭제, 수정할 때는 해당 페이지의 내용을 &lt;strong>직접 덮어쓰는 방식&lt;/strong>을 사용합니다.&lt;/p>
&lt;p>이러한 &lt;strong>균형 트리 구조&lt;/strong>를 통해 어떤 &lt;strong>키&lt;/strong>에 대해서도 &lt;code>O(log n)&lt;/code> 시간 복잡도로 검색이 가능하며, 대부분의 데이터베이스에서 B-Tree의 깊이는 3-4 수준에 불과해 매우 빠른 접근 시간을 제공합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> [루트 페이지]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> / | \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[페이지1] [페이지2] [페이지3]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> / \ / \ / \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">... ... ... ... ... ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="lsm-tree-구조">LSM Tree 구조&lt;/h3>
&lt;p>LSM Tree(로그 구조화 병합 트리)는 로그 기반의 저장 구조를 사용합니다.&lt;/p>
&lt;p>데이터를 수정할 때마다 디스크에 &lt;strong>순차적으로 추가&lt;/strong>하는 방식을 사용하기 때문에, 기존 데이터를 덮어쓰지 않습니다. 새로운 데이터는 먼저 메모리 내의 멤테이블(MemTable)에 버퍼링되고, 멤테이블이 일정 크기에 도달하면 디스크의 SS테이블(Sorted String Table)로 기록됩니다.&lt;/p>
&lt;p>시간이 지남에 따라 여러 SS테이블이 생성되며, 백그라운드에서 주기적으로 이들을 &lt;strong>병합&lt;/strong>하고 &lt;strong>압축&lt;/strong>하는 &lt;strong>컴팩션&lt;/strong> 프로세스가 실행됩니다. 이러한 순차적 쓰기 방식은 B-Tree에서 정해진 위치의 데이터를 덮어쓰는 방법과 달리 파일에 맨 뒤에 추가만 하는 방식이므로 별도의 특정 위치에 대한 확인 같은 부수적인 처리가 없고 디스크의 물리적 특성에 최적화되어 있으므로 일반적으로 쓰기 작업에서 뛰어난 성능을 보입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[MemTable(메모리)] → [SS테이블1(디스크)] → [SS테이블2(디스크)] → ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓ ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [컴팩션 프로세스] [컴팩션 프로세스]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓ ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [병합된 SS테이블] [병합된 SS테이블]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="읽기쓰기-성능-특성-비교">읽기/쓰기 성능 특성 비교&lt;/h2>
&lt;p>B-Tree 계열과 LSM Tree 동작 방식의 차이로 인해 읽기/쓰기 작업에도 다른 양상을 보여줍니다.&lt;/p>
&lt;h3 id="읽기-성능">읽기 성능&lt;/h3>
&lt;p>&lt;strong>B-Tree 의 읽기 성능&lt;/strong>&lt;/p>
&lt;p>B-Tree 구조에서는 인덱스를 통해 데이터에 직접 접근할 수 있습니다.&lt;/p>
&lt;p>균형 잡힌 트리 구조를 통해 어떤 키에 대해서도 &lt;code>O(log n)&lt;/code> 시간 내에 검색이 가능하며, 대부분의 경우 단 몇 번의 디스크 I/O만으로 원하는 레코드에 도달할 수 있습니다. 특히 기본 키를 이용한 검색은 매우 효율적이며, 색인된 열을 기준으로 한 범위 쿼리(B+ Tree)도 높은 성능을 보입니다.&lt;/p>
&lt;p>또한 B-Tree는 데이터가 정렬된 상태로 유지되므로 정렬된 결과가 필요한 쿼리에서도 유리합니다. 인덱스가 메모리에 캐시되어 있다면 더욱 빠른 접근이 가능합니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>LSM Tree의 읽기 성능&lt;/strong>&lt;/p>
&lt;p>LSM Tree 구조에서는 특정 키를 검색할 때 여러 SS테이블을 차례로 확인해야 할 수 있습니다.&lt;/p>
&lt;p>키를 찾기 위해 먼저 메모리의 멤테이블을 확인하고, 없다면 가장 최근에 생성된 SS테이블부터 차례대로 확인합니다. 이 과정에서 여러 번의 디스크 접근이 필요할 수 있어 B-Tree보다 읽기 성능이 떨어질 수 있습니다.&lt;/p>
&lt;p>그러나 &lt;strong>블룸 필터&lt;/strong>와 같은 최적화 기법을 사용하여 특정 키가 존재하지 않는 SS테이블을 효율적으로 건너뛸 수 있습니다. 또한 컴팩션 작업이 진행 중일 때는 읽기 성능이 일시적으로 저하될 수 있습니다.&lt;/p>
&lt;p>한편, 순차적 읽기나 스캔 작업에서는 데이터의 연속적 배치로 인해 우수한 성능을 보일 수 있습니다.&lt;/p>
&lt;h3 id="쓰기-성능">쓰기 성능&lt;/h3>
&lt;p>&lt;strong>B-Tree의 쓰기 성능&lt;/strong>&lt;/p>
&lt;p>B-Tree 구조에서는 데이터를 수정할 때 해당 페이지를 직접 덮어써야 합니다. 이는 &lt;strong>무작위 I/O&lt;/strong> 패턴을 유발하여 특히 하드 디스크 드라이브(HDD)에서 성능 저하의 원인이 됩니다. 또한 B-Tree의 균형을 유지하기 위해 데이터 삽입 시 &lt;strong>페이지 분할&lt;/strong>이 발생할 수 있으며, 이는 &lt;strong>추가적인 디스크 I/O&lt;/strong>를 필요로 합니다.&lt;/p>
&lt;p>또한 인덱스가 여러 개 있는 경우, 데이터 수정 시 &lt;strong>모든 관련 인덱스를 업데이트&lt;/strong>해야 하므로 쓰기 오버헤드가 증가합니다.&lt;/p>
&lt;p>데이터 변경의 안전한 복구를 위해 WAL(Write-Ahead Log)을 유지해야 하므로, 하나의 트랜잭션에 대해 여러 번의 디스크 쓰기가 필요할 수 있습니다. 이러한 특성으로 인해 B-Tree는 쓰기 작업이 많은 워크로드에서는 성능 병목이 될 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>LSM Tree의 쓰기 성능&lt;/strong>&lt;/p>
&lt;p>LSM Tree 구조는 쓰기 작업에 최적화되어 있습니다.&lt;/p>
&lt;p>데이터 변경 시 디스크에 &lt;strong>순차적으로 추가&lt;/strong>하므로, 특히 HDD에서 효율적입니다. 새로운 데이터는 먼저 메모리의 멤테이블에 버퍼링되므로 디스크 I/O 횟수를 크게 줄일 수 있습니다. 대량의 데이터를 삽입할 때도 멤테이블이 가득 차기 전까지는 디스크에 기록할 필요가 없어 빠른 속도로 처리됩니다.&lt;/p>
&lt;p>기존 데이터를 덮어쓰지 않고 새 버전을 추가하는 방식이므로 페이지 분할과 같은 구조 재조정이 필요 없습니다. 물론 컴팩션 과정이 필요하지만, 이는 백그라운드에서 처리되므로 전면적인 쓰기 성능에는 영향이 적습니다.&lt;/p>
&lt;p>이러한 특성으로 인해 LSM Tree는 특히 쓰기가 많은 워크로드에서 우수한 성능을 보입니다.&lt;/p>
&lt;h2 id="innodb의-쓰기-성능-최적화-전략">InnoDB의 쓰기 성능 최적화 전략&lt;/h2>
&lt;p>RDBMS의 대표적인 예시로 MySQL의 InnoDB 스토리지 엔진이 있는데요, InnoDB에서 쓰기 작업 성능을 개선하기 위해 여러 방법들을 활용하고 있습니다. 대략적으로 살펴볼까요?&lt;/p>
&lt;h3 id="버퍼풀을-통한-쓰기-성능-개선">버퍼풀을 통한 쓰기 성능 개선&lt;/h3>
&lt;p>InnoDB의 버퍼풀을 통해 쓰기 성능에 도움을 줄 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>쓰기 버퍼링과 지연된 일괄 처리&lt;/strong>&lt;/p>
&lt;p>InnoDB는 데이터 변경 작업이 발생하면 즉시 디스크에 기록하지 않고 버퍼풀에 더티 페이지(Dirty Page)로 유지합니다. 이 방식은 다음과 같은 이점을 제공합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>랜덤 I/O 최소화&lt;/strong>:
&lt;ul>
&lt;li>&lt;code>INSERT&lt;/code>, &lt;code>UPDATE&lt;/code>, &lt;code>DELETE&lt;/code> 쿼리는 데이터 파일의 흩어진 레코드를 변경하는 랜덤한 디스크 작업을 발생시키지만, 버퍼풀을 통해 이러한 변경을 일정 시간 동안 모아서 효율적으로 처리합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>쓰기 병합&lt;/strong>:
&lt;ul>
&lt;li>같은 페이지에 대한 여러 변경 사항이 버퍼풀 내에서 병합되어 디스크 I/O 횟수를 크게 줄입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>순차적 I/O 전환&lt;/strong>:
&lt;ul>
&lt;li>여러 랜덤 쓰기 작업을 모아 더 효율적인 순차적 I/O 패턴으로 변환합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>변경 버퍼(Change Buffer)&lt;/strong>&lt;/p>
&lt;p>보조 인덱스 변경에 특화된 최적화 기법으로, LSM Tree의 쓰기 지연 원리와 유사한 방식을 도입했습니다.&lt;/p>
&lt;ul>
&lt;li>보조 인덱스 변경 사항을 즉시 디스크에 반영하지 않고 메모리에 버퍼링합니다.&lt;/li>
&lt;li>시스템 리소스가 여유 있을 때나 해당 페이지가 다른 이유로 메모리에 로드될 때 변경 사항을 적용합니다.&lt;/li>
&lt;li>보조 인덱스가 많은 테이블에서 특히 큰 성능 향상을 제공합니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>리두 로그(Redo Log)와 버퍼풀의 협업&lt;/strong>&lt;/p>
&lt;p>리두 로그와 버퍼풀의 효율적인 상호작용은 데이터 안전성을 보장하면서도 쓰기 성능에 도움을 줄 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>선로깅(Write-Ahead Logging)&lt;/strong>:
&lt;ul>
&lt;li>데이터 변경이 발생하면 먼저 순차적인 리두 로그에 기록하고, 실제 데이터 페이지는 버퍼풀에 더티 페이지로 유지합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>그룹 커밋(Group Commit)&lt;/strong>:
&lt;ul>
&lt;li>여러 트랜잭션의 커밋을 함께 묶어 처리하여 I/O 오버헤드를 줄입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>체크포인트 최적화&lt;/strong>:
&lt;ul>
&lt;li>리두 로그와 버퍼풀의 크기를 적절히 조정하여 체크포인트 빈도를 최적화함으로써 디스크 I/O 폭발 현상을 방지합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>더티 페이지 관리 및 플러시 최적화&lt;/strong>&lt;/p>
&lt;p>InnoDB는 더티 페이지의 디스크 기록을 효율적으로 관리하기 위한 다양한 메커니즘을 제공합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>플러시 리스트(Flush List)&lt;/strong>:
&lt;ul>
&lt;li>변경 시점을 기준으로 더티 페이지를 관리하며, 오래된 변경 사항부터 순차적으로 디스크에 기록합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>어댑티브 플러시(Adaptive Flushing)&lt;/strong>:
&lt;ul>
&lt;li>리두 로그의 증가 속도를 분석하여 최적의 시점에 적절한 양의 더티 페이지를 디스크에 기록합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>버퍼풀 인스턴스 분할&lt;/strong>:
&lt;ul>
&lt;li>여러 개의 버퍼풀 인스턴스로 나누어 내부 잠금 경합을 줄이고 병렬 처리 효율을 높입니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>페이지 클리너 스레드(Page Cleaner Thread)&lt;/strong>:
&lt;ul>
&lt;li>백그라운드에서 더티 페이지를 디스크로 동기화하는 전용 스레드를 통해 사용자 쿼리 처리에 영향을 최소화합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>이중 쓰기 버퍼(Doublewrite Buffer)&lt;/strong>&lt;/p>
&lt;p>데이터 무결성을 보장하면서도 쓰기 성능을 향상시키는 매커니즘입니다.&lt;/p>
&lt;ul>
&lt;li>더티 페이지를 데이터 파일에 직접 쓰기 전에 먼저 연속된 이중 쓰기 버퍼 영역에 기록합니다.&lt;/li>
&lt;li>연속된 영역에 순차적으로 기록하므로 I/O 효율성이 향상됩니다.&lt;/li>
&lt;li>&amp;ldquo;부분 페이지 쓰기&amp;rdquo; 문제를 방지하여 시스템 충돌 시에도 데이터 일관성을 보장합니다.&lt;/li>
&lt;/ul>
&lt;h3 id="mvcc의-쓰기-성능-개선-효과">MVCC의 쓰기 성능 개선 효과&lt;/h3>
&lt;p>MVCC는 여러 트랜잭션이 동시에 적용되는 상황에서 잠금 수준에 따라 다른 버전을 유지, 제공하여 잠금으로 인한 읽기 성능 저하를 개선하려는 목적으로 활용하지만, 트랜잭션의 유지 시간을 줄여 쓰기 성능 향상을 기대할 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>읽기-쓰기 충돌 감소&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>쓰기 블로킹 최소화&lt;/strong>:
&lt;ul>
&lt;li>전통적인 잠금 기반 시스템에서는 쓰기 작업이 읽기 작업을 차단하거나 그 반대의 경우가 발생하지만, MVCC는 쓰기 중에도 일관된 데이터 스냅샷을 통해 읽기가 가능하게 함으로써 블로킹을 최소화합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>동시성 향상&lt;/strong>:
&lt;ul>
&lt;li>읽기 작업이 쓰기 작업을 기다릴 필요가 없기 때문에, 높은 동시성 환경에서 쓰기 처리량이 크게 향상됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>적은 락 획득&lt;/strong>:
&lt;ul>
&lt;li>읽기 작업이 락을 획득할 필요가 없으므로, 쓰기 작업에 필요한 락을 더 빠르게 획득할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>트랜잭션 처리 효율성&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>빠른 롤백 처리&lt;/strong>:
&lt;ul>
&lt;li>변경 사항을 새 버전으로 만들기 때문에, 롤백 시 이전 버전의 데이터가 이미 보존되어 있어 복잡한 복구 작업이 필요하지 않습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>효율적인 충돌 해결&lt;/strong>:
&lt;ul>
&lt;li>트랜잭션 간 충돌을 버전 비교를 통해 효율적으로 감지하고 관리할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>더 짧은 트랜잭션 시간&lt;/strong>:
&lt;ul>
&lt;li>읽기 작업이 쓰기를 차단하지 않아 트랜잭션 완료 시간이 단축됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="rdbms-쓰기-작업-성능-저하">RDBMS 쓰기 작업 성능 저하&lt;/h2>
&lt;p>InnoDB 에서는 위와 같은 노력을 통해 실제 디스크에 변경 내역을 반영하는 작업은 백그라운드로 실행할 수 있게 하고 있습니다. 이 때문에 실제 디스크에 반영되기까지 시간을 걸릴 지 모르겠지만, RDBMS를 사용하는 클라이언트 입장에서는 빠르게 처리되는 것 처럼 동작하게 됩니다.&lt;/p>
&lt;p>하지만 그럼에도 불구하고 성능 저하가 발생하는 이유가 있습니다.&lt;/p>
&lt;h3 id="트랜잭션-일관성-유지-비용">트랜잭션 일관성 유지 비용&lt;/h3>
&lt;p>ACID 특성을 완벽하게 보장하기 위한 오버헤드가 발생합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>트랜잭션 로깅&lt;/strong>:
&lt;ul>
&lt;li>모든 변경 사항은 리두 로그와 언두 로그에 기록되어야 합니다.&lt;/li>
&lt;li>이 로깅 작업은 추가적인 I/O를 발생시키며, 특히 &lt;code>innodb_flush_log_at_trx_commit=1&lt;/code> 설정에서는 모든 트랜잭션 커밋마다 로그를 디스크에 동기화해야 합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>원자성 보장&lt;/strong>:
&lt;ul>
&lt;li>트랜잭션의 모든 작업이 완료되거나 아무것도 적용되지 않아야 하는 원자성을 보장하기 위해, 시스템은 복잡한 롤백 메커니즘을 유지해야 합니다. 이는 롤백 세그먼트 관리와 같은 추가 오버헤드를 발생시킵니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>지속성 보장&lt;/strong>:
&lt;ul>
&lt;li>데이터 변경이 영구적으로 저장되도록 보장하기 위해 데이터베이스는 메모리상의 변경 사항을 주기적으로 디스크에 동기화해야 합니다.&lt;/li>
&lt;li>이 동기화 작업은 비용이 크며, 특히 대규모 변경 작업 후 발생하는 체크포인트는 급격한 I/O 증가를 유발할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="인덱스-관리의-복잡성">인덱스 관리의 복잡성&lt;/h3>
&lt;p>B-Tree 기반 인덱스 구조가 가지는 특성으로 인한 오버헤드가 발생합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>다중 인덱스 업데이트&lt;/strong>:
&lt;ul>
&lt;li>하나의 테이블에 여러 인덱스가 있는 경우, 데이터 변경 시 모든 관련 인덱스를 함께 업데이트해야 합니다.&lt;/li>
&lt;li>인덱스의 수가 많을수록 쓰기 작업의 부담이 기하급수적으로 증가합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>B-Tree 재조정&lt;/strong>:
&lt;ul>
&lt;li>데이터 삽입이나 삭제로 인해 B-Tree 구조의 균형이 깨지면, 시스템은 페이지 분할(Page Split)이나 페이지 병합(Page Merge)을 수행해야 합니다.&lt;/li>
&lt;li>이 과정은 추가적인 I/O와 CPU 비용을 발생시키며, 특히 페이지 분할은 연쇄적인 분할을 유발할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>인덱스 단편화&lt;/strong>:
&lt;ul>
&lt;li>시간이 지남에 따라 B-Tree 인덱스는 단편화되어 공간 효율성과 성능이 저하될 수 있습니다.&lt;/li>
&lt;li>이를 해결하기 위한 인덱스 재구성 작업은 추가적인 시스템 부하를 발생시킵니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="제약-조건-검증">제약 조건 검증&lt;/h3>
&lt;p>데이터 무결성을 위한 다양한 제약 조건 검증 과정이 쓰기 성능에 영향을 미칩니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>외래 키 제약 조건&lt;/strong>:
&lt;ul>
&lt;li>외래 키를 포함하는 테이블에서 데이터를 변경할 때, 시스템은 참조 무결성을 유지하기 위해 참조된 테이블을 검사해야 합니다&lt;/li>
&lt;li>이는 추가적인 쿼리와 락을 필요로 합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>유니크 제약 조건&lt;/strong>:
&lt;ul>
&lt;li>고유 인덱스가 있는 열에 데이터를 삽입할 때, 시스템은 중복 값이 없는지 확인해야 합니다.&lt;/li>
&lt;li>이 검증 과정은 특히 대량 삽입 작업에서 상당한 오버헤드를 발생시킬 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>체크 제약 조건&lt;/strong>:
&lt;ul>
&lt;li>데이터 값이 특정 조건을 만족하는지 확인하는 체크 제약 조건은 추가적인 검증 로직이 필요하며, 이는 쓰기 작업의 복잡성을 증가시킵니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이 때문에 실제 제약 조건을 애플리케이션 수준에서 처리하는 경우가 다수 있습니다.&lt;/p>
&lt;h3 id="버퍼-관리의-복잡성">버퍼 관리의 복잡성&lt;/h3>
&lt;p>메모리와 디스크 사이의 데이터 관리가 복잡한 오버헤드를 발생시킵니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>버퍼풀 경합&lt;/strong>:
&lt;ul>
&lt;li>고부하 상황에서 버퍼풀의 제한된 페이지를 두고 여러 쿼리가 경쟁할 수 있으며, 이는 상호 간섭과 성능 저하를 초래할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>메모리 제약&lt;/strong>:
&lt;ul>
&lt;li>데이터셋이 사용 가능한 메모리보다 클 경우, 페이지를 지속적으로 디스크에서 읽고 쓰는 스래싱(thrashing) 현상이 발생할 수 있으며, 이는 성능을 크게 저하시킵니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>더티 페이지 관리&lt;/strong>:
&lt;ul>
&lt;li>버퍼풀에 많은 더티 페이지가 누적되면, 체크포인트 동안 디스크에 대량의 데이터를 쓰는 &amp;ldquo;쓰기 폭발(write burst)&amp;rdquo; 현상이 발생할 수 있습니다.&lt;/li>
&lt;li>이는 특히 대량 데이터 로드 작업 후에 심각한 성능 문제를 일으킬 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="잠금lock-메커니즘의-오버헤드">잠금(Lock) 메커니즘의 오버헤드&lt;/h3>
&lt;p>데이터 일관성을 보장하기 위한 다양한 수준의 잠금 메커니즘이 성능에 영향을 미칩니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>테이블 잠금(Table Lock)&lt;/strong>:
&lt;ul>
&lt;li>&lt;code>ALTER TABLE&lt;/code>과 같은 스키마 변경 작업은 테이블 전체를 잠그기 때문에, 해당 테이블에 대한 모든 쓰기 작업이 차단됩니다.&lt;/li>
&lt;li>이는 특히 대형 테이블이나 고부하 환경에서 심각한 성능 문제를 일으킬 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>행 잠금(Row Lock)&lt;/strong>:
&lt;ul>
&lt;li>개별 행 수준의 잠금은 더 높은 동시성을 제공하지만, 관리해야 할 잠금의 수가 많아지면서 오버헤드가 증가합니다.&lt;/li>
&lt;li>특히 많은 행을 수정하는 트랜잭션에서는 수많은 잠금을 획득하고 관리해야 하므로 성능이 저하될 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>갭 잠금(Gap Lock)&lt;/strong>:
&lt;ul>
&lt;li>InnoDB의 기본 격리 수준인 REPEATABLE READ에서는 팬텀 읽기(phantom reads)를 방지하기 위해 갭 잠금을 사용합니다.&lt;/li>
&lt;li>이는 실제 레코드뿐만 아니라 레코드 사이의 간격까지 잠그기 때문에 동시성이 감소하고 교착 상태 가능성이 증가합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>의도 잠금(Intention Lock)&lt;/strong>:
&lt;ul>
&lt;li>테이블과 행 간의 잠금 관계를 효율적으로 관리하기 위한 의도 잠금도 추가적인 관리 오버헤드를 발생시킵니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="잠금-경합lock-contention과-교착-상태deadlock">잠금 경합(Lock Contention)과 교착 상태(Deadlock)&lt;/h3>
&lt;p>고부하 상황에서 잠금 관련 문제가 성능을 크게 저하시킬 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>잠금 대기(Lock Wait)&lt;/strong>:
&lt;ul>
&lt;li>한 트랜잭션이 이미 잠긴 리소스에 접근하려 할 때, 해당 리소스가 해제될 때까지 대기해야 합니다.&lt;/li>
&lt;li>이러한 대기 시간은 전체 쿼리 실행 시간을 크게 증가시킬 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>교착 상태(Deadlock)&lt;/strong>:
&lt;ul>
&lt;li>서로 다른 트랜잭션이 상대방이 필요로 하는 잠금을 보유한 채로 서로의 잠금을 기다리는 교착 상태가 발생할 수 있습니다.&lt;/li>
&lt;li>InnoDB는 이를 감지하고 자동으로 한 트랜잭션을 롤백시키지만, 이로 인해 애플리케이션에서 트랜잭션을 재시도해야 하는 추가 비용이 발생합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>핫스팟(Hotspot)&lt;/strong>:
&lt;ul>
&lt;li>특정 행이나 페이지가 많은 트랜잭션에 의해 빈번하게 접근되는 경우, 해당 리소스에 대한 경합이 심해지고 이는 전체 시스템 성능을 저하시키는 병목 지점이 될 수 있습니다.&lt;/li>
&lt;li>일반적인 예로는 시퀀스 테이블이나 카운터 업데이트 등이 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>이러한 다양한 요인들이 RDBMS에서 쓰기 작업의 성능을 제약하는 근본적인 이유가 됩니다. MySQL InnoDB와 같은 현대적인 엔진은 이러한 제약을 최소화하기 위해 다양한 최적화 기법을 도입했지만, 기본적인 아키텍처 특성으로 인한 한계가 존재합니다.&lt;/p>
&lt;h2 id="lsm-tree가-적절한-상황은">LSM Tree가 적절한 상황은?&lt;/h2>
&lt;p>InnoDB의 다양한 최적화에도 불구하고, 특정 상황에서는 여전히 NoSQL 데이터베이스가 더 적합한 선택일 수 있습니다.&lt;/p>
&lt;h3 id="대규모-쓰기-워크로드">대규모 쓰기 워크로드&lt;/h3>
&lt;p>극단적으로 쓰기가 많은 워크로드에서는 LSM Tree 기반 시스템이 본질적으로 유리합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>고빈도 삽입 작업&lt;/strong>:
&lt;ul>
&lt;li>로그 수집, IoT 센서 데이터, 클릭스트림 추적과 같이 초당 수만에서 수십만 건의 삽입이 필요한 경우, NoSQL 시스템의 순차적 쓰기 방식이 큰 이점을 제공합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>쓰기 최적화 구조&lt;/strong>:
&lt;ul>
&lt;li>NoSQL 시스템은 쓰기 작업을 위해 특별히 설계되었으며, 디스크 I/O 패턴이 쓰기에 최적화되어 있습니다.&lt;/li>
&lt;li>인덱스 구조의 재구성 없이 순차 쓰기만 수행하므로 CPU 오버헤드가 적습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>배치 처리 효율성&lt;/strong>:
&lt;ul>
&lt;li>대량의 데이터를 일괄 처리하는 작업에서 NoSQL은 스키마 검증, 트랜잭션 오버헤드, 인덱스 재구성과 같은 RDBMS의 제약 없이 더 빠르게 데이터를 로드할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="스키마리스schemaless-데이터-모델-필요">스키마리스(Schemaless) 데이터 모델 필요&lt;/h3>
&lt;p>데이터 구조가 자주 변경되거나 매우 다양한 경우 LSM Tree가 유리합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>유연한 스키마&lt;/strong>:
&lt;ul>
&lt;li>문서 기반 NoSQL 데이터베이스는 스키마 변경 없이 새로운 필드를 추가할 수 있어, 빠르게 변화하는 비즈니스 요구사항에 더 민첩하게 대응할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>다양한 데이터 형태&lt;/strong>:
&lt;ul>
&lt;li>같은 컬렉션 내에서도 서로 다른 구조의 데이터를 저장할 수 있어, 이기종 데이터를 관리하는 데 유리합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>개발 속도&lt;/strong>:
&lt;ul>
&lt;li>스키마 정의 및 마이그레이션 부담이 없어, 프로토타이핑이나 애자일 개발 환경에서 빠른 반복 개발이 가능합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="수평적-확장성-요구">수평적 확장성 요구&lt;/h3>
&lt;p>대규모 데이터와 트래픽을 처리해야 하는 경우 NoSQL의 분산 아키텍처가 유리합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>기본 샤딩 지원&lt;/strong>:
&lt;ul>
&lt;li>많은 NoSQL 솔루션은 처음부터 분산 시스템으로 설계되어 있어, 데이터를 여러 노드에 자동으로 분산하는 샤딩 기능이 기본으로 제공됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>선형적 확장성&lt;/strong>:
&lt;ul>
&lt;li>노드를 추가하는 것만으로 거의 선형적인 성능 향상을 얻을 수 있어, 성장하는 서비스의 수요에 유연하게 대응할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>클라우드 친화적&lt;/strong>:
&lt;ul>
&lt;li>대부분의 NoSQL 시스템은 클라우드 환경에서 효율적으로 동작하도록 설계되어 있어, 탄력적인 리소스 관리와 자동화된 운영이 용이합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>또한 RDBMS에서는 읽기 전용 레플리카를 통해 읽기 작업에 부하를 비교적 쉽게 개선할 수 있지만, 쓰기 작업에 대한 쓰기 레플리카를 운영하는 것은 RDBMS의 쓰기 과정의 복잡함으로 인해 굉장히 비효율적인 것으로 알려져 있습니다.&lt;/p>
&lt;h3 id="지리적으로-분산된-데이터-저장">지리적으로 분산된 데이터 저장&lt;/h3>
&lt;p>글로벌 서비스나 지역적으로 분산된 애플리케이션의 경우 복제가 유리한 LSM Tree가 적합할 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>멀티 리전 복제&lt;/strong>:
&lt;ul>
&lt;li>많은 NoSQL 시스템은 지리적으로 분산된 데이터 센터 간의 복제를 기본 기능으로 지원하여, 글로벌 사용자에게 낮은 지연 시간의 서비스를 제공할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>파티션 허용성&lt;/strong>:
&lt;ul>
&lt;li>CAP 이론에서 가용성(A)과 파티션 허용성(P)에 중점을 두어, 네트워크 지연이나 단절이 있는 환경에서도 서비스를 계속 제공할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>지역성 최적화&lt;/strong>:
&lt;ul>
&lt;li>사용자와 가까운 지역에 데이터를 위치시켜 접근 지연 시간을 최소화할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="높은-가용성-요구">높은 가용성 요구&lt;/h3>
&lt;p>중단 없는 서비스 제공이 필수적인 경우 분산 특성이 유리합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>마스터리스(Masterless) 아키텍처&lt;/strong>:
&lt;ul>
&lt;li>카산드라와 같은 일부 NoSQL 시스템은 모든 노드가 동등한 역할을 하는 마스터리스 아키텍처를 제공하여, 단일 장애점이 없는 고가용성 시스템을 구축할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>자동 복구 메커니즘&lt;/strong>:
&lt;ul>
&lt;li>노드 장애 시 자동으로 데이터를 재분배하고 복구하는 메커니즘이 내장되어 있어, 운영 부담이 줄어듭니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>읽기/쓰기 가용성 조정&lt;/strong>:
&lt;ul>
&lt;li>일부 NoSQL 시스템에서는 일관성 수준을 조정하여 가용성과 일관성 사이의 균형을 애플리케이션 요구에 맞게 조정할 수 있습니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>LSM Tree를 활용하는 NoSQL 데이터베이스는 이러한 특정 사용 사례에서 RDBMS보다 뛰어난 성능과 적합성을 제공할 수 있습니다. 그러나 트랜잭션 일관성, 복잡한 쿼리, 조인 작업이 중요한 경우에는 여전히 RDBMS가 더 적합할 수 있으므로, 데이터베이스 선택은 실제 애플리케이션의 요구사항과 워크로드 특성을 면밀히 분석한 후 이루어져야 합니다.&lt;/p>
&lt;h2 id="실제-환경에서의-데이터베이스-선택">실제 환경에서의 데이터베이스 선택&lt;/h2>
&lt;p>이론적인 차이점만으로는 실제 환경에서의 성능을 정확히 예측하기 어렵습니다. 다음과 같은 요소들이 성능에 큰 영향을 미칩니다.&lt;/p>
&lt;h3 id="워크로드-특성">워크로드 특성&lt;/h3>
&lt;p>워크로드의 읽기/쓰기 비율은 데이터베이스 선택에 중요한 요소입니다.&lt;/p>
&lt;p>읽기가 대부분인 워크로드(일반적인 웹 서비스)에서는 B-Tree 기반 RDBMS가 유리할 수 있습니다. 반면, 쓰기가 많은 워크로드(예: 로깅, 이벤트 수집)에서는 LSM Tree 기반 NoSQL이 더 효율적일 수 있습니다.&lt;/p>
&lt;p>쿼리 패턴도 중요한데, &lt;strong>복잡한 조인&lt;/strong>이나 &lt;strong>트랜잭션&lt;/strong>이 필요한 경우 RDBMS가 적합하며, 단순한 &lt;strong>키-값 조회&lt;/strong>가 주된 작업이라면 NoSQL이 더 간단하고 효율적일 수 있습니다.&lt;/p>
&lt;p>&lt;strong>데이터 크기&lt;/strong>와 &lt;strong>성장 속도&lt;/strong>도 고려해야 하는데, 대용량 데이터에서는 LSM Tree의 우수한 압축률과 확장성이 장점이 될 수 있습니다.&lt;/p>
&lt;h3 id="하드웨어-환경">하드웨어 환경&lt;/h3>
&lt;p>하드웨어 환경은 데이터베이스 성능에 직접적인 영향을 미칩니다.&lt;/p>
&lt;p>HDD를 사용하는 경우, 순차적 I/O에 최적화된 LSM Tree가 무작위 I/O가 많은 B-Tree보다 유리합니다. SSD에서는 무작위 I/O의 패널티가 줄어들어 B-Tree의 단점이 완화됩니다.&lt;/p>
&lt;p>&lt;strong>사용 가능한 메모리&lt;/strong> 양도 중요한 요소입니다. 대용량 버퍼풀이 가능한 환경에서는 B-Tree의 읽기/쓰기 성능이 크게 향상되며, LSM Tree의 컴팩션 오버헤드가 상대적으로 더 부담스러울 수 있습니다.&lt;/p>
&lt;p>&lt;strong>CPU 자원&lt;/strong>도 고려해야 하는데, LSM Tree의 백그라운드 컴팩션 작업은 추가적인 CPU 자원을 소모하므로, CPU 제한이 있는 환경에서는 이점이 감소할 수 있습니다.&lt;/p>
&lt;h3 id="애플리케이션-요구사항">애플리케이션 요구사항&lt;/h3>
&lt;p>애플리케이션의 &lt;strong>데이터 일관성&lt;/strong>, &lt;strong>트랜잭션&lt;/strong>, &lt;strong>가용성&lt;/strong> 요구사항도 데이터베이스 선택에 중요한 요소입니다.&lt;/p>
&lt;p>ACID 트랜잭션이 중요한 금융, 전자상거래 등의 애플리케이션에서는 RDBMS를 선호하는 경향이 있습니다. 반면, 일시적인 데이터 불일치를 허용할 수 있는 소셜 미디어, 로깅 등의 애플리케이션에서는 NoSQL의 유연성과 확장성이 장점이 될 수 있습니다.&lt;/p>
&lt;p>&lt;strong>스키마 변경 빈도&lt;/strong>도 고려사항입니다. 스키마가 자주 변경되는 환경에서는 스키마리스 또는 스키마 유연성이 높은 NoSQL이 유리할 수 있습니다. 지리적 분산이나 고가용성 요구사항이 있는 경우, 분산 설계가 기본적으로 포함된 일부 NoSQL 솔루션이 적합할 수 있습니다.&lt;/p>
&lt;h2 id="실제-벤치마크-테스트의-중요성">실제 벤치마크 테스트의 중요성&lt;/h2>
&lt;p>이론적인 성능 특성은 중요한 지침이 되지만, 실제 운영 환경에서 예상과 다른 결과가 나올 수 있기 때문에 최종 결정은 실제 애플리케이션 데이터와 워크로드를 사용한 벤치마크 테스트를 통해 이루어져야 한다고 언급하고 있습니다.&lt;/p>
&lt;h3 id="실제-데이터-크기와-분포-반영">실제 데이터 크기와 분포 반영&lt;/h3>
&lt;p>벤치마크 테스트는 반드시 &lt;strong>실제 애플리케이션에서 사용할 데이터의 크기와 분포&lt;/strong>를 반영해야 합니다.&lt;/p>
&lt;p>합성 데이터나 균일하게 분포된 테스트 데이터는 실제 환경에서의 성능을 정확히 예측하지 못할 수 있습니다. 실제 데이터는 종종 불균형하게 분포되어 있으며, 이런 데이터 편향(skew)은 데이터베이스 성능에 큰 영향을 미칩니다. 특히 인덱스 효율성, 캐시 히트율, 쿼리 실행 계획 등에 영향을 줍니다.&lt;br>
가능하다면 프로덕션 데이터의 익명화된 사본이나 통계적으로 유사한 데이터셋을 사용하여 테스트하는 것이 좋습니다.&lt;/p>
&lt;h3 id="실제-쿼리-패턴-테스트">실제 쿼리 패턴 테스트&lt;/h3>
&lt;p>애플리케이션의 &lt;strong>실제 쿼리 패턴&lt;/strong>을 사용한 벤치마크가 중요합니다.&lt;/p>
&lt;p>단순한 CRUD 작업만으로는 복잡한 애플리케이션의 성능을 예측하기 어렵습니다. 실제 애플리케이션에서 자주 사용되는 쿼리, 특히 &lt;strong>성능 병목이 될 가능성이 있는 복잡한 쿼리들을 포함&lt;/strong>시켜야 합니다.&lt;/p>
&lt;p>실제 워크로드의 &lt;strong>읽기/쓰기 비율&lt;/strong>, &lt;strong>동시 접속 수준&lt;/strong>, &lt;strong>쿼리 복잡성&lt;/strong> 등을 반영한 &lt;strong>테스트 시나리오를 구성&lt;/strong>해야 합니다. 또한 피크 시간대의 부하를 시뮬레이션하여 최악의 상황에서도 성능 요구사항을 충족하는지 확인해야 합니다.&lt;/p>
&lt;h3 id="확장성-테스트">확장성 테스트&lt;/h3>
&lt;p>데이터베이스는 시간이 지남에 따라 데이터 볼륨이 증가하므로, 확장성 테스트가 필요할 수 있습니다. 현재 데이터 크기뿐만 아니라 예상되는 미래 데이터 크기에서도 테스트를 수행하면 좋습니다.&lt;/p>
&lt;p>데이터 증가에 따른 쿼리 성능 변화, 인덱스 효율성 변화, 저장 공간 요구사항 등을 측정해야 합니다. 또한 데이터 증가에 따른 백업, 복구, 유지보수 작업의 성능도 고려해야 합니다. 하드웨어 리소스(CPU, 메모리, 디스크 I/O, 네트워크 대역폭) 사용률을 모니터링하여 어떤 리소스가 병목이 되는지 파악하고, 스케일업 또는 스케일아웃 전략을 계획해야 합니다.&lt;/p>
&lt;h3 id="장기-실행-테스트">장기 실행 테스트&lt;/h3>
&lt;p>데이터베이스 성능은 시간이 지남에 따라 변화할 수 있으므로, 장기 실행 테스트가 필요할 수 있습니다.&lt;/p>
&lt;p>LSM Tree 기반 데이터베이스는 시간이 지남에 따라 컴팩션 오버헤드가 누적될 수 있고, B-Tree 기반 데이터베이스는 메모리 단편화나 인덱스 불균형 문제가 발생할 수 있습니다. 따라서 단기 성능뿐만 아니라 며칠 또는 몇 주에 걸친 장기 실행 테스트를 통해 성능 저하 패턴을 분석해야 합니다.&lt;/p>
&lt;p>백그라운드 작업(컴팩션, 통계 업데이트, 백업 등)이 전체 시스템 성능에 미치는 영향도 평가해야 합니다. 또한 장애 상황(노드 장애, 디스크 오류 등) 후 복구 성능과 데이터 일관성도 테스트해야 합니다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>B-Tree 기반의 MySQL InnoDB와 LSM Tree 기반의 NoSQL 데이터베이스는 각각 고유한 성능 특성과 장단점을 가지고 있습니다. 전통적으로 RDBMS는 읽기에 최적화되어 있고, NoSQL은 쓰기에 최적화되어 있다고 여겨졌지만, 현대적인 데이터베이스 엔진들은 이러한 격차를 상당 부분 줄였습니다.&lt;/p>
&lt;p>MySQL InnoDB는 버퍼풀, 변경 버퍼, MVCC 등 다양한 최적화 기법을 통해 B-Tree의 전통적인 쓰기 성능 약점을 크게 개선했습니다. 이러한 최적화는 많은 일반적인 워크로드에서 NoSQL과 비교할 만한 쓰기 성능을 제공할 수 있게 했습니다. 또한 트랜잭션 특성, 강력한 일관성, 복잡한 쿼리 지원 등 RDBMS만의 강점을 유지하고 있습니다.&lt;/p>
&lt;p>반면, 대규모 쓰기 작업, 스키마리스 데이터 모델, 수평적 확장성, 지리적 분산 등이 필요한 특정 사례에서는 여전히 NoSQL 솔루션이 더 적합할 수 있습니다. 특히 초당 수십만 건 이상의 쓰기나 페타바이트 규모의 데이터를 다루는 환경에서는 NoSQL의 분산 아키텍처와 쓰기 최적화 설계가 큰 이점을 제공합니다.&lt;/p>
&lt;p>데이터베이스 선택에 있어 가장 중요한 것은 &amp;ldquo;어떤 데이터베이스가 더 좋은가&amp;quot;라는 단순한 질문이 아닌, 다음과 같은 실제 요구사항과 제약 조건을 종합적으로 고려하는 것입니다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>워크로드 특성&lt;/strong>:
&lt;ul>
&lt;li>읽기/쓰기 비율, 쿼리 복잡성, 트랜잭션 요구사항&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>데이터 모델&lt;/strong>:
&lt;ul>
&lt;li>관계형 데이터 vs 비구조화 데이터, 스키마 변경 빈도&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>확장성 요구사항&lt;/strong>:
&lt;ul>
&lt;li>데이터 증가 예측, 필요한 처리량, 확장 전략&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>운영 고려사항&lt;/strong>:
&lt;ul>
&lt;li>유지보수, 백업, 복구, 모니터링 용이성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>리소스 제약&lt;/strong>:
&lt;ul>
&lt;li>하드웨어 환경, 예산, 팀의 기술적 역량&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>또한, 현대적인 시스템 아키텍처에서는 단일 데이터베이스에 의존하기보다 다중 데이터베이스 접근법(polyglot persistence)을 채택하는 경우가 늘고 있습니다. 트랜잭션 처리에는 RDBMS를, 로깅이나 분석에는 NoSQL을 사용하는 방식으로, 각 부분에 가장 적합한 데이터 저장소를 선택하는 접근법입니다.&lt;/p>
&lt;p>무엇보다 중요한 것은 이론적인 성능 특성만으로 판단하지 말고, 실제 데이터와 워크로드를 사용한 벤치마크 테스트를 통해 결정을 검증하는 것입니다. 데이터베이스 성능은 특정 워크로드, 데이터 크기, 하드웨어 환경에 따라 크게 달라질 수 있으므로, 실제 환경과 유사한 조건에서의 테스트가 필수적입니다.&lt;/p>
&lt;p>결론적으로, MySQL InnoDB와 같은 현대적인 RDBMS는 다양한 최적화를 통해 쓰기 성능을 크게 개선했지만, 특정 사용 사례에서는 여전히 NoSQL의 장점이 두드러집니다. 데이터베이스 선택은 기술적인 특성뿐만 아니라 비즈니스 요구사항, 개발 생산성, 운영 비용 등을 종합적으로 고려한 균형 잡힌 접근이 필요합니다.&lt;/p></description></item><item><title>챌린지 과정 4주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/</link><pubDate>Mon, 12 Aug 2024 10:44:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/cover.png" alt="Featured image of post 챌린지 과정 4주차 회고" />&lt;p>부스트캠프 챌린지 과정이 4주차로 마무리되었습니다🥳&lt;/p>
&lt;p>주말을 이용하여 미뤄왔던 대청소와 약속들 덕분에 월요일이 되어서야 회고를 쓰게 되네요&lt;/p>
&lt;p>이번주는 미션들을 수행하지는 않겠지만, 그동안 바빠서 마무리하지 못했던 학습 정리로 바쁠 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img.png"
width="900"
height="752"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_huc5e3bd9d0538c93e5f494cd205f8c424_816479_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_huc5e3bd9d0538c93e5f494cd205f8c424_816479_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="아직 한발 남았다."
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>이번 주는 저번주와 마찬가지로 &lt;strong>짝 활동&lt;/strong>을 기본으로 한 주가 구성되었습니다.&lt;/p>
&lt;p>&lt;strong>각자 개발&lt;/strong>후 &lt;strong>짝 개선&lt;/strong>하기, &lt;strong>짝 개발&lt;/strong>후 &lt;strong>각자 개선&lt;/strong>하기로 &lt;strong>데이터베이스&lt;/strong>와 &lt;strong>네트워크&lt;/strong>를 깊게 이해해야만 해결할 수 있는 미션들이 주어졌습니다.&lt;/p>
&lt;p>그리고 마지막 테스트를 위한 &lt;strong>히든 미션&lt;/strong>을 금요일에 수행하였습니다.&lt;/p>
&lt;p>개인적으로 데이터베이스 관련 미션은 많이 어려웠네요 🙃&lt;/p>
&lt;p>이번 회고에는 미션들에 대한 접근 방법에 더해 짝 활동이 어떻게, 무엇을 중심으로 진행되었는지 설명해보겠습니다.&lt;/p>
&lt;h2 id="day16--17-데이터베이스">Day16 ~ 17: 데이터베이스&lt;/h2>
&lt;p>데이터베이스 관련 미션은 &lt;strong>각자 구현&lt;/strong> 후 &lt;strong>짝 개선&lt;/strong>을 수행해야하는 미션이었습니다.&lt;/p>
&lt;p>파일 기반 데이터베이스를 직접 구현해야하는 미션이었는데, 위에서 말씀드렸던 것처럼 개인적으로 많이 어려웠습니다.&lt;/p>
&lt;h3 id="mysql">MySQL&lt;/h3>
&lt;p>이전 직장에서 풀스택 개발자로 업무를 수행해오며 오랜기간 유지되어온 PHP 백엔드 레거시를 운영하는 것이 주 업무였는데요&lt;/p>
&lt;p>그렇다보니 예전 방식으로 그대로 개발을 수행할 수 밖에 없었고, &lt;a class="link" href="https://www.php.net/manual/en/book.pdo.php" target="_blank" rel="noopener"
>PDO&lt;/a>(PHP Data Object)를 사용하고 있었기 때문에 직접 쿼리를 작성해야하는 것은 필수적이었습니다.&lt;/p>
&lt;p>예전 개발 환경과 싱글 스레드 기반으로 순차적인 처리에 중점을 두는 PHP의 특성으로 인해 지금처럼 ORM을 이용하여 작은 쿼리를 여러개 보내는 것 보다는, 굉장히 많은 테이블들을 조인하는 큰 쿼리 하나를 작성해야하는 일도 매우 빈번했습니다.&lt;/p>
&lt;p>그렇다보니 쿼리 튜닝은 저에게 필수적인 역량이었고, 학습에 꽤 많은 공을 들였었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5.png"
width="371"
height="136"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5_hu6fb17a4b1ba75a00ca79acad9d84d206_8737_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5_hu6fb17a4b1ba75a00ca79acad9d84d206_8737_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="MySQL"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="654px"
>&lt;/p>
&lt;p>이러한 이유로 MySQL 내부 동작을 꽤 잘 알고 있다고 생각하여 이번 미션은 MySQL을 모방하는 방식으로 접근했었습니다.&lt;/p>
&lt;h3 id="스토리지-엔진">스토리지 엔진&lt;/h3>
&lt;p>기존 요구사항만을 만족하기 위해서는 단순하게 전체 읽기, 전체 쓰기 방식으로 접근해도 괜찮았지만, 이러한 경우 데이터가 많아지면 급격한 성능 저하가 발생하게됩니다.&lt;/p>
&lt;p>이러한 문제를 해결해보고 싶어 많은 고민을 했는데 이 부분이 정말 어려웠습니다🥲&lt;/p>
&lt;hr>
&lt;p>&lt;strong>InnoDB&lt;/strong>&lt;/p>
&lt;p>데이터베이스의 성능을 나쁘게 만드는 원인은 &lt;strong>디스크 I/O&lt;/strong>에서 발생하는 &lt;strong>병목 현상&lt;/strong>입니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1.png"
width="904"
height="456"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1_hu5128e5d7946208d35600b2a8a7d0222a_52925_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1_hu5128e5d7946208d35600b2a8a7d0222a_52925_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="MySQL 구조"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>MySQL은 크게 &lt;strong>MySQL 엔진&lt;/strong>, &lt;strong>스토리지 엔진&lt;/strong>으로 영역을 구분할 수 있는데, 디스크 I/O에 접근하는 역할은 &lt;strong>스토리지 엔진&lt;/strong>이 전담하여 수행하게 됩니다.&lt;/p>
&lt;p>여러 스토리지 엔진이 있지만 주로 사용되는 &lt;code>InnoDB&lt;/code> 스토리지 엔진은 &lt;strong>버퍼풀&lt;/strong>이라는 메모리 영역을 통해 사용하는 주요 데이터를 대부분 캐싱하여 디스크에 접근하는 것을 최소화합니다.&lt;/p>
&lt;p>또한 쓰기 작업을 버퍼링하여 하드웨어 자원의 여유가 있을 때 백그라운드에서 실행하는 방식들을 통해 데이터베이스의 성능을 크게 끌어올리고 있습니다.&lt;/p>
&lt;p>이를 반영하기 위해서 데이터를 저장하고 관리하는 기본 단위인 &lt;strong>페이지&lt;/strong>를 구현하야할 필요가 있었습니다만&amp;hellip;.&lt;/p>
&lt;p>페이지를 직접 구현하고 이를 이용해서 데이터 저장이나 캐싱등을 구현해야한다고 생각하니 현기증이 나는 것 같다라구요😅&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2.png"
width="632"
height="523"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2_huaf81590ee5a0b6795972f97e2fb827b9_593519_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2_huaf81590ee5a0b6795972f97e2fb827b9_593519_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>그래서 MySQL 인덱스의 기본 단위인 PK만을 이용해서 저장된 파일에서의 레코드 위치만을 가지게 구현하는 방식으로 접근했습니다.&lt;/p>
&lt;p>&lt;strong>B+ Tree&lt;/strong> 같은 자료 구조를 통해서 &lt;code>Index Range Scan&lt;/code> 같은 방식도 적용해보려고 했었는데, 마찬가지로 어려워서 &lt;code>PK&lt;/code> 단일 조건 처리에 관한 부분만 적용할 수 있었습니다.&lt;/p>
&lt;h3 id="짝-개선">짝 개선&lt;/h3>
&lt;p>짝 개선은 이전과 마찬가지로 새로운 기능을 추가하는 것 보다는 기존 코드를 개선하는 방향으로 지침이 주어졌습니다.&lt;/p>
&lt;p>저 같은 경우는 &lt;strong>HTTP 요청/응답 분리&lt;/strong>를, 짝은 &lt;strong>DBMS 아키텍처 반영&lt;/strong>을 통한 &lt;strong>코드 구조&lt;/strong>를 개선하는 것을 목표로 함께 개선을 진행하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>예외 처리&lt;/strong>&lt;/p>
&lt;p>저의 개선 목표였던 &lt;strong>HTTP 요청/응답 분리&lt;/strong> 부분 작업을 수행하면서 자연스럽게 &lt;strong>응답 코드&lt;/strong>에 관한 내용들이 개선되어야 했고, 응답을 만들기위해 &lt;strong>예외 처리&lt;/strong>를 추가하는 부분에서 짝과 의견을 나눌 수 있는 기회가 생겼습니다.&lt;/p>
&lt;p>저 같은 경우는 서비스 로직에서 에러 또는 예외를 발생시켜 해당 에러를 최상위 지점에서 한번에 핸들링하는 것을 선호하는데(&lt;a class="link" href="https://codemario318.github.io/post/clean-code/7/" >클린코드 - 에러 처리&lt;/a>) 어떠한 장점이 있는지에 대해서 물어봐 주셨습니다.&lt;/p>
&lt;p>코드를 보면서 확인해보면 아래와 같습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>개선 전&lt;/strong>&lt;/p>
&lt;p>이전 처리를 복기해보면 아래와 같은 방식으로 처리가 구현되어 있었습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">어떤_서비스_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">값_검증&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;입력 값을 확인해주세요.&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">서비스로직을_사용하는_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">어떤_기능&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">어떤_서비스_객체&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;OK&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이러한 방식에는 몇 가지 문제가 있습니다.&lt;/p>
&lt;ul>
&lt;li>예외를 발생 시킬 때 사용자가 직접 사유를 기억해서 매직넘버(상수가 아닌 직접 입력해야하는 값, 하드코딩)를 사용해야합니다.&lt;/li>
&lt;li>응답도 같은 문제를 가지고 있습니다.&lt;/li>
&lt;/ul>
&lt;p>이러한 방식은 개발자가 실수를 쉽게 할 수 있는 여지가 많아지게됩니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>개선 후&lt;/strong>&lt;/p>
&lt;p>이러한 부분을 아래와 같이 개선하게 되었습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">BadRequestException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">UnauthorizedException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">ForbiddenException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">NotFoundException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">NotAcceptableException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">freeze&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">OK&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">BAD_REQUEST&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">UNAUTHORIZED&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">401&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FORBIDDEN&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">403&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">NOT_FOUND&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">NOT_ACCEPTABLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">406&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">INTERNAL_SERVER_ERROR&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>각 예외 상황에 맞는 예외 클래스를 구현하였습니다.
&lt;ul>
&lt;li>Nest.js 표준 에러 참조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Http 응답 코드에 대해 Enum을 선언하였습니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">어떤_서비스_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">값_검증&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BadRequestException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;입력 값을 확인해주세요.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">서비스로직을_사용하는_최상위_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">어떤_기능&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">어떤_서비스_객체&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">BadRequestException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BAD_REQUEST&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">NotFoundException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NOT_FOUND&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">INTERNAL_SERVER_ERROR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>발생한 예외 클래스를 확인하여 Enum으로 선언된 응답 코드를 상황에 맞게 반환할 수 있도록 변경&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>이러한 형식으로 개선되어 아래와 같은 장점을 취할 수 있었습니다.&lt;/p>
&lt;ul>
&lt;li>예외 클래스를 직접 확인하므로 어떤 에러가 발생했는지 쉽게 파악할 수 있다.&lt;/li>
&lt;li>에외 코드가 어떤 의미인지 확실히 구분할 수 있다. 등&lt;/li>
&lt;/ul>
&lt;p>발생하는 예외가 HTTP 응답에 대해 직접적인 연관성이 있어 또 하나의 세부사항인 HTTP와 관계가 생겨버린다는 것이 아쉬운 점이지만 충분히 개선되었다고 생각합니다.&lt;/p>
&lt;p>제가 생각하는 장점을 코드를 함께 개선해가는 과정을 통해서 설명해 드렸고, 많은 도움이 되었다는 이야기를 들을 수 있었습니다😁&lt;/p>
&lt;h2 id="day18--19-네트워크">Day18 ~ 19: 네트워크&lt;/h2>
&lt;p>네트워크 관련 미션은 &lt;strong>페어 프로그래밍&lt;/strong>을 통해 함께 결과물을 만들고, 이후 &lt;strong>각자 개선&lt;/strong>을 수행하는 미션이었습니다.&lt;/p>
&lt;p>&lt;strong>웹 소켓&lt;/strong> 서버를 직접 구현하는 것이 전제되어있는 미션이었는데, &lt;strong>레이어드 아키텍처&lt;/strong>를 쉽게 적용할 수 있는 요구사항이어서 짝에게 설계를 적극적으로 제안하여 적용하게 되었습니다.&lt;/p>
&lt;p>이전과 달랐던 점은 짝이 이전부터 &lt;strong>TDD&lt;/strong>를 적용해오셨던 분이셔서, 자연스럽게 &lt;strong>TDD&lt;/strong>로 진행되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3.png"
width="816"
height="454"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3_hu05ec6f48f861dd6127467224c3c8452c_617786_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3_hu05ec6f48f861dd6127467224c3c8452c_617786_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>기능 요구사항을 돌아가며 &lt;strong>드라이버&lt;/strong>, &lt;strong>네비게이터&lt;/strong> 역할을 수행하는 방식으로 진행되었는데, 원할하게 &lt;strong>TDD&lt;/strong>가 진행되어서 참 즐거운 경험이었습니다😁&lt;/p>
&lt;p>그리고 짝 캠퍼분이 이전부터 FE 개발을 해오셨던 경험이 있으셔서 JS에 매우 능숙하셨기 때문에 아주 원할하게 진행될 수 있었던 것 같네요&lt;/p>
&lt;p>&lt;strong>레이어드 아키텍처&lt;/strong> 기반의 설계와, &lt;strong>TDD&lt;/strong>가 합쳐지니 지금까지 결과물 중 가장 만족스러운 결과물을 만들 수 있었습니다. 👍&lt;/p>
&lt;p>&lt;del>그래도 새벽 3시가 넘어서야 마무리 할 수 있었어요🤣&lt;/del>&lt;/p>
&lt;h3 id="레이어드-아키텍처">레이어드 아키텍처&lt;/h3>
&lt;p>&lt;code>Socket&lt;/code>을 이용하여 &lt;strong>CLI 기반 클라이언트&lt;/strong>와 &lt;strong>서버&lt;/strong>를 구현해야했습니다.&lt;/p>
&lt;p>서버와 클라이언트의 연결을 만들고, 클라이언트의 요청마다 HTTP 응답을 처리하는 구조가 필요했기 때문에 짝에게 &lt;strong>레이어드 아키텍처&lt;/strong>를 적극적으로 제안하여 반영하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4.png"
width="1127"
height="843"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="레이어드 아키텍처"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;strong>HTTP 요청 수신 및 응답&lt;/strong>, &lt;strong>비즈니스 로직 처리&lt;/strong>, &lt;strong>데이터 조작&lt;/strong>을 각 레이어로 구현하여 분리하여, 좋은 코드 구조를 만들 수 있었습니다.&lt;/p>
&lt;p>짝과 함께 개발하는 과정에서 뿐만이 아니라, 다음 피어세션에서도 해당 설계를 보고 많은 영감을 얻으셨다는 반응이 많아서 뿌듯했네요 😎&lt;/p>
&lt;h3 id="의존성-주입">의존성 주입&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6.png"
width="271"
height="186"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6_hua164b4f218d2ddb10286229f1ed50614_9292_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6_hua164b4f218d2ddb10286229f1ed50614_9292_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="의존성 주입"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>레이어드 아키텍처를 구성하며 각 의존성이 있는 레이어를 &lt;strong>의존성 주입&lt;/strong>을 통해 &lt;strong>구성&lt;/strong>하였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Model&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getItem&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">collection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">condition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">businessLogic&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getItem&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handler&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">businessLogic&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Service&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이러한 구조를 통해 결합을 낮추고 유연성을 높힐 수 있었으며, 구현 과정에서 훨씬 테스트가 용이하다는 장점을 취할 수 있었습니다.&lt;/p>
&lt;h3 id="단단한-테스트-코드">단단한 테스트 코드&lt;/h3>
&lt;p>&lt;strong>각자 개선하기&lt;/strong>에서 저는 테스트 코드 부분을 개선하였습니다.&lt;/p>
&lt;p>단단한 테스트 코드 즉 깨지지 않는 테스트 코드를 작성하기 위해서 개인적으로 테스트 원칙인 단일 책임 원칙, 독립적 테스트 부분을 개선했습니다.&lt;/p>
&lt;ul>
&lt;li>단일 책임 원칙
&lt;ul>
&lt;li>테스트 코드는 하나의 동작이나 기능만을 테스트 해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>독립적 테스트
&lt;ul>
&lt;li>테스트 간에 의존성이 있으면 한 테스트의 실패가 다른 테스트에도 영양을 줌&lt;/li>
&lt;li>테스트 간 상태 공유를 피하고, 각 테스트 케이스가 독립적으로 실행될 수 있도록 보장해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>단일 책임 원칙&lt;/strong>&lt;/p>
&lt;p>하나의 테스트 코드는 한 가지의 동작과 기능을 테스트해야 이후 변경이 적고 오래사용할 수 있는 테스트 코드를 만들 수 있습니다.&lt;/p>
&lt;p>기존 작성되어있던 테스트를 유사하게 다시 만들어봤습니다.&lt;/p>
&lt;p>어떠한 모델에서 id를 이용해 특정 무언가를 찾는 처리입니다. (어떤 내용인지 추론할 수 있으면 안되기 때문에 추상적으로 쓸 수 밖에 없는 점 양해 부탁드립니다.)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 전&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeIds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">from&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">idx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">padStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ID를 활용하여 무언가를 찾아 배정하고 반환하는 처리 테스트&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">each&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">])(&lt;/span>&lt;span class="s2">&amp;#34;무언가를 찾아 배정하고, 배정된 무언가를 반환&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">prevIds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nextId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expected&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prevIds&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nextCampId&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">expected&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>많은 상황에 대해 정상적인 처리를 테스트하고 있습니다.&lt;/p>
&lt;p>많은 테스트케이스를 확인하고 있었기 때문에 예외가 발생해야하는 상황은 별도로 확인하고 있지 않았습니다.&lt;/p>
&lt;p>개인적인 의견으로는 알아보기 힘들다고 판단했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 후&lt;/strong>&lt;/p>
&lt;p>여러 상황을 나누어 테스트하도록 했으며, 테스트 케이스의 숫자도 줄였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ID를 활용하여 무언가를 찾아 배정하고 반환하는 처리 테스트&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;정상 처리 확인&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assignedId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;특정 조건이 넘으면 다른 값 반환 확인&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">clients&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MAX_ASSIGN_CLIENT&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`J&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">padStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assigned&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;먼저 만들어진 무언가에 빈 자리가 있다면 해당 무언가를 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">[]});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">[]});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assignedId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>독립적 테스트&lt;/strong>&lt;/p>
&lt;p>일부 테스트가 스스로의 다른 기능을 호출하는 부분들이 있었습니다. 이는 기능의 변경에 취약한 테스트가 될 수 있다고 판단하여 수정하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 전&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;횟수 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">increaseCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>service.count&lt;/code> 메소드를 통해 현재 &lt;code>count&lt;/code>을 확인하기 위해 &lt;code>service.increaseCount&lt;/code>메소드를 통해 &lt;code>count&lt;/code>를 증가시키고 있습니다.&lt;/p>
&lt;p>이는 자기 자신의 메소드를 재 호출하는 구조로 인해 &lt;code>service.increaseCount&lt;/code>에 미쳐 검증하지 못한 케이스가 있거나, 요구사항 변경으로 인해 검증해야 할 내용이 바뀐다면, &lt;code>service.count&lt;/code>의 테스트 코드도 변경이 불가피한 상황입니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 후&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;횟수 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">clap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>service&lt;/code>의 데이터 보관을 위해 주입받은 &lt;code>Map&lt;/code>에 직접 데이터를 저장, 조작하여 자기 자신의 메소드를 활용하는 테스트 처리의 의존성을 제거하였습니다.&lt;/p>
&lt;h2 id="day20-3차-문제해결력-테스트">Day20: 3차 문제해결력 테스트&lt;/h2>
&lt;p>기존 모집 정보에 3차 문제해결력 테스트가 8월 10일 토요일로 예정되어 있었는데, 마지막 날인 20일차 릴레이 프로젝트를 수행해야하는 시간에 테스트가 진행되었습니다.&lt;/p>
&lt;p>대략적으로 말씀드리면, 부캠에서 제공했던 모든 과정들이 단시간에 종합되어있는 테스트였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7.png"
width="491"
height="340"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7_hu5fb8e3cf3fed11573f93053e9937564e_404795_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7_hu5fb8e3cf3fed11573f93053e9937564e_404795_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="부캠 종합 선물세트"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;p>부캠에 성실히 참여했다면 방식 자체는 생소하지는 않았겠지만, 역시나 시간은 많이 부족했네요🥲&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>마지막 주차에는 같이 학습을 진행한 캠퍼분들에게 영감을 줄 수 있었던것 같아 1주차 이후로 가장 뿌듯했던 한 주 였던 것 같습니다.&lt;/p>
&lt;p>마지막 주차여서 챌린지 과정 전체에대한 회고를 포함해야하나 고민했는데, 따로 작성하기로 결정하여 4주차 회고만 남기게 되었네요&lt;/p>
&lt;p>다음 글은 챌린지 과정 전체에 대한 회고를 올릴 예정이니 기대해주세요😁&lt;/p>
&lt;p>이번에는 3주차 그룹 회고에 남겼던 글로 마무리하겠습니다.&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다☺️ 모두 정말 고생 많으셨어요🔥🔥🔥&lt;/p>
&lt;blockquote>
&lt;p>소프트웨어 장인 책 부분에 성장을 위한 자세에 관해 읽었는데요, 이 부분에서 &amp;ldquo;훈련&amp;quot;을 어떻게 해야 좋은지에 대한 언급이 있습니다.&lt;/p>
&lt;p>훈련을 할 때는 시간이 아무리 많이 걸린다고 하더라도 본인이 할 수 있는 최선의 결과를 만들지 않는다면 성장에는 큰 의미가 없기 때문에 최선을 다하는 것이 중요하다고해요!&lt;/p>
&lt;p>우리 모두 지금까지 열심히 해오고있지만, 앞으로도 최선을 다해서 함께 성장했으면 좋겠어요&lt;/p>
&lt;p>한 주간 정말 고생 많으셨습니다! 맴버쉽에서 꼭 뵈어요 :D&lt;/p>
&lt;/blockquote></description></item></channel></rss>