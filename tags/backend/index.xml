<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Backend on Mario Blog</title><link>https://codemario318.github.io/tags/backend/</link><description>Recent content in Backend on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 09 Nov 2024 10:37:29 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/backend/index.xml" rel="self" type="application/rss+xml"/><item><title>인터페이스 의존성 주입</title><link>https://codemario318.github.io/post/nest/di/</link><pubDate>Sat, 09 Nov 2024 10:37:29 +0900</pubDate><guid>https://codemario318.github.io/post/nest/di/</guid><description>&lt;img src="https://codemario318.github.io/post/nest/di/cover.png" alt="Featured image of post 인터페이스 의존성 주입" />&lt;p>최근 Nest.js를 이용해서 &lt;strong>다중 사용자가 동시에 참여할 수 있는 웹 기반 퀴즈 게임&lt;/strong>을 만드는 프로젝트의 백엔드를 구현하고 있습니다.(과거에 유행했었던 큐플레이와 비슷한 프로젝트라고 보시면 됩니다.)&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/nest/di/img.png"
width="540"
height="405"
srcset="https://codemario318.github.io/post/nest/di/img_hu315076061f99a52f357ceb1428e2871b_491190_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/nest/di/img_hu315076061f99a52f357ceb1428e2871b_491190_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="큐플레이"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>팀 구성원들과 애자일한 개발을 경험하기 위해 &lt;strong>필수적인 요소들을 배포&lt;/strong>하고 &lt;strong>점진적으로 확장&lt;/strong>하기로 결정했기 때문에 진행 초반인 지금은 1인을 플레이를 기준으로 기능들을 만들어가고 있는데요&lt;/p>
&lt;p>그러한 이유로 현재 구현중인 &lt;strong>퀴즈 플레이 정보&lt;/strong>(이하 퀴즈존)는 사용자가 적다는 것을 가정하여 서버의 메모리에서 관리하도록 구현하고 있었습니다.&lt;/p>
&lt;p>그런데 구현하는 과정에서 걱정 거리가 생겼어요&lt;/p>
&lt;ul>
&lt;li>최종 기획은 다중 사용자로 확정&lt;/li>
&lt;li>이후 채팅 기능을 지원할 수 있음&lt;/li>
&lt;/ul>
&lt;p>프로젝트가 발전할수록 서버의 메모리 공간이 아쉬워 질 수 있고, 서버 한대로 부족할 수 있기때문에 &lt;code>Redis&lt;/code> 같은 것들을 이용해서 확장해야하지 않을까? 라는 걱정이었어요&lt;/p>
&lt;p>물론 익스트림 프로그래밍(XP)의 원칙 중 &lt;strong>YAGNI&lt;/strong>(You aren&amp;rsquo;t gonna need it)이나 &lt;strong>KISS&lt;/strong>(Keep it simple, stupid)처럼 당장 필요하지 않은 것들은 구현하지 않을 것을 강조하긴합니다만&amp;hellip;&lt;/p>
&lt;p>아키텍처 관점에서 &lt;strong>확장성&lt;/strong>과 &lt;strong>변경에 대한 안전장치&lt;/strong>로 &lt;strong>인터페이스&lt;/strong>는 당장 필요한 것이 아닌가?! 라는 판단&lt;del>합리화&lt;/del>을 하게 되었습니다.&lt;/p>
&lt;p>그래서 퀴즈존이 저장될 &lt;strong>스토리지 인터페이스&lt;/strong>를 만들고, 메모리를 활용하는 스토리지를 인터페이스를 이용해 구현하기로 결정했어요&lt;/p>
&lt;p>인터페이스를 통해 구현된 스토리지를 인터페이스에 의존하도록 만들기 위해서 &lt;strong>인터페이스 의존성 주입&lt;/strong>이 꼭 필요했습니다.&lt;/p>
&lt;p>이 과정에서 제가 학습하고 적용한 과정을 적어보려고합니다.&lt;/p>
&lt;h2 id="nestjs의-철학">Nest.js의 철학&lt;/h2>
&lt;p>먼저 Nest의 철학을 살펴보면 앞으로 설명할 내용들이 조금 더 잘 이해될겁니다.&lt;/p>
&lt;p>공식 문서의 나와있는 Nest의 철학을 살펴볼까요?&lt;/p>
&lt;blockquote>
&lt;p>/* 생략&amp;hellip; */&lt;/p>
&lt;p>However, while plenty of superb libraries, helpers, and tools exist for Node (and server-side JavaScript), none of them effectively solve the main problem of - &lt;strong>Architecture&lt;/strong>.&lt;/p>
&lt;p>Nest provides an out-of-the-box application architecture which allows developers and teams to create &lt;strong>highly testable, scalable, loosely coupled, and easily maintainable&lt;/strong> applications.&lt;/p>
&lt;/blockquote>
&lt;p>위에서 언급한 내용처럼 Nest는 &lt;strong>아키텍처 문제를 효과적으로 해결&lt;/strong>하기 위해 만들어진 백엔드 프레임워크입니다.&lt;/p>
&lt;p>이 철학을 바탕으로, 기능들을 모듈화하고 역할별로 분리하여 확장성과 테스트 가능성을 확보하는 것이 Nest의 큰 장점 중 하나이고 이를 구조적으로 강제하고있어요&lt;/p>
&lt;h3 id="ddd와-nest-module">DDD와 Nest Module&lt;/h3>
&lt;p>Nest는 도메인 주도 설계(DDD)를 쉽게 적용할 수 있도록 설계되었습니다.&lt;/p>
&lt;p>Nest CLI의 &lt;code>nest g resource&lt;/code> 명령어를 사용해 특정 도메인에 대한 모듈, 서비스, 컨트롤러 등을 생성하면, 관련 기능들이 한 모듈에 모여있는 DDD 형식으로 구조가 자동으로 만들어지게 되어요&lt;/p>
&lt;p>반대로 이렇게 만들어진 모듈들을 다른 모듈에서 활용하려면 추가적인 설정을 필요로 하기 때문에 확실하게 도메인으로 분리되어야 쉽고 편하게 개발할 수 있는 환경을 강제하고 있습니다.&lt;/p>
&lt;h2 id="의존성-주입">의존성 주입&lt;/h2>
&lt;p>Nest에서는 &lt;strong>의존성 주입&lt;/strong>을 통해 객체 간의 의존성을 해결합니다.&lt;/p>
&lt;p>DI는 &lt;code>@Injectable&lt;/code> 데코레이터를 사용해 프로바이더를 정의하고, 이를 생성자에서 주입받아 사용할 수 있게 합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Injectable&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">QuizService&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위와 같이 구현된 퀴즈 서비스는 아래와 같이 같은 디렉터리에 만들어진 &lt;code>quiz.module.ts&lt;/code>에 아래와 같이 활용됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Module&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">controllers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">QuizController&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">providers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">QuizService&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">exports&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">QuizService&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">QuizModule&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>여기서는 &lt;strong>리포지토리 인터페이스&lt;/strong>를 통해 퀴즈 정보를 관리하는 클래스를 만들고, 이 인터페이스를 기반으로 한 메모리 기반 처리와, 확장이 필요한 경우 레디스와 같은 외부 스토리지를 활용하도록 설계할 수 있습니다.&lt;/p>
&lt;h2 id="인터페이스-의존성-주입">인터페이스 의존성 주입&lt;/h2>
&lt;p>기본적인 활용법은 확인했고, 기존에 제가 해결하려고 했던 인터페이스를 활용하면서 의존성을 주입하려면 어떻게 해야할까요?&lt;/p>
&lt;p>과정을 하나씩 거치며 확인해보도록 하겠습니다.&lt;/p>
&lt;h3 id="인터페이스-정의">인터페이스 정의&lt;/h3>
&lt;p>먼저 &lt;code>QuizRepository&lt;/code>라는 인터페이스를 정의해볼게요&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">interface&lt;/span> &lt;span class="nx">QuizRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">saveQuiz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">quiz&lt;/span>: &lt;span class="kt">Quiz&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getQuiz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Quiz&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>일단 간단하게 퀴즈를 저장하는 &lt;code>saveQuiz&lt;/code>, 저장된 퀴즈를 가져오는 &lt;code>getQuiz&lt;/code>만 구현하도록 했습니다.&lt;/p>
&lt;h3 id="메모리-기반-구현">메모리 기반 구현&lt;/h3>
&lt;p>이제 메모리 기반 리포지토리 클래스를 &lt;code>QuizRepository&lt;/code> 인터페이스를 구현하여 작성합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Injectable&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">QuizMemoryRepository&lt;/span> &lt;span class="kr">implements&lt;/span> &lt;span class="nx">QuizRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">quizzes&lt;/span>: &lt;span class="kt">Map&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">string&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">QuizData&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Map&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">saveQuiz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">quiz&lt;/span>: &lt;span class="kt">Quiz&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quizzes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">quiz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">quiz&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getQuiz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">QuizData&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">undefined&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quizzes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>간단하죠?&lt;/p>
&lt;h3 id="모듈에-프로바이더-설정">모듈에 프로바이더 설정&lt;/h3>
&lt;p>Nest의 &lt;code>@Module&lt;/code>에 &lt;code>QuizMemoryRepository&lt;/code>를 &lt;code>QuizRepository&lt;/code> 타입으로 등록해 줍니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Module&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">providers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">QuizService&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">provide&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;QuizRepository&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useClass&lt;/span>: &lt;span class="kt">QuizMemoryRepository&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">exports&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;QuizStorage&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">QuizModule&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="리포지토리-사용">리포지토리 사용&lt;/h3>
&lt;p>다른 클래스에서는 인터페이스 타입으로 스토리지를 주입받아 사용할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Injectable&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">QuizService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">@Inject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;QuizRepository&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">repository&lt;/span>: &lt;span class="kt">QuizRepository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createQuiz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>: &lt;span class="kt">QuizData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">saveQuiz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이렇게 인터페이스를 사용하여 의존성을 주입하면, 추후 스토리지가 변경되더라도 코드 수정 없이 새로운 스토리지를 적용할 수 있게 되어 &lt;strong>유연성과 확장성&lt;/strong>이 높아집니다.&lt;/p>
&lt;h3 id="리포지토리-개선">리포지토리 개선&lt;/h3>
&lt;p>그렇다면 메모리 리포지토리의 의존성인 &lt;code>Map&lt;/code>도 &lt;code>@Inject&lt;/code>로 주입할 수 있겠죠?&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Injectable&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">QuizMemoryRepository&lt;/span> &lt;span class="kr">implements&lt;/span> &lt;span class="nx">QuizRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">@Inject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;QuizStorage&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">storage&lt;/span>: &lt;span class="kt">Map&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">string&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">Quiz&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">saveQuiz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">quiz&lt;/span>: &lt;span class="kt">Quiz&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quizzes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">quiz&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">quiz&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getQuiz&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">QuizData&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">undefined&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quizzes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>@Module&lt;/code>에 등록해줍니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Module&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">providers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">QuizService&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">provide&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;QuizRepository&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useClass&lt;/span>: &lt;span class="kt">QuizMemoryRepository&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">provide&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;QuizStorage&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useValue&lt;/span>: &lt;span class="kt">new&lt;/span> &lt;span class="nx">Map&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">exports&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;QuizStorage&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">QuizModule&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>큰 의미는 없어 보이지만 테스트코드를 작성해보면 약간의 이점을 얻을 수 있어요&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;QuizZoneService&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">service&lt;/span>: &lt;span class="kt">QuizZoneService&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">storage&lt;/span>: &lt;span class="kt">Map&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">string&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">QuizZone&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">beforeEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">storage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Map&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">module&lt;/span>: &lt;span class="kt">TestingModule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">Test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createTestingModule&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">providers&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">QuizZoneService&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">provide&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;QuizRepository&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">useClass&lt;/span>: &lt;span class="kt">QuizMemoryRepository&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">provide&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;QuizStorage&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">useValue&lt;/span>: &lt;span class="kt">storage&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}).&lt;/span>&lt;span class="nx">compile&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">module&lt;/span>&lt;span class="nx">.get&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">QuizZoneService&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">QuizZoneService&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;사용자가 퀴즈존 생성 요청을 보내면 퀴즈존을 생성한다.&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;사용자의 세션 ID를 이용하여 퀴즈존을 생성한다.&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">sid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;1234&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">await&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">player&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">storage&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sid&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>일반적으로 주입받은 의존성은 &lt;code>private&lt;/code>으로 선언되기 때문에 접근할 수 없지만, 외부에서 주입해주기 때문에 실제 &lt;code>storage&lt;/code>에 값이 적절히 들어갔는지 확실하게 판단할 수 있게되었습니다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>인터페이스를 사용한 의존성 주입은 확장성에 굉장히 큰 도움을 주게됩니다.&lt;/p>
&lt;p>저의 경우에는 &lt;code>Repository&lt;/code>를 인터페이스로 만들었기 때문에 추후 레디스와 같은 스토리지로 변경 필요할 때 &lt;code>Repository&lt;/code>를 구현하기만 하면 손쉽게 교체가 가능합니다.&lt;/p>
&lt;p>그리고 &lt;code>MemoryRepository&lt;/code>가 &lt;code>Map&lt;/code>을 외부에서 주입받도록 했기 때문에 &lt;strong>비즈니스 로직&lt;/strong>을 &lt;strong>테스트&lt;/strong> 할 때도 실제 처리가 잘 이루어지는지 확인하기 용이했었죠!
&lt;del>물론 모킹을 하고 의도대로 동작되는지만 확인해도 괜찮을 것 같긴해요&lt;/del>&lt;/p>
&lt;p>작고 보잘것 없는 예시이지만, 끝까지 봐주셔서 감사합니다.😊&lt;/p>
&lt;p>다음번에는 Nest에서 의존성 주입하는 과정을 깊게 파볼게요😎&lt;/p></description></item><item><title>멤버십 1차 학습스프린트 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/4/</link><pubDate>Fri, 20 Sep 2024 11:29:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/4/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/4/cover.png" alt="Featured image of post 멤버십 1차 학습스프린트 회고" />&lt;p>추석을 앞두고 4주간의 1차 학습스프린트가 마무리되었습니다🥳&lt;/p>
&lt;p>학습스프린트가 끝나고 1주간 인터미션 기간이 주어졌는데 이 또한 끝나가네요&lt;/p>
&lt;p>인터미션이 끝나기 전에 1차 학습스프린트를 돌아보려합니다.&lt;/p>
&lt;h2 id="데일리-스크럼">데일리 스크럼&lt;/h2>
&lt;p>이전 회고에서 언급했듯 학습스프린트는 2주간 유지되는 &lt;strong>스터디 그룹&lt;/strong>원들과 매일 아침 &lt;strong>데일리 스크럼&lt;/strong>을 진행하게됩니다.&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에서는 개인당 &lt;strong>5분&lt;/strong>정도의 시간이 주어져, 자신이 &lt;strong>어제 작업한 내용&lt;/strong>과 &lt;strong>오늘 작업할 내용&lt;/strong> 같은 미션 진행 상황을 공유하는 시간이었어요&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에 시간이 많이 주어지지 않기 때문에 원활한 진행을 위해 매일 만들어야하는 &lt;strong>PR&lt;/strong>에 &lt;strong>어떤 고민을 통해 어떤 결과물&lt;/strong>을 만들었는지 간략하지만 잘 이해할 수 있도록 작성해야했습니다.&lt;/p>
&lt;p>다양한 분들의 PR을 보면서 흥미로운 부분이 꽤 있었어요&lt;/p>
&lt;p>저는 PR을 간략하게 적는 편 이었는데, 몇몇 분 께서는 자신이 어떤 고민을 했는지, 그 고민을 하기위해 어떤 내용들을 공부했는지, 그리고 그것을 어떻게 적용했는지 너무나 꼼꼼하게 적어주시는 분들도 계셔서 보는 재미도 있었습니다.&lt;/p>
&lt;p>이를 보고 저도 PR을 정말 꼼꼼히 남겨야겠다고 반성하게 되었네요🤣&lt;/p>
&lt;h2 id="그룹-리뷰">그룹 리뷰&lt;/h2>
&lt;p>매일 진행되는 &lt;strong>데일리 스크럼&lt;/strong>에 더해 매주 화요일과 목요일은 &lt;strong>그룹 리뷰&lt;/strong>가 진행되었습니다.&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에서는 개인당 &lt;strong>5분&lt;/strong>정도의 시간이 주어져, 자신이 &lt;strong>어제 작업한 내용&lt;/strong>과 &lt;strong>오늘 작업할 내용&lt;/strong> 그리고 &lt;strong>방향성에 대한 약간의 고민&lt;/strong> 정도를 이야기하는 시간이었다면, &lt;strong>그룹 리뷰&lt;/strong>는 서로의 중간 결과물과 학습 내용에 대하여 리뷰하고, 진행 상황에 대한 피드백을 주고받는 시간으로 꽤 많은 시간이 주어졌어요&lt;/p>
&lt;p>저 같은 경우는 매일 아침 다른 그룹원들의 코드를 읽고 PR에 코드리뷰를 남기는 활동을 지속적으로 하고 있었는데, 이 때 다른 그룹원들의 &lt;strong>잘한 점&lt;/strong>, &lt;strong>아쉬운 점&lt;/strong>, &lt;strong>다양한 접근 방법이 나올수 있는 내용&lt;/strong> 등 토론하고 싶은 주제를 기억하고 있다가 그룹 리뷰에서 언급하여 같이 이야기해 보는 시간을 가지려고 했습니다.&lt;/p>
&lt;p>그리고 뒤에서 언급할 &lt;strong>멘토님의 코드리뷰&lt;/strong>에서 그룹원들이 각각 받은 &lt;strong>피드백에 대한 자신의 해석&lt;/strong>이나, 애매하다고 느껴지는 &lt;strong>피드백에 대해 다른 그룹원들의 의견도 나눠보는 시간&lt;/strong>도 참 의미있었네요 😊&lt;/p>
&lt;h2 id="피어세션">피어세션&lt;/h2>
&lt;p>&lt;strong>피어세션&lt;/strong>은 매일 아침에 진행했었던 챌린지 과정의 피어세션과 달리 매주 금요일 오전에 진행된 활동으로, 기존 스터디 그룹원들이 아닌 &lt;strong>새로 배정된 다른 캠퍼님들의 한 주간의 과정을 살펴보고 결과물에 대해 리뷰&lt;/strong>하는 시간이었습니다.&lt;/p>
&lt;p>같은 주제로 미션을 수행하기는 하지만 캠퍼분들 각각 &lt;strong>다른 접근 방법을 시도&lt;/strong>한다는 점과 &lt;strong>지금까지 수행한 작업들을 모두 확인&lt;/strong>해야한다는 점 등 여러 이유로 피어세션을 준비하는 시간이 1시간 정도 별도로 주어졌어요&lt;/p>
&lt;p>피어세션에 참여하시는 캠퍼님들은 그룹원들과 달리 &lt;strong>제 코드를 처음 확인&lt;/strong>하기 때문에 &lt;strong>작업 내용&lt;/strong>과 &lt;strong>과정&lt;/strong>, &lt;strong>흐름&lt;/strong> 등을 쉽게 파악하실 수 있도록 &lt;code>README&lt;/code>에 &lt;strong>한 주간의 작업 내용을 잘 정리&lt;/strong>하고, 매일 남기는 PR에 &lt;strong>어떤 작업을 수행하고 왜 그런 선택을 했는지 잘 드러나도록&lt;/strong> 남기려고 노력했습니다.&lt;/p>
&lt;hr>
&lt;p>피어세션에서 만났던 캠퍼분들 중에는 미션을 착실히 수행하고계신 분들이 많았지만, 일부는 &lt;code>Nest&lt;/code>, &lt;code>React&lt;/code> 같은 것들을 직접 구현해보는 등 자신히 하고싶었던 것을 위해 노력하셨던 분들도 있었어요&lt;/p>
&lt;p>특히 기억에 남는 피어세션은, 한 분은 &lt;code>Nest&lt;/code>를 구현하셨고, 한 분은 &lt;code>express&lt;/code>의 기본적인 기능들을 활용하여 미션을 수행하신 분이 모였던 피어세션이었습니다.&lt;/p>
&lt;p>&lt;code>Nest&lt;/code>를 구현하신 분은 &lt;code>@Controller&lt;/code>, &lt;code>@Service&lt;/code>와 같은 어노테이션 등을 비롯한 여러 편의 기능을 제공하기 위해 굉장히 복잡한 로직들을 구현하신 반면, &lt;code>express&lt;/code>의 기본 기능으로만 미션을 수행하셨던 분은 매우 간결한 로직으로 누구나 쉽게 이해할 수 있는 코드를 만드셨는데, 이 양극단의 코드를 비교하는게 굉장히 흥미로웠네요 😁&lt;/p>
&lt;p>&lt;code>Nest&lt;/code>를 구현하신 분의 작업물에서 복잡한 로직을 통해 만든 편의성으로, 개발자가 &lt;strong>실제로 작성하게 될 영역들이 매우 깔끔해지는 것&lt;/strong>을 보며 감탄했었고,&lt;/p>
&lt;p>&lt;code>express&lt;/code>의 기본 기능으로만 구현하신 분들의 작업물을 보며, &lt;strong>내가 좀 겉멋이 들었나?&lt;/strong>, &lt;strong>내가 작성한 코드는 정말로 필요했던 것일까?&lt;/strong>, &lt;strong>더 간결하게 풀어낼 수는 없었던 것 일까?&lt;/strong> 같은 생각이 들면서 제 자신을 돌아보는 계기가 되었습니다 😌&lt;/p>
&lt;h2 id="그룹-회고">그룹 회고&lt;/h2>
&lt;p>&lt;strong>그룹 회고&lt;/strong>는 매 주 금요일 피어세션이 끝나고 진행된 활동으로 &lt;strong>그룹원들과 한 주간의 그룹 활동에 대해 돌아보는 시간&lt;/strong>이었습니다.&lt;/p>
&lt;p>주로 직전 피어세션에서 &lt;strong>인상깊었던 내용들에 대해 공유하여 그룹원들 끼리도 고민해보는 시간&lt;/strong>과 더 나은 그룹 활동을 위해 각자 그룹 활동간에 &lt;strong>좋았던 점&lt;/strong>, &lt;strong>아쉬웠던 점&lt;/strong>, &lt;strong>느낀 점&lt;/strong> 등에 대해 이야기해보고 그라운드 룰을 다시 조정해보는 시간을 가졌고, 자연스럽게 &lt;strong>새롭게 알게된 내용들에 대해서 공유&lt;/strong>하기도 했어요&lt;/p>
&lt;p>&lt;strong>새롭게 알게된 내용들을 공유하는 시간&lt;/strong>에서 학습했던 내용인 &lt;strong>&amp;ldquo;MySQL에서 UUID를 PK로 사용했을때 성능&amp;rdquo;&lt;/strong> 에 대한 아티클과 &lt;strong>&amp;ldquo;유일한 ID 생성하는 방법&amp;rdquo;&lt;/strong> 에 대한 아티클을 공유하기도 했습니다.&lt;/p>
&lt;hr>
&lt;p>그룹 활동에 대한 &lt;strong>느낀점을 공유하는 시간&lt;/strong>에는 사실 그룹 활동보다는 자신이 부족해서 아쉬웠던 내용들이 주로 언급되었어요&lt;/p>
&lt;p>그래서 저는 다른 그룹원들이 자신감을 가지실 수 있도록 열심히 응원하려고 노력해봤습니다 👊&lt;/p>
&lt;p>그 중 하나는 &lt;strong>&amp;ldquo;미션 관련 이야기를 할 때 자신의 기술적인 부족함 때문에 적극적으로 참여하는게 망설여진다.&amp;rdquo;&lt;/strong> 와 같은 고민을 토로해주신 분이 계셨는데, &lt;strong>&amp;ldquo;정답도 중요하지만 그보다 어떤 생각을 가지고 문제를 접근하는지가 더 중요하고, 이를 통해 더 큰 영감을 얻을 수 있다&amp;rdquo;&lt;/strong> 와 같은 답변을 드렸었는데, 도움이 되었다고 말씀하셔서 뿌듯했었네요 😁&lt;/p>
&lt;h2 id="코드리뷰">코드리뷰&lt;/h2>
&lt;p>챌린지 과정에서는 매일 진행되는 피어세션에서 Gist를 통해 공유된 각자의 결과물을 리뷰했었기 때문에, 매일 아침에 다른 분들의 결과물을 확인했었는데요&lt;/p>
&lt;p>맴버십 과정에서는 매일 수행한 작업에 대해 PR을 남겨야 했고, 남기 PR을 기반으로 코드 리뷰를 진행할 수 있었습니다.&lt;/p>
&lt;p>그래서 각자의 결과물을 리뷰할 시간이 할당되지는 않았았고, &lt;strong>비동기&lt;/strong>적으로 코드리뷰를 각자 진행할 것이 권장되기도 했습니다.&lt;/p>
&lt;p>그래서 저는 챌린지와 마찬가지로 매일 아침 데일리 스크럼 전 다른 그룹원들의 코드를 리뷰하는 시간을 루틴으로 유지하여 PR을 통해 &lt;strong>개선점&lt;/strong>, &lt;strong>잘한점&lt;/strong>, &lt;strong>궁금한점&lt;/strong> 등을 남겼어요&lt;/p>
&lt;h2 id="멘토님의-코드리뷰">멘토님의 코드리뷰&lt;/h2>
&lt;p>스프린트 3주차 부터 멘토님의 코드리뷰가 시작되었습니다.&lt;/p>
&lt;p>멘토님의 코드리뷰는 &lt;strong>정답을 알려주기보다는 정답을 찾아갈 수 있는 코멘트&lt;/strong>들 남겨주셔서 &lt;strong>몰랐던 내용&lt;/strong>을 알아가기도 하고, &lt;strong>깊게 고민하지 않았던 내용들을 조금 더 깊게 고민해보는 계기&lt;/strong>가 되어 개인적으로는 너무 좋았어요&lt;/p>
&lt;p>저희 그룹을 담당해주셨던 멘토님은 현업에서 바닐라 타입스크립트로 프론트엔드 개발을 하고계셨는데, 그래서인지 &lt;strong>타입스크립트를 타입스크립트처럼 활용하는 방법에 대해서 많이 고민해볼 수 있는 코멘트&lt;/strong>를 남겨 주셨습니다.&lt;/p>
&lt;p>일례로 &lt;strong>타입을 추론이 가능하게하는 타입스크립트 코드&lt;/strong>를 작성하는 법, &lt;strong>Narrowing, Assertion을 최소화 하는 법&lt;/strong> 등에 대한 코멘트를 남겨주셔서 개인적으로 학습과 고민을 해볼 수 있었고, 다른 그룹원들과도 같이 이야기 해보기도 했어요 &lt;del>아직 모르는 부분이 많지만&lt;/del>&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>4주간 미션을 수행하면서 시간이 굉장히 빨리 가더라구요! 한게 많이 없다고 생각했는데 돌아보니 생각보다 많은 배움이 있었던 것 같네요 🤣&lt;/p>
&lt;p>다음 주 부터는 이전에 선택했던 더 집중해서 경험하고 싶은 분야에 대한 미션이 주어집니다. (저는 백엔드를 선택했어요)&lt;/p>
&lt;p>미션은 그대로 풀스택으로 진행되지만 선택 분야의 비중을 7:3 정도로 조절된다고해요&lt;/p>
&lt;p>그리고 신청자에 한해서 오프라인으로 활동이 진행되는데, 저는 양재에 있는 &lt;strong>코드 스쿼드&lt;/strong>에서 참여하게 되었습니다. 많이 기대되는군요 ㅎㅎ&lt;/p>
&lt;p>이제 남은 인터미션을 즐기러 가보겠습니다. 끝까지 읽어주셔서 감사합니다 😁&lt;/p></description></item><item><title>Python - Generator</title><link>https://codemario318.github.io/post/python_cover/</link><pubDate>Tue, 18 Apr 2023 14:31:00 +0900</pubDate><guid>https://codemario318.github.io/post/python_cover/</guid><description>&lt;img src="https://codemario318.github.io/post/python_cover/python_cover.png" alt="Featured image of post Python - Generator" />&lt;p>제너레이터는 제너레이터 함수가 호출될 때 반환되는 이터러블 객체이다. 제네레이터 함수는 일반적인 함수와 비슷하게 생겼지만 &lt;code>yield&lt;/code> 구문을 사용해 데이터를 원하는 시점에 반환하고 처리를 다시 시작할 수 있다. 일반적인 함수는 진입점이 하나라면 제네레이터는 진입점이 여러개라고 생각할 수 있다. 이러한 특성때문에 제네레이터를 사용하면 원하는 시점에 원하는 데이터를 받을 수 있게된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">generator&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">generator&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># &amp;lt;generator object generator at 0x10a47c678&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># &amp;#39;string&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">StopIteration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="동작">동작&lt;/h2>
&lt;ol>
&lt;li>&lt;code>yield&lt;/code> 문이 포함된 함수를 실행하면 제너레이터 객체가 반환되는데 이 때는 함수의 내용이 실행되지 않는다.&lt;/li>
&lt;li>&lt;code>next()&lt;/code> 라는 빌트인 메서드를 통해 제네레이터를 실행시킬 수 있으며 next() 메서드 내부적으로 iterator 를 인자로 받아 이터레이터의 &lt;code>__next__()&lt;/code> 메서드를 실행시킨다.&lt;/li>
&lt;li>처음 &lt;code>__next__()&lt;/code> 를 호출하면 함수의 내용을 실행하다 &lt;code>yield&lt;/code> 문을 만났을 때 처리를 중단한다.&lt;/li>
&lt;li>이 때 모든 local state는 유지되는데 변수의 상태, 명령어 포인터, 내부 스택, 예외 처리 상태를 포함한다.&lt;/li>
&lt;li>그 후 제어권을 상위 컨텍스트로 양보(yield)하고 또 &lt;code>__next__()&lt;/code> 가 호출되면 제네레이터는 중단된 시점부터 다시 시작한다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;code>yield&lt;/code> 문의 값은 어떤 메서드를 통해 제네레이터가 다시 동작했는지에 따라 다른데, &lt;code>__next__()&lt;/code> 를 사용하면 None이고 &lt;code>send()&lt;/code> 를 사용하면 메서드로 전달 된 값을 갖게되어 외부에서 데이터를 입력받을 수 있게 된다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="장점">장점&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/python_cover/python_generator_1.png"
width="1272"
height="574"
srcset="https://codemario318.github.io/post/python_cover/python_generator_1_huffa17e204d26514765855512ef8025cc_55547_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/python_cover/python_generator_1_huffa17e204d26514765855512ef8025cc_55547_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Genrator, Iterator, Iterable 간 관계"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="531px"
>&lt;/p>
&lt;p>&lt;code>List&lt;/code>, &lt;code>Set&lt;/code>, &lt;code>Dict&lt;/code> 표현식은 iterable 하기에 &lt;code>for&lt;/code> 표현식 등에서 유용하게 쓰일 수 있다. 하지만 해당 객체들은 &lt;code>Collection&lt;/code> 특성상 가진 데이터를 메모리에 담고 있어야 하기 때문에 큰 값을 다룰 때는 성능상 불리하다. 제너레이터는 &lt;code>yield&lt;/code> 를 통해 필요한 값만 받아 쓰기 때문에 모든 값을 메모리에 들고 있을 필요가 없게 된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100000&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getsizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#824464&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100000&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getsizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#88&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>리스트가 여러번 사용될 수 있는 반면 &lt;code>b&lt;/code> 제네레이터는 한번 사용된 후 소진된다. 이는 모든 이터레이터가 마찬가지인데 &lt;code>List&lt;/code>, &lt;code>Set&lt;/code> 등은 이터러블하지만 이터레이터는 아니기에 소진되지 않는다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 100000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>while True&lt;/code> 구분으로 제공받을 데이터가 무한하거나, 모든 값을 한번에 계산하기엔 시간이 많이 소요되어 그때 그때 필요한 만큼만 받아 계산하고 싶을 때 제네레이터를 활용할 수 있다.&lt;/p></description></item><item><title>검색 엔진</title><link>https://codemario318.github.io/post/search_engine/</link><pubDate>Tue, 18 Apr 2023 14:04:15 +0900</pubDate><guid>https://codemario318.github.io/post/search_engine/</guid><description>&lt;img src="https://codemario318.github.io/post/search_engine/search_engine_cover.jpeg" alt="Featured image of post 검색 엔진" />&lt;p>&lt;img src="https://codemario318.github.io/post/search_engine/search_1.png"
width="1920"
height="1624"
srcset="https://codemario318.github.io/post/search_engine/search_1_hu403bad1118769606b062ea29b7dc1dc8_181102_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/search_engine/search_1_hu403bad1118769606b062ea29b7dc1dc8_181102_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="283px"
>
검색 엔진은 컴퓨터 시스템에 저장된 정보를 찾아주는 것을 도와주도록 설계된 정보 검색 시스템이다. 검색 엔진을 사용하여정보를 찾는데 필요한 시간을 최소화할 수 있다.&lt;/p>
&lt;h2 id="웹-검색-엔진">웹 검색 엔진&lt;/h2>
&lt;p>웹 사이트를 검색하기 위한 프로그램이다.&lt;/p>
&lt;p>FTP 서버나 웹 사이트의 파일 검색 결과를 포함하며, 이미지나 토렌트 파일 또는 특정 부류의 웹 사이트에 특화된 웹 검색 엔진도 있다.&lt;/p>
&lt;p>서버에서는 &amp;lsquo;로봇&amp;rsquo;이라 불리는 특별한 프로그램을 이용하 웹 사이트들을 돌아다니며 웹 사이트들에 대한 정보를 미리 자동적으로 수집한다. 이휴 검색 엔진 사이트에서 특정 검색어를 입력하면 검색 엔진이 수집한 정보 중 그에 맞는 결과를 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>로봇이 참조와 어휘를 분헉하는 방식에 따라 검색 품질이 결정됨&lt;/li>
&lt;/ul>
&lt;h3 id="원리">원리&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/search_engine/search_2.png"
width="910"
height="212"
srcset="https://codemario318.github.io/post/search_engine/search_2_hubf6b83db01328e832aa8960bbb3db72a_146347_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/search_engine/search_2_hubf6b83db01328e832aa8960bbb3db72a_146347_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="429"
data-flex-basis="1030px"
>&lt;/p>
&lt;p>검색 엔진은 사용자가 검색 엔진을 사용하기 전에 미리 웹 상에서 정보를 수집하여 색인을 만들어 놓는다. 그리고 나서 사용자가 찾고자 하는 정보의 키워드를 입력하면, 미리 만들어 놓은 색인 중에서 입력된 키워드에 해당하는 정보들을 찾아서 보여준다.&lt;/p>
&lt;h3 id="문서-수집">문서 수집&lt;/h3>
&lt;p>현재 대부분의 검색 엔진에서는 엡상의 방대한 정보들을 검색하고 색인화 하는 과정을 크롤러라고 부르는 정보 수집 프로그램을 사용하여 수행하고 있다.&lt;/p>
&lt;p>크롤러가 주기적으로 웹에 접속된 사이트들을 방문하여 해당 웹 사이트가 가지고 있는 정보에 대해 색인을 작성한 후 그것을 데이터베이스에 저장하여 검색시 활용하게된다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>크롤러&lt;/strong>&lt;br>
웹상의 문서나 이미지, 영상 등을 주기적으로 검색하고 취합하여, 자동으로 데이터베이스화 시키는 프로그램으로 봇(Bot)이라고도 부른다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="검색-엔진의-종류">검색 엔진의 종류&lt;/h2>
&lt;p>수집한 정보를 색인하는 방법에 따라 구분된다.&lt;/p>
&lt;h3 id="로봇-검색-엔진">로봇 검색 엔진&lt;/h3>
&lt;p>크롤라라고 불리는 로봇을 이용하여 웹상의 데이터를 효율적으로 수집하고, 이렇게 수집한 데이터 키워드 색인을 통해 사용자에게 제공하는 검색 엔진&lt;/p>
&lt;ul>
&lt;li>Google, Naver등 현재 사용되는 대부분의 검색 엔진이 이 방식을 채택하고 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="디렉토리-검색-엔진">디렉토리 검색 엔진&lt;/h3>
&lt;p>주제 분류에 의한 검색을 제공하는 검색 엔진이며, 데이터의 분류를 사람이 직접 슈행해야 한다.&lt;/p>
&lt;ul>
&lt;li>현재 주류인 방식은 아니며, 1990년대 Yahoo등에서 사용되었음&lt;/li>
&lt;/ul>
&lt;h3 id="메타-검색-엔진">메타 검색 엔진&lt;/h3>
&lt;p>자체적으로 정보를 보유하고 있지 않으면서 사용자가 입력한 키워드를 복수의 다른 검색 엔진으로 전송하여 결과를 얻고, 그 결과들을 종합하여 표시만 해주는 검색 엔진&lt;/p>
&lt;p>여러 검색 엔진의 결과를 동시에 보여주기 때문에 결과를 한눈에 살펴보기에는 편하지만, 메타 검색이라는 과정을 한 번 더 거쳐야 하므로 속도가 느를 수 있다.&lt;/p>
&lt;h2 id="검색-엔진-최적화search-engine-optimization-seo">검색 엔진 최적화(Search Engine Optimization, SEO)&lt;/h2>
&lt;p>검색 결과의 상위에 자신의 웹 페이지가 노출되기 위해 검색 엔진이 자료를 수집하고 결과를 산출하는 방식에 맞춰 웹 페이지의 구성을 조정하는 것을 의미한다.&lt;/p>
&lt;p>각각의 검색 엔진에 맞처 웹 페이지 내의 키워드나 링크 등을 최적화 하는 작업을 SEO라고 한다.&lt;/p></description></item><item><title>Web</title><link>https://codemario318.github.io/post/web/</link><pubDate>Mon, 17 Apr 2023 18:28:10 +0900</pubDate><guid>https://codemario318.github.io/post/web/</guid><description>&lt;img src="https://codemario318.github.io/post/web/web_cover.jpeg" alt="Featured image of post Web" />&lt;h2 id="웹-동작-방식">웹 동작 방식&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/web/web_1.png"
width="1480"
height="730"
srcset="https://codemario318.github.io/post/web/web_1_hu7f6c89e951b5c7c2fdb2549d3b17bd79_46991_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/web/web_1_hu7f6c89e951b5c7c2fdb2549d3b17bd79_46991_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="웹 동작 방식"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>클라이언트(브라우저)가 HTTP(URL)을 통해 요청을 보내면 HTML, CSS, 이미지와 같은 정적 콘텐츠를 응답으로 보내게 되고 그것을 받은 클라이언트가 해석하여 페이지로 보여준다.&lt;/p>
&lt;h2 id="static-pages와-dynamic-pages">Static pages와 Dynamic Pages&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/web/web_2.png"
width="3233"
height="1262"
srcset="https://codemario318.github.io/post/web/web_2_hu118d3ab45ddaa4b1e54aef5407b22c06_339090_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/web/web_2_hu118d3ab45ddaa4b1e54aef5407b22c06_339090_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Static and Dynamic"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="614px"
>&lt;/p>
&lt;h3 id="static-pages">Static Pages&lt;/h3>
&lt;ul>
&lt;li>Web Server는 파일 경로의 이름을 받아 경로와 일치하는 file contents를 반환&lt;/li>
&lt;li>항상 동일한 페이지를 반환&lt;/li>
&lt;li>Ex) image, html, css, javascript 파일과 같이 컴퓨터에 저장되어 있는 파일들&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-pages">Dynamic Pages&lt;/h3>
&lt;ul>
&lt;li>인자의 내용에 맞게 동적인 Contents를 반환&lt;/li>
&lt;li>웹 서버에 의해서 실행되는 프로그램을 통해서 만들어진 결과물(WAS)위에서 돌아가는 프로그램&lt;/li>
&lt;/ul>
&lt;h2 id="web-server와-was의-차이">Web Server와 WAS의 차이&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/web/web_3.png"
width="1917"
height="607"
srcset="https://codemario318.github.io/post/web/web_3_hub574429a97bf680de242b6364e3018eb_132576_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/web/web_3_hub574429a97bf680de242b6364e3018eb_132576_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Web Server와 WAS"
class="gallery-image"
data-flex-grow="315"
data-flex-basis="757px"
>&lt;/p>
&lt;h3 id="web-server">Web Server&lt;/h3>
&lt;p>소프트웨어와 하드웨어로 구분된다.&lt;/p>
&lt;ul>
&lt;li>하드웨어
&lt;ul>
&lt;li>Web 서버가 설치되어 있는 컴퓨터&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>소프트웨어
&lt;ul>
&lt;li>웹 브라우저 클라이언트로 부터 HTTP 요청을 받아 &lt;strong>정적인 컨텐츠&lt;/strong>(.html, .jpeg, .css 등)을 제공하는 컴퓨터 프로그램&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="web-server의-역할">Web Server의 역할&lt;/h4>
&lt;blockquote>
&lt;p>HTTP 프로토콜을 기반으로 하여 클라이언트의 요청을 서비스 하는 기능 담당&lt;/p>
&lt;/blockquote>
&lt;p>요청에 따라 두 가지 기능 중 적절하게 선택하여 수행&lt;/p>
&lt;ol>
&lt;li>정적인 컨텐츠 제공
&lt;ul>
&lt;li>WAS를 거치지 않고 바로 자원을 제공한다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>동적인 컨텐츠 제공을 위한 요청 전달
&lt;ul>
&lt;li>클라이언트의 요청을 WAS에 보내고, WAS가 처리한 결과를 클라이언트에게 전달한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="web-server의-예">Web Server의 예&lt;/h4>
&lt;ul>
&lt;li>Apache Server&lt;/li>
&lt;li>Nginx&lt;/li>
&lt;li>IIS 등&lt;/li>
&lt;/ul>
&lt;h3 id="wasweb-application-server">WAS(Web Application Server)&lt;/h3>
&lt;blockquote>
&lt;p>DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기위해 만들어진 Application Server&lt;/p>
&lt;/blockquote>
&lt;p>HTTP를 통해 컴퓨터나 장치에 어플리케이션을 수행해주는 미들웨어이다.&lt;/p>
&lt;blockquote>
&lt;p>웹 컨테이너(Web Container), 서블릿 컨테이너(Servlet Container)라고도 불림&lt;/p>
&lt;/blockquote>
&lt;h4 id="was의-역할">WAS의 역할&lt;/h4>
&lt;blockquote>
&lt;p>WAS = Web Server + Web Container&lt;/p>
&lt;/blockquote>
&lt;p>웹서버 기능들을 구조적으로 분리하여 처리하고자하는 목적으로 제시됨&lt;/p>
&lt;ul>
&lt;li>분산 트랜잭션&lt;/li>
&lt;li>보안&lt;/li>
&lt;li>메시징&lt;/li>
&lt;li>쓰레드 처리 등&lt;/li>
&lt;/ul>
&lt;p>DB와 서버와 같이 수행됨&lt;/p>
&lt;h4 id="was의-주요-기능">WAS의 주요 기능&lt;/h4>
&lt;ul>
&lt;li>프로그램 실행 환경과 DB 접속 기능 제공&lt;/li>
&lt;li>여러 개의 트랜잭션 관리 기능&lt;/li>
&lt;li>업무를 처리하는 비지니스 로직 수행&lt;/li>
&lt;/ul>
&lt;h4 id="was가-필요한-이유">WAS가 필요한 이유&lt;/h4>
&lt;p>웹 페이지는 정적 컨텐츠와 동적 컨텐츠가 모두 존재한다.&lt;/p>
&lt;ul>
&lt;li>사용자의 요청에 맞게 적절한 동적 컨텐츠를 만들어서 제공해야 한다.&lt;/li>
&lt;li>웹 서버만을 이용하게 되면 그에 맞는 결과가 정적 파일로 존재해야 한다.&lt;/li>
&lt;/ul>
&lt;p>따라서 WAS를 통해 요청에 맞는 데이터를 DB에서 가져와 비즈니스 로직에 맞게 결과를 만들어 제공함으로 자원을 효율적으로 사용할 수 있다.&lt;/p>
&lt;h2 id="was와-web-server를-분리하는-이유">WAS와 Web Server를 분리하는 이유&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>기능 분리를 통한 서버 부하 방지&lt;/strong>&lt;br>
WAS만으로도 웹서비스를 제공 가능하지만 WAS는 DB조회 등 동적인 웹 페이지를 위한 다양한 동작을 하기 때문에 바쁘다. 따라서 웹 서버를 통해 정적인 컨텐츠를 제공하여 부하를 방지한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>물리적으로 분리하여 보안 강화&lt;/strong>&lt;br>
SSL에 대한 암복호화 처리에 웹서버를 사용한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>여러대의 WAS를 연결 가능&lt;/strong>&lt;br>
Load Balancing을 위해 Web Server를 사용 가능하다&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>fail over(장애 극복), fail back 처리에 유리&lt;/li>
&lt;li>여러대의 서버를 사용하는 대용량 웹 어플리케이션의 경우 웹 서버와 WAS를 분리하여 무중단 운영을 위한 장애 극복에 쉽게 대응할 수 있다.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>&lt;strong>여러 웹 어플리케이션 서비스 가능&lt;/strong>&lt;br>
하나의 웹 서버로 다양한 WAS를 이용하게 만들 수 있다.&lt;/li>
&lt;/ol></description></item></channel></rss>