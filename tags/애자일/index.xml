<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>애자일 on Mario Blog</title><link>https://codemario318.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC/</link><description>Recent content in 애자일 on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 03 Aug 2024 11:22:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/%EC%95%A0%EC%9E%90%EC%9D%BC/index.xml" rel="self" type="application/rss+xml"/><item><title>챌린지 과정 3주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/</link><pubDate>Sat, 03 Aug 2024 11:22:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/cover.png" alt="Featured image of post 챌린지 과정 3주차 회고" />&lt;p>챌린지 3주차가 마무리되었습니다🥳&lt;/p>
&lt;p>이번주 역시 저번주와 마찬가지로, 저번주보다 훨씬 더 빠르게 지나간 것 같네요.&lt;/p>
&lt;p>미션도 어려웠지만 이번주는 날씨가 역대급으로 더웠는데, 에어컨 고장 이슈가 발생하는 바람에 육체적, 정신적으로 정말 힘들었던 한 주 였습니다🥵&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img.png"
width="772"
height="512"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_hu49700197eb00dd7c6958db7079e6d44f_504814_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_hu49700197eb00dd7c6958db7079e6d44f_504814_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;h2 id="짝-활동">짝 활동&lt;/h2>
&lt;p>이번주는 저번주에 예고되었던대로 &lt;strong>짝 활동&lt;/strong>으로 한 주가 진행되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1.png"
width="506"
height="245"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1_hue18cc63406e6b0e55de22018cf95147c_73580_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1_hue18cc63406e6b0e55de22018cf95147c_73580_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;p>각자 개발하고 짝과 함께 서로의 결과물을 개선해보는 &lt;strong>짝 개선&lt;/strong>이 11~12일 이틀에 걸쳐 진행되었고, 같이 개발하고 각자 개선해보는 &lt;strong>짝 개발&lt;/strong>이 13~14일 이틀에 걸쳐 진행되었습니다.&lt;/p>
&lt;p>미션을 함께하며 문제 해결을 위해 많은 소통을 하였습니다.&lt;/p>
&lt;p>의사 결정 과정에서 공통으로 중요하다고 생각하는 부분, 공통으로 중요하지 않다고 생각하는 부분 등을 토론하며 훨씬 더 빠르게 최선의 선택을 할 수 있었던 것 같아 좋았습니다.&lt;/p>
&lt;hr>
&lt;p>이번주도 저번주에 이어서 &lt;strong>애자일스러운 개발&lt;/strong>과 &lt;strong>TDD&lt;/strong>를 시도했습니다. 이번에는 짝과 함께 했다는 것이 조금 다를 것 같네요&lt;/p>
&lt;p>&lt;strong>애자일스러운 개발&lt;/strong>은 개인 미션일 때는 어느정도 달성할 수 있었으나, 짝 개발에서는 짝이 지금까지 해오던 스타일과 많이 달라 완전히 적용하지는 못했고,&lt;/p>
&lt;p>&lt;strong>TDD&lt;/strong>역시 미션의 접근 방법에 맞춘 테스트를 작성하는 것에 어려움을 느껴 일부만 적용하여 조금 아쉬웠습니다.&lt;/p>
&lt;h2 id="미션">미션&lt;/h2>
&lt;p>이번주 미션도 역시 어려운 주제들을 다뤘습니다.&lt;/p>
&lt;p>저번주는 패러다임 등과 같은 내용들로 생각의 전환이 필요하여 어려웠다면, 이번주는 저번주의 개념에 복잡한 요구사항이 추가된 모습이었습니다.&lt;/p>
&lt;p>아마도 2일씩 이루어질 짝 활동을 반영하여 더 어려운 문제로 선정했던것이 아닐까 예상해봅니다.&lt;/p>
&lt;h3 id="11일차-이벤트-주도-개발과-스레드-풀">11일차: 이벤트 주도 개발과 스레드 풀&lt;/h3>
&lt;p>11일차 미션은 짝 개선을 하기 위한 개인 결과를 만드는 과정이었습니다.&lt;/p>
&lt;p>미션의 요구사항을 나름대로 해석해보면, &lt;strong>이벤트 주도 설계&lt;/strong>를 통해 이벤트 발생시 작업을 &lt;strong>비동기&lt;/strong>로 실행하고, 해당 작업을 &lt;strong>스레드&lt;/strong>를 이용해 동시에 처리할 수 있도록 해야하는 문제였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>이벤트 주도 설계&lt;/strong>&lt;/p>
&lt;p>저번주 미션을 통해 &lt;strong>이벤트 주도 설계&lt;/strong>에 어느정도 감을 잡았다고 생각했었는데, 요구사항이 훨씬 복잡해지니 정신을 못차리게 되더군요 &lt;del>안 좋은 컨디션 때문인지 더 그랬던 것 같아요&lt;/del> 🥲&lt;/p>
&lt;p>하지만 과제를 마무리할 때 쯤에는 이벤트와 더욱 친해졌다는 느낌을 받을 수 있었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>테스트 코드&lt;/strong>&lt;/p>
&lt;p>제 설계는 작업들이 이벤트를 연쇄적으로 발생시켜 실행되는 구조였는데, 연쇄적으로 실행되는 동안 작업의 상태들을 추적하는 테스트를 적용해야한다고 판단하였습니다.&lt;/p>
&lt;p>하지만 연쇄적으로 처리되는 일부 작업이 &lt;code>Private&lt;/code> 메소드로 실행되는터라 모든 처리 흐름에서의 상태 변화 추적할 수 있는 테스트 코드를 작성할 방법이 떠오르지 않더군요&amp;hellip;&lt;/p>
&lt;p>이에 따라, 이벤트로 처리되는 흐름에서의 &lt;strong>모든 상태 변화&lt;/strong>를 검증하지는 못했습니다.&lt;/p>
&lt;p>(개선 방법은 아래에 나옵니다! 끝까지 봐주세요😁)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>스레드&lt;/strong>&lt;/p>
&lt;p>이벤트 흐름으로 실행 될 마지막 작업을 JS의 &lt;strong>worker-thread&lt;/strong>(이하 WT)를 통해 처리할 수 있다고 판단되었지만, WT를 무한정 생성할수는 없다고 판단했기 때문에 &lt;strong>WT Pool&lt;/strong>을 구현할 필요성을 느꼈습니다.&lt;/p>
&lt;p>&lt;del>시간이 부족했던 이유도 있지만&lt;/del> 워커를 적절히 만들고 배분할 좋은 방법이 떠오르지 않아, 결과적으로 스레드를 이용한 처리는 &lt;strong>비동기 처리&lt;/strong>로 대체하여 구현했습니다.&lt;/p>
&lt;h3 id="12일차-짝-개선---같이-개선하기">12일차: 짝 개선 - 같이 개선하기&lt;/h3>
&lt;p>&lt;strong>짝 개선&lt;/strong>은 11일차에 만든 자신의 결과물 중 개선할 부분을 찾아 선정하고, 짝과 함께 선정한 부분을 개선하는 과정이었습니다.&lt;/p>
&lt;p>기존 결과에서 새로운 것을 추가하지 않고 개선하는 방향으로 진행하라는 지침이 있어, 저는 &lt;strong>테스트를 위한 코드 구조 일부 개선과 테스트 추가&lt;/strong>, 짝은 &lt;strong>관심사 분리를 위한 구조 개선&lt;/strong>을 개선 목표로 선정했습니다.&lt;/p>
&lt;p>저희 페어는 아래와 같은 방식으로 개선 과정을 진행하였습니다.&lt;/p>
&lt;ol>
&lt;li>짝에게 왜 이러한 부분을 개선하려고 하는 지 설명&lt;/li>
&lt;li>그 이유에 맞춰 각자의 관점에서 문제를 해석&lt;/li>
&lt;li>의견 교환을 통해 문제 재구조화&lt;/li>
&lt;li>세부 구현을 보며 의견 교환 및 수정&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>나의 개선: 테스트를 위한 구조 개선&lt;/strong>&lt;/p>
&lt;p>11일차 미션에서 어려웠던 점으로 언급했던 부분인 &lt;strong>이벤트가 연쇄적으로 발생하는 구조로 인한 상태 변화 추적 테스트&lt;/strong>의 개선을 위해 호출 구조를 약간 변경하였습니다.&lt;/p>
&lt;p>그리고 &lt;code>Jest&lt;/code>의 &lt;code>SpyOn&lt;/code>을 활용하여 이벤트 발생시 특정 함수가 호출되는지 확인하고, 호출되는 함수가 상태를 적절히 변경하는지 테스트 하는 방향으로 개선되었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>짝의 개선: 관심사 분리를 위한 구조 개선&lt;/strong>&lt;/p>
&lt;p>피어 세션에서 다른 분들에 작업 결과를 보며 특정 클래스가 &lt;strong>너무 많은 책임&lt;/strong>을 가지고있다고 판단하셨고, 이를 함께 개선하였습니다.&lt;/p>
&lt;p>클래스의 특정 관심사를 묶어 다른 클래스로 분리하고, 기존 클래스의 메서드를 호출해야하는 부분을 이벤트로 처리하게 변경하였습니다.&lt;/p>
&lt;p>이 과정에서 연쇄적으로 처리해야하는 부분이 이전 클래스와 &lt;strong>강한 결합&lt;/strong>이 남아있어 같이 고민하게 되었는데, 제가 &lt;strong>콜백 함수를 넘기는 메서드&lt;/strong>를 제안하였고 이를 반영하였습니다.&lt;/p>
&lt;p>저의 의견으로 고민되었던 부분을 개선할 수 있어 뿌듯했네요😁&lt;/p>
&lt;h3 id="13일차-짝-구현---페어-프로그래밍">13일차: 짝 구현 - 페어 프로그래밍&lt;/h3>
&lt;p>13일차에는 &lt;strong>분산 버전 관리 시스템&lt;/strong>인 &lt;strong>Git&lt;/strong>을 완벽하게 이해해야 해결할 수 있는 미션이 주어졌습니다.&lt;/p>
&lt;p>또한 &lt;strong>페어 프로그래밍&lt;/strong>을 통해 주어진 미션을 해결해야하는 조건이 있었습니다.&lt;/p>
&lt;p>새롭게 배정된 짝과 어떻게 미션을 수행할지 협의했고, 결과적으로 아래와 같은 흐름으로 미션을 수행했습니다.&lt;/p>
&lt;ol>
&lt;li>각자 미션 해결을 위해 필요한 내용들 학습&lt;/li>
&lt;li>함께 요구사항 분석&lt;/li>
&lt;li>함께 설계&lt;/li>
&lt;li>함께 구현&lt;/li>
&lt;/ol>
&lt;p>바로 만나서 학습부터 같이 수행하는 것이 아니라 각자 관련 내용에 대해 충분히 학습한 후 미션 수행을 시작하였습니다.&lt;/p>
&lt;hr>
&lt;p>지난주에 했던 방법과 유사하게 &lt;code>VSCode&lt;/code>의 &lt;code>Live share&lt;/code>를 통해 페어 프로그래밍을 진행하였고, 개발 전 충분한 분석과 설계를 위해 &lt;code>mermaid&lt;/code> 를 적극적으로 활용하였습니다.&lt;/p>
&lt;p>이전까지는 주로 &lt;strong>객체 지향 프로그래밍&lt;/strong>을 주로 활용했었는데, 짝이 선호하는 &lt;strong>함수형 프로그래밍&lt;/strong>을 시도한 것도 새로운 시도였네요😊&lt;/p>
&lt;p>이에 따라 요구하는 기능들을 모듈로 묶어 설계하고 구현하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>TDD와 애자일스러운 개발&lt;/strong>&lt;/p>
&lt;p>짝에게 &lt;strong>애자일스러운 개발&lt;/strong>과 &lt;strong>TDD&lt;/strong>를 제안하여 시도했습니다.&lt;/p>
&lt;p>아쉽게도 저도 이러한 방식에 완전히 적응된 상태는 아니었고, 짝도 불편함을 느끼고 있다는 것이 작업 효율이 떨어지는 것으로 느낄 수 있었습니다.&lt;/p>
&lt;p>이러한 이유로 짝이 편해하는 방식으로 자연스럽게 전환되었던 것 같습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>파일 시스템 테스트&lt;/strong>&lt;/p>
&lt;p>파일과 디렉터리를 처리해야하는 요구사항이 있었습니다.&lt;/p>
&lt;p>테스트 과정에서 실제 파일과 디렉터리를 생성하여 작업하는 것이 적절치 않다고 판단하여 이를 대체할 수 있는 방법을 찾게 되었고,&lt;code>mock-fs&lt;/code>를 찾아 적용하였습니다.&lt;/p>
&lt;p>하지만&amp;hellip; &lt;code>Node v20&lt;/code> 환경에서 &lt;code>fs&lt;/code>의 모든 &lt;strong>파일 쓰기&lt;/strong> 가 모킹한 가상 디렉터리에 생성되는 것이 아닌 실제 디렉터리에 생성하는 문제가 발생하였습니다.&lt;/p>
&lt;p>파일을 처리해야하는 부분이 미션에서 굉장히 중요한 부분이었기 때문에 어떻게든 해결해보려했지만 시간이 많지 않았기 때문에, 이때 부터 테스트 코드를 작성하지 않고 개발을 진행하게 되었네요🥲&lt;/p>
&lt;hr>
&lt;p>전주와 다르게 짝에게 테스트에 대한 긍정적인 인식을 심어주지 못한 것 같아 많이 아쉬웠지만 다음에 이러한 상황이 발생한다면 빠르게 결정을 내려 &lt;strong>TDD&lt;/strong>를 끝까지 이어나가야겠다고 다짐 하게되었습니다👊&lt;/p>
&lt;h3 id="14일차-각자-개선하기">14일차: 각자 개선하기&lt;/h3>
&lt;p>13일차에 짝과 만든 결과물을 각자의 방식으로 개선하는 과정이었습니다.&lt;/p>
&lt;p>이러한 단계를 만든 이유를 예상해보자면&amp;hellip; 같이 고민하여 만든 결과물이지만, 각자의 방법으로 개선된 결과를 보며 어떠한 생각의 차이를 가지고있는지 확인해볼라는 의도 같았습니다.&lt;/p>
&lt;p>12일차 &lt;strong>같이 개선하기&lt;/strong>와 마찬가지로 새로운 것을 추가하는 것 보다는 기존 구현에서 개선해보라는 지침이 있어 기존 결과에서 문제점이라고 생각했던 부분을 개선하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>나의 개선: 코드 구조 개선&lt;/strong>&lt;/p>
&lt;p>13일차의 미션을 수행할 때 요구하는 기능을 각각 나누어 개발하는 방식으로 진행되었습니다.&lt;/p>
&lt;p>구현 과정에서 &lt;strong>TDD&lt;/strong>로 시작했지만 결국 테스트 코드를 작성하지 않게 되었었는데, 이유 중 하나가 모든 기능에서 공통적으로 사용되었던 &lt;strong>파일 시스템과의 결합을 적절히 분리하지 못했기 때문&lt;/strong>이라는 생각을 하게되었습니다.&lt;/p>
&lt;p>&lt;strong>파일시스템&lt;/strong>을 통해 파일과 디렉터리를 다루는 부분을 완벽히 분리한다면, 다른 주요 로직들은 파일 시스템을 이용해야하는 데이터를 &lt;strong>엔티티&lt;/strong>로 취급하여 처리할 수 있게 됩니다.&lt;/p>
&lt;p>그렇다면 &lt;strong>파일시스템 관련 테스트만 배제&lt;/strong>할 수 있기 때문에 다른 처리에서는 &lt;strong>TDD&lt;/strong>를 지속할 수 있었지 않았을까? 하고 말이죠&lt;/p>
&lt;p>그래서 &lt;code>FileSystem&lt;/code>이라는 클래스를 별도로 구현하여 파일에 관한 모든 책임을 담당하게 하였습니다.&lt;/p>
&lt;p>또한 파일로 핸들링 해야하는 &lt;strong>데이터를 정의&lt;/strong>하여 엔티티처럼 활용할 수 있도록 하였습니다.&lt;/p>
&lt;p>추가적으로 주요 처리 흐름을 클래스로 분리해 &lt;code>FileSystem&lt;/code>을 주입하여 데이터의 처리 흐름에 집중할 수 있도록 구조를 변경하였습니다.&lt;/p>
&lt;p>이러한 변경을 통해 가독성을 높히는 것은 물론, 기존 기능을 구현한 코드의 크기를 획기적으로 줄일 수 있었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>&lt;code>mock-fs&lt;/code>&lt;/strong>&lt;/p>
&lt;p>쓰기 작업에서의 이슈로 인해 제대로 활용하지 못했던 &lt;code>mock-fs&lt;/code>가 신경쓰여 잠이 안오더라구요😂&lt;/p>
&lt;p>이에 다양한 방법들을 시도했지만 결국 해결할 수 없었습니다.&lt;/p>
&lt;p>그래서 다른 언어에서도 파일 시스템을 활용한 기능들을 테스트 해야할텐데 어떤 방법들을 활용하고있을까 찾아보게 되었습니다.&lt;/p>
&lt;p>해결 방법은 단순했더라구요..🥲&lt;/p>
&lt;p>그냥 파일 처리를 테스트할 디렉터리를 따로 만들고, 그 디렉터리에서만 확인하는 것 이었습니다.&lt;/p>
&lt;p>테스트 디렉터리를 구성한 후 &lt;code>.gitignore&lt;/code>로 해당 디렉터리를 안 올라가게 만들면 되었던건데&amp;hellip; &lt;code>mock-fs&lt;/code>에 너무 집착한 탓에 충분히 생각해볼 수 있는 단순한 방법도 고려하지 못했던 것 같습니다.&lt;/p>
&lt;p>이 일을 계기로 조금 더 여유를 가지고 문제를 바라봐야겠다는 다짐을 해봅니다.🔥&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>이번주는 개인적으로 컨디션이 많이 안좋았어서 그만큼 결과물도 좋지 않았던 것 같습니다.&lt;/p>
&lt;p>첫주의 각오처럼 결과물을 통해서 인사이트를 드리고 싶었는데 조금 아쉬웠어요. &lt;del>그래도 다음주에는 에어컨이 수리됩니다.&lt;/del>&lt;/p>
&lt;p>하지만 그랬기 때문에 개선하기에 더욱 많은 변화를 보여드릴 수 있었을지도 모르겠습니다.&lt;/p>
&lt;p>한 주간 모두 고생 많으셨습니다. 부캠 챌린지도 1주밖에 남지 않았네요! 마지막까지 화이팅해봐요🔥🔥🔥&lt;/p></description></item><item><title>챌린지 과정 2주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/</link><pubDate>Sat, 27 Jul 2024 21:23:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/cover.png" alt="Featured image of post 챌린지 과정 2주차 회고" />&lt;p>부스트캠프 챌린지 과정 2주차가 마무리되었습니다 🥳&lt;/p>
&lt;p>저번주에는 중요한 CS 내용들을 직접 구현해보는 미션들이 주어졌다면, 이번주는 개발 방법론, 디자인 패턴, 아키텍처와 같은 것들을 종합적으로 활용하여 특정 기능을 구현하는 내용들로 미션들이 구성되었습니다.&lt;/p>
&lt;p>또한, 첫 회고에 남겼던 &lt;strong>건방진 생각&lt;/strong>을 깨버리듯🥲 한명도 빠짐없이 역량이 출중하신 캠퍼들과 스터디그룹을 이루어 진행하게 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img.png"
width="800"
height="316"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_hu131439b1cfdaa317552cdf91e94ff142_702376_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_hu131439b1cfdaa317552cdf91e94ff142_702376_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="호크아이 슨배님 ㅜ"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="607px"
>&lt;/p>
&lt;p>요구사항 자체는 저번주보다 여렵지는 않았지만, &lt;strong>생각의 전환&lt;/strong>을 필요로하는 미션들이 많았기 때문에 다른 의미로 어려웠던 것 같습니다.&lt;/p>
&lt;p>저번주보다는 시간을 덜 쓰긴 했지만 학습부터 분석, 설계, 구현까지 평균적으로 10시간 정도는 필요했던 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1.png"
width="743"
height="475"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1_hudb4f3b36d5d6c17e98a88d51baa0bc39_194558_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1_hudb4f3b36d5d6c17e98a88d51baa0bc39_194558_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="페어 프로그래밍"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>그리고 지난주의 &lt;strong>짝 설계&lt;/strong>에 더해서 &lt;strong>짝 구현&lt;/strong> 미션이 있어 다른 캠퍼 한 분과 분석 부터 구현까지 진행해볼 수 있었습니다.&lt;/p>
&lt;p>같이 개발할 수 있다면 어떠한 방법을 활용해도 괜찮았지만, 저희 조는 VSCode의 &lt;strong>Live Share&lt;/strong>를 이용하여 &lt;strong>페어 프로그래밍&lt;/strong>으로 진행하였습니다.&lt;/p>
&lt;h2 id="피어-세션">피어 세션&lt;/h2>
&lt;p>저번 주와는 다르게 자신의 코드를 설명하는 시간을 갖지 않았습니다.&lt;/p>
&lt;p>이렇게 진행한 이유는 모든 팀원분들이 역량이 좋으셨기 때문인데, 코드를 굳이 설명하지 않아도 이해하는데 어려움이 없는데다, 인사이트까지 충분히 가져갈 수 있었습니다.&lt;/p>
&lt;p>이에 따라 피어 세션 전 과정인 &lt;strong>피어 컴파일링&lt;/strong>과정에서 코드를 분석하고 &lt;strong>질문&lt;/strong>, &lt;strong>좋았던 부분&lt;/strong>, &lt;strong>개선이 필요한 부분&lt;/strong>을 정리 한 후 피어 세션에 참여했습니다.&lt;/p>
&lt;p>&lt;strong>인당 5분&lt;/strong> 정도의 시간으로 빨리 마무리 하고, &lt;strong>같이 고민해볼 내용&lt;/strong>이나 미션 관련 기술 등에 대해서 토론하는 시간을 가졌습니다.&lt;/p>
&lt;p>다 같이 &lt;strong>토론하는 과정&lt;/strong>에서 많은 것들을 알아갈 수 있었기 때문에 구성원들 모두 &lt;strong>만족&lt;/strong>스러워 했습니다.&lt;/p>
&lt;h2 id="미션-해결-및-학습">미션 해결 및 학습&lt;/h2>
&lt;p>이번 주는 미션만 잘 수행하는 것을 넘어서 새로운 것을 시도해봤습니다.&lt;/p>
&lt;p>마스터인 &lt;strong>JK&lt;/strong>님이 올려주신 해설 영상에 &lt;strong>애자일하게 개발하는 법&lt;/strong>에 대한 부분을 언급하셨는데, 이부분에서 공감이 되어 바로 적용했습니다.&lt;/p>
&lt;p>이와 더불어 모든 미션에 &lt;strong>TDD&lt;/strong>를 시도하여 진행하였습니다.&lt;/p>
&lt;h3 id="agile-하게-개발하는-법">Agile 하게 개발하는 법&lt;/h3>
&lt;p>애자일의 핵심은 &amp;ldquo;&lt;strong>빠르고 짧은 피드백 루프&lt;/strong>&amp;ldquo;를 통해 변화에 민첩하게 대응하는 것 입니다.&lt;/p>
&lt;p>사실 애자일은 조직 전체에 대상으로 배포 가능한 단위에 대해 민첩한 대응을 의미하지만, 이러한 방식을 개발에만 적용해보려고했습니다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
분석 --> 설계 --> 구현 --> 완료
&lt;/pre>
&lt;p>이전까지는 위와 같이 &amp;ldquo;&lt;strong>분석 - 설계 구현&lt;/strong>&amp;ldquo;과정으로 진행하였다면,&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a[분석] --> b[작업 분해]
subgraph sa [반복]
c[설계] --> d[구현]
end
b --> c
d --> e[완료]
&lt;/pre>
&lt;p>이번 주 부터는 작업을 작은 단위로 작업을 분해하고, 설계에서 개발까지 반복적으로 수행하는 방식으로 변경하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3.png"
width="1024"
height="505"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3_hu6efaf883042006ad369b55af72bffa5b_178457_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3_hu6efaf883042006ad369b55af72bffa5b_178457_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="애자일 개발 방법론"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>미션들을 수행하면서 나름 완벽히 설계해도 조금씩 바뀌게되어 &lt;strong>곤란했던 경험&lt;/strong>이 있었는데, &lt;strong>변화를 가정하고 진행&lt;/strong>되는 이러한 방식으로 &lt;strong>수월하게&lt;/strong> 구조 등을 변경할 수 있었던 것 같습니다.&lt;/p>
&lt;h3 id="tdd">TDD&lt;/h3>
&lt;p>사실 이전 직장에서부터 테스트 코드의 부재로 인한 고통을 뼈져리게 느꼈었기 때문에 테스트의 중요성은 너무나 잘 알고 있습니다.&lt;/p>
&lt;p>꼭 필요하다고 생각하고 있지만 습관화가 안되어 잘 활용하지 못하고 있었는데, 테스트에 익숙해지기 이번 기회를 시작하기로 마음먹었습니다.&lt;/p>
&lt;p>덤으로 위에서 언급한 &lt;strong>Agile 하게 개발하기&lt;/strong>에서 빠른 피드백을 받는 데 도움이 될 것이라 생각해 적용했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4.png"
width="1024"
height="680"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4_hu34b341a957e0c9749c8004b23f93334d_19212_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4_hu34b341a957e0c9749c8004b23f93334d_19212_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TDD"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>다들 아시는 것 처럼 구현 과정에 들어가기 전, 미션의 요구사항들을 모두 테스트 코드로 작성한 후, 테스트를 통과시키는 방식으로 진행하였습니다.&lt;/p>
&lt;p>가장 어려움을 느꼈던 테스트 코드 작성은 &lt;code>GPT&lt;/code>의 도움을 받으며 진행하였는데, 설계를 잘 수행한 덕에 테스트를 정확히 잘 만들어줘서 매우 편리했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1.gif"
width="350"
height="240"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1_hu47953aa9c0ae4dc86946ac79a368a34c_398794_480x0_resize_box_1.gif 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1_hu47953aa9c0ae4dc86946ac79a368a34c_398794_1024x0_resize_box_1.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="350px"
>&lt;/p>
&lt;p>터미널을 한쪽에 상시로 띄워놓고 &lt;code>jest --watch&lt;/code>를 통해 실시간으로 통과되는 것을 확인하며 구현했는데, 마치 &lt;strong>게임&lt;/strong>을 하는 것 같다는 느낌을 받을 수 있어서 미션을 더 재미있게 수행했던 것 같습니다. 🎮&lt;/p>
&lt;h2 id="학습-정리">학습 정리&lt;/h2>
&lt;p>일부 내용에 대해서는 학습했던 내용을 당일에 정리하여 올릴 수 있었으나, 짝 설계나 짝 구현 등의 미션들로 인해 따로 학습 정리가 어려웠습니다.&lt;/p>
&lt;p>이러한 부분은 주말을 활용해 추가적으로 진행하기로 결정했습니다.&lt;/p>
&lt;p>이를 위해 어떤 내용을 어떻게 정리할 것인지만 따로 메모했고, 이 회고를 마무리하고 진행할 예정이에요🥲&lt;/p>
&lt;h2 id="나의-변화">나의 변화&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2.png"
width="278"
height="181"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2_hubca6b70351de21cb18efa000fe370bd6_35435_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2_hubca6b70351de21cb18efa000fe370bd6_35435_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="틀깨기"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>이번 주 미션들은 풀스택 개발자로 일했던 경험과 다양한 방식으로 개발했던 경험 덕분에 접근 방법을 결정하는데는 큰 어려움이 없었습니다만&amp;hellip;&lt;/p>
&lt;p>다른 분들의 작업물들을 보며 개발자라면 고민해봤을 내용인 &lt;strong>얼마나 깊게 이해하고 있는가&lt;/strong>에 대해서 한번 더 생각해볼 수 있는 계기였습니다.&lt;/p>
&lt;p>특히 &lt;strong>함수형 프로그래밍&lt;/strong>을 활용해야하는 미션에서는 &lt;strong>상태&lt;/strong>를 아예 만들지않고 구현하셨던 캠퍼도 있어서 충격적으로 다가왔던 것 같습니다.&lt;/p>
&lt;p>다행히도 &lt;strong>이벤트 주도 아키텍처&lt;/strong>가 필요했던 미션은 모든 캠퍼분들이 어려움을 느끼셨었는데, 저의 결과물로 인사이트를 드릴 수 있었습니다.😁&lt;/p>
&lt;h3 id="나-좀-성장해-있었을지도">나 좀 성장해 있었을지도?&lt;/h3>
&lt;p>부스트캠프 5기에 참여했던 예전에 저였다면 뛰어난 동료들을 봤을 때 스스로 자책했었겠죠?&lt;/p>
&lt;p>이번에는 오히려 뛰어난 동료들을 보며 다른 분들은 어떻게 생각했을까? 어떻게 구현했을까? 라는 기대감에 다음날 피어세션이 더욱더 기다려졌어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5.png"
width="640"
height="427"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5_hu84b39fe339821112912a9fed69654c15_768651_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5_hu84b39fe339821112912a9fed69654c15_768651_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="10시 50분의 내 모습"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>문득 이런 저의 모습을 보며 &lt;strong>나 좀 성장해 있었을지도?&lt;/strong> 라는 생각이 들면서 몰래 뿌듯했었네요😋&lt;/p>
&lt;h3 id="좋은-동료들">좋은 동료들&lt;/h3>
&lt;p>사실 저는 &lt;strong>집단 지성&lt;/strong>을 믿지 않았습니다.&lt;/p>
&lt;p>지금까지 살아오면서 여러 활동을 했었지만, 대부분 잘 하는 일부가 &lt;strong>캐리&lt;/strong>하는 방식으로 진행되었었기 때문이에요.&lt;/p>
&lt;p>그런데 각각의 개성이있는 잘 하는 사람들끼리 모여 내는 &lt;strong>학습 시너지&lt;/strong>는 저의 생각을 바꾸기 충분했습니다.&lt;/p>
&lt;p>큰 기업들에서 자신들의 최고의 장점 &lt;strong>좋은 동료들&lt;/strong>이라고 강조하는 모습을 쉽게 볼 수 있었는데, 이 부분을 확실히 이해할 수 있었습니다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>지난주보다 더 빠르게 한 주가 지나갔습니다. 다음주는 짝 활동이 더 많아진다고 하는데 벌써 기대가 되네요.&lt;/p>
&lt;p>하루 하루를 정해진 일과에 맞춰 충실히 살아가는게 중요하다는 걸 새삼 다시 느끼는 것 같습니다. 조금(많이) 피곤하긴 하지만 살아온 어느때보다 활력이 넘치는 것 같아요🔥🔥🔥&lt;/p>
&lt;p>마지막으로 그룹원들에게 코멘트 할 때 공통으로 넣으려고 준비한 문구로 마무리하겠습니다. 끝까지 읽어주셔서 감사합니다.😁&lt;/p>
&lt;blockquote>
&lt;p>소프트웨어 장인이라는 책에서 나온 내용인데 소프트웨어 장인은 경지라기 보다는 이념이나 마음가짐으로 소프트웨어 장인정신을 잘 지키고 있는가를 의미한다고 해요&lt;/p>
&lt;p>프로페셔널하게 행동하기,&lt;br>
다른 개발자들에게 배우기,&lt;br>
자신의 지식을 나누기 등이 이에 해당한다고 합니다.&lt;/p>
&lt;p>저자는 이런 것들은 잘 하고 있다면 스스로를 소프트웨어 장인이라고 칭해도 괜찮다고 생각한데요&lt;/p>
&lt;p>그런 의미에서 조금 부끄럽지만 저희 그룹원들 모두 소프트웨어 장인이라고 불러도 괜찮지 않을까요? ㅎㅎ&lt;/p>
&lt;p>한 주 동안 많이 배워갑니다. 멤버쉽에서 다시 뵈어요 :D&lt;/p>
&lt;/blockquote></description></item></channel></rss>