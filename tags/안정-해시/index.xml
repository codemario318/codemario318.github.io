<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>안정 해시 on Mario Blog</title><link>https://codemario318.github.io/tags/%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C/</link><description>Recent content in 안정 해시 on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Thu, 04 Jul 2024 22:51:50 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/%EC%95%88%EC%A0%95-%ED%95%B4%EC%8B%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>11. 뉴스 피드 시스템 설계</title><link>https://codemario318.github.io/post/system-design-interview/11/</link><pubDate>Thu, 04 Jul 2024 22:51:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/11/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/cover.png" alt="Featured image of post 11. 뉴스 피드 시스템 설계" />&lt;h2 id="뉴스-피드란">뉴스 피드란?&lt;/h2>
&lt;p>페이스북의 도움말 페이지에서는 아래와 같이 뉴스 피드를 설명하고 있다.&lt;/p>
&lt;blockquote>
&lt;p>홈 페이지 중앙에 지속적으로 업데이트되는 스토리와 사용자 상태 정보 업데이트, 사진, 비디오, 링크, 앱 활동 팔로우하는 사람들, 페이지, 그룹으로부터 나오는 좋아요 등을 포함한다.&lt;/p>
&lt;/blockquote>
&lt;p>뉴스 피드 시스템 설계는 아주 유명한 면접 문제이다.&lt;/p>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;ul>
&lt;li>Q. 모바일 앱, 웹 어떤걸 지원해야하는가?
&lt;ul>
&lt;li>A. 둘다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 주요 기능은?
&lt;ul>
&lt;li>A. 사용자는 뉴스 피드 페이지에 새로운 스토리를 올릴 수 있어야함
&lt;ul>
&lt;li>친구들이 올리는 스토리를 볼 수도 있어야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 어떤 순서로 스토리가 표시되는가? 최신 포스트? 토픽 점수 기반?
&lt;ul>
&lt;li>A. 시간 흐름 역순으로 표시(Reverse chronological order)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 한 명의 사용자는 최대 몇 명의 친구를 가질 수 있는가?
&lt;ul>
&lt;li>A. 5,000명&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 트래픽 규모는?
&lt;ul>
&lt;li>A. 매일 천만 명 방문한다고 가정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 피드에 이미지나 비디오 스토리도 올라올 수 있는가?
&lt;ul>
&lt;li>A. 이미지나 비디오 등 미디어 파일이 포함될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="개략적-설계안-제시-및-동의-구하기">개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;p>뉴스 피드 시스템 설계는 &lt;strong>피드 발행&lt;/strong>(Feed publishing)과 &lt;strong>뉴스 피드 생성&lt;/strong>(News feed building) 두 가지 구분으로 나눌 수 있다.&lt;/p>
&lt;ul>
&lt;li>피드 발행
&lt;ul>
&lt;li>사용자가 스토리를 포스팅하면 해당 데이터를 캐시와 데이터베이스에 기록한다.&lt;/li>
&lt;li>새 포스팅은 친구의 뉴스 피드에도 전송된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>뉴스 피드 생성
&lt;ul>
&lt;li>뉴스 피드는 모든 친구의 포스팅을 시간 흐름 역순으로 모아서 만든다고 가정한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="뉴스-피드-api">뉴스 피드 API&lt;/h3>
&lt;p>뉴스 피드 API는 HTTP 프로토콜 기반으로 클라이언트가 서버와 통신하기 위해 사용하는 수단이다.&lt;/p>
&lt;ul>
&lt;li>상태 정보를 업데이트 할 때&lt;/li>
&lt;li>뉴스 피드를 가져올 때&lt;/li>
&lt;li>친구를 추가하는 등 다양한 작업 수행&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>피드 발행 API&lt;/strong>&lt;/p>
&lt;p>새 스토리를 포스팅하기 위한 API다.&lt;/p>
&lt;p>HTTP POST 형태로 요청을 보낸다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">POST /v1/me/feed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>인자
&lt;ul>
&lt;li>body: 포스트 내용&lt;/li>
&lt;li>Authorization 헤더: API 호출을 인증하기 위해 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>피드 읽기 API&lt;/strong>&lt;/p>
&lt;p>뉴스 피드를 가져오는 API다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">GET /v1/me/feed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>인자
&lt;ul>
&lt;li>Authorization 헤더: API 호출을 인증하기 위해 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="피드-발행">피드 발행&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img.png"
width="537"
height="818"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_hu891d2a45b04e66955eabc83b2e6d7650_139382_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_hu891d2a45b04e66955eabc83b2e6d7650_139382_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 발행 구조"
class="gallery-image"
data-flex-grow="65"
data-flex-basis="157px"
>&lt;/p>
&lt;ul>
&lt;li>사용자
&lt;ul>
&lt;li>모바일 앱이나 브라우저에서 새 포스팅을 올리는 주체&lt;/li>
&lt;li>&lt;code>POST /v1/me/feed&lt;/code> API를 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>로드밸런서(load balancer)
&lt;ul>
&lt;li>트래픽을 웹 서버들로 분산&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 서버
&lt;ul>
&lt;li>HTTP 요청을 내부 서비스로 중계하는 역할을 담당&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>포스팅 저장 서비스(Post service)
&lt;ul>
&lt;li>새 포스팅을 데이터베이스와 캐시에 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>포스팅 전송 서비스(Fanout service)
&lt;ul>
&lt;li>새 포스팅을 친구의 뉴스피드에 푸시(push)&lt;/li>
&lt;li>뉴스 피드 데이터는 캐시에 보관하여 빠르게 읽어갈 수 있도록 해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>알림 서비스(notification service)
&lt;ul>
&lt;li>친구들에게 새 포스팅이 올라왔음을 알림&lt;/li>
&lt;li>푸시 알림을 보냄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="뉴스-피드-생성">뉴스 피드 생성&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_1.png"
width="425"
height="634"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_1_hu69fcfbc2dbdf50bdcc685e78596b2bbb_88291_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_1_hu69fcfbc2dbdf50bdcc685e78596b2bbb_88291_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="뉴스 피드 생성 구조"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="160px"
>&lt;/p>
&lt;ul>
&lt;li>사용자
&lt;ul>
&lt;li>뉴스 피드를 읽는 주체&lt;/li>
&lt;li>&lt;code>GET /v1/me/feed&lt;/code>를 이용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>로드 밸런서
&lt;ul>
&lt;li>트래픽을 웹 서버들로 분산&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 서버
&lt;ul>
&lt;li>트래픽을 뉴스 피드 서비스로 보냄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>뉴스 피드 서비스(news feed service)
&lt;ul>
&lt;li>캐시에서 뉴스 피드를 가져오는 서비스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>뉴스 피드 캐시(news feed cache)
&lt;ul>
&lt;li>랜더링할 때 필요한 피드ID를 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;h3 id="피드-발행-흐름-상세-설계">피드 발행 흐름 상세 설계&lt;/h3>
&lt;p>웹 서버와 포스팅 전송 서비스에 초점을 두고 확인한다.&lt;/p>
&lt;p>&lt;strong>웹 서버&lt;/strong>&lt;/p>
&lt;p>클라이언트와 통신할 뿐 아니라 인증이나 처리율 제한 기능도 수행한다.&lt;/p>
&lt;ul>
&lt;li>올바른 인증 토큰을 Authorization 헤더에 넣고 API를 호출하는 사용자만 포스팅 할 수 있어야 한다.&lt;/li>
&lt;li>스팸을 막고 유해한 콘텐츠가 자주 올라오는 것을 방지하기 위해 사용자가 올리 수 있는 포스팅 수를 제한을 둬야한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>포스팅 전송(팬아웃) 서비스&lt;/strong>&lt;/p>
&lt;p>포스팅 전송, 즉 팬아웃(fanout)은 어떤 사용자의 새 포스팅을 그 사용자와 친구 관계에 있는 모든 사용자에게 전달하는 과정이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_2.png"
width="863"
height="952"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_2_huda53be8af4aa5fdd5c6f7a22043667e4_267454_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_2_huda53be8af4aa5fdd5c6f7a22043667e4_267454_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="포스팅 전송 서비스"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>두 가지 유형이 존재하며 각기 장단점을 가진다.&lt;/p>
&lt;p>&lt;strong>푸시 모델(push model)&lt;/strong>&lt;/p>
&lt;p>새로운 포스팅을 기록하는 시점(쓰기 시점)에 뉴스피드를 갱신하게 된다.&lt;/p>
&lt;p>다시 말해, 포스팅이 완료되면 바로 해당 사용자의 캐시에 해당 포스팅을 기록한다.&lt;/p>
&lt;ul>
&lt;li>장점
&lt;ul>
&lt;li>뉴스피드가 실시간으로 갱신되며 친구 목록에 있는 사용자에게 &lt;strong>즉시 전송&lt;/strong>&lt;/li>
&lt;li>새 포스팅이 기록되는 순간에 뉴스 피드가 이미 갱신되므로(pre-computed) 뉴스 피드를 읽는 데 드는 시간이 짧아짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점
&lt;ul>
&lt;li>친구가 많은 사용자의 경우 뉴스 피드를 갱신하는 데 많은 시간이 소요될 수도 있음
&lt;ul>
&lt;li>핫키(Hotkey) 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서비스를 자주 이용하지 않는 사용자의 피드까지 갱신해야 하므로 자원 낭비&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>풀 모델(pull model)&lt;/strong>&lt;/p>
&lt;p>피드를 읽어야 하는 시점에 뉴스 피드를 갱신한다.&lt;/p>
&lt;p>따라서 &lt;strong>요청 기반&lt;/strong>(on-demand) 모델이며, 사용자가 본인 홈페이지나 타임 라인을 로딩하는 시점에 새로운 포스트를 가져오게 된다.&lt;/p>
&lt;ul>
&lt;li>장점
&lt;ul>
&lt;li>로그인하기까지는 어떤 컴퓨팅 자원도 소모하지 않으므로 비활성화된 사용자는 이 모델이 유리하다.&lt;/li>
&lt;li>데이터를 친구 각각에 푸시하는 작업이 필요 없으므로 핫키 문제도 생기지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점
&lt;ul>
&lt;li>뉴스 피드를 읽는 데 많은 시간이 소요될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>이번 설계안은 두 가지 방법을 결합하여 장점은 취하고 단점은 버린다.&lt;/p>
&lt;ul>
&lt;li>뉴스피드를 빠르게 가져올 수 있도록 하는 것은 아주 중요하므로 대부분의 사용자에 대해서 푸시 모델 사용&lt;/li>
&lt;li>친구, 팔로워가 아주 많은 사용자의 경우는 해당 사용자의 포스팅을 필요할 때 가져가도록 하는 풀 모델을 사용&lt;/li>
&lt;li>안정 해시(consistent hashing)을 통해 요청과 데이터를 고르게 분산하여 핫 키 문제를 완화&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_3.png"
width="643"
height="597"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_3_hua09b20c3092217fe155cb7d5889b4e53_145261_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_3_hua09b20c3092217fe155cb7d5889b4e53_145261_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>그래프 데이터베이스&lt;/strong>에서 친구 ID 목록을 가져온다.
&lt;ul>
&lt;li>그래프 데이터베이스는 친구 관계나 친구 추천을 관리하기 적합하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용자 정보 캐시에서 친구들의 정보를 가져온후, 설정에 따라 일부 걸러낸다.
&lt;ul>
&lt;li>차단 등 이유로&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>친구 목록과 새 스토리의 포스팅 ID를 메시키 큐에 넣는다.&lt;/li>
&lt;li>팬아웃 작업 서버가 메시지 큐에서 데이터를 꺼내 뉴스 피드 데이터를 뉴스 피드 캐시에 넣는다.
&lt;ul>
&lt;li>뉴스 피드 캐시: &lt;code>&amp;lt;포스팅 ID, 사용자 ID&amp;gt;&lt;/code>&lt;/li>
&lt;li>모든 데이터를 포함하면 메모리 요구량이 지나치게 늘어날 수 있다.&lt;/li>
&lt;li>어떤 사용자가 뉴스 피드에 올라온 수천 개의 스토리를 볼 확률은 지극히 낮다.(캐시 미스 확률이 낮다.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="피드-읽기-흐름-상세-설계">피드 읽기 흐름 상세 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_4.png"
width="724"
height="728"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_4_hufb1b28fc20f324cce39c94a4369c34ac_210247_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_4_hufb1b28fc20f324cce39c94a4369c34ac_210247_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 읽기 흐름"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>이미지나 비디오와 같은 미디어 콘텐츠는 CDN에 저장하여 빨리 읽어갈 수 있도록 한다.&lt;/p>
&lt;ol>
&lt;li>사용자가 뉴스 피드 읽기 요청을 보냄&lt;/li>
&lt;li>로드밸런서가 요청을 웹 서버 가운데 하나로 보냄&lt;/li>
&lt;li>피드를 가져오기 위해 뉴스 피드 서비스 호출&lt;/li>
&lt;li>뉴스 피드 캐시에서 포스팅 ID 목록을 조회&lt;/li>
&lt;li>사용자 이름, 사용자 사진 등을 사용자 캐시와 포스팅 캐시에서 가져와 완전한 뉴스 피드 생성&lt;/li>
&lt;li>JSON 형태로 응답&lt;/li>
&lt;/ol>
&lt;h3 id="캐시-구조">캐시 구조&lt;/h3>
&lt;p>캐시는 &lt;strong>뉴스 피드 시스템의 핵심 컴포넌트&lt;/strong>이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_5.png"
width="831"
height="461"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_5_hu7a050117f609eaff8b50eedec13da585_109520_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_5_hu7a050117f609eaff8b50eedec13da585_109520_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="5계층 캐시 구조"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;ul>
&lt;li>뉴스피드
&lt;ul>
&lt;li>뉴스 피드의 ID 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>콘텐츠
&lt;ul>
&lt;li>포스팅 데이터를 보관&lt;/li>
&lt;li>인기 콘텐츠는 따로 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>소셜 그래프
&lt;ul>
&lt;li>사용자 간 관계 정보를 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>행동(action)
&lt;ul>
&lt;li>포스팅에 대한 사용자의 행위에 관한 정보를 보관&lt;/li>
&lt;li>좋아요, 답글 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>횟수(counter)
&lt;ul>
&lt;li>좋아요 횟수, 응답 수, 팔로워 수, 팔로잉 수 등 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>이번 설계안은 &lt;strong>뉴스 피드 발행&lt;/strong>, &lt;strong>뉴스 피드 생성&lt;/strong> 두 부분으로 구성되어 있다.&lt;/p>
&lt;p>설계를 진행하고 기술을 선택할 때는 그 배경에 어떤 타협적 결정들이 있었는지 잘 이해하고 설명할 수 있어야 한다.&lt;/p>
&lt;p>시간이 남는다면 &lt;strong>규모 확장성 이슈&lt;/strong>를 논의하는 것이 좋을 수 있다.&lt;/p>
&lt;h3 id="데이터베이스-규모-확장">데이터베이스 규모 확장&lt;/h3>
&lt;ul>
&lt;li>수직적 규모 확장 vs 수평적 규모 확장&lt;/li>
&lt;li>SQL vs NoSQL&lt;/li>
&lt;li>master-slave 다중화&lt;/li>
&lt;li>복제본(replica)에 대한 읽기 연산&lt;/li>
&lt;li>일관성 모델(consistency model)&lt;/li>
&lt;li>데이터베이스 샤딩&lt;/li>
&lt;/ul>
&lt;h3 id="그-외">그 외&lt;/h3>
&lt;ul>
&lt;li>웹 계층을 무상태로 운영하기&lt;/li>
&lt;li>가능한 한 많은 데이터를 캐시할 방법&lt;/li>
&lt;li>여러 데이터 센터를 지원할 방법&lt;/li>
&lt;li>메시지 큐를 사용하여 컴포넌트 사이의 결합도 낮추기&lt;/li>
&lt;li>핵심 메트릭에 대한 모니터링
&lt;ul>
&lt;li>트래픽이 몰리는 시간대의 QPS&lt;/li>
&lt;li>사용자가 뉴스 피드를 새로고침 할 때 지연 시간 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>5. 안정 해시 설계</title><link>https://codemario318.github.io/post/system-design-interview/5/</link><pubDate>Thu, 23 May 2024 12:04:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/5/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/cover.png" alt="Featured image of post 5. 안정 해시 설계" />&lt;p>&lt;strong>수평적 규모 확장성&lt;/strong>을 달성하기 위해서는 요청 또는 데이터를 서버에 &lt;strong>균등하게 나누는 것&lt;/strong>이 중요하다.&lt;/p>
&lt;p>&lt;strong>안정 해시&lt;/strong>는 이 목표를 달성하기 위해 보편적으로 사용하는 기술이다.&lt;/p>
&lt;h2 id="해시-키-재배치rehash-문제">해시 키 재배치(rehash) 문제&lt;/h2>
&lt;p>N개의 캐시 서버가 있을 때, 부하를 균등하게 나누는 보편적 방법은 해시 함수를 사용하는 것이다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">serverIndex = hash(key) % N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>총 4대의 서버를 사용한다면, 주어진 각각의 키에 대해 아래와 같이 계산될 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키&lt;/th>
&lt;th>해시&lt;/th>
&lt;th>해시 % 4(서버 인덱스)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key0&lt;/td>
&lt;td>18358617&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key1&lt;/td>
&lt;td>26143584&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key2&lt;/td>
&lt;td>18131146&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key3&lt;/td>
&lt;td>35863496&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key4&lt;/td>
&lt;td>34085809&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key5&lt;/td>
&lt;td>27581703&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key6&lt;/td>
&lt;td>38164978&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key7&lt;/td>
&lt;td>22530351&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>키 값을 해싱한 값에 나머지 연산을 하여 저장될 서버가 결정된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img.png"
width="597"
height="323"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_hu8ecb82b93ef83548a97acf28dacc70e3_47080_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_hu8ecb82b93ef83548a97acf28dacc70e3_47080_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>이 방식은 &lt;strong>서버 풀의 크기가 고정되어 있을 때&lt;/strong>, &lt;strong>데이터 분포가 균등할 때&lt;/strong> 잘 동작한다.&lt;/p>
&lt;p>하지만 서버가 추가되거나, 기존 서버가 삭제되면 나머지 연산 결과 값이 변하기 때문에 문제가 발생한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키&lt;/th>
&lt;th>해시&lt;/th>
&lt;th>해시 % 3(서버 인덱스)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key0&lt;/td>
&lt;td>18358617&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key1&lt;/td>
&lt;td>26143584&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key2&lt;/td>
&lt;td>18131146&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key3&lt;/td>
&lt;td>35863496&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key4&lt;/td>
&lt;td>34085809&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key5&lt;/td>
&lt;td>27581703&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key6&lt;/td>
&lt;td>38164978&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key7&lt;/td>
&lt;td>22530351&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>따라서 아래와 같은 형태로 키의 분포가 바뀐다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_1.png"
width="595"
height="375"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_1_hu221148814a934c0ed66cfef734ebb8e4_56907_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_1_hu221148814a934c0ed66cfef734ebb8e4_56907_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>장애가 발생한 1번 서버에 보관되어 있는 키 뿐만 아닌 대부분의 키가 재분배되어, 대부분 캐시 클라이언트가 데이터가 없는 서버에 접속하게된다.&lt;/p>
&lt;p>이로 인해 대규모 캐시 미스가 발생하게되는데, &lt;strong>안정 해시&lt;/strong>는 이러한 문제를 효과적으로 해결하는 방식이다.&lt;/p>
&lt;h2 id="안정-해시">안정 해시&lt;/h2>
&lt;p>안정 해시는 &lt;strong>해시 테이블 크기가 조정될 때 평균적으로 &lt;code>k/n&lt;/code>개의 키만 재비치하는 해시 기술&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>k&lt;/code>: 키의 개수&lt;/li>
&lt;li>&lt;code>n&lt;/code>: 슬롯의 개수&lt;/li>
&lt;/ul>
&lt;p>이와는 달리 대부분의 전통적인 해시 테이블은 슬롯의 수가 바뀌면 거의 대부분 키를 재배치한다.&lt;/p>
&lt;h3 id="해시-공간과-해시-링">해시 공간과 해시 링&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>SHA-1&lt;/strong> 해시함수를 사용하며, 출력 값의 범위는 &lt;code>x0, x1 ... xn&lt;/code>이라고 가정한다.&lt;/li>
&lt;li>&lt;strong>SHA-1&lt;/strong>의 해시 공간(hash space) 범위는 &lt;strong>0 부터 &lt;code>2^160 - 1&lt;/code>&lt;/strong> 까지라고 알려져 있다.&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;code>x0 = 0&lt;/code>, &lt;code>xn -1 = 2^160 - 1&lt;/code>이며, 두 수 사이의 값을 갖게 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_2.png"
width="239"
height="284"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_2_huf4d0b3acc8d8378f9f6d7202b468ee24_14360_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_2_huf4d0b3acc8d8378f9f6d7202b468ee24_14360_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="201px"
>&lt;/p>
&lt;p>이 해시 공간의 양쪽을 연결하변 해시 링이 만들어진다.&lt;/p>
&lt;h3 id="해시-서버">해시 서버&lt;/h3>
&lt;p>해시 함수 &lt;code>f&lt;/code>를 사용하면 서버(IP, 이름 등)를 링 위의 어딘가에 대응시킬 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_3.png"
width="607"
height="421"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_3_hu0bc48cf4515b95e87de880bf1aab9c60_55336_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_3_hu0bc48cf4515b95e87de880bf1aab9c60_55336_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;h3 id="해시-키">해시 키&lt;/h3>
&lt;blockquote>
&lt;p>안정 해시에서 사용되는 해시 함수는 전통적인 해시 키 방식에서 언급된 방식과 다르며, 만들어질 수 있는 모든 해시 공간 &lt;code>x0 ... xn&lt;/code>을 연결한 형태이므로 나머지 연산을 사용하지 않는다.&lt;/p>
&lt;/blockquote>
&lt;p>캐시할 키 또한 서버와 함께 해시 링 위의 어느 지점에 배치할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_4.png"
width="606"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_4_hu2fcefd9766a218d8cface53baa2bca15_61260_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_4_hu2fcefd9766a218d8cface53baa2bca15_61260_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;h3 id="서버-조회">서버 조회&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_5.png"
width="606"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_5_hu2fcefd9766a218d8cface53baa2bca15_61260_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_5_hu2fcefd9766a218d8cface53baa2bca15_61260_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>어떤 키가 저장되는 서버는 &lt;strong>해당 키의 위치로부터 시계 방향으로 링을 탐색해 나가면서 만나는 첫번 째 서버&lt;/strong>이다.&lt;/p>
&lt;p>따라서 &lt;strong>k0&lt;/strong>는 &lt;strong>s0&lt;/strong> 에 저장된다.&lt;/p>
&lt;h3 id="서버-추가">서버 추가&lt;/h3>
&lt;p>키가 저장되는 서버가 키의 위치로부터 시계 방향으로 링을 돌면서 만나는 첫 서버이므로, 서버를 추가하더라도 키 가운데 일부만 재배치하면 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_6.png"
width="615"
height="465"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_6_huc8545933ab2d8774b07636da6ebf7ea2_77279_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_6_huc8545933ab2d8774b07636da6ebf7ea2_77279_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>위 그림처럼 s4가 추가되면, k0만 재배치하면 되며, 나머지 키들은 같은 서버에 남게된다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>k0&lt;/strong>가 만나는 첫 서버가 &lt;strong>s4&lt;/strong>로 바뀌기 때문&lt;/li>
&lt;/ul>
&lt;h3 id="서버-제거">서버 제거&lt;/h3>
&lt;p>마찬가지로 한 서버가 제거되면 &lt;strong>키 일부만 재배치&lt;/strong>된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_7.png"
width="609"
height="450"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_7_hu76c16055e4220cf0e1509508dbdc7e60_68728_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_7_hu76c16055e4220cf0e1509508dbdc7e60_68728_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>s1&lt;/strong>이 삭제되었을 때 &lt;strong>k1&lt;/strong>의 첫 서버만 &lt;strong>s2&lt;/strong>로 바뀌므로 &lt;strong>k1&lt;/strong>만 &lt;strong>s2&lt;/strong>로 재배치된다.&lt;/li>
&lt;/ul>
&lt;h3 id="기존-구현법의-두-가지-문제">기존 구현법의 두 가지 문제&lt;/h3>
&lt;p>안정 해시 알고리즘은 MIT에서 처음 제안되었는데, 기본 절차는 아래와 같다.&lt;/p>
&lt;ol>
&lt;li>서버와 키를 &lt;strong>균등 분포 해시 함수&lt;/strong>를 사용해 해시 링에 배치한다.&lt;/li>
&lt;li>키의 위치에서 링을 시계방향으로 탐색하다 만나는 최초의 서버가 키가 저장될 서버이다.&lt;/li>
&lt;/ol>
&lt;p>안정 해시는 근본적으로 최소한의 추가/삭제에 대해 최소한의 재배치를 고려한다. 따라서 이러한 방식에는 두 가지 문제가 발생한다.&lt;/p>
&lt;p>&lt;strong>파티션 크기 문제&lt;/strong>&lt;/p>
&lt;p>서버가 추가되거나 삭제되는 상황을 감안하면 사용하더라도 파티션의 크기를 균등하게 유지하는 게 불가능하다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_8.png"
width="610"
height="371"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_8_hufb05e65c37497f753e3a366dbfe6320e_67873_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_8_hufb05e65c37497f753e3a366dbfe6320e_67873_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;ul>
&lt;li>파티션의 크기는 시계 방향으로 제일 가까운 서버 사이와의 거리만큼의 해시 공간으로, 서버의 해시 공간이 균등하지 않다.
&lt;ul>
&lt;li>추가 삭제될 때 시계 방향으로 제일 가까운 서버에 키들이 집중된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>키의 균등 분포 문제&lt;/strong>&lt;/p>
&lt;p>균등 분포 해시 함수는 충돌을 최소화하며 입력 키들이 해시 공간 전체에 고르게 분포되어 특정 영역에 물리지 않도록 구현되지만 완전하지는 않다.&lt;/p>
&lt;ul>
&lt;li>데이터의 비균등한 본질:
&lt;ul>
&lt;li>실제 데이터는 해시 함수의 이상적인 균등 분포를 따르지 않을 수 있다.&lt;/li>
&lt;li>특정 패턴이나 값들이 특정 해시 영역에 몰리는 경우가 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>해시 함수의 한계:
&lt;ul>
&lt;li>모든 해시 함수는 완벽한 균등 분포를 보장할 수 없다.&lt;/li>
&lt;li>특히 입력 키의 분포가 고르지 않을 경우, 해시 값의 분포도 고르지 않을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_9.png"
width="611"
height="409"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_9_hu5257857a45f5f8de50581f3a0c6d2841_61763_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_9_hu5257857a45f5f8de50581f3a0c6d2841_61763_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>따라서 키의 균등 분포가 매우 달성하기 어려워 위와 같은 상황이 발생하게된다.&lt;/p>
&lt;p>&lt;strong>+ 실제 서버의 처리 능력 차이&lt;/strong>&lt;/p>
&lt;p>노드(서버)마다 처리 능력이나 저장 용량이 다를 경우, 파티션 크기의 균등성이 실제 부하의 균등성을 의미하지 않을 수 있다.&lt;/p>
&lt;h3 id="가상-노드">가상 노드&lt;/h3>
&lt;p>가상 노드는 &lt;strong>실제 노드 또는 서버를 가리키는 노드&lt;/strong>로서 하나의 서버는 링 위에 여러 개의 가상 노드를 가질 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_10.png"
width="603"
height="458"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_10_hua3bd50f3317f65ef075362e2b74282e1_85776_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_10_hua3bd50f3317f65ef075362e2b74282e1_85776_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;p>서버들의 비슷한 해시 공간을 가질 수 있도록 하는 기법으로 해시 링 위에 실제 서버를 가르키는 가상 노드들을 분포시킨 후 가상 노드에 할당되는 해시 영역을 가상 노드가 가르키는 서버가 처리하도록 한다.&lt;/p>
&lt;ul>
&lt;li>따라서 각 서버는 하나가 아닌 여러 개의 파티션을 관리해야 한다.&lt;/li>
&lt;/ul>
&lt;p>가상 노드의 개수를 늘리면 표준 편차가 작아져 데이터가 고르게 분포되므로, 키위 분포는 점점 더 균등해지지만&lt;/p>
&lt;p>가상 노드 데이터를 저장할 공간이 더 많이 필요해지므로, 시스템 요구사항에 맞도록 가상 노드 개수를 적절히 조정하는 트레이드오프가 필요하다.&lt;/p>
&lt;h3 id="재배치할-키-결정">재배치할 키 결정&lt;/h3>
&lt;p>서버가 추가되거나 제거되면 데이터의 일부는 재배치해야 한다.&lt;/p>
&lt;p>&lt;strong>서버가 추가되었을 때&lt;/strong>&lt;/p>
&lt;p>&lt;strong>s4&lt;/strong>가 추가되었다고 가정하면, 영향을 받는 위는 &lt;strong>s4&lt;/strong> 부터 그 반시계 방향에 있는 &lt;strong>s3&lt;/strong> 까지이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_11.png"
width="611"
height="463"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_11_hu56d8da2926a0ef9a8f4dcf5986502707_77091_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_11_hu56d8da2926a0ef9a8f4dcf5986502707_77091_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>따라서 &lt;strong>s3&lt;/strong> 부터 &lt;strong>s4&lt;/strong> 사이에 있는 키들을 &lt;strong>s4&lt;/strong>로 재배치해야한다.&lt;/p>
&lt;p>&lt;strong>서버가 삭제되었을 때&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_12.png"
width="608"
height="449"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_12_hu33149acfb6f53d9b638ddb2443c387f3_70058_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_12_hu33149acfb6f53d9b638ddb2443c387f3_70058_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;strong>s1&lt;/strong>이 삭제되면 &lt;strong>s1&lt;/strong> 부터 그 반시계 방향에 있는 최초 서버 &lt;strong>s0&lt;/strong> 사이에 있는 키들이 &lt;strong>s2&lt;/strong>로 재배치되어야 한다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>안정 해시의 이점은 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.&lt;/li>
&lt;li>데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.&lt;/li>
&lt;li>핫스팟 키 문제를 줄인다.
&lt;ul>
&lt;li>특정한 샤드에 대한 접근이 지나치게 빈번하면 서버 과부화 문제가 생길 수 있는데(유명인사 문제), 데이터를 좀 더 균등하게 분배하므로 문제 발생 가능성을 줄인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>안정해시는 실제로 널리 쓰이는 기술이다.&lt;/p>
&lt;ul>
&lt;li>아마존 다이나모 데이터베이스의 파티셔닝 관련 컴포넌트&lt;/li>
&lt;li>아파치 카산드라 클러스터에서 데이터 파티셔닝&lt;/li>
&lt;li>디스코드 채팅 어플리케이션&lt;/li>
&lt;li>아카마이 CDN&lt;/li>
&lt;li>매그레프 네트워크 부하 분산기 등&lt;/li>
&lt;/ul></description></item></channel></rss>