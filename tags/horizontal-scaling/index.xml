<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Horizontal Scaling on Mario Blog</title><link>https://codemario318.github.io/tags/horizontal-scaling/</link><description>Recent content in Horizontal Scaling on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sat, 04 Jan 2025 14:57:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/horizontal-scaling/index.xml" rel="self" type="application/rss+xml"/><item><title>웹소켓 시스템의 성능 개선하기</title><link>https://codemario318.github.io/post/websocket-scale-out/</link><pubDate>Sat, 04 Jan 2025 14:57:49 +0900</pubDate><guid>https://codemario318.github.io/post/websocket-scale-out/</guid><description>&lt;img src="https://codemario318.github.io/post/websocket-scale-out/cover.png" alt="Featured image of post 웹소켓 시스템의 성능 개선하기" />&lt;p>최근 실시간 다중 사용자 퀴즈 게임을 구현하면서 단순하게 서버 1대와 인메모리(이하 세션)를 이용한 방식으로 웹소켓을 이용해 게임 진행과 채팅 기능을 구현했었는데요.&lt;/p>
&lt;p>당시 부하 테스트 결과로 초당 5,000건 이상의 메시지 처리가 가능했기 때문에, 목표로 했던 300명 이상의 참여자 동시 진행이 가능했습니다.&lt;/p>
&lt;p>하지만 게임에 참여하는 사용자가 많아지면 현재 상황에서는 분명 한계가 있겠죠? 그래서 웹소켓 서버의 처리량을 늘리는 방법들에 대해서 알아보려 합니다.&lt;/p>
&lt;h2 id="수평-확장과-수직-확장">수평 확장과 수직 확장&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/websocket-scale-out/img.png"
width="1024"
height="659"
srcset="https://codemario318.github.io/post/websocket-scale-out/img_hu1795940aac2814a197193d8fc3eed447_80445_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/websocket-scale-out/img_hu1795940aac2814a197193d8fc3eed447_80445_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="img.png"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>시스템의 성능을 향상시킬 때 기본적으로 &lt;strong>수평 확장&lt;/strong>과 &lt;strong>수직 확장&lt;/strong> 두 가지 접근 방식을 고려할 수 있습니다.&lt;/p>
&lt;h3 id="수직-확장-scale-up">수직 확장 (Scale Up)&lt;/h3>
&lt;p>단일 서버의 성능을 향상시키는 방법입니다. CPU, 메모리, 디스크 등 하드웨어 리소스를 증설하여 성능을 개선합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>장점:&lt;/strong>
&lt;ul>
&lt;li>구현이 간단하며 추가적인 아키텍처 변경이 필요 없음&lt;/li>
&lt;li>단일 서버이므로 데이터 일관성 유지가 쉬움&lt;/li>
&lt;li>네트워크 복잡도가 낮음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>단점:&lt;/strong>
&lt;ul>
&lt;li>하드웨어 비용이 기하급수적으로 증가&lt;/li>
&lt;li>물리적인 한계가 존재&lt;/li>
&lt;li>장애 발생 시 전체 시스템에 영향&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="수평-확장-scale-out">수평 확장 (Scale Out)&lt;/h3>
&lt;p>동일한 서버를 여러 대 추가하여 부하를 분산시키는 방법입니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>장점:&lt;/strong>
&lt;ul>
&lt;li>선형적인 비용 증가로 효율적&lt;/li>
&lt;li>무한한 확장이 이론적으로 가능&lt;/li>
&lt;li>고가용성과 장애 허용성 확보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>단점:&lt;/strong>
&lt;ul>
&lt;li>아키텍처가 복잡해짐&lt;/li>
&lt;li>데이터 일관성 유지가 어려움&lt;/li>
&lt;li>네트워크 오버헤드 발생&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>수직 확장은 단순히 서버 스펙을 올리는 것으로 한계가 명확하기 때문에(&lt;del>비싸기 때문에&lt;/del>), 수평 확장 위주로 성능을 개선하는 것이 바람직해보입니다.&lt;/p>
&lt;p>이제 수평 확장을 위한 구체적인 방법들을 살펴보겠습니다.&lt;/p>
&lt;h2 id="웹소켓의-특성">웹소켓의 특성&lt;/h2>
&lt;p>먼저 여러 시도를 하기 전 웹소켓의 연결 특성에 대해 이해할 필요가 있습니다.&lt;/p>
&lt;p>웹소켓은 클라이언트와 서버 간에 지속 &lt;strong>연결 상태를 유지&lt;/strong>하므로, 수평 확장 시 각 서버에 &lt;strong>클라이언트 연결이 분산&lt;/strong>됩니다.&lt;/p>
&lt;p>이를 해결하기 위해 &lt;strong>서버 간 상태를 동기화&lt;/strong>하거나 상황에 맞게 클라이언트가 &lt;strong>특정 서버에 고정&lt;/strong>되도록 설정해야 합니다.&lt;/p>
&lt;h2 id="로드-밸런싱">로드 밸런싱&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/websocket-scale-out/img_1.png"
width="1650"
height="1275"
srcset="https://codemario318.github.io/post/websocket-scale-out/img_1_hue58ad55d5fe691e3e59586d3994effac_81538_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/websocket-scale-out/img_1_hue58ad55d5fe691e3e59586d3994effac_81538_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="로드 밸런싱"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>수평 확장을 통해 서비스의 요청을 분산하기 위해 여러 대의 서버를 배포하면 실제로 배포된 여러 서버로 요청을 분산해야겠죠&lt;/p>
&lt;p>로드 밸런싱은 들어오는 네트워크 트래픽을 여러 서버에 효율적으로 분산하는 기술입니다.&lt;/p>
&lt;h3 id="sticky-sessions-vs-non-sticky-sessions">Sticky Sessions vs Non-Sticky Sessions&lt;/h3>
&lt;p>네트워크 트래픽을 분산하기 위한 여러 알고리즘이 존재하는데, 클라이언트 요청이 같은 서버로 가는지 아닌지에 따라 나눌 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/websocket-scale-out/img_2.png"
width="850"
height="400"
srcset="https://codemario318.github.io/post/websocket-scale-out/img_2_hu00407f29da576d8704b9ee37e577ead4_25051_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/websocket-scale-out/img_2_hu00407f29da576d8704b9ee37e577ead4_25051_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Sticky Sessions vs Non-Sticky Sessions"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="510px"
>&lt;/p>
&lt;p>Non-Sticky Sessions은 클라이언트의 요청이 매번 다른 서버로 자유롭게 라우팅될 수 있는 방식으로 stateless 아키텍처를 구현할 때 선호되는 방식입니다.&lt;/p>
&lt;p>주요 차이점을 비교하면:&lt;/p>
&lt;ol>
&lt;li>상태 관리
&lt;ul>
&lt;li>Sticky Sessions: 서버가 클라이언트의 상태를 메모리에 보관&lt;/li>
&lt;li>Non-Sticky Sessions: 모든 상태를 Redis 같은 외부 저장소에 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>장애 대응
&lt;ul>
&lt;li>Sticky Sessions: 서버 장애 시 해당 서버의 모든 세션 손실&lt;/li>
&lt;li>Non-Sticky Sessions: 서버 장애와 무관하게 세션 유지 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>확장성
&lt;ul>
&lt;li>Sticky Sessions: 특정 서버에 부하가 집중될 수 있음&lt;/li>
&lt;li>Non-Sticky Sessions: 더 균등한 부하 분산 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>웹소켓의 경우 연결 자체가 stateful하기 때문에 일반적으로 Sticky Sessions을 사용하지만, &lt;strong>대규모 시스템&lt;/strong>에서는 Non-Sticky Sessions 방식을 채택하고 모든 상태를 외부 저장소에 보관하는 방식을 사용하기도 합니다.&lt;/p>
&lt;h2 id="서버-간-상태-동기화">서버 간 상태 동기화&lt;/h2>
&lt;p>저희 서비스에서는 사용자가 퀴즈존을 기반으로 서버의 세션을 통해 관리되기 때문에, 퀴즈존에 참여하고 있는 모든 사용자가 동일한 서버에 연결되어야 합니다.&lt;/p>
&lt;p>이는 상황에 따라 사용자가 많이 참여하고 있는 퀴즈존이 특정 서버에 집중되는 경우 수평 확장의 장점을 가져갈 수 없게 되는 문제를 발생시킬 수 있습니다.&lt;/p>
&lt;p>이렇게 특정 서버에 세션에 의존하지 않게 만들기 위해 &lt;strong>서버 간의 상태를 동기화&lt;/strong> 해야할 필요가 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/websocket-scale-out/img_3.png"
width="385"
height="131"
srcset="https://codemario318.github.io/post/websocket-scale-out/img_3_hufe3d7b7f11325482bb16b822eb0a78ec_8599_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/websocket-scale-out/img_3_hufe3d7b7f11325482bb16b822eb0a78ec_8599_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Redis"
class="gallery-image"
data-flex-grow="293"
data-flex-basis="705px"
>&lt;/p>
&lt;p>단순히 서버 간의 상태를 동기화 한다면, 모든 사용자에 대한 정보를 모든 서버가 메모리로 가져야하고 이를 수시로 업데이트 해야하는 문제가 있습니다.&lt;/p>
&lt;p>이는 배포된 각각의 서버의 메모리가 충분해야는 것이 기본 전제이므로 메모리로 인한 서버 비용 절감은 의미가 없어질 뿐 아니라 상태 동기화를 위한 여러 오버헤드가 발생하므로 효과적인 방식으로 보긴 어렵습니다.&lt;/p>
&lt;p>그래서 더 단순한 방법으로 배포된 여러 서버가 같은 세션을 바라보게 만드는 방법을 활용하는 경우가 많고, 세션은 빠른 읽기/쓰기가 요구되므로 주로 &lt;code>Redis&lt;/code>를 활용합니다.&lt;/p>
&lt;h2 id="pubsub-패턴-적용">Pub/Sub 패턴 적용&lt;/h2>
&lt;p>위처럼 서버 간의 상태를 동기화했다고 하더라도, 웹소켓의 특성상 특정 서버에 연결된 클라이언트에게만 직접 메시지를 전송할 수 있습니다. 다른 서버에 연결된 클라이언트에게는 직접적인 메시지 전송이 불가능한 것이죠.&lt;/p>
&lt;p>이 문제를 해결하기 위해 메시지 브로커를 활용한 Pub/Sub 패턴을 적용할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/websocket-scale-out/img_4.png"
width="2050"
height="1168"
srcset="https://codemario318.github.io/post/websocket-scale-out/img_4_hu3cc9ed0eaf825475f37e7ff59c7a86c6_734061_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/websocket-scale-out/img_4_hu3cc9ed0eaf825475f37e7ff59c7a86c6_734061_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pub/Sub 패턴"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;ul>
&lt;li>각 서버는 메시지 브로커(예: Redis, RabbitMQ, Kafka)의 채널을 구독(Subscribe)&lt;/li>
&lt;li>메시지 전송이 필요할 때는 해당 채널에 메시지를 발행(Publish)&lt;/li>
&lt;li>모든 서버가 메시지를 수신하고, 자신에게 연결된 클라이언트에게 필요한 메시지를 전달&lt;/li>
&lt;/ul>
&lt;p>이러한 방식을 통해 서버 간 직접적인 통신 없이도 모든 클라이언트에게 메시지를 전달할 수 있습니다.&lt;/p>
&lt;h2 id="auto-scaling">Auto Scaling&lt;/h2>
&lt;p>리소스를 효율적으로 관리하기 위해, 트래픽에 따라 서버를 동적으로 확장하고 축소하는 것이 이상적입니다.&lt;/p>
&lt;ul>
&lt;li>저희 서비스도 근본적으로는 게임이라서 저녁 시간대에 트래픽이 집중되지 않을까 예상해봅니다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/websocket-scale-out/img_5.png"
width="560"
height="332"
srcset="https://codemario318.github.io/post/websocket-scale-out/img_5_hu8d0a7bc59b0e5202eca4aab1e4c19efd_27969_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/websocket-scale-out/img_5_hu8d0a7bc59b0e5202eca4aab1e4c19efd_27969_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Auto Scaling"
class="gallery-image"
data-flex-grow="168"
data-flex-basis="404px"
>&lt;/p>
&lt;p>하지만 웹소켓 서버의 동적 확장 시에는 몇 가지 고려해야 할 문제들이 있습니다.&lt;/p>
&lt;h3 id="서버-추가">서버 추가&lt;/h3>
&lt;p>새로운 서버가 추가되었을 때, 기존 클라이언트들은 이미 다른 서버들과 연결이 되어있는 상태입니다. 이로 인해 새로운 서버는 새로 접속하는 클라이언트의 연결만 받게 되어 서버 간 부하 분산이 균형있게 이루어지지 않을 수 있습니다.&lt;/p>
&lt;p>이를 해결하기 위해서는 다음과 같은 방법들을 고려할 수 있습니다:&lt;/p>
&lt;ul>
&lt;li>연결 재분배 (Connection Rebalancing)
&lt;ul>
&lt;li>주기적으로 서버 간 연결 수를 확인하고 불균형이 발생하면 일부 클라이언트에게 재연결 요청&lt;/li>
&lt;li>클라이언트는 재연결 시 로드밸런서를 통해 새로운 서버에 고르게 분배됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가중치 기반 라우팅
&lt;ul>
&lt;li>새로운 서버에 더 높은 가중치를 부여하여 신규 연결을 더 많이 할당&lt;/li>
&lt;li>점진적으로 서버 간 연결 수가 균형을 이루도록 조정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="서버-제거">서버 제거&lt;/h3>
&lt;p>서버를 제거할 때는 해당 서버에 연결된 클라이언트들의 연결을 적절히 처리해야 합니다. 갑작스러운 연결 종료는 사용자 경험을 해칠 수 있으며, 서비스의 안정성에도 영향을 미칩니다.&lt;/p>
&lt;p>이를 위한 해결 방안으로는:&lt;/p>
&lt;ul>
&lt;li>Draining Mode 구현
&lt;ul>
&lt;li>서버 제거 전에 해당 서버를 &amp;lsquo;draining&amp;rsquo; 상태로 전환&lt;/li>
&lt;li>더 이상 새로운 연결을 받지 않도록 로드밸런서 설정 변경&lt;/li>
&lt;li>기존 연결은 유지하면서 자연스럽게 감소하도록 유도&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Graceful Shutdown with Notification
&lt;ul>
&lt;li>종료 예정인 서버의 클라이언트들에게 재연결 필요성을 알리는 메시지 전송&lt;/li>
&lt;li>클라이언트는 메시지 수신 후 다른 서버로 재연결 시도&lt;/li>
&lt;li>일정 시간 후 남아있는 연결을 정상적으로 종료&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="zookeeper">ZooKeeper&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/websocket-scale-out/img_6.png"
width="921"
height="498"
srcset="https://codemario318.github.io/post/websocket-scale-out/img_6_hu9638b0602de60e14c3a3201684f97ad9_138457_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/websocket-scale-out/img_6_hu9638b0602de60e14c3a3201684f97ad9_138457_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Apache ZooKeeper"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>이러한 처리들의 원활한 관리를 위해 서버들의 상태를 효과적으로 관리하고 모니터링하는 것이 중요합니다. Apache ZooKeeper와 같은 도구를 활용하면 이러한 분산 환경에서의 서버 관리를 효율적으로 수행할 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>서버 상태 관리
&lt;ul>
&lt;li>각 서버는 ZooKeeper에 임시 노드(ephemeral node)를 생성하여 자신의 상태를 등록&lt;/li>
&lt;li>서버 장애 시 노드가 자동으로 삭제되어 빠른 장애 감지 가능&lt;/li>
&lt;li>현재 활성화된 서버 목록을 실시간으로 파악 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>부하 분산 정보 공유
&lt;ul>
&lt;li>각 서버의 현재 연결 수, 리소스 사용량 등을 ZooKeeper에 저장&lt;/li>
&lt;li>로드밸런서는 이 정보를 바탕으로 최적의 서버 선택 가능&lt;/li>
&lt;li>동적 가중치 조정에 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>설정 정보 관리
&lt;ul>
&lt;li>서버 구성 정보, 환경 설정 등을 중앙화된 저장소에서 관리&lt;/li>
&lt;li>설정 변경 시 모든 서버에 실시간으로 반영 가능&lt;/li>
&lt;li>일관된 설정 유지 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Auto Scaling과의 연계&lt;/strong>&lt;/p>
&lt;p>ZooKeeper를 Auto Scaling과 연계하면 더욱 효과적인 서버 관리가 가능합니다:&lt;/p>
&lt;ul>
&lt;li>스케일 인/아웃 이벤트 발생 시 서버 목록 자동 업데이트&lt;/li>
&lt;li>새로운 서버 추가 시 기존 서버들과의 설정 동기화&lt;/li>
&lt;li>서버 제거 시 안전한 종료 절차 조율&lt;/li>
&lt;li>서버 간 부하 분산 상태 모니터링 및 재조정&lt;/li>
&lt;/ul>
&lt;p>이러한 ZooKeeper의 활용은 특히 Auto Scaling 환경에서 서버들의 동적인 변화를 안정적으로 관리하는 데 큰 도움이 될 수 있고, 서버의 추가와 제거가 자주 발생하는 환경에서도 서비스의 안정성과 가용성을 높은 수준으로 유지할 수 있다는 장점도 있습니다.&lt;/p>
&lt;h2 id="정리">정리&lt;/h2>
&lt;p>웹소켓 기반의 실시간 게임 서비스를 확장하면서 발생할 수 있는 문제들과 해결 방안들을 살펴보았습니다.&lt;/p>
&lt;ul>
&lt;li>서버 확장성 문제
&lt;ul>
&lt;li>수평적 확장을 통한 처리량 증가&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 관리 문제
&lt;ul>
&lt;li>Redis를 활용한 세션 저장소 외부화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메시지 전달 문제
&lt;ul>
&lt;li>Pub/Sub 패턴 도입&lt;/li>
&lt;li>메시지 브로커를 통한 효율적인 메시지 전파&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>동적 확장 문제
&lt;ul>
&lt;li>서버의 동적 추가, 제거로 인한 문제&lt;/li>
&lt;li>ZooKeeper 활용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>연결이 유지되는 특성 때문에 발생하는 문제들이 많았네요&lt;/p>
&lt;p>어떤 방식들을 적용해야할지 고민을 더 해봐야겠습니다.&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다😊&lt;/p></description></item><item><title>5. 안정 해시 설계</title><link>https://codemario318.github.io/post/system-design-interview/5/</link><pubDate>Thu, 23 May 2024 12:04:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/5/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/cover.png" alt="Featured image of post 5. 안정 해시 설계" />&lt;p>&lt;strong>수평적 규모 확장성&lt;/strong>을 달성하기 위해서는 요청 또는 데이터를 서버에 &lt;strong>균등하게 나누는 것&lt;/strong>이 중요하다.&lt;/p>
&lt;p>&lt;strong>안정 해시&lt;/strong>는 이 목표를 달성하기 위해 보편적으로 사용하는 기술이다.&lt;/p>
&lt;h2 id="해시-키-재배치rehash-문제">해시 키 재배치(rehash) 문제&lt;/h2>
&lt;p>N개의 캐시 서버가 있을 때, 부하를 균등하게 나누는 보편적 방법은 해시 함수를 사용하는 것이다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">serverIndex = hash(key) % N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>총 4대의 서버를 사용한다면, 주어진 각각의 키에 대해 아래와 같이 계산될 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키&lt;/th>
&lt;th>해시&lt;/th>
&lt;th>해시 % 4(서버 인덱스)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key0&lt;/td>
&lt;td>18358617&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key1&lt;/td>
&lt;td>26143584&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key2&lt;/td>
&lt;td>18131146&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key3&lt;/td>
&lt;td>35863496&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key4&lt;/td>
&lt;td>34085809&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key5&lt;/td>
&lt;td>27581703&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key6&lt;/td>
&lt;td>38164978&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key7&lt;/td>
&lt;td>22530351&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>키 값을 해싱한 값에 나머지 연산을 하여 저장될 서버가 결정된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img.png"
width="597"
height="323"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_hu8ecb82b93ef83548a97acf28dacc70e3_47080_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_hu8ecb82b93ef83548a97acf28dacc70e3_47080_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>이 방식은 &lt;strong>서버 풀의 크기가 고정되어 있을 때&lt;/strong>, &lt;strong>데이터 분포가 균등할 때&lt;/strong> 잘 동작한다.&lt;/p>
&lt;p>하지만 서버가 추가되거나, 기존 서버가 삭제되면 나머지 연산 결과 값이 변하기 때문에 문제가 발생한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키&lt;/th>
&lt;th>해시&lt;/th>
&lt;th>해시 % 3(서버 인덱스)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key0&lt;/td>
&lt;td>18358617&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key1&lt;/td>
&lt;td>26143584&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key2&lt;/td>
&lt;td>18131146&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key3&lt;/td>
&lt;td>35863496&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key4&lt;/td>
&lt;td>34085809&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key5&lt;/td>
&lt;td>27581703&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key6&lt;/td>
&lt;td>38164978&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key7&lt;/td>
&lt;td>22530351&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>따라서 아래와 같은 형태로 키의 분포가 바뀐다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_1.png"
width="595"
height="375"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_1_hu221148814a934c0ed66cfef734ebb8e4_56907_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_1_hu221148814a934c0ed66cfef734ebb8e4_56907_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>장애가 발생한 1번 서버에 보관되어 있는 키 뿐만 아닌 대부분의 키가 재분배되어, 대부분 캐시 클라이언트가 데이터가 없는 서버에 접속하게된다.&lt;/p>
&lt;p>이로 인해 대규모 캐시 미스가 발생하게되는데, &lt;strong>안정 해시&lt;/strong>는 이러한 문제를 효과적으로 해결하는 방식이다.&lt;/p>
&lt;h2 id="안정-해시">안정 해시&lt;/h2>
&lt;p>안정 해시는 &lt;strong>해시 테이블 크기가 조정될 때 평균적으로 &lt;code>k/n&lt;/code>개의 키만 재비치하는 해시 기술&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>k&lt;/code>: 키의 개수&lt;/li>
&lt;li>&lt;code>n&lt;/code>: 슬롯의 개수&lt;/li>
&lt;/ul>
&lt;p>이와는 달리 대부분의 전통적인 해시 테이블은 슬롯의 수가 바뀌면 거의 대부분 키를 재배치한다.&lt;/p>
&lt;h3 id="해시-공간과-해시-링">해시 공간과 해시 링&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>SHA-1&lt;/strong> 해시함수를 사용하며, 출력 값의 범위는 &lt;code>x0, x1 ... xn&lt;/code>이라고 가정한다.&lt;/li>
&lt;li>&lt;strong>SHA-1&lt;/strong>의 해시 공간(hash space) 범위는 &lt;strong>0 부터 &lt;code>2^160 - 1&lt;/code>&lt;/strong> 까지라고 알려져 있다.&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;code>x0 = 0&lt;/code>, &lt;code>xn -1 = 2^160 - 1&lt;/code>이며, 두 수 사이의 값을 갖게 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_2.png"
width="239"
height="284"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_2_huf4d0b3acc8d8378f9f6d7202b468ee24_14360_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_2_huf4d0b3acc8d8378f9f6d7202b468ee24_14360_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="201px"
>&lt;/p>
&lt;p>이 해시 공간의 양쪽을 연결하변 해시 링이 만들어진다.&lt;/p>
&lt;h3 id="해시-서버">해시 서버&lt;/h3>
&lt;p>해시 함수 &lt;code>f&lt;/code>를 사용하면 서버(IP, 이름 등)를 링 위의 어딘가에 대응시킬 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_3.png"
width="607"
height="421"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_3_hu0bc48cf4515b95e87de880bf1aab9c60_55336_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_3_hu0bc48cf4515b95e87de880bf1aab9c60_55336_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;h3 id="해시-키">해시 키&lt;/h3>
&lt;blockquote>
&lt;p>안정 해시에서 사용되는 해시 함수는 전통적인 해시 키 방식에서 언급된 방식과 다르며, 만들어질 수 있는 모든 해시 공간 &lt;code>x0 ... xn&lt;/code>을 연결한 형태이므로 나머지 연산을 사용하지 않는다.&lt;/p>
&lt;/blockquote>
&lt;p>캐시할 키 또한 서버와 함께 해시 링 위의 어느 지점에 배치할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_4.png"
width="606"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_4_hu2fcefd9766a218d8cface53baa2bca15_61260_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_4_hu2fcefd9766a218d8cface53baa2bca15_61260_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;h3 id="서버-조회">서버 조회&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_5.png"
width="606"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_5_hu2fcefd9766a218d8cface53baa2bca15_61260_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_5_hu2fcefd9766a218d8cface53baa2bca15_61260_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>어떤 키가 저장되는 서버는 &lt;strong>해당 키의 위치로부터 시계 방향으로 링을 탐색해 나가면서 만나는 첫번 째 서버&lt;/strong>이다.&lt;/p>
&lt;p>따라서 &lt;strong>k0&lt;/strong>는 &lt;strong>s0&lt;/strong> 에 저장된다.&lt;/p>
&lt;h3 id="서버-추가">서버 추가&lt;/h3>
&lt;p>키가 저장되는 서버가 키의 위치로부터 시계 방향으로 링을 돌면서 만나는 첫 서버이므로, 서버를 추가하더라도 키 가운데 일부만 재배치하면 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_6.png"
width="615"
height="465"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_6_huc8545933ab2d8774b07636da6ebf7ea2_77279_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_6_huc8545933ab2d8774b07636da6ebf7ea2_77279_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>위 그림처럼 s4가 추가되면, k0만 재배치하면 되며, 나머지 키들은 같은 서버에 남게된다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>k0&lt;/strong>가 만나는 첫 서버가 &lt;strong>s4&lt;/strong>로 바뀌기 때문&lt;/li>
&lt;/ul>
&lt;h3 id="서버-제거">서버 제거&lt;/h3>
&lt;p>마찬가지로 한 서버가 제거되면 &lt;strong>키 일부만 재배치&lt;/strong>된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_7.png"
width="609"
height="450"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_7_hu76c16055e4220cf0e1509508dbdc7e60_68728_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_7_hu76c16055e4220cf0e1509508dbdc7e60_68728_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>s1&lt;/strong>이 삭제되었을 때 &lt;strong>k1&lt;/strong>의 첫 서버만 &lt;strong>s2&lt;/strong>로 바뀌므로 &lt;strong>k1&lt;/strong>만 &lt;strong>s2&lt;/strong>로 재배치된다.&lt;/li>
&lt;/ul>
&lt;h3 id="기존-구현법의-두-가지-문제">기존 구현법의 두 가지 문제&lt;/h3>
&lt;p>안정 해시 알고리즘은 MIT에서 처음 제안되었는데, 기본 절차는 아래와 같다.&lt;/p>
&lt;ol>
&lt;li>서버와 키를 &lt;strong>균등 분포 해시 함수&lt;/strong>를 사용해 해시 링에 배치한다.&lt;/li>
&lt;li>키의 위치에서 링을 시계방향으로 탐색하다 만나는 최초의 서버가 키가 저장될 서버이다.&lt;/li>
&lt;/ol>
&lt;p>안정 해시는 근본적으로 최소한의 추가/삭제에 대해 최소한의 재배치를 고려한다. 따라서 이러한 방식에는 두 가지 문제가 발생한다.&lt;/p>
&lt;p>&lt;strong>파티션 크기 문제&lt;/strong>&lt;/p>
&lt;p>서버가 추가되거나 삭제되는 상황을 감안하면 사용하더라도 파티션의 크기를 균등하게 유지하는 게 불가능하다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_8.png"
width="610"
height="371"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_8_hufb05e65c37497f753e3a366dbfe6320e_67873_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_8_hufb05e65c37497f753e3a366dbfe6320e_67873_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;ul>
&lt;li>파티션의 크기는 시계 방향으로 제일 가까운 서버 사이와의 거리만큼의 해시 공간으로, 서버의 해시 공간이 균등하지 않다.
&lt;ul>
&lt;li>추가 삭제될 때 시계 방향으로 제일 가까운 서버에 키들이 집중된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>키의 균등 분포 문제&lt;/strong>&lt;/p>
&lt;p>균등 분포 해시 함수는 충돌을 최소화하며 입력 키들이 해시 공간 전체에 고르게 분포되어 특정 영역에 물리지 않도록 구현되지만 완전하지는 않다.&lt;/p>
&lt;ul>
&lt;li>데이터의 비균등한 본질:
&lt;ul>
&lt;li>실제 데이터는 해시 함수의 이상적인 균등 분포를 따르지 않을 수 있다.&lt;/li>
&lt;li>특정 패턴이나 값들이 특정 해시 영역에 몰리는 경우가 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>해시 함수의 한계:
&lt;ul>
&lt;li>모든 해시 함수는 완벽한 균등 분포를 보장할 수 없다.&lt;/li>
&lt;li>특히 입력 키의 분포가 고르지 않을 경우, 해시 값의 분포도 고르지 않을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_9.png"
width="611"
height="409"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_9_hu5257857a45f5f8de50581f3a0c6d2841_61763_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_9_hu5257857a45f5f8de50581f3a0c6d2841_61763_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>따라서 키의 균등 분포가 매우 달성하기 어려워 위와 같은 상황이 발생하게된다.&lt;/p>
&lt;p>&lt;strong>+ 실제 서버의 처리 능력 차이&lt;/strong>&lt;/p>
&lt;p>노드(서버)마다 처리 능력이나 저장 용량이 다를 경우, 파티션 크기의 균등성이 실제 부하의 균등성을 의미하지 않을 수 있다.&lt;/p>
&lt;h3 id="가상-노드">가상 노드&lt;/h3>
&lt;p>가상 노드는 &lt;strong>실제 노드 또는 서버를 가리키는 노드&lt;/strong>로서 하나의 서버는 링 위에 여러 개의 가상 노드를 가질 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_10.png"
width="603"
height="458"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_10_hua3bd50f3317f65ef075362e2b74282e1_85776_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_10_hua3bd50f3317f65ef075362e2b74282e1_85776_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;p>서버들의 비슷한 해시 공간을 가질 수 있도록 하는 기법으로 해시 링 위에 실제 서버를 가르키는 가상 노드들을 분포시킨 후 가상 노드에 할당되는 해시 영역을 가상 노드가 가르키는 서버가 처리하도록 한다.&lt;/p>
&lt;ul>
&lt;li>따라서 각 서버는 하나가 아닌 여러 개의 파티션을 관리해야 한다.&lt;/li>
&lt;/ul>
&lt;p>가상 노드의 개수를 늘리면 표준 편차가 작아져 데이터가 고르게 분포되므로, 키위 분포는 점점 더 균등해지지만&lt;/p>
&lt;p>가상 노드 데이터를 저장할 공간이 더 많이 필요해지므로, 시스템 요구사항에 맞도록 가상 노드 개수를 적절히 조정하는 트레이드오프가 필요하다.&lt;/p>
&lt;h3 id="재배치할-키-결정">재배치할 키 결정&lt;/h3>
&lt;p>서버가 추가되거나 제거되면 데이터의 일부는 재배치해야 한다.&lt;/p>
&lt;p>&lt;strong>서버가 추가되었을 때&lt;/strong>&lt;/p>
&lt;p>&lt;strong>s4&lt;/strong>가 추가되었다고 가정하면, 영향을 받는 위는 &lt;strong>s4&lt;/strong> 부터 그 반시계 방향에 있는 &lt;strong>s3&lt;/strong> 까지이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_11.png"
width="611"
height="463"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_11_hu56d8da2926a0ef9a8f4dcf5986502707_77091_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_11_hu56d8da2926a0ef9a8f4dcf5986502707_77091_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>따라서 &lt;strong>s3&lt;/strong> 부터 &lt;strong>s4&lt;/strong> 사이에 있는 키들을 &lt;strong>s4&lt;/strong>로 재배치해야한다.&lt;/p>
&lt;p>&lt;strong>서버가 삭제되었을 때&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_12.png"
width="608"
height="449"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_12_hu33149acfb6f53d9b638ddb2443c387f3_70058_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_12_hu33149acfb6f53d9b638ddb2443c387f3_70058_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;strong>s1&lt;/strong>이 삭제되면 &lt;strong>s1&lt;/strong> 부터 그 반시계 방향에 있는 최초 서버 &lt;strong>s0&lt;/strong> 사이에 있는 키들이 &lt;strong>s2&lt;/strong>로 재배치되어야 한다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>안정 해시의 이점은 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.&lt;/li>
&lt;li>데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.&lt;/li>
&lt;li>핫스팟 키 문제를 줄인다.
&lt;ul>
&lt;li>특정한 샤드에 대한 접근이 지나치게 빈번하면 서버 과부화 문제가 생길 수 있는데(유명인사 문제), 데이터를 좀 더 균등하게 분배하므로 문제 발생 가능성을 줄인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>안정해시는 실제로 널리 쓰이는 기술이다.&lt;/p>
&lt;ul>
&lt;li>아마존 다이나모 데이터베이스의 파티셔닝 관련 컴포넌트&lt;/li>
&lt;li>아파치 카산드라 클러스터에서 데이터 파티셔닝&lt;/li>
&lt;li>디스코드 채팅 어플리케이션&lt;/li>
&lt;li>아카마이 CDN&lt;/li>
&lt;li>매그레프 네트워크 부하 분산기 등&lt;/li>
&lt;/ul></description></item><item><title>1. 사용자 수에 따른 규모 확장성</title><link>https://codemario318.github.io/post/system-design-interview/1/</link><pubDate>Mon, 22 Apr 2024 14:53:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/1/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/cover.png" alt="Featured image of post 1. 사용자 수에 따른 규모 확장성" />&lt;p>수백만 사용자를 지원하는 시스템을 설계하는 것은 도전적인 과제이며, 지속적인 계량과 끝없는 개선이 요구되는 여정이다.&lt;/p>
&lt;p>이번 장은 한 명의 사용자를 지원하는 시스템에서 시작하여, 최종적으로 몇백만 사용자를 지원하는 시스템을 설계해본다.&lt;/p>
&lt;h2 id="단일-서버">단일 서버&lt;/h2>
&lt;p>모든 컴포넌트가 단 한대의 서버에서 실행되는 간단한 시스템부터 설계해보자.&lt;/p>
&lt;p>웹 앱, 데이터베이스, 캐시 등이 전부 서버 한 대에서 실행된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img.png"
width="615"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_hu499b8fa6fe43f3f924784d377eb4708e_41034_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_hu499b8fa6fe43f3f924784d377eb4708e_41034_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;strong>사용자 요청 처리 흐름&lt;/strong>&lt;br>
&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_1.png"
width="608"
height="382"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_1_hua0cbd5db31f0ad82b45addc6a6db9692_42287_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_1_hua0cbd5db31f0ad82b45addc6a6db9692_42287_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="381px"
>&lt;/p>
&lt;ol>
&lt;li>사용자는 도메인 이름(api.mysite.com)을 이용하여 웹사이트에 접속한다. 이 접속을 위해 DNS에 질의하여 IP 주소로 변환하는 과정을 치게 된다.
&lt;ul>
&lt;li>DNS는 보통 서드 파티가 제공하는 유료 서비스를 이용하므로 시스템의 일부는 아니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DNS 조회 결과로 IP 주소가 반환된다.&lt;/li>
&lt;li>해당 IP 주소로 HTTP 요청이 전달된다.&lt;/li>
&lt;li>요청을 받은 웹 서버는 HTML 페이지나 JSON 형태의 응답을 반환한다.&lt;/li>
&lt;/ol>
&lt;p>실제 요청은 웹 앱과 모바일 앱 두가지 종류에 단말로 부터 온다.&lt;/p>
&lt;ul>
&lt;li>웹 애플리케이션
&lt;ul>
&lt;li>비즈니스 로직, 데이터 저장 등을 처리하기 위해서 서버 구현용 언어(자바, 파이썬 등)를 사용한다.&lt;/li>
&lt;li>프레젠테이션 용으로는 클라이언트 구현용 언어(HTML, 자바스크립트 등)를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모바일 앱
&lt;ul>
&lt;li>모바일 앱과 웹 서버 간 통신을 위해서는 HTTP 프로토콜을 이용한다.&lt;/li>
&lt;li>반환될 응답 데이터의 포맷으로는 보통 JSON이 널리 쓰인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="데이터베이스">데이터베이스&lt;/h2>
&lt;p>사용자가 늘면 서버 하나로는 충분하지 않아서 여러 서버를 두어야 한다.&lt;/p>
&lt;ul>
&lt;li>웹/모바일 트래픽 처리&lt;/li>
&lt;li>데이터베이스&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_2.png"
width="612"
height="377"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_2_hub3bdf37c2a22d7f06e833db20a5f8b0a_53786_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_2_hub3bdf37c2a22d7f06e833db20a5f8b0a_53786_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>웹/모바일 트래픽 처리 서버(웹 계층)와 데이터베이스 서버(데이터 계층)를 분리하면 그 각각을 독립적으로 확장해 나갈 수 있게 된다.&lt;/p>
&lt;h3 id="어떤-데이터베이스를-사용할-것인가">어떤 데이터베이스를 사용할 것인가?&lt;/h3>
&lt;p>전통적인 관계형 데이터베이스와 비-관계형 데이터베이스 사이에서 고를 수 있다.&lt;/p>
&lt;ul>
&lt;li>관계형 데이터베이스
&lt;ul>
&lt;li>관계형 데이터베이스 관리 시스템(RDBMS)이라고도 부르며, 자료를 테이블과 열, 컬럼으로 표현한다.&lt;/li>
&lt;li>SQL을 사용하면 여러 테이블에 있는 데이터를 그 관계에 따라 조인(join)하여 합칠 수 있다.&lt;/li>
&lt;li>ex) MySQL, Oracle, PostgreSQL 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비-관계형 데이터 베이스
&lt;ul>
&lt;li>NoSQL이라고도 부른다.&lt;/li>
&lt;li>키-값 저장소(key-value store), 그래프 저장소(graph store), 컬럼 저장소(column store), 문서 저장소(document store) 네 부류로 나뉜다.&lt;/li>
&lt;li>비-관계형 데이터베이스는 일반적으로 조인 연산은 지원하지 않는다.&lt;/li>
&lt;li>ex) CouchDB, Neo4j, Cassandra, HBase, Amazon DynamoDB 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>대부분의 개발자에게는 40년 이상 시장에서 살아남아 잘 사용되어온 관계형 데이터베이스가 최선이다.&lt;/p>
&lt;p>하지만 구축하려는 시스템에 적합하지 않은 경우에는 관계형 데이터베이스 이외의 저장소도 살펴보아야한다.&lt;/p>
&lt;ul>
&lt;li>아주 낮은 응답 지연시간(latency)이 요구됨&lt;/li>
&lt;li>다루는 데이터가 비정형(unstructured)이라 관계형 데이터가 아님&lt;/li>
&lt;li>데이터(JSON, YAML, XML 등)를 직렬화하거나(serialize) 역직렬화(deserialize) 할 수 있기만 하면 됨&lt;/li>
&lt;li>아주 많은 양의 데이터를 저장할 필요가 있음&lt;/li>
&lt;/ul>
&lt;h2 id="수직적-규모-확장-vs-수평적-규모-확장">수직적 규모 확장 VS 수평적 규모 확장&lt;/h2>
&lt;h3 id="수직적-규모-확장vertical-scaling">수직적 규모 확장(vertical scaling)&lt;/h3>
&lt;p>&lt;strong>스케일 업(scale up)&lt;/strong> 이라고도 불리는 수직적 규모 확장 프로세스는 서버에 고사양 자원을 추가하는 행위를 말한다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>서버로 유입되는 트래픽의 양이 적을 때는 수직적 확장이 좋은 선택이다.&lt;/li>
&lt;li>단순하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>한 대의 서버에 CPU나 메모리를 무한대로 증설할 방법이 없어 한계가 있다.&lt;/li>
&lt;li>장애에 대한 자동복구(failover) 방안이나 다중화(redundancy) 방안을 제시하지 않는다.
&lt;ul>
&lt;li>서버에 장애가 발생하면 완전히 중단된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="수평적-규모-확장horizontal-scaling">수평적 규모 확장(horizontal scaling)&lt;/h3>
&lt;p>&lt;strong>스케일 아웃(scale out)&lt;/strong> 이라고도 불리는 수평적 규모 확장 프로세스는 더 많은 서버를 추가하여 성능을 개선하는 행위를 말한다.&lt;/p>
&lt;p>수직적 규모 확장에서 언급된 단점으로 인해 대규모 애플리케이션을 지원하는 데는 수평적 규모 확장법이 보다 적절하다.&lt;/p>
&lt;hr>
&lt;p>수평적 규모 확장을 위해 추가적인 장치가 필요하다.&lt;/p>
&lt;p>앞서 본 설계에서 사용자가 웹 서버로 바로 연결되는데,&lt;/p>
&lt;ul>
&lt;li>웹 서버가 다운되면 사용자는 웹 사이트에 접속할 수 없다.&lt;/li>
&lt;li>너무 많은 사용자가 접속하여 웹 서버가 한계에 도달하면 응답 속도가 느려지거나 서버 접속이 불가능해질 수 있다.&lt;/li>
&lt;/ul>
&lt;p>이런 문제를 해결하는 데는 부하 분산기 또는 로드밸런서를 도입하는 것이 최선이다.&lt;/p>
&lt;h3 id="로드밸런서load-balancer">로드밸런서(Load balancer)&lt;/h3>
&lt;p>로드밸런서는 부하 분산 집합(load balancing set)에 속한 웹 서버들에게 트래픽 부하를 고르게 분산하는 역할을 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_3.png"
width="608"
height="540"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_3_huf74bbc3ffd6647fb098a2fc03966306f_85207_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_3_huf74bbc3ffd6647fb098a2fc03966306f_85207_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;ul>
&lt;li>사용자는 로드밸런서의 공개 IP 주소로 접속하므로, 웹 서버는 클라이언트의 접속을 직접 처리하지 않는다.&lt;/li>
&lt;li>보안을 위해 서버 간 통신에는 사설 IP 주소가 이용된다.
&lt;ul>
&lt;li>같은 네트워크에 속한 서버 사이의 통신에만 쓰일 수 있는 IP 주소로, 인터넷을 통해서 접속할 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>부하 분산 집합에 또 하나의 웹 서버를 추가하고 나면, 장애를 자동복구하지 못하는 문제(no failover)는 해소되며, 웹 계층의 가용성(availability)은 향상된다.&lt;/p>
&lt;ul>
&lt;li>서버 1이 다운되면 모든 트래픽은 서버 2로 전송된다.
&lt;ul>
&lt;li>웹 사이트 전체가 다운되는 일이 방지된다.&lt;/li>
&lt;li>부하를 나누기 위해 새로운 서버를 추가할 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹사이트로 유입되는 트래픽이 가파르게 증가할 경우 웹 서버 계층에 더 많은 서버를 추가하면 로드밸런스가 자동적으로 트래픽을 분산한다.&lt;/li>
&lt;/ul>
&lt;h3 id="데이터베이스-다중화">데이터베이스 다중화&lt;/h3>
&lt;p>많은 데이터베이스들이 주(master)-부(slave) 관계를 설정하여 데이터 원본은 주 서버에, 사본은 부 서버에 저장하는 방식으로 다중화를 지원한다.&lt;/p>
&lt;p>쓰기 연산은 마스터에만 지원하며, 부 데이터베이스는 주 데이터베이스로부터 그 사본을 전달받아 읽기 연산만을 지원한다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스를 변경하는 명령어(&lt;code>INSERT&lt;/code>, &lt;code>DELETE&lt;/code>, &lt;code>UPDATE&lt;/code> 등)는 주 데이터베이스로만 전달되어야 한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_4.png"
width="612"
height="546"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_4_hu75d2f6312382855c75a554918b468d43_102326_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_4_hu75d2f6312382855c75a554918b468d43_102326_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/p>
&lt;p>데이터베이스르 다중화하면 다음과 같은 이득이 있다.&lt;/p>
&lt;ul>
&lt;li>더 나은 성능
&lt;ul>
&lt;li>모든 데이터 변경 연산은 주 데이터베이스 서버로만 전달되는 반면 읽기 연산은 부 데이터베이스 서버들로 분산되어 병렬로 처리될 수 있는 질의(query)가 늘어나므로, 성능이 좋아진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>안정성
&lt;ul>
&lt;li>자연 재해 등의 이유로 데이터베이스 서버 가운데 일부가 파괴되어도 데이터는 보존된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성
&lt;ul>
&lt;li>데이터를 여러 지역에 복제해 둠으로써, 하나의 데이터베이스 서버에 장애가 발생하더라도 다른 서버에 있는 데이터로 계속 서비스할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위와 같은 데이터계층을 구성하면 데이터베이스 서버 가운데 하나가 다운되더라도 아래와 같은 상황을 감당할 수 있다.&lt;/p>
&lt;ul>
&lt;li>부 서버 한대뿐인데 다운된 경우
&lt;ul>
&lt;li>읽기 연산이 한시적으로 주 데이터베이스로 전달된다.&lt;/li>
&lt;li>즉시 새로운 부 데이터베이스 서버가 장애 서버를 대처한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>부 서버 중 한대가 다운된 경우
&lt;ul>
&lt;li>일기 연산이 나머지 부 데이터베이스 서버로 분산된다.&lt;/li>
&lt;li>새로운 부 데이터베이스 서버가 장애 서버를 대체한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주 데이터베이스 서버가 다운된 경우
&lt;ul>
&lt;li>부 데이터베이스 서버 중 하나가 새로운 주 서버가 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="다중화를-고려한-설계">다중화를 고려한 설계&lt;/h3>
&lt;p>아래는 로드밸런서와 데이터베이스 다중화를 고려한 설계안이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_5.png"
width="615"
height="680"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_5_hu0d3cc45b151b2f2d78ede4b0a35c84d1_160088_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_5_hu0d3cc45b151b2f2d78ede4b0a35c84d1_160088_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;ol>
&lt;li>사용자는 DNS로부터 로드밸런서의 공개 IP 주소를 받는다.&lt;/li>
&lt;li>사용자는 해당 IP 주소를 사용해 로드밸런서에 접속한다.&lt;/li>
&lt;li>HTTP 요청은 서버 1이나 서버 2로 전달된다.&lt;/li>
&lt;li>웹 서버는 사용자의 데이터를 부 데이터베이스 서버에서 읽는다.&lt;/li>
&lt;li>웹 서버는 데이터 변경 연산은 주 데이터베이스로 전달한다.&lt;/li>
&lt;/ol>
&lt;h2 id="캐시-cache">캐시 Cache&lt;/h2>
&lt;p>캐시를 붙여 응답 시간(latency)를 개선해볼 수 있다.&lt;/p>
&lt;p>캐시는 &lt;strong>값비싼 연산 결과&lt;/strong> 또는 &lt;strong>자주 참조되는 데이터&lt;/strong>를 메모리 안에 두고, 뒤이은 요청이 보다 빨리 처리될 수 있도록 하는 저장소이다.&lt;/p>
&lt;p>애플리케이션의 성능은 데이터베이스를 얼마나 자주 호출하느냐에 크게 좌우되는데, 캐시는 그런 문제를 완화할 수 있다.&lt;/p>
&lt;h3 id="캐시-계층">캐시 계층&lt;/h3>
&lt;p>캐시 계층(cache tier)은 데이터가 잠시 보관되는 곳으로 데이터베이스보다 훨씬 빠르다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스보다 훨씬 빠르므로 성능이 개선된다.&lt;/li>
&lt;li>요청 분산으로 데이터베이스의 부하를 줄일 수 있다.&lt;/li>
&lt;li>캐시 계층의 규모를 독립적으로 확장시키는 것도 가능해진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_6.png"
width="613"
height="116"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_6_huc62d7a17723bf3e18e1d3339b357022d_33317_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_6_huc62d7a17723bf3e18e1d3339b357022d_33317_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="528"
data-flex-basis="1268px"
>&lt;/p>
&lt;p>요청받은 웹 서버는 캐시에 응답이 저장되어 있는지를 확인 후 저장되어 있다면 해당 데이터 반환하고 없을 경우 데이터베이스 조회하여 결과를 반환하는데, 이러한 캐시 전략을 &lt;strong>읽기 주도형 캐시 전략(read-through caching strategy)&lt;/strong> 이라고 부른다.&lt;/p>
&lt;p>이외에도 다양한 캐시 전략이 있으며, 캐시할 데이터 종류, 크기, 액세스 패턴에 맞는 캐시 전략을 선택하면 된다.&lt;/p>
&lt;ul>
&lt;li>쓰기 주도형 캐시 전략 (Write-Through Cache)
&lt;ul>
&lt;li>데이터를 업데이트할 때 캐시와 백엔드 데이터 소스 모두에 동시에 업데이트&lt;/li>
&lt;li>데이터 일관성을 유지하면서 쓰기 작업을 처리&lt;/li>
&lt;li>쓰기 작업의 경우 백엔드 저장소로의 추가적인 I/O 작업이 필요하므로 성능 저하의 가능성이 있지만, 데이터 일관성을 보장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>쓰기 지연형 캐시 전략 (Write-Behind Cache)
&lt;ul>
&lt;li>데이터 업데이트를 먼저 캐시에만 적용하고, 나중에 백엔드 데이터 소스에 업데이트를 적용&lt;/li>
&lt;li>이는 쓰기 작업의 지연을 최소화하여 응답 시간을 줄이는 데 도움&lt;/li>
&lt;li>쓰기 지연형 캐시는 데이터 일관성을 유지하기 위해 추가적인 메커니즘을 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자세한 내용의 캐시 전략 (Write-Through and Read-Through Cache):
&lt;ul>
&lt;li>읽기와 쓰기 모두에 대해 캐시를 사용하는 전략&lt;/li>
&lt;li>데이터가 요청될 때마다 읽기 주도형 캐시와 유사하게 작동하며, 데이터가 업데이트될 때마다 쓰기 주도형 캐시와 유사한 방식으로 작동&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시 앞 단의 캐시 전략 (Cache-Aside Cache):
&lt;ul>
&lt;li>클라이언트가 데이터를 직접 캐시에 저장하고 검색하는 방식&lt;/li>
&lt;li>캐시에 데이터가 없는 경우 클라이언트는 백엔드 데이터 소스에서 직접 데이터를 가져와서 캐시에 저장하고 응답&lt;/li>
&lt;li>이 방식은 간단하고 유연하며, 응용 프로그램 코드 내에 캐시 로직을 명시적으로 구현할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이중 캐시 전략 (Two-Level Cache):
&lt;ul>
&lt;li>두 개의 캐시 레이어를 사용하여 성능을 최적화&lt;/li>
&lt;li>보통 두 개의 캐시는 크기와 접근 속도 등에서 차이가 있음&lt;/li>
&lt;li>먼저 작은 고속 캐시가 데이터를 저장하고, 그 다음에 큰 용량의 캐시가 데이터를 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오프힙 로컬 캐시 전략 (Off-Heap Local Cache Strategy):
&lt;ul>
&lt;li>캐시를 메모리 외의 오프힙(Off-Heap) 영역에 저장하여 자바 가상 머신의 힙 메모리 한계를 초과하는 데이터 양을 처리할 수 있게 함&lt;/li>
&lt;li>이는 대규모 캐시나 대용량 데이터를 다룰 때 유용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="캐시-사용-시-유의할-점">캐시 사용 시 유의할 점&lt;/h3>
&lt;ul>
&lt;li>데이터 갱신은 자주 일어나지 않지만 참조는 빈번하게 일어나는 경우 고려할 수 있다.&lt;/li>
&lt;li>캐시는 데이터를 휘발성 메모리에 두므로, 영속적으로 보관할 데이터를 캐시에 두는 것은 바람직하지 않다.&lt;/li>
&lt;li>데이터를 무기한 보존할 수 없으므로 만료에 대한 정책을 마련해야한다.
&lt;ul>
&lt;li>너무 짧으면 데이터베이스 읽기가 자주 발생한다.&lt;/li>
&lt;li>너무 길면 원본과 차이 날 가능성이 높아진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>원본을 갱신하는 연산과 캐시를 갱신하는 연산이 단일 트랜잭션으로 처리되지 않는 경우 일관성이 깨질 수 있다.&lt;/li>
&lt;li>캐시 서버를 한 대만 두는 경우 해당 서버가 단일 장애 지점(Single Point of Failure, SPOF)이 되어버릴 가능성이 있다.
&lt;ul>
&lt;li>여러 지역에 걸처 캐시 서버를 분산시켜야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시 메모리가 너무 작으면 액세스 패턴에 따라 데이터가 자주 캐시에서 밀려나 성능이 떨어지게 된다.
&lt;ul>
&lt;li>캐시 메모리를 과할당하면 데이터가 갑자기 늘어났을 때 생길 문제를 방지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시가 가득 찼을 때 추가로 데이터를 넣기 위한 데이터 방출 정책을 적절히 지정해야한다.
&lt;ul>
&lt;li>가장 널리 쓰이는 것은 LRU(least Recently Used - 가장 오래 사용 안된 데이터)나 FIFO(가장 먼저 들어온) 등이 있으며 경우에 맞게 적용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="콘텐츠-전송-네트워크-cdn">콘텐츠 전송 네트워크 CDN&lt;/h2>
&lt;p>응답 시간을 개선할 방법으로 CDN(Content Delivery Network)를 적용해 볼 수 있다.&lt;/p>
&lt;p>CDN은 정적 콘텐츠를 전성하는 데 쓰이는, 지리적으로 분산된 서버의 네트워크이다. (이미지, 비디오, CSS, JS 파일 등)&lt;/p>
&lt;ul>
&lt;li>요청 경로, 질의 문자열, 쿠키, 요청 헤더 등의 정보에 기반하여 HTML을 캐싱하는 &lt;strong>동적 콘텐츠 캐싱&lt;/strong>도 적용해 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_7.png"
width="605"
height="231"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_7_hu799239a592ed42b7290231250760d8ad_30988_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_7_hu799239a592ed42b7290231250760d8ad_30988_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="261"
data-flex-basis="628px"
>&lt;/p>
&lt;p>어떤 사용자 웹 사이트를 방문하면, 사용자에게 가장 가까운 CDN 서버가 정적 콘텐츠를 전달하며, 사용자가 CDN 서버로부터 멀어질 수록 천천히 로드될 것이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_8.png"
width="612"
height="218"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_8_hu5d5fc61be434c460205659abbfd7acf0_63071_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_8_hu5d5fc61be434c460205659abbfd7acf0_63071_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="280"
data-flex-basis="673px"
>&lt;/p>
&lt;ol>
&lt;li>사용자 A가 이미지 URL을 이용해 &lt;code>image.png&lt;/code>에 접근한다.(URL의 도메인은 CDN 서비스 사업자가 제공한다.)&lt;/li>
&lt;li>CDN 서버의 캐시에 해당 이미지가 없는 경우 원본 서버에서 요청하여 파일을 가져온다.&lt;/li>
&lt;li>원본 서버가 파일을 CDN 서버에 반환한다.
&lt;ul>
&lt;li>응답 HTTP 헤더에 TTL(Time-To-Live) 값을 넣어 보낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CDN 서버는 파일을 캐시하고 사용자 A에게 반환한다.
&lt;ul>
&lt;li>이미지는 TTL에 명신된 시간이 끝날 때 까지만 캐시된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용자 B가 같은 이미지를 CDN 서버에게 요청한다.&lt;/li>
&lt;li>만료되지 않은 이미지에 대한 요청은 캐시를 통해 처리된다.&lt;/li>
&lt;/ol>
&lt;h3 id="cdn-사용-시-고려해야-할-사항">CDN 사용 시 고려해야 할 사항&lt;/h3>
&lt;ul>
&lt;li>비용
&lt;ul>
&lt;li>CDN은 보통 서드파티에 의해 운영되며, CDN으로 들어가고 나가는 데이터 전송 양에 따라 요금을 낸다.&lt;/li>
&lt;li>자주 사용되지 않는 콘텐츠를 캐싱하는 것은 이득이 적으므로, CDN에서 빼는 것을 고려할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>적절한 만료 시한 설정
&lt;ul>
&lt;li>시의성이 중요한(time-sensitive) 콘텐츠는 만료 시점을 잘 정해야한다.&lt;/li>
&lt;li>너무 길면 콘텐츠의 신선도가 떨어진다.&lt;/li>
&lt;li>너무 짧으면 원본 서버에 빈번히 접속되어 좋지 않다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CDN 장애 대처 방안
&lt;ul>
&lt;li>CDN 자체가 죽었을 경우 애플리케이션이 어떻게 동작해야 하는지 고려해야 한다.&lt;/li>
&lt;li>응답을 감지하여 원본 서버에서 가져오는 등의 방식으로 처리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>콘텐츠 무효화 방법
&lt;ul>
&lt;li>만료되지 않은 콘텐츠라도 CDN에서 제거할 수 있다.&lt;/li>
&lt;li>CDN 서비스 사업자가 제공하는 API 활용&lt;/li>
&lt;li>콘텐츠의 다른 버전을 서비스 하도록 오브젝트 버저닝 이용.
&lt;ul>
&lt;li>&lt;code>image.png?v=2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cdn과-캐시가-추가된-설계">CDN과 캐시가 추가된 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_9.png"
width="625"
height="670"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_9_hu460b71978870d67db3c5f1597124e471_170383_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_9_hu460b71978870d67db3c5f1597124e471_170383_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="223px"
>&lt;/p>
&lt;ol>
&lt;li>정적 콘텐츠를 CDN을 통해 제공하여 더 나은 성능을 보장한다.&lt;/li>
&lt;li>캐시가 데이터베이스 부하를 줄여준다.&lt;/li>
&lt;/ol>
&lt;h2 id="무상태stateless-웹-계층">무상태(Stateless) 웹 계층&lt;/h2>
&lt;p>웹 계층을 수평적으로 확장하는 방법을 고민해 볼 수 있다.&lt;/p>
&lt;p>이를 위해 상태 정보(사용자 세션 등)를 웹 계층에서 제거해야한다.&lt;/p>
&lt;p>바람직한 전략은 상태 정보를 관계형 데이터베이스나 NoSQL 같은 지속성 저장소에 보관하고, 필요할 때 가져오도록 하는 것이다.&lt;/p>
&lt;p>이렇게 구성된 웹 계층을 &lt;strong>무상태 웹 계층&lt;/strong>이라 부른다.&lt;/p>
&lt;h3 id="상태-정보-의존적인-아키텍처">상태 정보 의존적인 아키텍처&lt;/h3>
&lt;p>상태 정보를 보고나하는 서버는 클라이언트 정보, 즉 상태를 유지하여 요청들 사이에 공유되도록 하지만, 무상태 서버에는 이러한 장치가 없다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_10.png"
width="624"
height="387"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_10_hu5fb9397f4d4b70e8494c0677a4642dc6_65604_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_10_hu5fb9397f4d4b70e8494c0677a4642dc6_65604_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>위와 같은 경우 같은 클라이언트로부터의 요청은 항상 같은 서버로 전송되어야 한다.&lt;/p>
&lt;p>로드밸런서가 이를 지원하기 위해 고정 세션이라는 기능을 제공하지만, 이는 로드밸런서에 부담을 줄 수 있다.&lt;/p>
&lt;p>또한 로드 밸런서 뒷단에 서버를 추가하거나 제거하기도 까다로워지며, 이들 서버의 장애를 처리하기도 복잡해진다.&lt;/p>
&lt;h3 id="무상태-아키텍처">무상태 아키텍처&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_11.png"
width="601"
height="582"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_11_hu39f308bbb91eb0dc2a5c19d7114ea62c_76175_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_11_hu39f308bbb91eb0dc2a5c19d7114ea62c_76175_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="247px"
>&lt;/p>
&lt;p>무상태 아키텍처는 사용자로부터의 HTTP 요청은 어떤 웹 서버로도 전달될 수 있다.&lt;/p>
&lt;p>웹 서버는 상태 정보가 필요할 경우 물리적으로 분리된 공유 저장소로부터 데이터를 가져온다.&lt;/p>
&lt;h3 id="무상태-웹-계층을-갖는-설계">무상태 웹 계층을 갖는 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_12.png"
width="592"
height="593"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_12_hu8a96a4f1289cdc64fec7a7b4b0f65b88_150815_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_12_hu8a96a4f1289cdc64fec7a7b4b0f65b88_150815_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;ul>
&lt;li>세션 데이터를 웹 계층에서 분리하고 지속성 데이터 보관소에 저장하도록 만들었다.
&lt;ul>
&lt;li>공유 저장소는 관계형 데이터베이스일 수도 있고, 캐시일 수도 있으며, NoSQL일 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 정보가 웹 서버들로부터 제거되었으므로 자동으로 규모를 확장할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="데이터-센터">데이터 센터&lt;/h2>
&lt;p>애플리케이션의 사용자가 매우 많다면 가용성을 높이고 쾌적하게 사용할 수 있도록 하기 위해 여러 데이터 센터를 지원하는 것이 필수적이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_13.png"
width="605"
height="612"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_13_huacec91b27a2e95c1fae44550dc9946c4_231088_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_13_huacec91b27a2e95c1fae44550dc9946c4_231088_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="237px"
>&lt;/p>
&lt;p>&lt;strong>지리적 라우팅&lt;/strong>&lt;/p>
&lt;p>장애가 없는 상황에서 사용자는 가장 가까운 데이터 센터로 안내되는데 이 절차를 지리적 라우팅(geoDNS-routing 또는 geo-routing)이라고 부른다.&lt;/p>
&lt;p>geoDNS는 사용자의 위치에 따라 도메인 이름을 어떤 IP 주소로 변활할지 결정할 수 있도록 해주는 DNS 서비스다.&lt;/p>
&lt;p>&lt;strong>데이터 센터 장애&lt;/strong>&lt;/p>
&lt;p>데이터 센터 중 하나에 심각한 장애가 발생하면 모든 트래픽은 장애가 없는 데이터 센터로 전송된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_14.png"
width="598"
height="619"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_14_huae6b76823045f17d81dcfd1753a37701_207085_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_14_huae6b76823045f17d81dcfd1753a37701_207085_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>이에 따라 다중 데이터센터 아키텍처를 만들려면 몇 가지 기술적 난제를 해결해야 한다.&lt;/p>
&lt;ul>
&lt;li>트래픽 우회
&lt;ul>
&lt;li>올바른 데이터센터로 트래픽을 보내는 효과적인 방법을 찾아야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 동기화(Synchronization)
&lt;ul>
&lt;li>데이터를 여러 데이터센터에 걸쳐 다중화 하여, 장애 복구 시에도 데이터를 동기화 할 수 있도록 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트와 배포
&lt;ul>
&lt;li>여러 데이터 센터를 사용하도록 시스템이 구성된 상황이라면 웹 사이트 또는 애플리케이션을 여러 위치에서 테스트 해보는 것이 중요하다.&lt;/li>
&lt;li>자동화된 배포 도구는 모든 데이터 센터에 동일한 서비스가 설치되도록 하는 데 중요한 일을 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="메시지-큐message-queue">메시지 큐(Message Queue)&lt;/h2>
&lt;p>시스템을 더 큰 규모로 확장하기 위해서는 시스템의 컴포넌트를 분리하여, 각기 독립적으로 확장될 수 있어야 한다.&lt;/p>
&lt;p>메시지 큐는 분산 시스템이 이 문제를 풀기 위해 채용하고 있는 핵심 전략 가운데 하나다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_15.png"
width="606"
height="141"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_15_huc34a000f73eb7366f54fab25c10cd600_37954_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_15_huc34a000f73eb7366f54fab25c10cd600_37954_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="429"
data-flex-basis="1031px"
>&lt;/p>
&lt;p>메시지 큐는 메시지의 무손실을 보장하는 비동기 통신을 지원하는 컴포넌트로 메시지의 버퍼 역할을 하며, 비동기적으로 전송한다.&lt;/p>
&lt;ol>
&lt;li>생산자 또는 발행자라고 불리는 입력 서비스가 메시지를 만들어 메시지 큐에 발행한다.&lt;/li>
&lt;li>소비자 혹은 구독자라 불리는 서비스 혹은 서버가 메시지를 받아 그에 맞는 동작을 수행한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>메시지 큐를 이용하면 서비스 또는 서버 간 결합이 느슨해져서, 규모 확장성이 보장되어야 하는 안정적 애플리케이션을 구성하기 좋다.&lt;/p>
&lt;ul>
&lt;li>생산자는 소비자 프로세스가 다운되어 있어도 메시지를 발행할 수 있다.&lt;/li>
&lt;li>소비자는 생산자 서비스가 가용한 상태가 아니더라도 메시지를 수신할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>큐가 커지면 더 많은 작업 프로세스를 추가해야 처리 시간을 줄일 수 있으며, 큐가 거의 항상 비어있는 상태라면, 작업 프로세스의 수를 줄일 수 있다.&lt;/p>
&lt;h2 id="로그-메트릭-그리고-자동화">로그, 메트릭 그리고 자동화&lt;/h2>
&lt;p>웹 사이트와 함께 사업 규모가 커지고 나면, 로그나 메트릭, 자동화 같은 도구에 필수적으로 투자해야한다.&lt;/p>
&lt;ul>
&lt;li>로그
&lt;ul>
&lt;li>시스템의 오류와 문제들을 쉽게 찾아낼 수 있게 돕는다.&lt;/li>
&lt;li>로그를 단일 서비스로 모아주는 도구를 활용하면 더 편리하게 검색하고 조회할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메트릭
&lt;ul>
&lt;li>사업 현황에 관한 유용한 정보를 얻을 수도 있고, 시스템의 현재 상태를 쉽게 파악할 수 있다.&lt;/li>
&lt;li>호스트 단위 메트릭: CPU, 메모리, 디스크 I/O,에 관한 메트릭&lt;/li>
&lt;li>종합 메트릭: 데이터베이스 계층의 성능, 캐시 계층의 성능 등&lt;/li>
&lt;li>핵심 비즈니스 메트릭: 일별 능동 사용자, 수익, 재방문 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화
&lt;ul>
&lt;li>시스템이 크고 복잡해지면 생산성을 높이기 위해 자동화 도구를 활용해야한다.&lt;/li>
&lt;li>지속적 통합을 활용한 검증 절차 수행 및 빌드, 테스트, 배포 절차 자동화 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="수정한-설계안">수정한 설계안&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_16.png"
width="595"
height="741"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_16_hu91dcf9847683962bf50eb168546423cd_177817_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_16_hu91dcf9847683962bf50eb168546423cd_177817_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;ul>
&lt;li>메시지 큐는 각 컴포넌트가 보다 느슨히 결합될 수 있도록 하고, 결함에 대한 내성을 높인다.&lt;/li>
&lt;li>로그, 모니터링, 메트릭, 자동화 등을 지원하기 위한 장치를 추가한다.&lt;/li>
&lt;/ul>
&lt;h2 id="데이터베이스-규모-확장">데이터베이스 규모 확장&lt;/h2>
&lt;p>저장할 데이터가 많아지면 데이터베이스에 대한 부하도 증가한다.&lt;/p>
&lt;p>데이터베이스의 규모를 확장하는데는 앞서 언급했던 수직적 규모 확장과 수평적 규모 확장을 고려할 수 있다.&lt;/p>
&lt;p>&lt;strong>수평적 확장&lt;/strong>&lt;/p>
&lt;p>기존 서버에 더 많은, 고성능의 자원을 증설하는 방법이다.&lt;/p>
&lt;p>스택오버플로는 천만 명의 사용자 전부를 단 한 대의 마스터 데이터베이스로 처리했다.&lt;/p>
&lt;p>하지만 언급했던대로 몇가지 심각한 약점이 있다.&lt;/p>
&lt;ul>
&lt;li>무한 증설할 수는 없다.&lt;/li>
&lt;li>SPOF로 인한 위험성이 크다.&lt;/li>
&lt;li>비용이 많이 든다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>수평적 확장&lt;/strong>&lt;/p>
&lt;p>데이터베이스의 수평적 확장은 샤딩(sharding)이라고도 부르는데, 더 많은 서버를 추가함으로써 성능을 향상시킬 수 있도록 한다.&lt;/p>
&lt;h3 id="샤딩">샤딩&lt;/h3>
&lt;ul>
&lt;li>대규모 데이터베이스를 샤드(shard)라고 부르는 작은 단위로 분할하는 기술을 일컫는다.&lt;/li>
&lt;li>모든 샤드는 같은 스키마를 쓰지만 보관되는 데이터 사이에는 중복이 없다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_17.png"
width="369"
height="266"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_17_huc997d539c0fa3f28c4bae7dad9a2068b_33539_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_17_huc997d539c0fa3f28c4bae7dad9a2068b_33539_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="332px"
>&lt;/p>
&lt;p>위의 예시에서 &lt;code>user_id % 4&lt;/code>를 해시 함수로 사용하여 데이터가 보관되는 샤드를 정한다.&lt;/p>
&lt;p>이처럼 샤딩 전략을 구현할 때 고려해야 할 가장 중요한 것은 &lt;strong>샤딩 키&lt;/strong>를 어떻게 정하냐 하는 것이다.&lt;/p>
&lt;ul>
&lt;li>샤딩 키(파티션 키)는 데이터가 어떻게 분살될지 정하는 하나 이상의 컬럼으로 구성된다.&lt;/li>
&lt;li>샤딩 키를 통해 올바른 데이터베이스에 질의를 보내어 데이터 조회나 변경을 처리하므로 효율을 높일 수 있다.&lt;/li>
&lt;/ul>
&lt;p>샤딩 키를 정할 때는 데이터를 고르게 분할 할 수 있도록 하는 게 가장 중요하다.&lt;/p>
&lt;p>&lt;strong>주의사항&lt;/strong>&lt;/p>
&lt;p>샤딩은 데이터베이스 규모 확장을 실현하는 휼륭한 기술이지만 완벽하지 않으며, 도입하면 시스템이 복잡해지고 풀어야 할 새로운 문제도 생긴다.&lt;/p>
&lt;ul>
&lt;li>데이터의 재 샤딩
&lt;ul>
&lt;li>데이터가 너무 많아져서 하나의 샤드로는 더 이상 감당하기 어려울 때&lt;/li>
&lt;li>샤드 소진: 샤드 간 데이터 분포가 균등하지 못하여 어떤 샤드에 할당된 공간 소모가 다른 사드에 비해 빨리 진행될 때&lt;/li>
&lt;li>이러한 형상이 발생하면 샤드 키를 계산하는 함수를 변경하고 데이터를 재배치 하여야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유명인사 문제(핫스팟 키 문제)
&lt;ul>
&lt;li>특정 샤드에 질의가 집중되어 서버에 과부하가 걸리는 문제다.&lt;/li>
&lt;li>특정 샤드의 원인에 대해 샤드를 하나씩 할당해야 할 수도 있고, 더 잘개 쪼개야 할 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>조인과 비정규화
&lt;ul>
&lt;li>데이터베이스를 여러 샤드 서버로 쪼개고 나면, 여러 샤드에 걸친 데이터를 조인하기가 힘들어진다.&lt;/li>
&lt;li>데이터베이스를 비정규화하여 하나의 테이블에서 질의가 수행될 수 있도록 하는 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="샤드를-적용한-아키텍처">샤드를 적용한 아키텍처&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_18.png"
width="643"
height="800"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_18_hu3cfaabe2145c01222e45ae94975b52ee_217530_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_18_hu3cfaabe2145c01222e45ae94975b52ee_217530_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;ul>
&lt;li>데이터베이스에 대한 부하를 줄이기 위해 굳이 관계형 데이터베이스가 요구되지 않는 기능들은 NoSQL로 이전할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="백만-사용자-그리고-그-이상">백만 사용자, 그리고 그 이상&lt;/h2>
&lt;p>시스템의 규모를 확장하는 것은 지속적이고 반복적인 과정이며, 이번 장에서 다룬 내용을 반복하다 보면 원하는 규모의 시스템을 달성할 수 있게 된다.&lt;/p>
&lt;p>그러나 수백만 사용자 이상을 지원하려면 새로운 전략을 도입해야 하고 지속적으로 시스템을 가다듬어야 할 것이다.&lt;/p>
&lt;ul>
&lt;li>시스템 최적화 및 마이크로서비스 등&lt;/li>
&lt;/ul>
&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>웹 계층은 무상태 계층으로&lt;/li>
&lt;li>모든 계층에 다중화 도입&lt;/li>
&lt;li>가능한 한 많은 데이터를 캐시할 것&lt;/li>
&lt;li>여러 데이터 센터를 지원할 것&lt;/li>
&lt;li>정적 콘텐츠는 CDN을 통해 서비스할 것&lt;/li>
&lt;li>데이터 계층은 샤딩을 통해 그 규모를 확장할 것&lt;/li>
&lt;li>각 계층은 독립적 서비스로 분할할 것&lt;/li>
&lt;li>시스템을 지속적으로 모니터링하고, 자동화 도구들을 활용할 것&lt;/li>
&lt;/ul></description></item></channel></rss>