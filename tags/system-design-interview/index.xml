<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Design Interview on Mario Blog</title><link>https://codemario318.github.io/tags/system-design-interview/</link><description>Recent content in System Design Interview on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 04 Jun 2024 15:18:50 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/system-design-interview/index.xml" rel="self" type="application/rss+xml"/><item><title>8. URL 단축기 설계</title><link>https://codemario318.github.io/post/system-design-interview/8/</link><pubDate>Tue, 04 Jun 2024 15:18:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/8/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/cover.png" alt="Featured image of post 8. URL 단축기 설계" />&lt;h2 id="1단계-문제-이해-및-설게-범위-확정">1단계: 문제 이해 및 설게 범위 확정&lt;/h2>
&lt;ul>
&lt;li>Q. URL 단축기 동작 예시
&lt;ul>
&lt;li>A. &lt;code>https://tinyurl.com/y7ke-ocwj&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 트래픽 규모는?
&lt;ul>
&lt;li>A. 매일 1억개의 단축 URL 생성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 단축 URL의 길이는?
&lt;ul>
&lt;li>A. 짧을수록 좋음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 단축 URL에 포함될 문자제한은?&lt;/li>
&lt;li>A. 숫자(0~9), 영문자(A~z) 사용 가능&lt;/li>
&lt;li>Q. 단축된 URL을 지우거나 갱신 가능?
&lt;ul>
&lt;li>A. 시스템 단순화를 위해 삭제나 갱신은 할 수 없다 가정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이 시스템의 기본적 기능은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>URL 단축: 주어진 긴 URL을 훨씬 짧게 줄인다.&lt;/li>
&lt;li>URL 리디렉션(redirection): 축약된 URL로 HTTP 요청이 오면 원래 URL로 안내&lt;/li>
&lt;li>높은 가용성과 규모 확장성, 장애 감내 요구됨&lt;/li>
&lt;/ul>
&lt;h3 id="개략적-추정">개략적 추정&lt;/h3>
&lt;ul>
&lt;li>쓰기 연산: 매일 1억 개의 단축 URL 생성&lt;/li>
&lt;li>초당 쓰기 연산: &lt;code>1억 / 24 / 3600 = 1160&lt;/code>&lt;/li>
&lt;li>읽기 연산:
&lt;ul>
&lt;li>읽기 연산과 쓰기 연산의 비율은 &lt;strong>10:1&lt;/strong>로 가정&lt;/li>
&lt;li>대략 초당 11,600회 발생&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>URL 단축 서비스를 10년간 운영한다고 가정하면 &lt;code>1억 * 365 * 10 = 3650억&lt;/code>개 레코드 보관&lt;/li>
&lt;li>축약 전 URL의 평균 길이는 100
&lt;ul>
&lt;li>필요한 저장 용량은 &lt;code>3650억 * 100바이트 = 36.5TB&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;h3 id="api-엔드포인트">API 엔드포인트&lt;/h3>
&lt;p>클라이언트는 서버가 제공하는 API 엔드포인트를 통해 서버와 통신한다.&lt;/p>
&lt;p>RESTful API 스타일로 설계한다고 가정하면, 기본적으로 두 개의 엔드포인트를 필요로 한다.&lt;/p>
&lt;ol>
&lt;li>URL 단축용 엔드포인트:
&lt;ul>
&lt;li>새 단축 URL을 생성하고자 하는 클라이언트는 이 엔드포인트에 단축할 URL을 인자로 담아 POST 요청을 보내야한다.&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">POST /api/v1/data/shorten
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>인자: &lt;code>{longUrl: longURLstring}&lt;/code>&lt;/li>
&lt;li>반환: 단축 URL&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>URL 리디렉션용 엔드포인트: 단축 URL에 대해 HTTP 요청이 오면 원래 URL로 보내주기 위한 용도의 엔드포인트
&lt;ul>
&lt;li>&lt;code>GET /api/v1/shortUrl&lt;/code>&lt;/li>
&lt;li>반환: HTTP 리디렉션 목적지가 될 원래 URL&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="url-리디렉션">URL 리디렉션&lt;/h3>
&lt;p>단축 URL을 받은 서버는 그 URL을 원래 URL로 바꾸어 &lt;strong>301 응답&lt;/strong>의 &lt;strong>Location 헤더&lt;/strong>에 넣어 반환한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img.png"
width="362"
height="363"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_hu4a278bdc249e7e3e9a78362cdb2bf14f_44204_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_hu4a278bdc249e7e3e9a78362cdb2bf14f_44204_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="클라이언트와 서버 사이의 통신 절차"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>유의할 점은 301 응답과 302 응답의 차이로, 둘 다 리디렉션 응답이지만 차이가 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>301 Permanently Moved&lt;/code>
&lt;ul>
&lt;li>URL에 대한 HTTP 요청의 처리 책임이 영구적으로 Location 헤더에 반환된 URL로 이전됨&lt;/li>
&lt;li>영구적인 이전이므로 브라우저는 이 응답을 캐싱한다.&lt;/li>
&lt;li>따라서 같은 단축 URL로 재 요청시 캐시된 원래 URL로 요청을 보낸다.&lt;/li>
&lt;li>서버 부하를 줄이는 것이 중요할 때 사용될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>302 Found&lt;/code>
&lt;ul>
&lt;li>URL로의 요청이 일시적으로 Location 헤더의 URL에 의해 처리되어야함&lt;/li>
&lt;li>클라이언트의 요청은 캐싱되지 않으므로, 언제나 단축 URL 서버에 먼저 보내짐&lt;/li>
&lt;li>트래픽 분석 같이 클릭 발생률이나 발생 위치를 파악해야할 때 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>URL 리디렉션을 구현하는 가장 직관적인 방법은 &lt;strong>해시 테이블&lt;/strong>을 사용하는 것으로 &lt;code>&amp;lt;단축 URL: 원래 URL&amp;gt;&lt;/code> 형식으로 구현될 수 있다.&lt;/p>
&lt;h3 id="url-단축">URL 단축&lt;/h3>
&lt;p>단축 URL이 &lt;code>&amp;lt;www.tinyurl.com/{hashValue}&lt;/code> 같은 형태로 만들어진다면, &lt;strong>긴 URL을 이 해시 값으로 대응시킬 해시 함수 &lt;code>fx&lt;/code>&lt;/strong> 를 찾는 것이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_1.png"
width="263"
height="205"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_1_hu28fdb81906c71ae40d2947e410c83904_16249_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_1_hu28fdb81906c71ae40d2947e410c83904_16249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="해시 함수 fx"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;p>해시 함수는 다음과 같은 요구사항을 만족해야 한다.&lt;/p>
&lt;ul>
&lt;li>입력으로 주어지는 긴 URL이 다른 값이면 해시 값도 달라야한다.&lt;/li>
&lt;li>계산된 해시 값은 원래 입력으로 주어졌던 긴 URL로 복원될 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;h3 id="데이터-모델">데이터 모델&lt;/h3>
&lt;p>개략적 설계에서는 모든 것을 해시 테이블에 두었지만, 이 방식은 메모리는 유한하고 비싸기 때문에 실제 시스템에서 사용되기 어렵다.&lt;/p>
&lt;p>더 나은 방식은 &lt;code>&amp;lt;단축 URL, 원래 URL&amp;gt;&lt;/code>의 순서쌍을 RDB에 저장하는 것이다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">erDiagram
URL {
number id pk
string shortURL
string longURL
}
&lt;/pre>
&lt;h3 id="해시-함수">해시 함수&lt;/h3>
&lt;p>해시 함수는 &lt;strong>원래 URL을 단축 URL로 변환&lt;/strong>하는 데 쓰인다.&lt;/p>
&lt;p>&lt;strong>해시 값 길이&lt;/strong>&lt;br>
hashValue는 [0-9, a-z, A-Z]의 문자들로 구성된다.&lt;/p>
&lt;ul>
&lt;li>사용할 수 있는 문자의 개수는 &lt;code>10 + 26 + 26 = 62&lt;/code>개이다.&lt;/li>
&lt;li>hashValue의 길이를 정하기 위해서는 &lt;code>62^n &amp;gt;= 3650억&lt;/code>을 만드는 n의 최소값을 찾아야한다.
&lt;ul>
&lt;li>n = 7, 약 3.5조 개&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>해시후 충돌 해소&lt;/strong>&lt;br>
긴 URL을 줄이려면, 원래 URL을 7글자 문자열로 줄이는 해시 함수가 필요하다.&lt;/p>
&lt;p>가장 쉬운 방법은 CRC32, MD5, SHA-1 같이 잘 알려진 해시 함수를 이용하는 것이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_2.png"
width="403"
height="141"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_2_hu130b2b42d1534b4e7248d03256cabfb1_16625_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_2_hu130b2b42d1534b4e7248d03256cabfb1_16625_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="https://en.wikipedia.org/wiki/Systems_design 해시 적용"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="685px"
>&lt;/p>
&lt;p>잘 알려진 해시 함수를 사용한 결과가 계산한 가장 짧은 해시값조차도 7보다는 길이가 긴데, 이 문제를 해결하기 위한 첫 번째 방법으로 처음 7개 문자만 사용하는 방법을 고려할 수 있다.&lt;/p>
&lt;ul>
&lt;li>해시 결과가 충돌할 확률이 높아진다.&lt;/li>
&lt;li>충돌이 발생한 경우, 충돌이 해소될 때까지 사전에 정한 문자열을 해시값에 덧붙인다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_3.png"
width="527"
height="318"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_3_hub0df4858afff8df13008d5e526aeee01_35083_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_3_hub0df4858afff8df13008d5e526aeee01_35083_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="해시 후 충돌 해소"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/p>
&lt;ul>
&lt;li>단축 URL을 생성할 때 한 번 이상 데이터베이스 질의를 해야 하므로 오버헤드가 크다.&lt;/li>
&lt;li>데이터베이스 대신 블룸 필터를 사용하면 성능을 높일 수 있다.
&lt;ul>
&lt;li>어떤 집합에 특정 원소가 있는 지 검사할 수 있도록 하는, 확률론에 기초한 공간 효율이 좋은 기술&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>base-62 변환&lt;/strong>&lt;br>
진법 변환(base conversion)은 URL 단축기를 구현할 때 흔히 사용되는 접근법이다.&lt;/p>
&lt;ul>
&lt;li>수의 표현 방식이 다른 두 시스템이 같은 수를 공유하여야 하는 경우 유용하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_4.png"
width="460"
height="209"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_4_hua0543d5a53f0486c3860430ba71667b3_17218_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_4_hua0543d5a53f0486c3860430ba71667b3_17218_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="62 진법 변환"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="528px"
>&lt;/p>
&lt;p>&lt;strong>두 접근법 비교&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>해시 후 충돌 해소&lt;/th>
&lt;th>62 진법 변환&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>단축 URL 길이가 고정됨&lt;/td>
&lt;td>단축 URL 길이가 가변적, ID 값이 커지면 길어짐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유일성이 보장되는 ID 생성기가 필요하지 않음&lt;/td>
&lt;td>유일성 보장 ID 생성기 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>충돌이 해소 전략 필요&lt;/td>
&lt;td>ID 유일성이 보장되어야 적용 가능한 전략이라 충돌 불가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ID로 부터 단축 URL을 계산하는 방식이 아니므로 다음에 쓸 수 있는 URL을 알아내는 것이 불가능&lt;/td>
&lt;td>ID가 1씩 증가하는 값이라고 가정하면 다음에 쓸 수 있는 단축 URL이 무엇인지 쉽게 알아낼 수 있어 보안상 문제 소지가 될 수 있음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="url-단축기-상세-설계">URL 단축기 상세 설계&lt;/h3>
&lt;p>URL 단축기는 시스템의 핵심 컴포넌트이므로, 그 처리흐름이 놀리적으로는 단순해야 하고, 기능적으로는 언제나 동작하는 상태로 유지되어야 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_5.png"
width="463"
height="348"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_5_hud414c15ad06fec3825b6f1e5e69c33f5_33072_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_5_hud414c15ad06fec3825b6f1e5e69c33f5_33072_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="URL 단축 처리 흐름"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;ol>
&lt;li>입력으로 긴 URL을 받는다.&lt;/li>
&lt;li>데이터베이스에 해당 URL이 있는지 검사한다.&lt;/li>
&lt;li>데이터베이스에 있다면 해당 URL에 대한 단축 URL을 만든 적이 있는것으로 해당 단축 URL을 클라이언트에게 반환&lt;/li>
&lt;li>데이터베이스에 없는 경우 유일한 ID를 생성하여 데이터베이스의 기본키로 사용&lt;/li>
&lt;li>62진법 변환을 적용하여 ID를 단축 URL로 만든다.&lt;/li>
&lt;li>ID, 단축 URL, 원래 URL로 새 데이터베이스 레코드를 만든 후 단축 URL을 클라이언트에 전달&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>해당 ID 생성기의 주된 용도는, 단축 URL을 만들 때 사용할 ID를 만드는 것이고, 이 ID는 전역적 유일성이 보장되는 것 이어야 한다.&lt;/p>
&lt;p>고도로 분산된 환경에서 이런 생성기를 만드는 것은 무척 어려운 일로 필요하다면 7장 내용을 응용하여 분산 환경에 사용될 유일한 ID를 만들 수 있다.&lt;/p>
&lt;h3 id="url-리디렉션-상세-설계">URL 리디렉션 상세 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_6.png"
width="526"
height="167"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_6_hu33c2d1982d9952264698b9ef2bfc0ff5_38702_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_6_hu33c2d1982d9952264698b9ef2bfc0ff5_38702_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="URL 리디렉션 상세 설계"
class="gallery-image"
data-flex-grow="314"
data-flex-basis="755px"
>&lt;/p>
&lt;p>쓰기보다 읽기를 더 자주하는 시스템의 특성에 맞추어, &lt;code>&amp;lt;단축 URL, 원래 URL&amp;gt;&lt;/code>의 쌍을 캐싱하여 성능을 높힐 수 있다.&lt;/p>
&lt;p>로드벨런서의 동작 흐름은 다음과 같이 요약할 수 있다.&lt;/p>
&lt;ol>
&lt;li>사용자가 단축 URL로 요청&lt;/li>
&lt;li>로드밸런서가 해당 클릭으로 발생한 요청을 웹 서버에 전달&lt;/li>
&lt;li>단축 URL이 이미 캐시에 있다면 원래 URL을 바로 꺼내 전달&lt;/li>
&lt;li>캐시에 없다면 데이터베이스에서 꺼내 전달&lt;/li>
&lt;li>데이터베이스에서 꺼낸 URL을 캐시에 넣은 후 사용자에게 반환&lt;/li>
&lt;/ol>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>설계를 마친 후 시간이 좀 남는다면 다음과 같은 것을 면접관과 이야기 할 수 있을것이다.&lt;/p>
&lt;ul>
&lt;li>처리율 제한 장치
&lt;ul>
&lt;li>엄청난 양은 단축 요청이 들어올 경우 무력화될 수 있다는 잠재적 보안 결함을 갖고 있다.&lt;/li>
&lt;li>처리율 제한 장치를 통해 요청을 걸러낼 수 있다. 4장 참조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 서버의 규모 확장
&lt;ul>
&lt;li>설계에 포함된 웹 계층은 무상태 계층이므로, 웹 서버를 자유롭게 증설, 삭제 할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터베이스 규모 확장
&lt;ul>
&lt;li>데이터베이스를 다중화하거나 샤딩하여 규모 확장성을 달성할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 분석 솔루션
&lt;ul>
&lt;li>URL 단축기에 데이터 분석 솔루션을 통합해 두면 어떤 링크를 얼마나 많은 사용자가 클릭했는지, 언제 주로 클릭했는지 등 중요한 정보를 알아낼 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성, 데이터 일관성, 안정성
&lt;ul>
&lt;li>1장 참조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>7. 분산 시스템을 위한 유일 ID 생성기 설계</title><link>https://codemario318.github.io/post/system-design-interview/7/</link><pubDate>Tue, 04 Jun 2024 14:26:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/7/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/cover.png" alt="Featured image of post 7. 분산 시스템을 위한 유일 ID 생성기 설계" />&lt;p>서비스의 규모가 작을때는 &lt;code>auto_increment&lt;/code> 속성이 설정된 관계형 데이터 베이스의 기본키를 사용하는 방법을 고려할 수 있지만, 분산 환경에서는 이러한 방법을 사용할 수 없다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스 서버 한 대로는 요구를 감당할 수 없다.&lt;/li>
&lt;li>여러 데이터베이스 서버를 쓰는 경우 지연 시간을 낮추기 매우 힘들다.&lt;/li>
&lt;/ul>
&lt;h2 id="1단계-문제-이해-및-설계-범위-설정">1단계: 문제 이해 및 설계 범위 설정&lt;/h2>
&lt;p>적절한 질문 통해 모호함을 없애고 설계 방향을 정한다.&lt;/p>
&lt;ul>
&lt;li>Q. ID는 어떤 특성을 낮는가?
&lt;ul>
&lt;li>A. ID는 &lt;strong>유일&lt;/strong>해야 하고, &lt;strong>정렬 가능&lt;/strong>해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 새로운 레코드에 붙일 ID는 항상 1만큼 큰 값이어야 하는가?
&lt;ul>
&lt;li>A. 시간에 따라 커지지만, 언제나 1씩 증가하지는 않아도 괜찮다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. ID는 숫자로만 구성되는가?
&lt;ul>
&lt;li>A. 예&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 시스템의 규모는 어느 정도 인가?
&lt;ul>
&lt;li>A. 초당 10,000 ID 생성 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위 질의응답을 통해 요구 사항을 정리하면 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>ID는 유일해야함&lt;/li>
&lt;li>ID는 숫자로만 구성되어야 함.&lt;/li>
&lt;li>ID는 64비트로 표현될 수 있는 값이어야 한다.&lt;/li>
&lt;li>ID는 발급 날짜에 따라 정렬 가능해야 한다.&lt;/li>
&lt;li>초당 10,000개의 ID를 만들 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;p>분산 시스템에서 유일성이 보장되는 ID를 만드는 방법은 여러 가지다.&lt;/p>
&lt;ul>
&lt;li>다중 마스터 복제(mulit-master replication)&lt;/li>
&lt;li>UUID(Universally Unique Identifier)&lt;/li>
&lt;li>티켓 서버&lt;/li>
&lt;li>트위터 스노플레이크(snowflake) 접근법&lt;/li>
&lt;/ul>
&lt;h3 id="다중-마스터-복제">다중 마스터 복제&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img.png"
width="405"
height="203"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_hu9014d3795a5b6c4cab16daba760b0bfa_48519_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_hu9014d3795a5b6c4cab16daba760b0bfa_48519_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="다중 마스터 복제 구조"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/p>
&lt;p>이 접근법은 데이터베이스의 &lt;strong>&lt;code>auto_increment&lt;/code>&lt;/strong> 기능을 활용한다.&lt;/p>
&lt;ul>
&lt;li>다음 ID의 값을 구할 때 1만큼 증가시켜 얻는 것이 아니라, &lt;strong>k만큼 증가&lt;/strong>시킨다.&lt;/li>
&lt;li>&lt;strong>k = 현재 사용중인 데이터베이스 서버 대수&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>이러한 방식을 통해 규모 확장성 문제를 어느정도 해결할 수 있지만, 중대한 단점이 있다.&lt;/p>
&lt;ul>
&lt;li>여러 데이터 센터에 걸쳐 규모를 늘리기 어렵다.&lt;/li>
&lt;li>ID의 유일성을 보장되지만, 그 값이 시간 흐름에 맞추어 커지도록 보장할 수 없다.&lt;/li>
&lt;li>서버를 추가하거나 삭제할 때도 잘 동작하도록 만들기 어렵다.&lt;/li>
&lt;/ul>
&lt;h3 id="uuid">UUID&lt;/h3>
&lt;p>UUID는 유일성이 보장되는 ID를 만드는 또 하나의 간단한 방법이다.&lt;/p>
&lt;ul>
&lt;li>컴퓨터 시스템에 저장되는 정보를 유일하게 식별하기 위한 128비트짜리 수&lt;/li>
&lt;li>충돌 가능성이 지극히 낮다.
&lt;ul>
&lt;li>중복 UUID가 1개 생길 확률을 50%로 끌어 올리려면 초당 10억 개의 UUID를 100년동안 계속해서 만들어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>09c93e62-50b4-468d-bf8a-c07e1040bfb2&lt;/code> 와 같은 형태를 띈다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img_1.png"
width="523"
height="136"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_1_hu6256ca36668288eeedaf0076978f50bb_33014_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_1_hu6256ca36668288eeedaf0076978f50bb_33014_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="UUID를 사용하는 시스템의 구조"
class="gallery-image"
data-flex-grow="384"
data-flex-basis="922px"
>&lt;/p>
&lt;p>이러한 특성으로 UUID는 서버 간 조율 없이 독립적으로 생성 가능하므로, 각 서버가 별도의 ID 생성기를 사용해 독립적으로 ID를 만들어낸다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>UUID를 만드는 것은 단순하다.&lt;/li>
&lt;li>서버 사이의 조율이 필요 없으므로 동기화 이슈도 없다.&lt;/li>
&lt;li>각 서버가 자기가 쓸 ID를 알아서 만드는 구조이므로 규모 확장도 쉽다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ID가 128비트로 길다.
&lt;ul>
&lt;li>요구사항은 64비트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ID를 시간순으로 정렬할 수 없다.&lt;/li>
&lt;li>ID에 숫자가 아는 값이 포함될 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="티켓-서버">티켓 서버&lt;/h3>
&lt;p>티켓 서버는 &lt;code>auto_increment&lt;/code> 기능을 낮춘 데이터베이스 서버, 즉 티켓 서버를 중앙 집중형으로 하나만 사용하는 방식으로 유일성이 보장되는 ID를 만든다.&lt;/p>
&lt;ul>
&lt;li>플리커(Flickr)는 분산 기본 키(Distributed primary key)를 만들어 내기 위해 이 기술을 이용&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img_2.png"
width="514"
height="192"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_2_hu35af303bc81c90e1e9d062a2cc6f0084_34398_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_2_hu35af303bc81c90e1e9d062a2cc6f0084_34398_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="티켓 서버 동작 방식"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="642px"
>&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>유일성이 보장되는 오직 숫자로만 구성된 ID를 쉽게 만들 수 있다.&lt;/li>
&lt;li>구현하기 쉽고, 중소 구모 애플리케이션에 적합하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>티켓 서버가 SPOF가 된다.
&lt;ul>
&lt;li>티켓 서버에 장애가 발생하면 해당 서버를 이용하는 모든 시스템이 영향을 받는다.&lt;/li>
&lt;li>티켓 서버를 여러 대 준비한다면 데이터 동기화 같은 새로운 문제가 발생한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="트위터-스노플레이크-접근법">트위터 스노플레이크 접근법&lt;/h3>
&lt;p>스노플레이크 접근법은 생성해야하는 ID를 여러 절로 분할하여 독립적인 ID를 만든다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img_3.png"
width="517"
height="65"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_3_hu359222468aa455e79718e3251ca7189d_7642_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_3_hu359222468aa455e79718e3251ca7189d_7642_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="생성해야 하는 ID 구조"
class="gallery-image"
data-flex-grow="795"
data-flex-basis="1908px"
>&lt;/p>
&lt;ul>
&lt;li>사인(sign) 비트: 항상 0으로 설정되어 양수로 유지한다.
&lt;ul>
&lt;li>특별한 의미는 없는듯&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>타임스탬프(timestamp): 기원 시간 이후로 몇 밀리초가 경과했는지를 나타내는 값
&lt;ul>
&lt;li>41비트로 기원 시간이 1970년 1월 1일이라면 약 69년 동안의 시간을 표현할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터센터 ID: 데이터센터 ID
&lt;ul>
&lt;li>5비트로 32개 데이터 센터를 구분할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서버 ID: 서버 ID
&lt;ul>
&lt;li>5비트로 32개의 서버 구분 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일련번호: 각 서버에서 ID를 생성할 때마다 일련번호를 1만큼 증가시킴
&lt;ul>
&lt;li>1밀리초가 경과될 때마다 0으로 초기화됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;p>트위터 스노플레이크 접근법을 사용하여 보다 상세한 설계를 진행한다.&lt;/p>
&lt;ul>
&lt;li>데이터센터 ID와 서버 ID는 시스템이 시작될 때 결정되며, 일반적으로 시스템 운영중에는 바뀌지 않는다.
&lt;ul>
&lt;li>데이터센터 ID, 서버 ID를 잘못 변경하게 되면 ID 충돌이 발생할 수 있으므로, 신중하게 해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>타임 스탬프나 일련번호는 ID 생성기가 돌고 있는 중에 만들어진다.&lt;/li>
&lt;/ul>
&lt;h3 id="타임스탬프">타임스탬프&lt;/h3>
&lt;p>타임스탬프는 시간이 흐름에 따라 점점 큰 값을 갖게 되므로, 결국 ID는 시간 순으로 정렬 가능하게 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img_4.png"
width="511"
height="404"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_4_hue8e03313e3458bff2af6b82679f89a78_43392_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_4_hue8e03313e3458bff2af6b82679f89a78_43392_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="타임스탬프를 이용한 UTC 추출"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>41비트로 표현할 수 있는 타임스탬프 최대값은 &lt;code>2^41 - 1 = 2199023255551&lt;/code> 밀리초 이므로 대략 69년 표현할 수 있다.&lt;/p>
&lt;p>따라서 이 ID 생성기는 69년동안만 정상 동작하므로 69년이 지나면 기원 시각을 바꾸거나 ID 체계를 다른 것으로 이전(migration)하여햐한다.&lt;/p>
&lt;h3 id="일련번호">일련번호&lt;/h3>
&lt;p>일련번호는 12비트이므로,`2^12 - 1 = 4096개의 값을 가질 수 있다.&lt;/p>
&lt;p>어떤 서버가 같은 밀리초 동안 하나 이상의 ID를 만들어 낸 경우에만 0보다 큰 값을 갖게 된다.&lt;/p>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>설계를 진행하고 시간이 조금 남았다면 다음을 추가로 논의할 수도 있다.&lt;/p>
&lt;ul>
&lt;li>시계 동기화(Clock synchronization)
&lt;ul>
&lt;li>기존 설계는 하나의 서버가 여러 코어에서 실행될 경우 유효하지 않을 수 있다.&lt;/li>
&lt;li>물리적으로 독립된 여러 장비에서 실행되는 경우 유효하지 않을 수 있다.&lt;/li>
&lt;li>NTP(Network Time Protocol)은 이 문제를 해결하는 가장 보편적인 수단이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>각 절(Section)의 길이 최적화
&lt;ul>
&lt;li>동시성이 낮고 수명이 긴 애플리케이션이라면 일련번호 절의 길이를 줄이고 타임스탬프 절의 길이를 늘리는 것이 효과적일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>고가용성
&lt;ul>
&lt;li>ID 생성기는 필수 불가결(mission critical) 컴포넌트이므로 아주 높은 가용성을 제공해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>6. 키-값 저장소 설계</title><link>https://codemario318.github.io/post/system-design-interview/6/</link><pubDate>Mon, 27 May 2024 11:59:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/6/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/cover.png" alt="Featured image of post 6. 키-값 저장소 설계" />&lt;p>키-값 저장소(key-value store)는 키-값 데이터베이스라고도 불리는 비 관계형(non-relational) 데이터베이스이다.&lt;/p>
&lt;ul>
&lt;li>이 저장소에 저장되는 값은 &lt;strong>고유 식별자&lt;/strong>를 키로 가져야한다.&lt;/li>
&lt;li>키와 값 사이의 이런 연결 관계를 &lt;strong>키-값 쌍&lt;/strong>(key-value pair)이라고 지칭한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>키&lt;/strong>&lt;br>
키-값 쌍에서의 키는 &lt;strong>유일&lt;/strong>해야 하며 해당 키에 매달린 값은 &lt;strong>키를 통해서만 접근&lt;/strong>할 수 있다.&lt;/p>
&lt;p>키는 일반 텍스트일 수도 있고 해시 값일 수도 있지만, 성능상의 이유로 짧을수록 좋다.&lt;/p>
&lt;ul>
&lt;li>일반 텍스트 키: &amp;ldquo;last_logged_in_at&amp;rdquo;&lt;/li>
&lt;li>해시 키: 253DDEC4&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>값&lt;/strong>&lt;br>
키-값 저장소는 보통 &lt;strong>값으로 무엇이 오든 상관하지 않는다&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>문자열, 리스트, 객체 등&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>키-값 저장소로 널리 알려진 것은 아마존 다이나모, memcached, 레디스 같은 것들이 있다.&lt;/p>
&lt;p>또한 기본적으로 아래와 같은 연산을 지원해야한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>put(key, value)&lt;/code>: 키-값 쌍을 저장소에 저장한다.&lt;/li>
&lt;li>&lt;code>get(key)&lt;/code>: 인자로 주어진 키에 매달린 값을 꺼낸다.&lt;/li>
&lt;/ul>
&lt;h2 id="문제-이해-및-설계-범위-확정">문제 이해 및 설계 범위 확정&lt;/h2>
&lt;p>완벽한 설계란 없다.&lt;/p>
&lt;p>읽기, 쓰기 그리고 메모리 사용량 사이에 어떤 균형을 찾고, 데이터의 일관성과 가용성 사이에서 타협적 결정을 내린 설계를 만들었다면 충분히 쓸만한 답이다.&lt;/p>
&lt;p>이번 장에서는 다음 특성을 갖는 키-값 저장소를 설계해본다.&lt;/p>
&lt;ul>
&lt;li>키-값 쌍의 크기는 10KB 이하이다.&lt;/li>
&lt;li>큰 데이터를 저장할 수 있어야 한다.&lt;/li>
&lt;li>높은 가용성을 제공해야한다.
&lt;ul>
&lt;li>시스템은 장애가 있더라도 빨리 응답해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>높은 규모 확장성을 제공해야 한다.
&lt;ul>
&lt;li>트래픽 양에 따라 자동적으로 서버 증설/삭제가 이루어져야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 일관성 수준은 조정이 가능해야 한다.&lt;/li>
&lt;li>응답 지연시간(latency)이 짧아야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="단일-서버-키-값-저장소">단일 서버 키-값 저장소&lt;/h2>
&lt;p>한 대 서버만 사용하는 키-값 저장소는 설계가 쉽다.&lt;/p>
&lt;p>가장 직관적인 방법은 키-값 쌍 전부를 메모리에 해시 테이블로 저장하는 것이다.&lt;/p>
&lt;p>이 방법은 빠른 속도를 보장하지만 &lt;strong>모든 데이터를 메모리안에 두는 것이 불가능&lt;/strong>할 수도 있다.&lt;/p>
&lt;p>이 문제의 개선책은 다음과 같은 것들이 있다.&lt;/p>
&lt;ul>
&lt;li>데이터 압축&lt;/li>
&lt;li>자주 쓰이는 데이터만 메모리에 두고 나머지는 디스크에 저장&lt;/li>
&lt;/ul>
&lt;p>이렇게 개선한다고 해도, 한 대 서버로 부족한 때가 찾아오며, 많은 데이터를 저장하기 위해서 &lt;strong>분산 키-값 저장소&lt;/strong>를 만들어야한다.&lt;/p>
&lt;h2 id="분산-키-값-저장소">분산 키 값 저장소&lt;/h2>
&lt;p>분산 키 값 저장소는 키-값 쌍을 여러 서버에 분산시키므로 &lt;strong>분산 해시 테이블&lt;/strong>이라고도 불린다.&lt;/p>
&lt;p>분산 시스템을 설계할 때는 &lt;strong>CAP 정리&lt;/strong>(Consistency, Availability, Partition Tolerance theorem)를 이해하고 있어야 한다.&lt;/p>
&lt;h3 id="cap-정리">CAP 정리&lt;/h3>
&lt;p>CAP 정리는 &lt;strong>데이터 일관성(consistency), 가용성(availability), 파티션 감내(partition tolerance)라는 세가지 요구사항을 동시에 만족하는 분산 시스템을 설계하는 것은 불가능하다&lt;/strong>는 정리이다.&lt;/p>
&lt;ul>
&lt;li>데이터 일관성
&lt;ul>
&lt;li>분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계없이 언제나 같은 데이터를 보게 되어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성
&lt;ul>
&lt;li>분산 시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>파티션 감내
&lt;ul>
&lt;li>파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다.&lt;/li>
&lt;li>네트워크에 파티션(분할)이 생기더라도 시스템은 계속 동작하여야 한다는 것을 뜻한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>네트워크 파티션?&lt;/strong>&lt;br>
테이터베이스 시스템의 일부 노드들이 서로 통신할 수 없는 상황으로 인해 각 노드들(파티션)이 독립적으로 동작하게 되어 각 파티션이 서로 다른 상태나 데이터를 가지게 되는 상황&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img.png"
width="828"
height="608"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_hu8399b985eaaab4d8c3cc5e2bfd3651de_149592_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_hu8399b985eaaab4d8c3cc5e2bfd3651de_149592_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>따라서 이들 가운데 &lt;strong>어떤 두 가지를 충족하려면 나머지 하나는 반드시 희생되어야 한다&lt;/strong>는 것을 의미한다.&lt;/p>
&lt;p>키 값 저장소는 세 가지 요구사항 가운데 어느 두 가지를 만족하느냐에 따라 다음과 같이 분류할 수 있다.&lt;/p>
&lt;ul>
&lt;li>CP: 일관성과 파티션 감내를 지원(가용성 희생)&lt;/li>
&lt;li>AP: 가용성과 파티션 감내를 지원(데이터 일관성 희생)&lt;/li>
&lt;li>CA: 일관성과 가용성을 지원(파티션 감내 지원 안함)
&lt;ul>
&lt;li>통상 네트워크 장애는 피할 수 없는 일로 여겨지므로, 분산 시스템은 반드시 파티션 문제를 감내할 수 있도록 설계되어야 한다.&lt;/li>
&lt;li>실세계에서 CA 시스템은 존재하지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="구체적-사례">구체적 사례&lt;/h3>
&lt;p>분산 시스템에서 데이터는 보통 여러 노드에 복제되어 보관된다.&lt;/p>
&lt;h4 id="이상적-상태">이상적 상태&lt;/h4>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_1.png"
width="840"
height="592"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_1_hua0faa9aa952f92ab7c5a2fe27ee0e7c0_91753_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_1_hua0faa9aa952f92ab7c5a2fe27ee0e7c0_91753_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;p>이상적인 환경이라면 &lt;strong>네트워크가 파티션되는 상황은 절대로 일어나지 않을 것&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>n1&lt;/strong>에 기록된 데이터는 자동적으로 &lt;strong>n2&lt;/strong>, &lt;strong>n3&lt;/strong>에 복제되며 데이터 일관성과 가용성도 만족한다.&lt;/li>
&lt;/ul>
&lt;h4 id="실세계의-분산-시스템">실세계의 분산 시스템&lt;/h4>
&lt;p>분산 시스템은 파티션 문제를 피할 수 없다.&lt;/p>
&lt;p>파티션 문제가 발생하면 &lt;strong>일관성과 가용성 사이에서 하나를 선택&lt;/strong>해야 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_2.png"
width="839"
height="605"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_2_hud8043c96815985a7c6b0f4ed2ff33b87_103442_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_2_hud8043c96815985a7c6b0f4ed2ff33b87_103442_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="332px"
>&lt;/p>
&lt;p>&lt;strong>n3&lt;/strong>에 장애가 발생하여 &lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>와 통신 할 수 없는 상황에서&lt;/p>
&lt;ul>
&lt;li>클라이언트가 &lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>에 기록한 데이터는 &lt;strong>n3&lt;/strong>에 전달되지 않는다.&lt;/li>
&lt;li>&lt;strong>n3&lt;/strong>에 기록되었으나 &lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>로 전달되지 않은 데이터가 있다면 오래된 사본을 갖고 있을 것이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>CP 시스템&lt;/strong>&lt;/p>
&lt;p>가용성 대신 일관성을 선택한다면 세 서버 사이에 생길 수 있는 데이터 불일치 문제를 피하기 위해 &lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>에 대해 &lt;strong>쓰기 연산을 중단&lt;/strong>시켜야한다.&lt;/p>
&lt;p>이러한 경우 일부 노드가 장애가 발생하여도 동작해야 한다는 가용성이 깨진다.&lt;/p>
&lt;p>데이터 일관성을 양보할 수 없는 시스템은 이렇게 처리되어 상황이 해결될 때 까지 오류를 반환해야 한다.&lt;/p>
&lt;ul>
&lt;li>온라인 뱅킹 등&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>AP 시스템&lt;/strong>&lt;/p>
&lt;p>일관성 대신 가용성을 선택한 시스템은 &lt;strong>낡은 데이터를 반환할 위험이 있더라도 계속 읽기 연산을 허용&lt;/strong>해야한다.&lt;/p>
&lt;p>&lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>는 계속 쓰기 연산을 허용하고, 파티션 문제가 해결된 뒤 새 데이터를 &lt;strong>n3&lt;/strong>에 전송해야한다.&lt;/p>
&lt;hr>
&lt;p>분산 키-값 저장소를 만들 때는 그 요구사항에 맞도록 CAP 정리를 적용해야 한다.&lt;/p>
&lt;p>면접 상황에서는 이 문제에 대해 면접관과 상의하고, 그 결론에 따라 시스템을 설계하도록 하자.&lt;/p>
&lt;h3 id="시스템-컴포넌트">시스템 컴포넌트&lt;/h3>
&lt;p>키-값 저장소 구형에 사용되는 핵심 컴포넌트들 및 기술을 살펴본다.&lt;/p>
&lt;ul>
&lt;li>데이터 파티션&lt;/li>
&lt;li>데이터 다중화&lt;/li>
&lt;li>일관성&lt;/li>
&lt;li>일관성 불일치 해소&lt;/li>
&lt;li>장애 처리&lt;/li>
&lt;li>시스템 아키텍처 다이어그램&lt;/li>
&lt;li>쓰기 경로&lt;/li>
&lt;li>읽기 경로&lt;/li>
&lt;/ul>
&lt;h4 id="데이터-파티션">데이터 파티션&lt;/h4>
&lt;p>대규모 애플리케이션의 경우 전체 데이터를 한 대 서버에 욱여넣는 것은 불가능하다.&lt;/p>
&lt;p>가장 단순한 해결책은 &lt;strong>데이터를 작은 파티션들로 분할한 다음 여러 대 서버에 저장하는 것&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>데이터를 여러 서버에 고르게 분산할 수 있는가&lt;/li>
&lt;li>노드가 추가되거나 삭제될 때 데이터의 이동을 최소화할 수 있는가&lt;/li>
&lt;/ul>
&lt;p>5장에서 다룬 안정 해시는 이런 문제를 푸는 데 적합한 기술로 활용될 수 있다.&lt;/p>
&lt;p>안정 해시를 사용하여 데이터를 파티션하면 몇가지 장점이 있다.&lt;/p>
&lt;ul>
&lt;li>규모 확장 자동화(automatic scaling)
&lt;ul>
&lt;li>시스템 부하에 따라 서버가 자동으로 추가되거나 삭제되도록 만들 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다양성(heterogeneity)
&lt;ul>
&lt;li>각 서버의 용량에 맞게 가상 노드의 수를 조정할 수 있다.&lt;/li>
&lt;li>고성능 서버는 더 많은 가상노드를 갖도록&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="데이터-다중화">데이터 다중화&lt;/h4>
&lt;p>높은 가용성과 안정성을 확보하기 위해서는 데이터를 N개 서버에 비동기적으로 다중화할 필요가 있다.&lt;/p>
&lt;p>어떤 키를 해시 링 위에 배치한 수, 그 지점으로부터 시계 방향으로 링을 순회하면서 만나는 첫 N개 서버에 데이터 사본을 보관한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_3.png"
width="843"
height="685"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_3_hu0675f294d26db8b4acf424a88b68b693_77163_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_3_hu0675f294d26db8b4acf424a88b68b693_77163_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;p>하지만 가상 노드를 사용한다면 선택한 N개의 노드가 대응될 실제 물리 서버의 개수가 N보다 작아질 수 있다.&lt;/p>
&lt;p>이 문제를 피하려면 노드를 선택할 때 같은 물리 서버를 중복으로 선택하지 않도록 해야한다.&lt;/p>
&lt;p>같은 데이터 센터에 속한 노드는 정전, 네트워크 이슈, 자연 재해 등의 문제를 동시에 같이 겪을 가능성이 있으므로, 안정성을 담보하기 위해 데이터의 사본은 다른 센터의 서버에 보관하고, 센터들은 고속 네트워크로 연결한다.&lt;/p>
&lt;h4 id="데이터-일관성">데이터 일관성&lt;/h4>
&lt;p>여러 노드에 다중화된 데이터는 적절히 동기화가 되어야 한다.&lt;/p>
&lt;p>&lt;strong>정족수 합의&lt;/strong>(Quorum Consensus) 프로토콜을 사용하면 읽기/쓰기 연산 모두에 일관성을 보장할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>N&lt;/code>: 사본의 개수&lt;/li>
&lt;li>&lt;code>W&lt;/code>: 쓰기 연산에 대한 정족수
&lt;ul>
&lt;li>쓰기 연산이 성공한 것으로 간주되려면 적어도 &lt;code>W&lt;/code>개의 서버로부터 쓰기 연산이 성공했다는 응답을 받아야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>R&lt;/code>: 읽기 연산에 대한 정족수
&lt;ul>
&lt;li>읽기 연산이 성공한 것으로 간주되려면 적어도 &lt;code>R&lt;/code>개의 서버로부터 응답을 받아야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>일반적으로 &lt;code>N = R + W &amp;gt; N&lt;/code> 조건을 만족하도록 설정하며, 읽기와 쓰기 요청이 적어도 하나의 공통 노드를 통해 일관성을 유지하도록 보장한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_4.png"
width="839"
height="579"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_4_huec6b456c1e9a98e57b711c077ef003c7_99493_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_4_huec6b456c1e9a98e57b711c077ef003c7_99493_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="N = 3"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>&lt;code>W = 1&lt;/code>는 쓰기 연산이 성공했다고 판단하기 위해 중재자(coordinator)는 최소 한 대 서버로부터 쓰기 성공 응답을 받아야한다는 뜻이다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>s1&lt;/strong>으로 부터 성공 응답을 받았다면, 나머지 응답은 기다릴 필요가 없다.&lt;/li>
&lt;/ul>
&lt;p>중재자는 클라이언트와 노드 사이에서 프락시(proxy)역할을 한다.&lt;/p>
&lt;hr>
&lt;p>&lt;code>W&lt;/code>, &lt;code>R&lt;/code>, &lt;code>N&lt;/code>의 값을 정하는 것은 응답 지연과 데이터 일관성 사이의 타협점을 찾는 전형정인 과정이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>W = 1&lt;/code> or &lt;code>R = 1&lt;/code>
&lt;ul>
&lt;li>중재자는 한 대 서버로부터의 응답만 받으면 되므로 응답속도는 빠르다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>W &amp;gt; 1&lt;/code> or &lt;code>R &amp;gt; 1&lt;/code>
&lt;ul>
&lt;li>데이터 일관성의 수준은 향상되지만 중재자의 응답 속도는 가장 느린 서버로부터의 응답을 기다려야 하므로 느려진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;code>W + R &amp;gt; N&lt;/code>인 경우에는 일관성을 보증할 최신 데이터를 가진 노드가 최소 하나는 겹치므로 강한 일관성이 보장된다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>R = 1&lt;/code>, &lt;code>W = N&lt;/code>
&lt;ul>
&lt;li>빠른 읽기 연산에 최적화된 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>R = N&lt;/code>, &lt;code>W = 1&lt;/code>
&lt;ul>
&lt;li>빠른 쓰기 연산에 최적화된 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>R + W &amp;gt; N&lt;/code>
&lt;ul>
&lt;li>강한 일관성이 보장됨
&lt;ul>
&lt;li>보통 &lt;code>N = 3&lt;/code>, &lt;code>W = R = 2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>R + W &amp;lt;= N&lt;/code>
&lt;ul>
&lt;li>강한 일관성이 보장되지 않음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>요구되는 일관성 수준에 따라 &lt;code>W&lt;/code>, &lt;code>R&lt;/code>, &lt;code>N&lt;/code> 값을 조정한다.&lt;/p>
&lt;p>&lt;strong>일관성 모델&lt;/strong>&lt;/p>
&lt;p>일관성 모델(consistency model)은 키-값 저장소를 설계할 때 고려해야 할 요소로 데이터 일관성 수준을 결정한다.&lt;/p>
&lt;ul>
&lt;li>강한 일관성
&lt;ul>
&lt;li>모든 읽기 연산은 최신 결과를 반환한다.&lt;/li>
&lt;li>클라이언트는 절대로 낡은 데이터를 볼 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>약한 일관성
&lt;ul>
&lt;li>읽기 연산은 최신 결과를 반환하지 못할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>결과적 일관성
&lt;ul>
&lt;li>약한 일관성의 한 형태로, 갱신 결과가 결국에는 모든 사본에 반영(동기화)된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>강한 일관성&lt;/strong>을 달성하는 일반적인 방법은, &lt;strong>모든 사본에 현재 쓰기 연산의 결과가 반영될 때까지 해당 데이터에 대한 읽기/쓰기를 금지&lt;/strong>하는 것이다.&lt;/p>
&lt;ul>
&lt;li>새로운 요청의 처리가 중단되므로 고 가용성 시스템에는 적합하지 않다.&lt;/li>
&lt;/ul>
&lt;p>다이나모 또는 카산드라 같은 저장소는 결과적 일관성 모델을 택하고 있다.&lt;/p>
&lt;ul>
&lt;li>결과적 일관성 모델을 따를 경우 &lt;strong>쓰기 연산이 병렬적으로 발생하면 시스템에 저장된 값의 일관성이 깨어질 수 있는데&lt;/strong>, 이 문제는 클라이언트가 해결해야한다.&lt;/li>
&lt;li>클라이언트 측에서 데이터의 버전 정보를 활용해 일관성이 깨진 데이터를 읽지 않도록 해야한다.&lt;/li>
&lt;/ul>
&lt;p>데이터를 다중화하면 가용성은 높아지지만 사본 간 일관성이 깨질 가능성은 높아진다.&lt;/p>
&lt;p>&lt;strong>비 일관성 해소 기법: 데이터 버저닝&lt;/strong>&lt;/p>
&lt;p>버저닝은 데이터를 변경할 때마다 해당 데이터의 새로운 버전을 만든다.&lt;/p>
&lt;ul>
&lt;li>각 버전은 변경 불가능하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_5.png"
width="838"
height="387"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_5_hu314294c50ed1dac3bf6da051bfbc696c_78353_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_5_hu314294c50ed1dac3bf6da051bfbc696c_78353_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="충돌하는 두 값"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="519px"
>&lt;/p>
&lt;p>서버 1, 2가 다른 노드의 같은&lt;code>name&lt;/code>의 값을 동시에 변경하여 충돌이 발생했다고 가정했을 때 각각을 버전 &lt;strong>v1&lt;/strong>, &lt;strong>v2&lt;/strong>로 볼 수 있다.&lt;/p>
&lt;p>이러한 충돌 문제를 해결하려면, 충돌을 발견하고 자동으로 해결해 낼 버저닝 시스템이 필요하다.&lt;/p>
&lt;p>&lt;strong>백터 시계&lt;/strong>(vector clock)는 &lt;strong>&lt;code>[서버, 버전]&lt;/code>의 순서 쌍을 데이터에 매단 것&lt;/strong>으로 충돌 문제를 푸는데 보편적으로 사용된다.&lt;/p>
&lt;ul>
&lt;li>어떤 버전이 선행 버전인지, 후행 버전인지, 충돌이 있는지 판별하는 데 쓰인다.&lt;/li>
&lt;/ul>
&lt;p>데이터 D를 서버 &lt;strong>Si&lt;/strong>에 기록하려면 아래 작업 가운데 하나를 수행해야한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>[Si, Vi]&lt;/code>가 있으면 &lt;code>Vi&lt;/code>를 증가시킨다.&lt;/li>
&lt;li>그렇지 않다면 새 항목 &lt;code>[Si, 1]&lt;/code>을 만든다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_6.png"
width="717"
height="798"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_6_hu4d508b5e0485ac8ed5a6f6afc4aa05b9_112910_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_6_hu4d508b5e0485ac8ed5a6f6afc4aa05b9_112910_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="백터 시계"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;ol>
&lt;li>클라이언트가 &lt;code>D1&lt;/code>을 시스템에 기록한다.
&lt;ul>
&lt;li>처리한 서버는 &lt;code>Sx&lt;/code>이므로 백터 시계는 &lt;code>D1[Sx, 1]&lt;/code>으로 변한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다른 클라이언트가 &lt;code>D1&lt;/code>을 읽고 &lt;code>D2&lt;/code>로 업데이트한 다음 기록한다.
&lt;ul>
&lt;li>&lt;code>D2&lt;/code>는 &lt;code>D1&lt;/code>의 변경이므로 덮어쓴다.&lt;/li>
&lt;li>&lt;code>Sx&lt;/code>가 처리했으므로 벡터 시계를 &lt;code>D2[Sx, 2]&lt;/code>로 변경한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다른 클라이언트가 &lt;code>D2&lt;/code>를 읽어 &lt;code>D3&lt;/code>로 갱신한 다음 기록한다.
&lt;ul>
&lt;li>&lt;code>Sy&lt;/code>가 처리했으므로 백터 시계 상태는 &lt;code>D3([Sx, 2], [Sy, 1])&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>또 다른 클라이언트가 &lt;code>D2&lt;/code>를 읽고 &lt;code>D4&lt;/code>로 갱신한 후 기록한다.
&lt;ul>
&lt;li>&lt;code>Sz&lt;/code>가 처리했으므로 백터 시계 상태는 &lt;code>D4([Sx, 2], [Sz, 1])&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>어떤 클라이언트가 D3과 D4를 읽으면 데이터 간 충돌이 있다는 것을 알게 되므로, 클라이언트가 해소한 후 서버에 기록한다.
&lt;ul>
&lt;li>&lt;code>Sx&lt;/code>가 처리했으므로 백터 시계는 &lt;code>D5([Sx, 3], [Sy, 1], [Sz, 1])&lt;/code>로 바뀐다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>벡터 시계를 이용하면 버전 Y에 포함된 모든 구성 요소의 값이 X에 포함된 모든 구성요소 값보다 같거나 큰지만 확인하면 어떤 버전 X가 버전 Y의 이전 버전인지 쉽게 판단할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>D([s0, 1], [s1, 1])&lt;/code>은 &lt;code>D([s0, 1], [s1, 2])&lt;/code>보다 이전 버전이다.(충돌 X)&lt;/li>
&lt;/ul>
&lt;p>어떤 버전 X와 Y 사이에 충돌이 있는지 보려면 &lt;strong>Y의 벡터 시계 구성 요소 가운데 X의 벡터 시계 동일 서버 구성요소보다 작은 값을 갖는 것이 있는지 확인&lt;/strong>한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>D([s0, 1], [s1, 2])&lt;/code>, &lt;code>D([s0, 2], [s1, 1])&lt;/code>는 서로 충돌한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>벡터 시계를 통해 충돌 감지하고 해소하는 방법에는 두 가지 단점이 있다.&lt;/p>
&lt;ul>
&lt;li>충돌 감지 및 해소 로직이 클라이언트에 들어가야 하므로, 클라이언트 구현이 복잡해진다.&lt;/li>
&lt;li>&lt;code>[서버: 버전]&lt;/code>의 순서쌍 개수가 굉장히 빨리 늘어난다.
&lt;ul>
&lt;li>순서쌍 개수에 임계치를 설정하고, 임계치 이상으로 길이가 길어지면 오래된 순서쌍을 백터 시계에서 제거한다.&lt;/li>
&lt;li>버전 간 선후 관계가 정확하게 결정될 수 없으므로 충돌 해소 과정의 효율성이 낮아질 수 있다.&lt;/li>
&lt;li>실제 서비스에서 그런 문제는 거의 발생하지 않으므로, 대부분 기업에서 괜찮다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="장애-처리">장애 처리&lt;/h4>
&lt;p>대규모 시스템에서 장애는 아주 흔하게 벌어지므로 장애를 어떻게 처리할 것이냐 하는 것은 굉장히 중요한 문제이다.&lt;/p>
&lt;h4 id="장애-감지">장애 감지&lt;/h4>
&lt;p>분산 시스템에서는 서버 A에 문제가 생겼을 때 바로 장애를 처리하지 않고, 보통 두 대 이상의 서버가 똑같이 서버 A에 대해 장애를 보고해야 해당 서버에 실제로 장애가 발생했다고 간주한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_7.png"
width="838"
height="636"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_7_hu135f183e800718526af99039ce9e186b_156879_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_7_hu135f183e800718526af99039ce9e186b_156879_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="멀티캐스팅 채널 구축"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>모든 노드 사이에 멀티캐스팅 채널을 구축하는 것이 서버 장애를 감지하는 손쉬운 방법이나, 이 방법은 서버가 많을 때 비효율적이다.&lt;/p>
&lt;p>따라서 &lt;strong>가십 프로토콜&lt;/strong>(gossip protocol) 같은 분산형 장애 감지 솔루션을 채택하는 편이 보다 효율적이다.&lt;/p>
&lt;ul>
&lt;li>각 노드는 맴버십 목록을 유지한다.
&lt;ul>
&lt;li>맴버십 목록: 각 맴버 ID와 그 박동 카운터(heartbeat counter) 쌍의 목록&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>각 노드는 주기적으로 자신의 박동 카운터를 증가시킨다.&lt;/li>
&lt;li>각 노드는 무작위로 선정된 노드들에게 주기적으로 자기 박동 카운터 목록을 보낸다.&lt;/li>
&lt;li>박동 카운터 목록을 받은 노드는 맴버십 목록을 최신 값으로 갱신한다.&lt;/li>
&lt;li>어떤 맴버의 박동 카운터 값이 지정된 시간 동안 갱신되지 않으면 해당 멤버는 장애 상태인 것으로 간주한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_8.png"
width="839"
height="382"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_8_hu90da88e3e0d0b1a6937865c76380943d_88593_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_8_hu90da88e3e0d0b1a6937865c76380943d_88593_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="가십 프로토콜"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="527px"
>&lt;/p>
&lt;h4 id="일시적-장애-처리">일시적 장애 처리&lt;/h4>
&lt;p>장애를 감지한 시스템은 가용성을 보장하기 위해 필요한 조치를 해야한다.&lt;/p>
&lt;ul>
&lt;li>엄격한 정족수 접근법은 읽기와 쓰기 연산을 금지한다.&lt;/li>
&lt;li>느슨한 정족수 접근법은 쓰기 연산을 수행할 W개의 건강한 서버와 읽기 연산을 수행할 R개의 건강한 서버를 해시 링에서 고른다.(장애 서버는 무시)&lt;/li>
&lt;li>장애 상태인 서버로 가는 요청은 다른 서버가 잠시 맡아 처리한다.&lt;/li>
&lt;li>그동안 발생한 변경 사항은 장애 서버가 복구 되었을 때 일괄 반영하여 데이터 일관성을 보존한다.
&lt;ul>
&lt;li>임시로 쓰기 연산을 처리한 서버에는 그에 관한 단서를 남겨둔다.&lt;/li>
&lt;li>단서 후 임시 위탁(hinted handoff)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_9.png"
width="834"
height="718"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_9_hu115bfa1d5fe40c44de379ba88e53d6c2_127770_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_9_hu115bfa1d5fe40c44de379ba88e53d6c2_127770_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;/p>
&lt;p>장애 상태인 s2에 대한 읽기 및 쓰기 연산은 일시적으로 s3가 처리하며, s2가 복구되면 s3는 갱신된 데이터를 s2로 인계한다.&lt;/p>
&lt;h4 id="영구-장애-처리">영구 장애 처리&lt;/h4>
&lt;p>영구적인 노드의 장애 상태는 반-엔트로피(anti-entropy) 프로토콜을 구현하여 사본들을 동기화한다.&lt;/p>
&lt;p>반-엔트로피 프로토콜은 &lt;strong>사본들을 비교하여 최신 버전으로 갱신하는 과정을 포함&lt;/strong>한다.&lt;/p>
&lt;p>사본 간의 일관성이 망가진 상태를 탐지하고 전송 데이터의 양을 줄이기 위해서 머클(Merkle) 트리를 사용한다.&lt;/p>
&lt;blockquote>
&lt;p>머클 트리?&lt;br>
해시 트리라고 불리는 머클 트리는 각 노드에 그 자식 노드들의 보관된 값의 해시(자식 노드가 leaf인 경우) 또는 자식 노드들의 레이블로부터 계산된 해시 값을 레이블로 붙여두는 트리&lt;/p>
&lt;/blockquote>
&lt;p>해시 트리를 사용하면 &lt;strong>대규모 자료 구조의 내용을 효과적이면서도 보안상 안전한 방법으로 검증&lt;/strong>할 수 있다.&lt;/p>
&lt;p>&lt;strong>1 단계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_10.png"
width="844"
height="330"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_10_hu458e95c99f7dfcfac03b6157ee8c6e5b_44753_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_10_hu458e95c99f7dfcfac03b6157ee8c6e5b_44753_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="613px"
>&lt;/p>
&lt;p>키 공간을 버킷으로 나눈다.&lt;/p>
&lt;p>&lt;strong>2 단계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_11.png"
width="842"
height="182"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_11_hu5646976f70d14d2033d017e53694f064_41493_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_11_hu5646976f70d14d2033d017e53694f064_41493_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="462"
data-flex-basis="1110px"
>&lt;/p>
&lt;p>버킷에 포함된 각각의 키에 균등 분포 해시 함수를 적용하여 해시 값을 계산한다.&lt;/p>
&lt;p>&lt;strong>3 단계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_12.png"
width="839"
height="260"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_12_hu38a58b95ad281add1c37ca9db00d3b58_73545_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_12_hu38a58b95ad281add1c37ca9db00d3b58_73545_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="322"
data-flex-basis="774px"
>&lt;/p>
&lt;p>버킷 별로 해시값을 계산한 후, 해당 해시 값을 레이블로 갖는 노드를 만든다.&lt;/p>
&lt;p>&lt;strong>4 단계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_13.png"
width="840"
height="445"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_13_hu8894cdbe47f2eb2880a4148ac1861de4_101648_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_13_hu8894cdbe47f2eb2880a4148ac1861de4_101648_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;p>자식 노드의 레이블로부터 새로운 해시값을 계산하여, 이진 트리를 상향식으로 구성해 나간다.&lt;/p>
&lt;hr>
&lt;p>두 머클 트리의 비교는 루트 노드의 해시값을 비교하는 것으로 시작하며, 다른 데이터를 갖는 버킷을 찾을 경우 그 버킷들만 동기화한다.&lt;/p>
&lt;p>머클 트리를 사용하면 동기화해야 하는 데이터 양은 실제로 존재하는 차이의 크기에 비례할 뿐, 두 서버에 보관된 데이터의 총량과는 무관해진다.&lt;/p>
&lt;ul>
&lt;li>실제로 쓰이는 시스템의 경우 버킷 하나의 크기가 꽤 크다.&lt;/li>
&lt;li>10억(1B) 개의 키를 백만(1M) 개의 버킷으로 관리하면, 하나의 버킷은 1,000개 키를 관리한다.&lt;/li>
&lt;/ul>
&lt;h4 id="데이터-센터-장애-처리">데이터 센터 장애 처리&lt;/h4>
&lt;p>데이터 센터 장애는 정전, 네트워크 장애, 자연재해 등 다양한 이유로 발생할 수 있다.&lt;/p>
&lt;p>데이터 센터의 장애에 대응할 수 있는 시스템을 만드려면 데이터를 여러 데이터 센터에 다중화하는 것이 중요하다.&lt;/p>
&lt;h3 id="시스템-아키텍처-다이어그램">시스템 아키텍처 다이어그램&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_14.png"
width="842"
height="525"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_14_hu3a1f1cde060e244af1e3932a5858e642_94830_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_14_hu3a1f1cde060e244af1e3932a5858e642_94830_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;ul>
&lt;li>클라이언트는 키-값 저장소가 제공하는 두 가지 단순한 API, &lt;code>get(key)&lt;/code>, &lt;code>put(key, value)&lt;/code>와 통신한다.&lt;/li>
&lt;li>중재자는 클라이언트에게 키-값 저장소에 대한 프락시 역할을 하는 노드다.&lt;/li>
&lt;li>노드는 안정 해시의 해시 링 위에 분포한다.&lt;/li>
&lt;li>노드를 자동으로 추가 또는 삭제할 수 있도록, 시스템은 완전히 분산된다.&lt;/li>
&lt;li>데이터는 여러 노드에 다중화된다.&lt;/li>
&lt;li>모든 노드가 같은 책임을 지므로, SPOF(Single Point of Failure)는 존재하지 않는다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_15.png"
width="830"
height="656"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_15_hud90111428b56169725aae5ee0bdfc804_100802_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_15_hud90111428b56169725aae5ee0bdfc804_100802_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>완전히 분산된 설계를 채택하였으므로 모든 노드는 제시된 기능을 전부 지원해야한다.&lt;/p>
&lt;h3 id="쓰기-경로">쓰기 경로&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_16.png"
width="845"
height="458"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_16_hu216694585a97b0bfbb508eaee3fd8e8a_77802_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_16_hu216694585a97b0bfbb508eaee3fd8e8a_77802_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="카산드라의 사례"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;ol>
&lt;li>쓰기 요청이 커밋 로그 파일에 기록된다.&lt;/li>
&lt;li>데이터가 메모리 캐시에 기록된다.&lt;/li>
&lt;li>메모리 캐시가 가득 차거나 사전에 정의된 임계치에 도달하면 데이터는 디스크에 있는 SSTable에 기록된다.
&lt;ul>
&lt;li>SSTable: Sorted-String Table의 약어로 &amp;lt;키, 값&amp;gt; 의 순서쌍을 정렬된 리스트로 관리하는 테이블이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="읽기-경로">읽기 경로&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_17.png"
width="845"
height="446"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_17_huaac619f90ef719991892748c739fd616_71124_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_17_huaac619f90ef719991892748c739fd616_71124_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>읽기 요청을 받은 노드는 데이터가 메모리 캐시에 있는지부터 살핀 후 데이터를 클라이언트에게 반환한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_18.png"
width="843"
height="425"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_18_hub84a0c909dfc6b10b41bdf7efd5bb775_89775_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_18_hub84a0c909dfc6b10b41bdf7efd5bb775_89775_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;p>데이터가 메모리에 없는 경우 디스크에서 가져온다.&lt;/p>
&lt;p>어느 SSTable에 찾는 키가 있는지 효율적으로 찾기 위해 블룸 필터(Bloom filter)가 흔히 사용된다.&lt;/p>
&lt;ol>
&lt;li>데이터가 메모리에 있는지 검사하고 있다면 반환한다.&lt;/li>
&lt;li>데이터가 메모리에 없으므로 블룸 필터를 검사한다.&lt;/li>
&lt;li>블룸 필터를 통해 어떤 SSTable에 키가 보관되어 있는지 알아낸다.&lt;/li>
&lt;li>SSTable에서 데이터를 가져온다.&lt;/li>
&lt;li>해당 데이터를 클라이언트에게 반환한다.&lt;/li>
&lt;/ol>
&lt;h2 id="요약">요약&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>목표/문제&lt;/th>
&lt;th>기술&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>대규모 데이터 저장&lt;/td>
&lt;td>안정 해시를 사용해 서버들에 부하 분산&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>읽기 연산에 대한 높은 가용성 보장&lt;/td>
&lt;td>데이터를 여러 데이터센터에 다중화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>쓰기 연산에 대한 높은 가용성 보장&lt;/td>
&lt;td>버저닝 및 백터 시계를 사용한 충돌 해소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 파티션&lt;/td>
&lt;td>안정 해시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>점진적 규모 확장성&lt;/td>
&lt;td>안정 해시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다양성(heterogeneity)&lt;/td>
&lt;td>안정 해시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>조절 가능한 데이터 일관성&lt;/td>
&lt;td>정족수 합의(quorum consensus)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>일시적 장애 처리&lt;/td>
&lt;td>느슨한 정족수 프로토콜(sloppy quorum)과 단서 후 임시 위탁(hinted handoff)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>영구적 장애 처리&lt;/td>
&lt;td>머클 트리(Merkle tree)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 센터 장애 대응&lt;/td>
&lt;td>여러 데이터 센터에 걸친 데이터 다중화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>5. 안정 해시 설계</title><link>https://codemario318.github.io/post/system-design-interview/5/</link><pubDate>Thu, 23 May 2024 12:04:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/5/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/cover.png" alt="Featured image of post 5. 안정 해시 설계" />&lt;p>&lt;strong>수평적 규모 확장성&lt;/strong>을 달성하기 위해서는 요청 또는 데이터를 서버에 &lt;strong>균등하게 나누는 것&lt;/strong>이 중요하다.&lt;/p>
&lt;p>&lt;strong>안정 해시&lt;/strong>는 이 목표를 달성하기 위해 보편적으로 사용하는 기술이다.&lt;/p>
&lt;h2 id="해시-키-재배치rehash-문제">해시 키 재배치(rehash) 문제&lt;/h2>
&lt;p>N개의 캐시 서버가 있을 때, 부하를 균등하게 나누는 보편적 방법은 해시 함수를 사용하는 것이다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">serverIndex = hash(key) % N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>총 4대의 서버를 사용한다면, 주어진 각각의 키에 대해 아래와 같이 계산될 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키&lt;/th>
&lt;th>해시&lt;/th>
&lt;th>해시 % 4(서버 인덱스)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key0&lt;/td>
&lt;td>18358617&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key1&lt;/td>
&lt;td>26143584&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key2&lt;/td>
&lt;td>18131146&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key3&lt;/td>
&lt;td>35863496&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key4&lt;/td>
&lt;td>34085809&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key5&lt;/td>
&lt;td>27581703&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key6&lt;/td>
&lt;td>38164978&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key7&lt;/td>
&lt;td>22530351&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>키 값을 해싱한 값에 나머지 연산을 하여 저장될 서버가 결정된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img.png"
width="597"
height="323"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_hu8ecb82b93ef83548a97acf28dacc70e3_47080_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_hu8ecb82b93ef83548a97acf28dacc70e3_47080_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>이 방식은 &lt;strong>서버 풀의 크기가 고정되어 있을 때&lt;/strong>, &lt;strong>데이터 분포가 균등할 때&lt;/strong> 잘 동작한다.&lt;/p>
&lt;p>하지만 서버가 추가되거나, 기존 서버가 삭제되면 나머지 연산 결과 값이 변하기 때문에 문제가 발생한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키&lt;/th>
&lt;th>해시&lt;/th>
&lt;th>해시 % 3(서버 인덱스)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key0&lt;/td>
&lt;td>18358617&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key1&lt;/td>
&lt;td>26143584&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key2&lt;/td>
&lt;td>18131146&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key3&lt;/td>
&lt;td>35863496&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key4&lt;/td>
&lt;td>34085809&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key5&lt;/td>
&lt;td>27581703&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key6&lt;/td>
&lt;td>38164978&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key7&lt;/td>
&lt;td>22530351&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>따라서 아래와 같은 형태로 키의 분포가 바뀐다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_1.png"
width="595"
height="375"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_1_hu221148814a934c0ed66cfef734ebb8e4_56907_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_1_hu221148814a934c0ed66cfef734ebb8e4_56907_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>장애가 발생한 1번 서버에 보관되어 있는 키 뿐만 아닌 대부분의 키가 재분배되어, 대부분 캐시 클라이언트가 데이터가 없는 서버에 접속하게된다.&lt;/p>
&lt;p>이로 인해 대규모 캐시 미스가 발생하게되는데, &lt;strong>안정 해시&lt;/strong>는 이러한 문제를 효과적으로 해결하는 방식이다.&lt;/p>
&lt;h2 id="안정-해시">안정 해시&lt;/h2>
&lt;p>안정 해시는 &lt;strong>해시 테이블 크기가 조정될 때 평균적으로 &lt;code>k/n&lt;/code>개의 키만 재비치하는 해시 기술&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>k&lt;/code>: 키의 개수&lt;/li>
&lt;li>&lt;code>n&lt;/code>: 슬롯의 개수&lt;/li>
&lt;/ul>
&lt;p>이와는 달리 대부분의 전통적인 해시 테이블은 슬롯의 수가 바뀌면 거의 대부분 키를 재배치한다.&lt;/p>
&lt;h3 id="해시-공간과-해시-링">해시 공간과 해시 링&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>SHA-1&lt;/strong> 해시함수를 사용하며, 출력 값의 범위는 &lt;code>x0, x1 ... xn&lt;/code>이라고 가정한다.&lt;/li>
&lt;li>&lt;strong>SHA-1&lt;/strong>의 해시 공간(hash space) 범위는 &lt;strong>0 부터 &lt;code>2^160 - 1&lt;/code>&lt;/strong> 까지라고 알려져 있다.&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;code>x0 = 0&lt;/code>, &lt;code>xn -1 = 2^160 - 1&lt;/code>이며, 두 수 사이의 값을 갖게 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_2.png"
width="239"
height="284"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_2_huf4d0b3acc8d8378f9f6d7202b468ee24_14360_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_2_huf4d0b3acc8d8378f9f6d7202b468ee24_14360_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="201px"
>&lt;/p>
&lt;p>이 해시 공간의 양쪽을 연결하변 해시 링이 만들어진다.&lt;/p>
&lt;h3 id="해시-서버">해시 서버&lt;/h3>
&lt;p>해시 함수 &lt;code>f&lt;/code>를 사용하면 서버(IP, 이름 등)를 링 위의 어딘가에 대응시킬 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_3.png"
width="607"
height="421"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_3_hu0bc48cf4515b95e87de880bf1aab9c60_55336_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_3_hu0bc48cf4515b95e87de880bf1aab9c60_55336_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;h3 id="해시-키">해시 키&lt;/h3>
&lt;blockquote>
&lt;p>안정 해시에서 사용되는 해시 함수는 전통적인 해시 키 방식에서 언급된 방식과 다르며, 만들어질 수 있는 모든 해시 공간 &lt;code>x0 ... xn&lt;/code>을 연결한 형태이므로 나머지 연산을 사용하지 않는다.&lt;/p>
&lt;/blockquote>
&lt;p>캐시할 키 또한 서버와 함께 해시 링 위의 어느 지점에 배치할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_4.png"
width="606"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_4_hu2fcefd9766a218d8cface53baa2bca15_61260_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_4_hu2fcefd9766a218d8cface53baa2bca15_61260_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;h3 id="서버-조회">서버 조회&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_5.png"
width="606"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_5_hu2fcefd9766a218d8cface53baa2bca15_61260_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_5_hu2fcefd9766a218d8cface53baa2bca15_61260_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>어떤 키가 저장되는 서버는 &lt;strong>해당 키의 위치로부터 시계 방향으로 링을 탐색해 나가면서 만나는 첫번 째 서버&lt;/strong>이다.&lt;/p>
&lt;p>따라서 &lt;strong>k0&lt;/strong>는 &lt;strong>s0&lt;/strong> 에 저장된다.&lt;/p>
&lt;h3 id="서버-추가">서버 추가&lt;/h3>
&lt;p>키가 저장되는 서버가 키의 위치로부터 시계 방향으로 링을 돌면서 만나는 첫 서버이므로, 서버를 추가하더라도 키 가운데 일부만 재배치하면 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_6.png"
width="615"
height="465"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_6_huc8545933ab2d8774b07636da6ebf7ea2_77279_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_6_huc8545933ab2d8774b07636da6ebf7ea2_77279_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>위 그림처럼 s4가 추가되면, k0만 재배치하면 되며, 나머지 키들은 같은 서버에 남게된다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>k0&lt;/strong>가 만나는 첫 서버가 &lt;strong>s4&lt;/strong>로 바뀌기 때문&lt;/li>
&lt;/ul>
&lt;h3 id="서버-제거">서버 제거&lt;/h3>
&lt;p>마찬가지로 한 서버가 제거되면 &lt;strong>키 일부만 재배치&lt;/strong>된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_7.png"
width="609"
height="450"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_7_hu76c16055e4220cf0e1509508dbdc7e60_68728_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_7_hu76c16055e4220cf0e1509508dbdc7e60_68728_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>s1&lt;/strong>이 삭제되었을 때 &lt;strong>k1&lt;/strong>의 첫 서버만 &lt;strong>s2&lt;/strong>로 바뀌므로 &lt;strong>k1&lt;/strong>만 &lt;strong>s2&lt;/strong>로 재배치된다.&lt;/li>
&lt;/ul>
&lt;h3 id="기존-구현법의-두-가지-문제">기존 구현법의 두 가지 문제&lt;/h3>
&lt;p>안정 해시 알고리즘은 MIT에서 처음 제안되었는데, 기본 절차는 아래와 같다.&lt;/p>
&lt;ol>
&lt;li>서버와 키를 &lt;strong>균등 분포 해시 함수&lt;/strong>를 사용해 해시 링에 배치한다.&lt;/li>
&lt;li>키의 위치에서 링을 시계방향으로 탐색하다 만나는 최초의 서버가 키가 저장될 서버이다.&lt;/li>
&lt;/ol>
&lt;p>안정 해시는 근본적으로 최소한의 추가/삭제에 대해 최소한의 재배치를 고려한다. 따라서 이러한 방식에는 두 가지 문제가 발생한다.&lt;/p>
&lt;p>&lt;strong>파티션 크기 문제&lt;/strong>&lt;/p>
&lt;p>서버가 추가되거나 삭제되는 상황을 감안하면 사용하더라도 파티션의 크기를 균등하게 유지하는 게 불가능하다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_8.png"
width="610"
height="371"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_8_hufb05e65c37497f753e3a366dbfe6320e_67873_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_8_hufb05e65c37497f753e3a366dbfe6320e_67873_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;ul>
&lt;li>파티션의 크기는 시계 방향으로 제일 가까운 서버 사이와의 거리만큼의 해시 공간으로, 서버의 해시 공간이 균등하지 않다.
&lt;ul>
&lt;li>추가 삭제될 때 시계 방향으로 제일 가까운 서버에 키들이 집중된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>키의 균등 분포 문제&lt;/strong>&lt;/p>
&lt;p>균등 분포 해시 함수는 충돌을 최소화하며 입력 키들이 해시 공간 전체에 고르게 분포되어 특정 영역에 물리지 않도록 구현되지만 완전하지는 않다.&lt;/p>
&lt;ul>
&lt;li>데이터의 비균등한 본질:
&lt;ul>
&lt;li>실제 데이터는 해시 함수의 이상적인 균등 분포를 따르지 않을 수 있다.&lt;/li>
&lt;li>특정 패턴이나 값들이 특정 해시 영역에 몰리는 경우가 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>해시 함수의 한계:
&lt;ul>
&lt;li>모든 해시 함수는 완벽한 균등 분포를 보장할 수 없다.&lt;/li>
&lt;li>특히 입력 키의 분포가 고르지 않을 경우, 해시 값의 분포도 고르지 않을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_9.png"
width="611"
height="409"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_9_hu5257857a45f5f8de50581f3a0c6d2841_61763_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_9_hu5257857a45f5f8de50581f3a0c6d2841_61763_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>따라서 키의 균등 분포가 매우 달성하기 어려워 위와 같은 상황이 발생하게된다.&lt;/p>
&lt;p>&lt;strong>+ 실제 서버의 처리 능력 차이&lt;/strong>&lt;/p>
&lt;p>노드(서버)마다 처리 능력이나 저장 용량이 다를 경우, 파티션 크기의 균등성이 실제 부하의 균등성을 의미하지 않을 수 있다.&lt;/p>
&lt;h3 id="가상-노드">가상 노드&lt;/h3>
&lt;p>가상 노드는 &lt;strong>실제 노드 또는 서버를 가리키는 노드&lt;/strong>로서 하나의 서버는 링 위에 여러 개의 가상 노드를 가질 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_10.png"
width="603"
height="458"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_10_hua3bd50f3317f65ef075362e2b74282e1_85776_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_10_hua3bd50f3317f65ef075362e2b74282e1_85776_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;p>서버들의 비슷한 해시 공간을 가질 수 있도록 하는 기법으로 해시 링 위에 실제 서버를 가르키는 가상 노드들을 분포시킨 후 가상 노드에 할당되는 해시 영역을 가상 노드가 가르키는 서버가 처리하도록 한다.&lt;/p>
&lt;ul>
&lt;li>따라서 각 서버는 하나가 아닌 여러 개의 파티션을 관리해야 한다.&lt;/li>
&lt;/ul>
&lt;p>가상 노드의 개수를 늘리면 표준 편차가 작아져 데이터가 고르게 분포되므로, 키위 분포는 점점 더 균등해지지만&lt;/p>
&lt;p>가상 노드 데이터를 저장할 공간이 더 많이 필요해지므로, 시스템 요구사항에 맞도록 가상 노드 개수를 적절히 조정하는 트레이드오프가 필요하다.&lt;/p>
&lt;h3 id="재배치할-키-결정">재배치할 키 결정&lt;/h3>
&lt;p>서버가 추가되거나 제거되면 데이터의 일부는 재배치해야 한다.&lt;/p>
&lt;p>&lt;strong>서버가 추가되었을 때&lt;/strong>&lt;/p>
&lt;p>&lt;strong>s4&lt;/strong>가 추가되었다고 가정하면, 영향을 받는 위는 &lt;strong>s4&lt;/strong> 부터 그 반시계 방향에 있는 &lt;strong>s3&lt;/strong> 까지이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_11.png"
width="611"
height="463"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_11_hu56d8da2926a0ef9a8f4dcf5986502707_77091_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_11_hu56d8da2926a0ef9a8f4dcf5986502707_77091_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>따라서 &lt;strong>s3&lt;/strong> 부터 &lt;strong>s4&lt;/strong> 사이에 있는 키들을 &lt;strong>s4&lt;/strong>로 재배치해야한다.&lt;/p>
&lt;p>&lt;strong>서버가 삭제되었을 때&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_12.png"
width="608"
height="449"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_12_hu33149acfb6f53d9b638ddb2443c387f3_70058_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_12_hu33149acfb6f53d9b638ddb2443c387f3_70058_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;strong>s1&lt;/strong>이 삭제되면 &lt;strong>s1&lt;/strong> 부터 그 반시계 방향에 있는 최초 서버 &lt;strong>s0&lt;/strong> 사이에 있는 키들이 &lt;strong>s2&lt;/strong>로 재배치되어야 한다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>안정 해시의 이점은 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.&lt;/li>
&lt;li>데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.&lt;/li>
&lt;li>핫스팟 키 문제를 줄인다.
&lt;ul>
&lt;li>특정한 샤드에 대한 접근이 지나치게 빈번하면 서버 과부화 문제가 생길 수 있는데(유명인사 문제), 데이터를 좀 더 균등하게 분배하므로 문제 발생 가능성을 줄인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>안정해시는 실제로 널리 쓰이는 기술이다.&lt;/p>
&lt;ul>
&lt;li>아마존 다이나모 데이터베이스의 파티셔닝 관련 컴포넌트&lt;/li>
&lt;li>아파치 카산드라 클러스터에서 데이터 파티셔닝&lt;/li>
&lt;li>디스코드 채팅 어플리케이션&lt;/li>
&lt;li>아카마이 CDN&lt;/li>
&lt;li>매그레프 네트워크 부하 분산기 등&lt;/li>
&lt;/ul></description></item><item><title>4. 처리율 제한 장치의 설계</title><link>https://codemario318.github.io/post/system-design-interview/4/</link><pubDate>Wed, 15 May 2024 12:22:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/4/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/cover.png" alt="Featured image of post 4. 처리율 제한 장치의 설계" />&lt;h2 id="처리율-제한-장치rate-limiter">처리율 제한 장치(Rate limiter)?&lt;/h2>
&lt;p>클라이언트 또는 서비스가 보내는 트래픽의 처리율을 제어하기 위한 장치이다.&lt;/p>
&lt;p>HTTP의 경우 &lt;strong>특정 기간 내에 전송되는 클라이언트의 요청 횟수를 제한&lt;/strong>한다.&lt;/p>
&lt;ul>
&lt;li>사용자는 초당 2회 이상 새 글을 올릴 수 없다.&lt;/li>
&lt;li>같은 IP 주소로는 하루 10개 이상의 계정을 생성할 수 없다.&lt;/li>
&lt;li>같은 디바이스로는 주당 5회 이상 리워드(reward)를 요청할 수 없다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;p>대형 IT 기업들이 공개한 거의 대부분의 API는 어떤 형태로든 처리율 제한 장치를 갖고 있으며, 아래와 같은 장점이 있다.&lt;/p>
&lt;ul>
&lt;li>DoS(Denial of Service) 공격에 의한 자원 고갈을 방지할 수 있다.&lt;/li>
&lt;li>자원 절약
&lt;ul>
&lt;li>추가 요청에 대한 처리율을 제한하면 서버를 많이 두지 않아도된다.&lt;/li>
&lt;li>우선순위가 높은 API에 더 많은 자원을 할당할 수 있다.&lt;/li>
&lt;li>3rd 파티 API를 사용하는 경우 요청 횟수만큼 과금이 된다면, 사용자가 처리율을 제한하여 비용을 절약할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서버 과부하 방지
&lt;ul>
&lt;li>봇에서 오는 트래픽이나 사용자의 잘못된 이용 패턴으로 유발된 트래픽을 걸러내는 데 처리율 제한 장치를 활용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;p>처리율 제한 장치를 구현하는 데는 여러 가지 알고리즘을 고려할 수 있으며, 각각 고유한 장단점을 가지고 있다.&lt;/p>
&lt;p>따라서 면접관과 서통하며 어떤 제한 장치를 구현해야 하는 지 분명하게 파악해야한다.&lt;/p>
&lt;ul>
&lt;li>Q. 클라이언트 측 제한장치? 서버 측 제한장치?
&lt;ul>
&lt;li>A. 서버측 API를 위한 제한 장치&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 어떠한 기준으로? IP 주소 or 사용자 ID 등
&lt;ul>
&lt;li>A. 다양한 형태의 제어 규칙을 정의할 수 있도록 하는 유연한 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 시스템의 규모는? 스타트업 or 대기업
&lt;ul>
&lt;li>A. 대규모 요청 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 분산 환경에서 동작해야 하는가?
&lt;ul>
&lt;li>A. 예&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 처리율 제한 장치가 독립적인 서비스인가? 코드에 포함할 수 있는가?
&lt;ul>
&lt;li>A. 알아서&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 처리율 제한에 막힌 상황에 사용자에게 알려하하는가?
&lt;ul>
&lt;li>A. 예&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="요구사항">요구사항&lt;/h3>
&lt;p>질문을 통해 파악한 시스템의 요구사항은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>설정된 처리율을 초과하는 요청은 정확하게 제한&lt;/li>
&lt;li>낮은 응답시간
&lt;ul>
&lt;li>HTTP 응답시간에 나쁜 영향을 주어서는 곤란하다. (대규모 처리 허용 등)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가능한 적은 메모리&lt;/li>
&lt;li>분산형 처리율 제한
&lt;ul>
&lt;li>하나의 처리율 제한 장치를 여러 서버나 프로세스에서 공유할 수 있어야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>예외 처리
&lt;ul>
&lt;li>요청 제한시 사용자에게 분명하게 보여주어야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>높은 결함 감내성
&lt;ul>
&lt;li>제한 장치에 장애가 생기더라도 전체 시스템에 영향을 주어서는 안된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계-제시-및-동의-구하기">2단계 개략적 설계 제시 및 동의 구하기&lt;/h2>
&lt;p>기본적인 &lt;strong>클라이언트-서버 통신 모델&lt;/strong>을 사용하여 문제를 간단하게 만든다.&lt;/p>
&lt;h3 id="어디에-둘-것인가">어디에 둘 것인가?&lt;/h3>
&lt;p>기본적인 &lt;strong>클라이언트-서버 통신 모델&lt;/strong>에서는 처리율 제한 장치는 클라이언트, 서버 측에 둘 수 있다.&lt;/p>
&lt;p>&lt;strong>클라이언트&lt;/strong>&lt;/p>
&lt;p>클라이언트 요청은 쉽게 위변조가 가능하므로 처리율 제한을 안정적으로 걸 수 있는 장소가 아니다.&lt;/p>
&lt;ul>
&lt;li>모든 클라이언트의 구현을 통제하는 것도 어려울 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>서버&lt;/strong>&lt;/p>
&lt;p>큰 틀에서 처리율 제한 장치를 API 서버와 함께 두는 방식, 미들웨어로 만드는 방식 2가지를 고려할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img.png"
width="560"
height="141"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_hu95f96bf133f868fe94b526818cbf6220_35669_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_hu95f96bf133f868fe94b526818cbf6220_35669_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="API 서버에 두는 방식"
class="gallery-image"
data-flex-grow="397"
data-flex-basis="953px"
>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_2.png"
width="549"
height="218"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_2_hu46848255408feea17de861814d1271d1_42946_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_2_hu46848255408feea17de861814d1271d1_42946_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="미들웨어 동작 예시"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="604px"
>&lt;/p>
&lt;p>처리율 제한 장치를 미들웨어로 만들어 API 서버로 가는 요청을 통제하는 방식은 제한된 요청을 API 서버로 보내지 않고, HTTP 상태코드 429를 반환한다.&lt;/p>
&lt;p>마이크로서비스의 경우 보통 API 게이트웨이라고 불리는 컴포넌트에 구현된다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>API 게이트웨이?&lt;/strong>&lt;br>
처리율 제한, SSL 종단 사용자 인증, IP 허용 목록 관리등을 지원하는 완전 위탁 관리형 서비스&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>처리율 제한 장치는 회사의 현재 기술 스택이나 엔지니어링 인력, 우선순위, 목표에 따라 어디에 둘 지 결정한다.&lt;/p>
&lt;ul>
&lt;li>프로그래밍 언어, 캐시 서비스 등 현재 사용하고 있는 기술 스택을 점검한다.&lt;/li>
&lt;li>사업에 필요에 맞는 처리율 제한 알고리즘을 찾는다.
&lt;ul>
&lt;li>직접 구현시 자유롭게 선택 가능하지만, 서드파티 게이트웨이를 사용하기로 했다면 제한될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>설계가 마이크로서비스에 기반하고 있다면, 사용자 인증이나 IP 화이트리스트 관리 등을 처리하기 위해 API 게이트웨이를 이미 포함했다면 처리율 제한 기능 또한 포함시켜야 할 수 있다.&lt;/li>
&lt;li>직접 만드는 데는 시간이 들기 때문에 인력이 충분하지 않다면 상용 API 게이트웨이를 쓰는 것이 바람직하다.&lt;/li>
&lt;/ul>
&lt;h3 id="처리율-제한-알고리즘">처리율 제한 알고리즘&lt;/h3>
&lt;p>처리율 제한을 실현하는 알고리즘은 여러가지이며, 각기 다른 장단점을 가지고 있다.&lt;/p>
&lt;ul>
&lt;li>토큰 버킷, 누출 버킷, 고정 윈도 카운터, 이동 윈도 로그, 이동 윈도 카운터 등&lt;/li>
&lt;/ul>
&lt;h4 id="토큰-버킷-알고리즘">토큰 버킷 알고리즘&lt;/h4>
&lt;p>토큰 버킷 알고리즘은 처리율 제한에 폭 넓게 이용되고 있다.&lt;/p>
&lt;p>간단하고, 알고리즘에 대한 이해도가 높아 인터넷 기업들이 보편적으로 사용하고 있다.&lt;/p>
&lt;ul>
&lt;li>아마존, 스트라이프 등&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_4.png"
width="529"
height="492"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_4_hud272ad2e7ce6d0192e191aa981cc5e7d_63798_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_4_hud272ad2e7ce6d0192e191aa981cc5e7d_63798_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>&lt;/p>
&lt;p>&lt;strong>토큰 버킷&lt;/strong>은 지정된 용량을 갖는 컨테이너로, 사전 설정된 양의 토큰이 주기적으로 채워진다.&lt;/p>
&lt;p>토큰이 꽉 찬 버킷에는 더 이상의 토큰은 추가되지 않고 버려진다.&lt;/p>
&lt;ul>
&lt;li>각 요청은 처리될 때마다 하나의 토큰을 사용한다.&lt;/li>
&lt;li>요청이 도착하면 버킷에 충분한 토큰이 있는지 검사하게 된다.&lt;/li>
&lt;li>토큰이 있는 경우 버킷에서 토큰 하나를 꺼낸 후 요청을 시스템에 전달한다.&lt;/li>
&lt;li>없는 경우 버려진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_5.png"
width="469"
height="547"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_5_hu470c561bcff0a77f741d71f0c2c45165_78035_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_5_hu470c561bcff0a77f741d71f0c2c45165_78035_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="버킷 크기 = 4, 공급률 = 분당 4"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;p>토큰 버킷 알고리즘은 2가지 인자를 받는다.&lt;/p>
&lt;ul>
&lt;li>버킷 크기: 버킷에 담을 수 있는 토큰의 최대 개수&lt;/li>
&lt;li>토큰 공급률: 초당 몇개의 토큰이 버킷에 공급되는가&lt;/li>
&lt;/ul>
&lt;p>적절한 버킷의 개수는 공급 제한 규칙에 따라 결정된다.&lt;/p>
&lt;ul>
&lt;li>통상적으로, API 엔드포인트마다 벌도의 버킷을 둔다.
&lt;ul>
&lt;li>포스팅 1번, 친구 150명 추가 가능, 좋아요 5번 이라면 사용자마다 3개 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IP 주소별 처리율 제한 필요시 IP 주소마다 버킷을 하나씩 할당해야 한다.&lt;/li>
&lt;li>시스템의 처리율을 초당 10,000개 요청으로 제한하고 싶다면, 모든 요청이 하나의 버킷을 공유하도록 한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>구현이 쉽다.&lt;/li>
&lt;li>메모리 사용 측면에서도 효율적이다.&lt;/li>
&lt;li>짧은 시간에 집중되는 트래픽도 처리 가능하다.
&lt;ul>
&lt;li>버킷에 남은 토큰이 있다면 요청은 전달된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>파라미터를 적절하게 튜닝하는 것이 까다롭다.&lt;/li>
&lt;/ul>
&lt;h4 id="누출-버킷-알고리즘">누출 버킷 알고리즘&lt;/h4>
&lt;p>누출 버킷 알고리즘은 토큰 버킷 알고리즘과 비슷하지만 &lt;strong>요청 처리율이 고정되어 있다는 점&lt;/strong>이 다르다.&lt;/p>
&lt;p>보통 FIFO 큐로 구현하며 동작 원리는 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>요청이 도착하면 큐가 가득 차 있는지 본다.
&lt;ul>
&lt;li>빈자리가 있다면 큐에 요청을 추가한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>큐가 가득 차 있는 경우에는 새 요청을 버린다.&lt;/li>
&lt;li>지정된 시간마다 큐에서 요청을 꺼내어 처리한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_6.png"
width="599"
height="221"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_6_hu20c9bad42732607dad0a83639f3502f8_30101_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_6_hu20c9bad42732607dad0a83639f3502f8_30101_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="누출 버킷 알고리즘"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="650px"
>&lt;/p>
&lt;p>누출 버킷 알고리즘은 다음의 두 인자를 사용한다.&lt;/p>
&lt;ul>
&lt;li>버킷 크기: 처리될 항목들이 보관될 큐의 사이즈&lt;/li>
&lt;li>처리율: 지정된 시간당 몇 개의 항목을 처리할지 지정하는 값.(보통 초단위)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>큐의 크기가 제한되어 있어 메모리 사용량 측면에서 효율적이다.&lt;/li>
&lt;li>고정된 처리율을 가지므로 안정된 출력(Stable outflow rate)이 필요한 경우에 적합하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>단시간에 많은 트래픽이 몰리는 경우 큐에는 오래된 요청들이 쌓이고, 그 요청들을 제때 처리 못하면 최신 요청들은 버려진다.&lt;/li>
&lt;li>파라미터를 올바르게 튜닝하기 까다로울 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="고정-윈도-카운터-알고리즘">고정 윈도 카운터 알고리즘&lt;/h4>
&lt;p>고정 윈도 카운터 알고리즘은 다음과 같이 동작한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_7.png"
width="601"
height="355"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_7_huacea6638a786d893354d0e089d7abe1d_35784_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_7_huacea6638a786d893354d0e089d7abe1d_35784_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;ol>
&lt;li>타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙인다.&lt;/li>
&lt;li>요청이 접수될 때마다 이 카운터의 값을 1씩 증가시킨다.&lt;/li>
&lt;li>카운터의 값이 사전에 설정된 임계치에 도달하면 새로운 요청은 새 윈도가 열릴 때 까지 버려진다.&lt;/li>
&lt;/ol>
&lt;p>고정 윈도 카운터 알고리즘의 가장 큰 문제는 윈도의 경계 부근에 순간적으로 많은 트래픽이 집중될 경우 윈도에 할당된 양보다 더 많은 요청이 처리될 수 있다는 점이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_8.png"
width="604"
height="296"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_8_hu06e9b333628f278fe9f5a17c951f72ed_27698_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_8_hu06e9b333628f278fe9f5a17c951f72ed_27698_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="489px"
>&lt;/p>
&lt;p>분당 최대 5개 요청을 허용하는 시스템에서 &lt;code>2:00:00 ~ 2:01:00&lt;/code>, &lt;code>2:01:00 ~ 2:02:00&lt;/code> 윈도우에 각각 5개 요청을 처리하였으나, 윈도우를 30초 옮겨 &lt;code>2:00:30 ~ 2:01:30&lt;/code>를 살펴보면 총 10개의 요청을 처리하게되어 설정된 최대 처리량 5개를 초과하게 된다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>메모리 효율이 좋다.&lt;/li>
&lt;li>이해하기 쉽다.&lt;/li>
&lt;li>윈도가 닫히는 시점에 카운터를 초기화하는 방식은 특정한 트래픽 패턴을 처리하기에 적합하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>윈도 경계 부근에서 일시적으로 많은 트래픽이 몰려드는 경우, 기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 된다.&lt;/li>
&lt;/ul>
&lt;h4 id="이동-윈도-로깅-알고리즘">이동 윈도 로깅 알고리즘&lt;/h4>
&lt;p>고정 윈도 카운터 알고리즘의 문제를 해결한 방식이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_9.png"
width="582"
height="400"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_9_hu98c0a7c61c2865bfd0748184396a4361_43992_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_9_hu98c0a7c61c2865bfd0748184396a4361_43992_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;ul>
&lt;li>요청의 타임 스탬프를 추적한다.
&lt;ul>
&lt;li>보통 레디스의 정렬 집합 같은 캐시에 보관한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>새 요청이 오면 만료된 타임스탬프는 제거한다.
&lt;ul>
&lt;li>타임스탬프 값이 현재 윈도의 시작 지점보다 오래된 타임 스탬프&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>새 요청의 타임스탬프 로그에 추가한다.&lt;/li>
&lt;li>로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달한다. 아닐경우 처리를 거부한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>어느 순간 윈도를 보더라도, 허용되는 요청의 개수는 시스템의 처리율 한도를 넘기지 않는다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>거부된 요청의 타임스탬프도 보관하기 때문에 다량의 메모리를 사용하게된다.&lt;/li>
&lt;/ul>
&lt;h4 id="이동-윈도-카운터-알고리즘">이동 윈도 카운터 알고리즘&lt;/h4>
&lt;p>이동 윈도 카운터 알고리즘은 고정 윈도 카운터 알고리즘과 이동 윈도 로깅 알고리즘을 결합한 것이다.&lt;/p>
&lt;p>&lt;code>현재 1분간의 요청 수 + 직전 1분간의 요청 수 * 이동 윈도와 직전 1분이 겹치는 비율&lt;/code>을 계산하여 현재 윈도에 몇개의 요청이 왔는지를 구한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_10.png"
width="581"
height="343"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_10_hu4227282d9657e7f968e2cd18b876213b_41691_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_10_hu4227282d9657e7f968e2cd18b876213b_41691_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>분당 7개 요청으로 설정되어 있고, 이전 1분동안 5개의 요청이, 그리고 1분 동안 3개의 요청이 왔다면&lt;/p>
&lt;p>&lt;code>3 + 5 * 70%&lt;/code>를 계산하여 현재 6.5개의 요청이 있다고 계산하고, 분당 7개의 요청보다 적으므로 전달된다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>이전 시간대의 평균 처리율에 따라 윈도의 상태를 계산하므로 짧은 시간에 몰리는 트래픽에도 잘 대응한다.&lt;/li>
&lt;li>메모리 효율이 좋다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>직전 시간대에 도착한 요청이 균등하게 분포되어 있다고 가정한 상태에서 추정치를 계산하기 때문에 다소 느슨하다.
&lt;ul>
&lt;li>생각만큼은 심각한 문제는 아니다.&lt;/li>
&lt;li>클라우드플레어가 실시했던 실험에 따르면 40억 개의 요청 가운데 스템의 실제 상태와 맞지 않게 허용되거나 버려진 요청은 0.003%에 불과하였다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="개략적인-아키텍처">개략적인 아키텍처&lt;/h3>
&lt;p>처리율 제한 알고리즘은 얼마나 많은 요청이 접수되었는지를 추적할 수 있는 카운터를 추적 대상별로 두고(사용자 or IP or API 엔드포인트) 이 카운터의 값이 어떤 한도를 넘어서면 도착한 요청을 거부하는 것이다.&lt;/p>
&lt;p>이러한 카운터는 읽기 쓰기 작업이 빈번하고, 빠르게 지워져야 하는 특성으로 인해 빠른데다 시간에 기반한 만료 정책을 지원하는 메모리 캐시가 적절하다.&lt;/p>
&lt;p>대표적으로 레디스가 많이 활용되며 이에 적합한 &lt;code>INCR&lt;/code>, &lt;code>EXPIRE&lt;/code> 명령을 제공한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>INCR&lt;/code>: 메모리에 저당된 카운터의 값을 1만큼 증가시킨다.&lt;/li>
&lt;li>&lt;code>EXPIRE&lt;/code>: 카운터에 타임아웃 값을 설정한다. 시간이 지나면 자동 삭제된다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_11.png"
width="593"
height="260"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_11_hua0ec6a8fedf59bf7e19688bf87bdb91a_52761_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_11_hua0ec6a8fedf59bf7e19688bf87bdb91a_52761_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="개략적인 아키텍처"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="547px"
>&lt;/p>
&lt;ol>
&lt;li>클라이언트가 처리율 제한 미들웨어에게 요청을 보낸다.&lt;/li>
&lt;li>처리율 제한 미들웨어는 레디스의 지정 버킷에서 카운터를 가져와 한도에 도달했는지 검사한다.
&lt;ul>
&lt;li>한도에 도달했다면 요청은 거부됨&lt;/li>
&lt;li>한도에 도달하지 않았다면 API로 요청을 전달하고, 카운터의 값을 증가시켜 레디스에 저장한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="상세-설계">상세 설계&lt;/h2>
&lt;p>개략적 설계만 봐서는 다음과 같은 사항은 알 수가 없다.&lt;/p>
&lt;ul>
&lt;li>처리율 제한 규칙은 어떻게 만들어지고 어디에 저장되는가?&lt;/li>
&lt;li>처리가 제한된 요청들은 어떻게 처리되는가?&lt;/li>
&lt;/ul>
&lt;h3 id="처리율-제한-규칙">처리율 제한 규칙&lt;/h3>
&lt;p>리프트(lyft)는 처리율 제한에 오픈 소스를 사용하고 있는데, 이 컴포넌트를 통해 어떤 처리율 제한 규칙이 사용되고 있는지 살펴볼 수 있다.&lt;/p>
&lt;p>이러한 규칙들은 보통 설정 파일 형태로 디스크에 저장된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">domain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">messaging&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">descriptors&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">message_type&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">Value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">marketing&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rate_limit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">day&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests_per_unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>마케팅 메시지의 최대치를 하루 5개로 제한&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">domain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">auth&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">descriptors&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">auth_type&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">Value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">login&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rate_limit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">minute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests_per_unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>클라이언트가 분당 5회 이상 로그인 할 수 없도록 제한&lt;/li>
&lt;/ul>
&lt;h3 id="처리율-한도-초과-트래픽의-처리">처리율 한도 초과 트래픽의 처리&lt;/h3>
&lt;p>어떤 요청이 한도 제한에 걸리면 HTTP 429 응답을 보내거나, 한도 제한에 걸린 메시지를 나중에 처리하기 위해 큐에 보관할 수도 있다.&lt;/p>
&lt;p>&lt;strong>처리율 제한 장치가 사용하는 HTTP 헤더&lt;/strong>&lt;/p>
&lt;p>클라이언트가 요청이 제한에 관련된 정보들을 HTTP 응답 헤더를 확인하면 알 수 있다.&lt;/p>
&lt;p>처리율 제한 장치는 다음 HTTP 헤더를 클라이언트에 보내 제한에 걸렸음을 알린다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>X-Ratelimit-Remaining&lt;/code>: 윈도 내에 남은 처리 가능 요청 수&lt;/li>
&lt;li>&lt;code>X-Ratelimit-Limit&lt;/code>: 매 윈도마다 클라이언트가 전송할 수 있는 요청의 수&lt;/li>
&lt;li>&lt;code>X-Ratelimit-Retry-After&lt;/code>: 한도 제한에 걸리지 않기 위해 몇초 뒤에 요청을 다시 보내야 하는지&lt;/li>
&lt;/ul>
&lt;p>사용자가 너무 많은 요청을 보내면 &lt;strong>429 too many requests&lt;/strong>오류를 &lt;code>X-Ratelimit-Retry-After&lt;/code> 헤더와 함께 반환하도록 한다.&lt;/p>
&lt;h3 id="상세-설계-1">상세 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_12.png"
width="616"
height="504"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_12_hue300fb2d822881a8aa53d8fa5a83713d_105530_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_12_hue300fb2d822881a8aa53d8fa5a83713d_105530_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;ul>
&lt;li>처리율 제한 규칙은 디스크에 보관한다.
&lt;ul>
&lt;li>작업 프로세스는 수시로 규칙을 읽어 캐시에 저장한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.&lt;/li>
&lt;li>처리율 제한 미들웨어는 제한 규칙을 캐시에서 가져온다. 아울러 카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다.
&lt;ul>
&lt;li>요청이 제한에 걸리지 않은 경우 API 서버로 보낸다.&lt;/li>
&lt;li>처리율 제한에 걸렸다면 에러를 클라이언트에 보낸다.
&lt;ul>
&lt;li>요청은 버리거나 메시지 큐에 보관한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="분산-환경에서의-처리율-제한-장치의-구현">분산 환경에서의 처리율 제한 장치의 구현&lt;/h3>
&lt;p>여러 대의 서버와 병렬 스레드를 지원하려면 &lt;strong>경쟁 조건&lt;/strong>과 &lt;strong>동기화&lt;/strong> 문제를 고려해야 한다.&lt;/p>
&lt;h4 id="경쟁-조건">경쟁 조건&lt;/h4>
&lt;p>처리율 제한 장치는 다음과 같이 동작한다.&lt;/p>
&lt;ol>
&lt;li>레디스에서 카운터의 값을 읽는다.&lt;/li>
&lt;li>카운터의 값이 임계치를 넘는지 본다.&lt;/li>
&lt;li>넘지 않는다면 레디스에 보관된 카운터 값을 1만큼 증가시킨다.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_13.png"
width="602"
height="340"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_13_hu25f5b8ce1e5471668532889a2cb0e3bf_33618_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_13_hu25f5b8ce1e5471668532889a2cb0e3bf_33618_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="424px"
>&lt;/p>
&lt;p>병행성이 심한 환경에서는 위와 같이 보관될 값이 달라질 수 있는 이슈가 존재한다.&lt;/p>
&lt;p>이러한 경쟁 조건 문제를 해결하는 가장 널리 알려진 해결책은 **락(Lock)**이지만, 락은 시스템의 성능을 상당히 떨어뜨린다는 문제가 있다.&lt;/p>
&lt;p>위와 같은 설계의 경우 락 대신 **루아 스크립트(Lua script)**와 **정렬 집합(Sorted set)**이라 불리는 레디스 자료구조를 사용하여 해결할 수 있다.&lt;/p>
&lt;h4 id="동기화-이슈">동기화 이슈&lt;/h4>
&lt;p>수백만 사용자를 지원하려면 한 대의 처리율 제한 장치 서버로는 충분하지 않을 수 있어 처리율 제한 장치 서버를 여러 대 두게 되면 동기화가 필요해진다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_14.png"
width="612"
height="219"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_14_hud5d811b010ac2a69e5217967669d0f69_74199_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_14_hud5d811b010ac2a69e5217967669d0f69_74199_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="279"
data-flex-basis="670px"
>&lt;/p>
&lt;p>웹은 무상태이므로 클라이언트는 다음 요청을 다른 처리율 제한 장치로 보내게 될 수 있다.&lt;/p>
&lt;p>이때 동기화를 하지 않는다면 제한 장치 1은 클라이언트 2에 대해서는 아무것도 모르므로 처리율 제한이 올바르게 적용되지 않을 수 있다.&lt;/p>
&lt;p>이러한 문제를 해결하기 위해 같은 클라이언트로부터의 요청은 항상 같은 처리율 제한 장치로 보내는 &lt;strong>고정 세션&lt;/strong> 방식을 고려할 수 있다.&lt;/p>
&lt;p>하지만 이러한 방식은 확장 불가능, 뻣뻣하다는 단점을 가진다.&lt;/p>
&lt;p>따라서 레디스와 같은 중앙 집중형 데이터 저장소를 사용하여 해결하는 것이 좋다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_15.png"
width="559"
height="252"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_15_hub3172bc6f37be502955916b9482777c8_60583_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_15_hub3172bc6f37be502955916b9482777c8_60583_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;h4 id="성능-최적화">성능 최적화&lt;/h4>
&lt;p>성능 최적화는 시스템 설계 면접의 단골 주제이며, 지금까지 살펴본 설계는 두 가지 지점에서 개선이 가능하다.&lt;/p>
&lt;ul>
&lt;li>여러 데이터센터를 지원하는 문제
&lt;ul>
&lt;li>멀리 떨어진 사용자를 지원하기 위해 지연시간이 증가할 수 밖에 없는데, 대부분의 클라우드 서비스 사업자는 세계 곳곳에 에지 서버를 심어두어 성능을 끌어올린다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>제한 장치 간에 데이터를 동기화할 때 최종 일관성 모델을 사용하는 것&lt;/li>
&lt;/ul>
&lt;h4 id="모니터링">모니터링&lt;/h4>
&lt;p>처리율 제한 장치를 설치한 이후에는 효과적으로 동작하는지 확인하기 위해 데이터를 모을 필요가 있다.&lt;/p>
&lt;ul>
&lt;li>채택된 처리율 제한 알고리즘이 효과적인지 확인하기 위해
&lt;ul>
&lt;li>이벤트 같은 이슈로 트래픽이 급증할 때 처리율 제한 장치가 비효율적으로 동작한다면 트래픽 패턴을 고려하여 알고리즘 변경을 고려한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정의한 처리율 제한 규칙이 효과적인지 확인하기 위해
&lt;ul>
&lt;li>제한 규칙이 너무 엄격하다면 많은 유효 요청이 처리되지 못하고 버려질 경우 완화한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>시간이 허락된다면 다음 부분을 언급해보면 좋다.&lt;/p>
&lt;ul>
&lt;li>경성 또는 연성 처리율 제한
&lt;ul>
&lt;li>경성 처리율 제한: 요청의 개수는 임계치를 절대 넘어설 수 없다.&lt;/li>
&lt;li>연성 처리율 제한: 요청의 개수는 잠시동안은 임계치를 넘어설 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다양한 계층에서의 처리율 제한
&lt;ul>
&lt;li>애플리케이션 계층 외 다른 계층에서도 처리율 제한이 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>처리율 제한을 회피하는 방법. 클라이언트를 어떻게 설계하는 것이 최선인가?
&lt;ul>
&lt;li>클라이언트 측 캐시를 사용하여 API 호출 횟수를 줄인다.&lt;/li>
&lt;li>임계치를 이해하고, 짧은 시간 동안 너무 많은 메시지를 보내지 않도록 한다.&lt;/li>
&lt;li>예외나 에러를 처리하는 코드를 도입하여 예외적 상황을 우아하게 복구될 수 있도록 한다.&lt;/li>
&lt;li>재시도 로직을 구현할 때는 충분한 백오프 시간을 둔다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>3. 시스템 설계 면접 공략법</title><link>https://codemario318.github.io/post/system-design-interview/3/</link><pubDate>Tue, 07 May 2024 16:01:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/3/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/3/cover.png" alt="Featured image of post 3. 시스템 설계 면접 공략법" />&lt;blockquote>
&lt;p>&lt;strong>시스템 설계 면접&lt;/strong>은 두 명의 동료가 모호한 문제를 풀기 위해 협력하여 그 해결책을 찾아내는 과정에 대한 시뮬레이션이다.&lt;/p>
&lt;/blockquote>
&lt;p>시스템 설계 먼접은 특정 제품을 설계해보라는 식으로 막연하고, 넓은 범위로 인해 당황스러울 때가 많다.&lt;/p>
&lt;p>하지만 실세계에서 많은 엔지니어들이 참여하여 개발한 제품은 극도로 복잡하기 때문에 한 시간 안에 설계하는 것은 불가능 할 뿐더러, 완벽한 설계를 요구하지 않는다.&lt;/p>
&lt;ul>
&lt;li>시스템 설계 면접은 정해진 결말, 정답이 없다.
&lt;ul>
&lt;li>최종적으로 도출될 설계안은 설계 과정에서 들인 노력에 비하면 그다지 중요하지 않다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>설계 기술을 시연하는 자리이다.&lt;/li>
&lt;li>설계 과정에서 내린 결정들에 대한 방어 능력을 보이는 자리이다.&lt;/li>
&lt;li>면접관의 피드백을 건설적인 방식으로 처리할 자질이 있음을 보이는 자리이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>면접관의 의도&lt;/strong>&lt;/p>
&lt;p>시스템 설계 면접은 지원자의 설계 능력의 기술적인 측면 뿐만 아니라 여러 시그널을 수집한다.&lt;/p>
&lt;ul>
&lt;li>협력에 적합한 사람인가?&lt;/li>
&lt;li>압박이 심한 상황도 잘 헤쳐 나갈 자질이 있는가?&lt;/li>
&lt;li>모호한 문제를 건설적으로 해결할 능력이 있는가?&lt;/li>
&lt;li>설계의 순수성에 집착한 나머지, 타협정 결정(trade off)를 도외시하는가?&lt;/li>
&lt;li>완고함, 편협함 등&lt;/li>
&lt;/ul>
&lt;h2 id="효과적인-면접을-위한-4단계-접근법">효과적인 면접을 위한 4단계 접근법&lt;/h2>
&lt;p>시스템 설계 면접은 제각각이다.&lt;/p>
&lt;p>훌륭한 설계 면접은 정해진 결말도 없고 정답도 없지만, 절차나 범위에는 &lt;strong>공통적인 부분&lt;/strong>이 존재한다.&lt;/p>
&lt;h3 id="문제-이해-및-설계-범위-확정">문제 이해 및 설계 범위 확정&lt;/h3>
&lt;p>요구사항을 완전히 이해하지 않고 답을 내놓는 행위는 아주 엄청난 부정적 신호이다.&lt;/p>
&lt;p>따라서 깊이 생각하고 질문하여 요구사항과 가정들을 분명히 해야한다.&lt;/p>
&lt;p>적절한 설계를 위해 엔지니어가 가져야 할 중요한 기술은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>올바른 질문을 하는 것&lt;/li>
&lt;li>적절한 가정을 하는 것&lt;/li>
&lt;li>시스템 구축에 필요한 정보를 모으는 것&lt;/li>
&lt;/ul>
&lt;p>따라서 올바른 질문을 통해 적절한 가정과 정보를 모아야하며, 요구사항을 정확히 이해하기 위한 질문은 아래와 같은 유형이 있다.&lt;/p>
&lt;ul>
&lt;li>구체적으로 어떤 기능을 만들어야 하나?&lt;/li>
&lt;li>제품 사용자 수는 얼마나 되나?&lt;/li>
&lt;li>회사의 규모는 얼마나 빨리 커지리라 예상하나?&lt;/li>
&lt;li>회사가 주로 사용하는 기술 스택은 무엇인가?&lt;/li>
&lt;li>설계를 단순화하기 위해 활용할 수 있는 기존 서비스로는 어떤 것들이 있는가?&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>뉴스 피드(news feed) 시스템 설계 질문 예제&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Q. 모바일 앱과 웹 앱 가운데 어느쪽을 지원해야 하는가?
&lt;ul>
&lt;li>A. 둘다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 가장 중요한 기능은?
&lt;ul>
&lt;li>A1. 새로운 포스트 올리기&lt;/li>
&lt;li>A2. 다른 친구의 뉴스 피드 조회하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 정렬 기준은?
&lt;ul>
&lt;li>A. 시간 역순으로&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 한 사용자의 최대 친구 수
&lt;ul>
&lt;li>A. 5,000명&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 트래픽 규모는?
&lt;ul>
&lt;li>A. 일간 능동 사용자(DAU) 천만 명&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 피드는 텍스트로만 구성되는가?
&lt;ul>
&lt;li>A. 이미지나 비디오 같은 미디어 파일도 포스트 할 수 있어야함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="개략적인-설계안-제시-및-동의-구하기">개략적인 설계안 제시 및 동의 구하기&lt;/h3>
&lt;p>개략적인 설계안을 제시하고 면접관의 동의를 구할 때 면접관과 협력하며 진행하면 좋다.&lt;/p>
&lt;ul>
&lt;li>설계안에 대한 최초 청사진을 제시하고 의견을 구하라.
&lt;ul>
&lt;li>면접관을 마치 팀원인 것 처럼&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>화이트보드나 종이에 핵심 컴포넌트를 포함하는 다이어그램을 그려라.
&lt;ul>
&lt;li>클라이언트, API, 웹 서버, 데이터 저장소, 캐시, CDN, 메시지 큐 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>최초 설계안이 시스템 규모에 관계된 제약사항들을 만족하는지를 개략적으로 계산한다.
&lt;ul>
&lt;li>계산 과정은 소리 내어 설명한다.&lt;/li>
&lt;li>개략적 추정이 필요한지는 면접관에게 미리 물어본다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>가능하다면 시스템의 구체적 사용 사례도 몇 가지 살펴보면 고려하지 못한 에지 케이스를 발견하는 데도 도움이 될 것이다.&lt;/p>
&lt;p>&lt;strong>뉴스 피드 시스템 개략적 설계 예시&lt;/strong>&lt;/p>
&lt;p>개략적으로 보면 &lt;strong>피드 발행&lt;/strong>, &lt;strong>피드 생성&lt;/strong> 두 가지 처리 플로로 나눠 생각해 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>피드 발행
&lt;ul>
&lt;li>사용자가 포스트를 올리면 관련된 데이터가 캐시/데이터베이스에 기록되고, 해당 사용자의 친구 뉴스 피드에 뜨게 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>피드 생성
&lt;ul>
&lt;li>사용자의 뉴스 피드는 해당 사용자 친구들의 포스트를 시간 역순으로 정렬하여 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/3/img.png"
width="423"
height="690"
srcset="https://codemario318.github.io/post/system-design-interview/3/img_hu039827f8027f9a00b1371e9a94d12627_101123_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/3/img_hu039827f8027f9a00b1371e9a94d12627_101123_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 발행"
class="gallery-image"
data-flex-grow="61"
data-flex-basis="147px"
>
&lt;img src="https://codemario318.github.io/post/system-design-interview/3/img_1.png"
width="370"
height="589"
srcset="https://codemario318.github.io/post/system-design-interview/3/img_1_hu4e33947bf61ce6fe45cda92442fd57d4_67943_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/3/img_1_hu4e33947bf61ce6fe45cda92442fd57d4_67943_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 생성"
class="gallery-image"
data-flex-grow="62"
data-flex-basis="150px"
>&lt;/p>
&lt;h3 id="상세-설계">상세 설계&lt;/h3>
&lt;p>이 단계로 왔다면 아래 목표는 달성한 상태일 것이다.&lt;/p>
&lt;ul>
&lt;li>시스템에서 전반적으로 달성해야 할 목표와 가능 범위 확인&lt;/li>
&lt;li>전체 설계의 개략적 청사진 마련&lt;/li>
&lt;li>해당 청사진에 대한 면접관의 의견 청취&lt;/li>
&lt;li>상세 설계에서 집중해야 할 영역들 확인&lt;/li>
&lt;/ul>
&lt;p>이 단계에서는 면접관이 설계 대상 컴포넌트 사이의 우선순위를 정한다.&lt;/p>
&lt;p>대부분의 경우 면접관은 &lt;strong>특정 시스템 컴포넌트들의 세부사항을 깊이 있게 설명하는 것을 보길 원한다&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>단축 URL 생성기
&lt;ul>
&lt;li>해시 함수의 설계의 구체적인 내용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>채팅 시스템
&lt;ul>
&lt;li>어떻게하면 지연시간을 줄이고 사용자의 온/오프라인 상태를 표시할 것인지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위와 같은 경우 너무 과도하거나 불필요한 세부 사항을 설명하지 않는 것이 바람직하다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/3/img_2.png"
width="641"
height="725"
srcset="https://codemario318.github.io/post/system-design-interview/3/img_2_hu6034e7d7aae53ae4575eee71d3d0d535_164348_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/3/img_2_hu6034e7d7aae53ae4575eee71d3d0d535_164348_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 발행 상세"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="212px"
>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/3/img_3.png"
width="563"
height="566"
srcset="https://codemario318.github.io/post/system-design-interview/3/img_3_hu740b51119dfe66fb11a0bcd33bce86e0_132618_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/3/img_3_hu740b51119dfe66fb11a0bcd33bce86e0_132618_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="뉴스 피드 가져오기 상세"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;h3 id="마무리">마무리&lt;/h3>
&lt;p>마지막 단계에서 면접관은 설계 결과물에 관련된 몇 가지 후속 질문을 던질 수도 있고 스스로 추가 논의를 진행하도록 할 수도 있다.&lt;/p>
&lt;p>그럴때는 아래와 같은 내용들을 언급해보면 좋은 방향으로 마무리 할 수 있다.&lt;/p>
&lt;ul>
&lt;li>면접관이 시스템 병목구간, 혹은 좀 더 개선 가능한 지점을 찾아내라 주문할 때
&lt;ul>
&lt;li>완벽하다거나 개선할 부분이 없다는 답은 X&lt;/li>
&lt;li>비판적 사고 능력을 보이고, 마지막으로 좋은 인상을 남길 기회이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>만든 설계를 한번 다시 요약해준다.
&lt;ul>
&lt;li>여러 해결책을 제시한 경우에는 특히 중요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오류가 발생하면 무슨 일이 생기는지 따져본다.&lt;/li>
&lt;li>운영 이슈도 논의할 가치가 충분하다.
&lt;ul>
&lt;li>메트릭 수집, 모니터링, 로그, 배포 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>미래에 닥칠 규모 확장 요구에 어떻게 대처할 것인가?&lt;/li>
&lt;li>필요하지만 다루지 못했던 세부적 개선사항들을 제안할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>해야할 것&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>질문을 통해 확인하라. 스스로 내린 가정이 옳다 믿고 진행하지 말라.&lt;/li>
&lt;li>문제의 요구사항을 이해하라.&lt;/li>
&lt;li>정답이나 최선의 답안 같은 것은 없다는 점을 명심하라.&lt;/li>
&lt;li>면접관이 사고 흐름을 이해할 수 있도록 하라. 면접관과 소통하라.&lt;/li>
&lt;li>가능하다면 여러 해법을 함께 제시하라.&lt;/li>
&lt;li>개략적 설계에 면접관이 동의하면, 가장 중요한 컴포넌트부터 컴포넌트의 세부사항을 설명하기 시작하라.&lt;/li>
&lt;li>면접관의 아이디어를 이끌어내라. 좋은 면접관은 같은 팀원처럼 협력한다.&lt;/li>
&lt;li>포기하지 말라.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>하지 말아야 할 것&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>전형적인 면접 문제들에도 대비하지 않은 상태에서 면접장에 가지 말라.&lt;/li>
&lt;li>요구사항이나 가정들을 분명히 하지 않은 상태에서 설계를 제시하지 말라.&lt;/li>
&lt;li>처음부터 특정 컴포넌트의 세부사항을 너무 깊이 설명하지 말라. 개략적 설계를 마친 뒤 서부사항으로 나아가라.&lt;/li>
&lt;li>힌트를 청하기를 주저하지 말라.&lt;/li>
&lt;li>소통을 주저하지 말라. 침묵 속에 설계를 진행하지 말라.&lt;/li>
&lt;li>설계안을 내놓는 순간 면접이 끝난다고 생각하지 말라.&lt;/li>
&lt;li>의견을 일찍, 그리고 자주 구하라.&lt;/li>
&lt;/ul>
&lt;h2 id="시간-배분">시간 배분&lt;/h2>
&lt;p>시스템 설계 면접은 보통 매우 광범위한 영역을 다루기 때문에 시간이 충분하지 않을 수 있어 시관 관리를 잘 하는 것이 중요하다.&lt;/p>
&lt;p>대략적인 시간 분배는 아래와 같으며, 문제의 범위나 면접관의 요구사항에 따라 달라질 수 있다.&lt;/p>
&lt;ul>
&lt;li>문제 이해 및 설계 범위 확정: 3 ~ 10분&lt;/li>
&lt;li>개략적 설계안 제시 및 동의 구하기: 10 ~ 15분&lt;/li>
&lt;li>상세 설계: 10 ~ 25분&lt;/li>
&lt;li>마무리: 3 ~ 5분&lt;/li>
&lt;/ul></description></item><item><title>2. 개략적인 규모 추정</title><link>https://codemario318.github.io/post/system-design-interview/2/</link><pubDate>Tue, 30 Apr 2024 22:03:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/2/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/2/cover.png" alt="Featured image of post 2. 개략적인 규모 추정" />&lt;p>개략적인 규모 추정(back-of-the-envelope estimation)은 보편적으로 통용되는 성능 수치상에서 사고 실험(thought experiments)을 행하여 추정치를 계산하는 행위로서, 어떤 설계가 요구사항에 부합할 것인지 보기 위한 것이다.&lt;/p>
&lt;h2 id="2의-제곱수">2의 제곱수&lt;/h2>
&lt;p>분산 시스템에서 다루는 데이터 양은 매우 커질 수 있으나 계산법은 기본을 크게 벗어나지 않는다.&lt;/p>
&lt;p>제데로 된 계산 결과를 얻으려면 데이터 볼륨의 단위를 2의 제곱수로 표현하면 어떻게 되는지를 알아야한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>2의 x 제곱&lt;/th>
&lt;th>근사치&lt;/th>
&lt;th>이름&lt;/th>
&lt;th>축약형&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>1천&lt;/td>
&lt;td>1킬로바이트&lt;/td>
&lt;td>1KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>1백만&lt;/td>
&lt;td>1메가바이트&lt;/td>
&lt;td>1MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>30&lt;/td>
&lt;td>10억&lt;/td>
&lt;td>1기가바이트&lt;/td>
&lt;td>1GB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>40&lt;/td>
&lt;td>1조&lt;/td>
&lt;td>1테라바이트&lt;/td>
&lt;td>1TB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>50&lt;/td>
&lt;td>1000조&lt;/td>
&lt;td>1페타바이트&lt;/td>
&lt;td>1PB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="모든-프로그래머가-알아야-하는-응답지연-값">모든 프로그래머가 알아야 하는 응답지연 값&lt;/h2>
&lt;p>구글의 제프 딘은 2010년에 &lt;strong>통상적인 컴퓨터에서 구현된 연산들의 응답지연 값&lt;/strong>을 공개한 바 있다.&lt;/p>
&lt;p>컴퓨터의 성능이 더 좋아지며 유효하진 않지만, 연산의 처리 속도가 어느정도인지 가늠해볼 수는 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>연산명&lt;/th>
&lt;th>시간&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>L1 캐시 참조&lt;/td>
&lt;td>0.5ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>분기 예측 오류(branch mispredict)&lt;/td>
&lt;td>5ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>L2 캐시 참조&lt;/td>
&lt;td>7ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>뮤텍스 락/언락&lt;/td>
&lt;td>100ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주 메모리 참조&lt;/td>
&lt;td>100ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Zippy로 1 KB 압축&lt;/td>
&lt;td>10,000ns = 10µs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 Gbps 네트워크로 2 KB 전송&lt;/td>
&lt;td>20,000ns = 20µs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리에서 1 MB 순차적으로 read&lt;/td>
&lt;td>250,000ns = 250µs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>같은 데이터 센터 내에서의 메시지 왕복 지연 시간&lt;/td>
&lt;td>500,000ns = 500µs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>디스크 탐색(seek)&lt;/td>
&lt;td>10,000,000ns = 10ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크에서 1 MB 순차적으로 read&lt;/td>
&lt;td>10,000,000ns = 10ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>디스크에서 1 MB 순차적으로 read&lt;/td>
&lt;td>30,000,000ns = 30ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>한 패킷의 캘리포니아로부터 네덜란드까지의 왕복 지연 시간&lt;/td>
&lt;td>150,000,000ns = 150ms&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>한 구글 엔지니어가 딘 박사가 나열한 수들을 시각화하였고, 최근 기술 동향(2020)이 반영되어있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/2/img.png"
width="606"
height="594"
srcset="https://codemario318.github.io/post/system-design-interview/2/img_hu0f7c2f161aa870801df5883ac4825f9d_187921_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/2/img_hu0f7c2f161aa870801df5883ac4825f9d_187921_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="244px"
>&lt;/p>
&lt;p>이 수치들을 분석하면 다음과 같은 결론이 나온다.&lt;/p>
&lt;ul>
&lt;li>메모리는 빠르지만 디스크는 아직도 느리다.&lt;/li>
&lt;li>디스크 탐색(seek)는 가능한 한 피하라.&lt;/li>
&lt;li>단순한 압축 알고리즘은 빠르다.&lt;/li>
&lt;li>데이터를 인터넷으로 전송하기 전에 가능하면 압축하라.&lt;/li>
&lt;li>데이터 센터는 보통 여러 지역에 분산되어 있고, 센터들 간에 데이터를 주고받는 데는 시간이 걸린다.&lt;/li>
&lt;/ul>
&lt;h2 id="가용성에-관계된-수치들">가용성에 관계된 수치들&lt;/h2>
&lt;p>고가용성(high availability)은 시스템이 오랜 시간 동안 지속적으로 중단 없이 운영될 수 있는 능력을 지칭하는 용어다.&lt;/p>
&lt;p>고가용성을 표현하는 값은 퍼센트로 표현하는데, 100%는 시스템이 단 한 번도 중단된 적이 없었음을 의미하며, 대부분의 서비스는 99%에서 100% 사이의 값을 갖는다.&lt;/p>
&lt;p>SLA(Service Level Agreement)는 서비스 사업자(service provider)가 보편적으로 사용하는 용어로, &lt;strong>서비스 사업자와 고객 사이에 맺어진 합의&lt;/strong>를 의미한다.&lt;/p>
&lt;p>이 합의에는 서비스 사업자가 제공하는 서비스의 가용시간(uptime)이 공식적으로 기술되어 있다.&lt;/p>
&lt;p>가용시간은 관습적으로 숫자 9를 사용해 표시하며, 9가 많을수록 좋다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>가용률&lt;/th>
&lt;th>하루당 장애시간&lt;/th>
&lt;th>주당 장애시간&lt;/th>
&lt;th>개월당 장애시간&lt;/th>
&lt;th>연간 장애시간&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>99%&lt;/td>
&lt;td>14.40분&lt;/td>
&lt;td>1.68시간&lt;/td>
&lt;td>7.31시간&lt;/td>
&lt;td>3.65일&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99.9%&lt;/td>
&lt;td>1.44분&lt;/td>
&lt;td>10.08분&lt;/td>
&lt;td>43.83분&lt;/td>
&lt;td>8,77시간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99.99%&lt;/td>
&lt;td>8.64초&lt;/td>
&lt;td>1.01분&lt;/td>
&lt;td>4.38분&lt;/td>
&lt;td>52.60분&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99.999%&lt;/td>
&lt;td>864.00밀리초&lt;/td>
&lt;td>6.05초&lt;/td>
&lt;td>26.30&lt;/td>
&lt;td>5.26분&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99.9999&lt;/td>
&lt;td>86.40밀리초&lt;/td>
&lt;td>604.80밀리초&lt;/td>
&lt;td>2.63초&lt;/td>
&lt;td>31.56초&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="예제-트위터-qps와-저장소-요구량-추정">예제: 트위터 QPS와 저장소 요구량 추정&lt;/h2>
&lt;p>&lt;strong>가정&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>월간 능동 사용자(monthly active user)는 3억(300million) 명이다.&lt;/li>
&lt;li>50%의 사용자가 트위터를 매일 사용한다.&lt;/li>
&lt;li>평균적으로 각 사용자는 매일 2건의 트윗을 올린다.&lt;/li>
&lt;li>미디어를 포함하는 트윗은 10% 정도다.&lt;/li>
&lt;li>데이터는 5년간 보관된다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>추정&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>QPS(Query Per Second) 추정치
&lt;ul>
&lt;li>일간 능동 사용자(Daily Active User, DAU) = 3억 * 0.5 = 1.5억&lt;/li>
&lt;li>QPS = 1.5억 * 2트윗 / 24시간 / 3600초 = 약 3500&lt;/li>
&lt;li>최대 QPS(Peek QPS) = 2 * QPS = 약 7000&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>미디어 저장을 위한 저장소 요구량
&lt;ul>
&lt;li>평균 트윗 크기
&lt;ul>
&lt;li>tweet_id에 64바이트&lt;/li>
&lt;li>텍스트에 140바이트&lt;/li>
&lt;li>미디어에 1MB&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>미디어 저정소 요구량 = 1.5억 * 2 * 0.1 * 1MB = 30TB/일&lt;/li>
&lt;li>5년간 미디어를 보관하기 위한 저장소 요구량: 30TB * 365 * 5 = 약 55PB&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="팁">팁&lt;/h2>
&lt;p>개략적인 규모 추정과 관계된 면접에서 가장 중요한 것은 &lt;strong>문제를 풀어 나가는 절차&lt;/strong>다.&lt;/p>
&lt;p>&lt;strong>올바른 절차를 밟느냐가 결과를 내는 것보다 중요&lt;/strong>하다.&lt;/p>
&lt;ul>
&lt;li>근사치를 활용한 계산(rounding and approximation):
&lt;ul>
&lt;li>적절한 근사치를 활용하여 시간을 절약하자.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가정(assumption)들은 적어 둔다.&lt;/li>
&lt;li>단위(unit)을 붙여라.
&lt;ul>
&lt;li>헷갈리게 되므로, 단위를 붙이는 습고나을 들여 모호함을 방지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>QPS, 최대 QPS, 저장소 요구량, 캐시 요구량, 서버 수 등을 추정하는 것이 자주 출제된다.&lt;/li>
&lt;/ul></description></item><item><title>1. 사용자 수에 따른 규모 확장성</title><link>https://codemario318.github.io/post/system-design-interview/1/</link><pubDate>Mon, 22 Apr 2024 14:53:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/1/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/cover.png" alt="Featured image of post 1. 사용자 수에 따른 규모 확장성" />&lt;p>수백만 사용자를 지원하는 시스템을 설계하는 것은 도전적인 과제이며, 지속적인 계량과 끝없는 개선이 요구되는 여정이다.&lt;/p>
&lt;p>이번 장은 한 명의 사용자를 지원하는 시스템에서 시작하여, 최종적으로 몇백만 사용자를 지원하는 시스템을 설계해본다.&lt;/p>
&lt;h2 id="단일-서버">단일 서버&lt;/h2>
&lt;p>모든 컴포넌트가 단 한대의 서버에서 실행되는 간단한 시스템부터 설계해보자.&lt;/p>
&lt;p>웹 앱, 데이터베이스, 캐시 등이 전부 서버 한 대에서 실행된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img.png"
width="615"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_hu499b8fa6fe43f3f924784d377eb4708e_41034_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_hu499b8fa6fe43f3f924784d377eb4708e_41034_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;strong>사용자 요청 처리 흐름&lt;/strong>&lt;br>
&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_1.png"
width="608"
height="382"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_1_hua0cbd5db31f0ad82b45addc6a6db9692_42287_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_1_hua0cbd5db31f0ad82b45addc6a6db9692_42287_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="381px"
>&lt;/p>
&lt;ol>
&lt;li>사용자는 도메인 이름(api.mysite.com)을 이용하여 웹사이트에 접속한다. 이 접속을 위해 DNS에 질의하여 IP 주소로 변환하는 과정을 치게 된다.
&lt;ul>
&lt;li>DNS는 보통 서드 파티가 제공하는 유료 서비스를 이용하므로 시스템의 일부는 아니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DNS 조회 결과로 IP 주소가 반환된다.&lt;/li>
&lt;li>해당 IP 주소로 HTTP 요청이 전달된다.&lt;/li>
&lt;li>요청을 받은 웹 서버는 HTML 페이지나 JSON 형태의 응답을 반환한다.&lt;/li>
&lt;/ol>
&lt;p>실제 요청은 웹 앱과 모바일 앱 두가지 종류에 단말로 부터 온다.&lt;/p>
&lt;ul>
&lt;li>웹 애플리케이션
&lt;ul>
&lt;li>비즈니스 로직, 데이터 저장 등을 처리하기 위해서 서버 구현용 언어(자바, 파이썬 등)를 사용한다.&lt;/li>
&lt;li>프레젠테이션 용으로는 클라이언트 구현용 언어(HTML, 자바스크립트 등)를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모바일 앱
&lt;ul>
&lt;li>모바일 앱과 웹 서버 간 통신을 위해서는 HTTP 프로토콜을 이용한다.&lt;/li>
&lt;li>반환될 응답 데이터의 포맷으로는 보통 JSON이 널리 쓰인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="데이터베이스">데이터베이스&lt;/h2>
&lt;p>사용자가 늘면 서버 하나로는 충분하지 않아서 여러 서버를 두어야 한다.&lt;/p>
&lt;ul>
&lt;li>웹/모바일 트래픽 처리&lt;/li>
&lt;li>데이터베이스&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_2.png"
width="612"
height="377"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_2_hub3bdf37c2a22d7f06e833db20a5f8b0a_53786_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_2_hub3bdf37c2a22d7f06e833db20a5f8b0a_53786_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>웹/모바일 트래픽 처리 서버(웹 계층)와 데이터베이스 서버(데이터 계층)를 분리하면 그 각각을 독립적으로 확장해 나갈 수 있게 된다.&lt;/p>
&lt;h3 id="어떤-데이터베이스를-사용할-것인가">어떤 데이터베이스를 사용할 것인가?&lt;/h3>
&lt;p>전통적인 관계형 데이터베이스와 비-관계형 데이터베이스 사이에서 고를 수 있다.&lt;/p>
&lt;ul>
&lt;li>관계형 데이터베이스
&lt;ul>
&lt;li>관계형 데이터베이스 관리 시스템(RDBMS)이라고도 부르며, 자료를 테이블과 열, 컬럼으로 표현한다.&lt;/li>
&lt;li>SQL을 사용하면 여러 테이블에 있는 데이터를 그 관계에 따라 조인(join)하여 합칠 수 있다.&lt;/li>
&lt;li>ex) MySQL, Oracle, PostgreSQL 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비-관계형 데이터 베이스
&lt;ul>
&lt;li>NoSQL이라고도 부른다.&lt;/li>
&lt;li>키-값 저장소(key-value store), 그래프 저장소(graph store), 컬럼 저장소(column store), 문서 저장소(document store) 네 부류로 나뉜다.&lt;/li>
&lt;li>비-관계형 데이터베이스는 일반적으로 조인 연산은 지원하지 않는다.&lt;/li>
&lt;li>ex) CouchDB, Neo4j, Cassandra, HBase, Amazon DynamoDB 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>대부분의 개발자에게는 40년 이상 시장에서 살아남아 잘 사용되어온 관계형 데이터베이스가 최선이다.&lt;/p>
&lt;p>하지만 구축하려는 시스템에 적합하지 않은 경우에는 관계형 데이터베이스 이외의 저장소도 살펴보아야한다.&lt;/p>
&lt;ul>
&lt;li>아주 낮은 응답 지연시간(latency)이 요구됨&lt;/li>
&lt;li>다루는 데이터가 비정형(unstructured)이라 관계형 데이터가 아님&lt;/li>
&lt;li>데이터(JSON, YAML, XML 등)를 직렬화하거나(serialize) 역직렬화(deserialize) 할 수 있기만 하면 됨&lt;/li>
&lt;li>아주 많은 양의 데이터를 저장할 필요가 있음&lt;/li>
&lt;/ul>
&lt;h2 id="수직적-규모-확장-vs-수평적-규모-확장">수직적 규모 확장 VS 수평적 규모 확장&lt;/h2>
&lt;h3 id="수직적-규모-확장vertical-scaling">수직적 규모 확장(vertical scaling)&lt;/h3>
&lt;p>&lt;strong>스케일 업(scale up)&lt;/strong> 이라고도 불리는 수직적 규모 확장 프로세스는 서버에 고사양 자원을 추가하는 행위를 말한다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>서버로 유입되는 트래픽의 양이 적을 때는 수직적 확장이 좋은 선택이다.&lt;/li>
&lt;li>단순하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>한 대의 서버에 CPU나 메모리를 무한대로 증설할 방법이 없어 한계가 있다.&lt;/li>
&lt;li>장애에 대한 자동복구(failover) 방안이나 다중화(redundancy) 방안을 제시하지 않는다.
&lt;ul>
&lt;li>서버에 장애가 발생하면 완전히 중단된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="수평적-규모-확장horizontal-scaling">수평적 규모 확장(horizontal scaling)&lt;/h3>
&lt;p>&lt;strong>스케일 아웃(scale out)&lt;/strong> 이라고도 불리는 수평적 규모 확장 프로세스는 더 많은 서버를 추가하여 성능을 개선하는 행위를 말한다.&lt;/p>
&lt;p>수직적 규모 확장에서 언급된 단점으로 인해 대규모 애플리케이션을 지원하는 데는 수평적 규모 확장법이 보다 적절하다.&lt;/p>
&lt;hr>
&lt;p>수평적 규모 확장을 위해 추가적인 장치가 필요하다.&lt;/p>
&lt;p>앞서 본 설계에서 사용자가 웹 서버로 바로 연결되는데,&lt;/p>
&lt;ul>
&lt;li>웹 서버가 다운되면 사용자는 웹 사이트에 접속할 수 없다.&lt;/li>
&lt;li>너무 많은 사용자가 접속하여 웹 서버가 한계에 도달하면 응답 속도가 느려지거나 서버 접속이 불가능해질 수 있다.&lt;/li>
&lt;/ul>
&lt;p>이런 문제를 해결하는 데는 부하 분산기 또는 로드밸런서를 도입하는 것이 최선이다.&lt;/p>
&lt;h3 id="로드밸런서load-balancer">로드밸런서(Load balancer)&lt;/h3>
&lt;p>로드밸런서는 부하 분산 집합(load balancing set)에 속한 웹 서버들에게 트래픽 부하를 고르게 분산하는 역할을 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_3.png"
width="608"
height="540"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_3_huf74bbc3ffd6647fb098a2fc03966306f_85207_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_3_huf74bbc3ffd6647fb098a2fc03966306f_85207_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;ul>
&lt;li>사용자는 로드밸런서의 공개 IP 주소로 접속하므로, 웹 서버는 클라이언트의 접속을 직접 처리하지 않는다.&lt;/li>
&lt;li>보안을 위해 서버 간 통신에는 사설 IP 주소가 이용된다.
&lt;ul>
&lt;li>같은 네트워크에 속한 서버 사이의 통신에만 쓰일 수 있는 IP 주소로, 인터넷을 통해서 접속할 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>부하 분산 집합에 또 하나의 웹 서버를 추가하고 나면, 장애를 자동복구하지 못하는 문제(no failover)는 해소되며, 웹 계층의 가용성(availability)은 향상된다.&lt;/p>
&lt;ul>
&lt;li>서버 1이 다운되면 모든 트래픽은 서버 2로 전송된다.
&lt;ul>
&lt;li>웹 사이트 전체가 다운되는 일이 방지된다.&lt;/li>
&lt;li>부하를 나누기 위해 새로운 서버를 추가할 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹사이트로 유입되는 트래픽이 가파르게 증가할 경우 웹 서버 계층에 더 많은 서버를 추가하면 로드밸런스가 자동적으로 트래픽을 분산한다.&lt;/li>
&lt;/ul>
&lt;h3 id="데이터베이스-다중화">데이터베이스 다중화&lt;/h3>
&lt;p>많은 데이터베이스들이 주(master)-부(slave) 관계를 설정하여 데이터 원본은 주 서버에, 사본은 부 서버에 저장하는 방식으로 다중화를 지원한다.&lt;/p>
&lt;p>쓰기 연산은 마스터에만 지원하며, 부 데이터베이스는 주 데이터베이스로부터 그 사본을 전달받아 읽기 연산만을 지원한다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스를 변경하는 명령어(&lt;code>INSERT&lt;/code>, &lt;code>DELETE&lt;/code>, &lt;code>UPDATE&lt;/code> 등)는 주 데이터베이스로만 전달되어야 한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_4.png"
width="612"
height="546"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_4_hu75d2f6312382855c75a554918b468d43_102326_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_4_hu75d2f6312382855c75a554918b468d43_102326_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/p>
&lt;p>데이터베이스르 다중화하면 다음과 같은 이득이 있다.&lt;/p>
&lt;ul>
&lt;li>더 나은 성능
&lt;ul>
&lt;li>모든 데이터 변경 연산은 주 데이터베이스 서버로만 전달되는 반면 읽기 연산은 부 데이터베이스 서버들로 분산되어 병렬로 처리될 수 있는 질의(query)가 늘어나므로, 성능이 좋아진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>안정성
&lt;ul>
&lt;li>자연 재해 등의 이유로 데이터베이스 서버 가운데 일부가 파괴되어도 데이터는 보존된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성
&lt;ul>
&lt;li>데이터를 여러 지역에 복제해 둠으로써, 하나의 데이터베이스 서버에 장애가 발생하더라도 다른 서버에 있는 데이터로 계속 서비스할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위와 같은 데이터계층을 구성하면 데이터베이스 서버 가운데 하나가 다운되더라도 아래와 같은 상황을 감당할 수 있다.&lt;/p>
&lt;ul>
&lt;li>부 서버 한대뿐인데 다운된 경우
&lt;ul>
&lt;li>읽기 연산이 한시적으로 주 데이터베이스로 전달된다.&lt;/li>
&lt;li>즉시 새로운 부 데이터베이스 서버가 장애 서버를 대처한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>부 서버 중 한대가 다운된 경우
&lt;ul>
&lt;li>일기 연산이 나머지 부 데이터베이스 서버로 분산된다.&lt;/li>
&lt;li>새로운 부 데이터베이스 서버가 장애 서버를 대체한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주 데이터베이스 서버가 다운된 경우
&lt;ul>
&lt;li>부 데이터베이스 서버 중 하나가 새로운 주 서버가 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="다중화를-고려한-설계">다중화를 고려한 설계&lt;/h3>
&lt;p>아래는 로드밸런서와 데이터베이스 다중화를 고려한 설계안이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_5.png"
width="615"
height="680"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_5_hu0d3cc45b151b2f2d78ede4b0a35c84d1_160088_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_5_hu0d3cc45b151b2f2d78ede4b0a35c84d1_160088_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;ol>
&lt;li>사용자는 DNS로부터 로드밸런서의 공개 IP 주소를 받는다.&lt;/li>
&lt;li>사용자는 해당 IP 주소를 사용해 로드밸런서에 접속한다.&lt;/li>
&lt;li>HTTP 요청은 서버 1이나 서버 2로 전달된다.&lt;/li>
&lt;li>웹 서버는 사용자의 데이터를 부 데이터베이스 서버에서 읽는다.&lt;/li>
&lt;li>웹 서버는 데이터 변경 연산은 주 데이터베이스로 전달한다.&lt;/li>
&lt;/ol>
&lt;h2 id="캐시-cache">캐시 Cache&lt;/h2>
&lt;p>캐시를 붙여 응답 시간(latency)를 개선해볼 수 있다.&lt;/p>
&lt;p>캐시는 &lt;strong>값비싼 연산 결과&lt;/strong> 또는 &lt;strong>자주 참조되는 데이터&lt;/strong>를 메모리 안에 두고, 뒤이은 요청이 보다 빨리 처리될 수 있도록 하는 저장소이다.&lt;/p>
&lt;p>애플리케이션의 성능은 데이터베이스를 얼마나 자주 호출하느냐에 크게 좌우되는데, 캐시는 그런 문제를 완화할 수 있다.&lt;/p>
&lt;h3 id="캐시-계층">캐시 계층&lt;/h3>
&lt;p>캐시 계층(cache tier)은 데이터가 잠시 보관되는 곳으로 데이터베이스보다 훨씬 빠르다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스보다 훨씬 빠르므로 성능이 개선된다.&lt;/li>
&lt;li>요청 분산으로 데이터베이스의 부하를 줄일 수 있다.&lt;/li>
&lt;li>캐시 계층의 규모를 독립적으로 확장시키는 것도 가능해진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_6.png"
width="613"
height="116"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_6_huc62d7a17723bf3e18e1d3339b357022d_33317_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_6_huc62d7a17723bf3e18e1d3339b357022d_33317_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="528"
data-flex-basis="1268px"
>&lt;/p>
&lt;p>요청받은 웹 서버는 캐시에 응답이 저장되어 있는지를 확인 후 저장되어 있다면 해당 데이터 반환하고 없을 경우 데이터베이스 조회하여 결과를 반환하는데, 이러한 캐시 전략을 &lt;strong>읽기 주도형 캐시 전략(read-through caching strategy)&lt;/strong> 이라고 부른다.&lt;/p>
&lt;p>이외에도 다양한 캐시 전략이 있으며, 캐시할 데이터 종류, 크기, 액세스 패턴에 맞는 캐시 전략을 선택하면 된다.&lt;/p>
&lt;ul>
&lt;li>쓰기 주도형 캐시 전략 (Write-Through Cache)
&lt;ul>
&lt;li>데이터를 업데이트할 때 캐시와 백엔드 데이터 소스 모두에 동시에 업데이트&lt;/li>
&lt;li>데이터 일관성을 유지하면서 쓰기 작업을 처리&lt;/li>
&lt;li>쓰기 작업의 경우 백엔드 저장소로의 추가적인 I/O 작업이 필요하므로 성능 저하의 가능성이 있지만, 데이터 일관성을 보장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>쓰기 지연형 캐시 전략 (Write-Behind Cache)
&lt;ul>
&lt;li>데이터 업데이트를 먼저 캐시에만 적용하고, 나중에 백엔드 데이터 소스에 업데이트를 적용&lt;/li>
&lt;li>이는 쓰기 작업의 지연을 최소화하여 응답 시간을 줄이는 데 도움&lt;/li>
&lt;li>쓰기 지연형 캐시는 데이터 일관성을 유지하기 위해 추가적인 메커니즘을 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자세한 내용의 캐시 전략 (Write-Through and Read-Through Cache):
&lt;ul>
&lt;li>읽기와 쓰기 모두에 대해 캐시를 사용하는 전략&lt;/li>
&lt;li>데이터가 요청될 때마다 읽기 주도형 캐시와 유사하게 작동하며, 데이터가 업데이트될 때마다 쓰기 주도형 캐시와 유사한 방식으로 작동&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시 앞 단의 캐시 전략 (Cache-Aside Cache):
&lt;ul>
&lt;li>클라이언트가 데이터를 직접 캐시에 저장하고 검색하는 방식&lt;/li>
&lt;li>캐시에 데이터가 없는 경우 클라이언트는 백엔드 데이터 소스에서 직접 데이터를 가져와서 캐시에 저장하고 응답&lt;/li>
&lt;li>이 방식은 간단하고 유연하며, 응용 프로그램 코드 내에 캐시 로직을 명시적으로 구현할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이중 캐시 전략 (Two-Level Cache):
&lt;ul>
&lt;li>두 개의 캐시 레이어를 사용하여 성능을 최적화&lt;/li>
&lt;li>보통 두 개의 캐시는 크기와 접근 속도 등에서 차이가 있음&lt;/li>
&lt;li>먼저 작은 고속 캐시가 데이터를 저장하고, 그 다음에 큰 용량의 캐시가 데이터를 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오프힙 로컬 캐시 전략 (Off-Heap Local Cache Strategy):
&lt;ul>
&lt;li>캐시를 메모리 외의 오프힙(Off-Heap) 영역에 저장하여 자바 가상 머신의 힙 메모리 한계를 초과하는 데이터 양을 처리할 수 있게 함&lt;/li>
&lt;li>이는 대규모 캐시나 대용량 데이터를 다룰 때 유용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="캐시-사용-시-유의할-점">캐시 사용 시 유의할 점&lt;/h3>
&lt;ul>
&lt;li>데이터 갱신은 자주 일어나지 않지만 참조는 빈번하게 일어나는 경우 고려할 수 있다.&lt;/li>
&lt;li>캐시는 데이터를 휘발성 메모리에 두므로, 영속적으로 보관할 데이터를 캐시에 두는 것은 바람직하지 않다.&lt;/li>
&lt;li>데이터를 무기한 보존할 수 없으므로 만료에 대한 정책을 마련해야한다.
&lt;ul>
&lt;li>너무 짧으면 데이터베이스 읽기가 자주 발생한다.&lt;/li>
&lt;li>너무 길면 원본과 차이 날 가능성이 높아진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>원본을 갱신하는 연산과 캐시를 갱신하는 연산이 단일 트랜잭션으로 처리되지 않는 경우 일관성이 깨질 수 있다.&lt;/li>
&lt;li>캐시 서버를 한 대만 두는 경우 해당 서버가 단일 장애 지점(Single Point of Failure, SPOF)이 되어버릴 가능성이 있다.
&lt;ul>
&lt;li>여러 지역에 걸처 캐시 서버를 분산시켜야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시 메모리가 너무 작으면 액세스 패턴에 따라 데이터가 자주 캐시에서 밀려나 성능이 떨어지게 된다.
&lt;ul>
&lt;li>캐시 메모리를 과할당하면 데이터가 갑자기 늘어났을 때 생길 문제를 방지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시가 가득 찼을 때 추가로 데이터를 넣기 위한 데이터 방출 정책을 적절히 지정해야한다.
&lt;ul>
&lt;li>가장 널리 쓰이는 것은 LRU(least Recently Used - 가장 오래 사용 안된 데이터)나 FIFO(가장 먼저 들어온) 등이 있으며 경우에 맞게 적용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="콘텐츠-전송-네트워크-cdn">콘텐츠 전송 네트워크 CDN&lt;/h2>
&lt;p>응답 시간을 개선할 방법으로 CDN(Content Delivery Network)를 적용해 볼 수 있다.&lt;/p>
&lt;p>CDN은 정적 콘텐츠를 전성하는 데 쓰이는, 지리적으로 분산된 서버의 네트워크이다. (이미지, 비디오, CSS, JS 파일 등)&lt;/p>
&lt;ul>
&lt;li>요청 경로, 질의 문자열, 쿠키, 요청 헤더 등의 정보에 기반하여 HTML을 캐싱하는 &lt;strong>동적 콘텐츠 캐싱&lt;/strong>도 적용해 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_7.png"
width="605"
height="231"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_7_hu799239a592ed42b7290231250760d8ad_30988_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_7_hu799239a592ed42b7290231250760d8ad_30988_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="261"
data-flex-basis="628px"
>&lt;/p>
&lt;p>어떤 사용자 웹 사이트를 방문하면, 사용자에게 가장 가까운 CDN 서버가 정적 콘텐츠를 전달하며, 사용자가 CDN 서버로부터 멀어질 수록 천천히 로드될 것이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_8.png"
width="612"
height="218"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_8_hu5d5fc61be434c460205659abbfd7acf0_63071_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_8_hu5d5fc61be434c460205659abbfd7acf0_63071_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="280"
data-flex-basis="673px"
>&lt;/p>
&lt;ol>
&lt;li>사용자 A가 이미지 URL을 이용해 &lt;code>image.png&lt;/code>에 접근한다.(URL의 도메인은 CDN 서비스 사업자가 제공한다.)&lt;/li>
&lt;li>CDN 서버의 캐시에 해당 이미지가 없는 경우 원본 서버에서 요청하여 파일을 가져온다.&lt;/li>
&lt;li>원본 서버가 파일을 CDN 서버에 반환한다.
&lt;ul>
&lt;li>응답 HTTP 헤더에 TTL(Time-To-Live) 값을 넣어 보낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CDN 서버는 파일을 캐시하고 사용자 A에게 반환한다.
&lt;ul>
&lt;li>이미지는 TTL에 명신된 시간이 끝날 때 까지만 캐시된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용자 B가 같은 이미지를 CDN 서버에게 요청한다.&lt;/li>
&lt;li>만료되지 않은 이미지에 대한 요청은 캐시를 통해 처리된다.&lt;/li>
&lt;/ol>
&lt;h3 id="cdn-사용-시-고려해야-할-사항">CDN 사용 시 고려해야 할 사항&lt;/h3>
&lt;ul>
&lt;li>비용
&lt;ul>
&lt;li>CDN은 보통 서드파티에 의해 운영되며, CDN으로 들어가고 나가는 데이터 전송 양에 따라 요금을 낸다.&lt;/li>
&lt;li>자주 사용되지 않는 콘텐츠를 캐싱하는 것은 이득이 적으므로, CDN에서 빼는 것을 고려할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>적절한 만료 시한 설정
&lt;ul>
&lt;li>시의성이 중요한(time-sensitive) 콘텐츠는 만료 시점을 잘 정해야한다.&lt;/li>
&lt;li>너무 길면 콘텐츠의 신선도가 떨어진다.&lt;/li>
&lt;li>너무 짧으면 원본 서버에 빈번히 접속되어 좋지 않다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CDN 장애 대처 방안
&lt;ul>
&lt;li>CDN 자체가 죽었을 경우 애플리케이션이 어떻게 동작해야 하는지 고려해야 한다.&lt;/li>
&lt;li>응답을 감지하여 원본 서버에서 가져오는 등의 방식으로 처리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>콘텐츠 무효화 방법
&lt;ul>
&lt;li>만료되지 않은 콘텐츠라도 CDN에서 제거할 수 있다.&lt;/li>
&lt;li>CDN 서비스 사업자가 제공하는 API 활용&lt;/li>
&lt;li>콘텐츠의 다른 버전을 서비스 하도록 오브젝트 버저닝 이용.
&lt;ul>
&lt;li>&lt;code>image.png?v=2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cdn과-캐시가-추가된-설계">CDN과 캐시가 추가된 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_9.png"
width="625"
height="670"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_9_hu460b71978870d67db3c5f1597124e471_170383_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_9_hu460b71978870d67db3c5f1597124e471_170383_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="223px"
>&lt;/p>
&lt;ol>
&lt;li>정적 콘텐츠를 CDN을 통해 제공하여 더 나은 성능을 보장한다.&lt;/li>
&lt;li>캐시가 데이터베이스 부하를 줄여준다.&lt;/li>
&lt;/ol>
&lt;h2 id="무상태stateless-웹-계층">무상태(Stateless) 웹 계층&lt;/h2>
&lt;p>웹 계층을 수평적으로 확장하는 방법을 고민해 볼 수 있다.&lt;/p>
&lt;p>이를 위해 상태 정보(사용자 세션 등)를 웹 계층에서 제거해야한다.&lt;/p>
&lt;p>바람직한 전략은 상태 정보를 관계형 데이터베이스나 NoSQL 같은 지속성 저장소에 보관하고, 필요할 때 가져오도록 하는 것이다.&lt;/p>
&lt;p>이렇게 구성된 웹 계층을 &lt;strong>무상태 웹 계층&lt;/strong>이라 부른다.&lt;/p>
&lt;h3 id="상태-정보-의존적인-아키텍처">상태 정보 의존적인 아키텍처&lt;/h3>
&lt;p>상태 정보를 보고나하는 서버는 클라이언트 정보, 즉 상태를 유지하여 요청들 사이에 공유되도록 하지만, 무상태 서버에는 이러한 장치가 없다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_10.png"
width="624"
height="387"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_10_hu5fb9397f4d4b70e8494c0677a4642dc6_65604_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_10_hu5fb9397f4d4b70e8494c0677a4642dc6_65604_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>위와 같은 경우 같은 클라이언트로부터의 요청은 항상 같은 서버로 전송되어야 한다.&lt;/p>
&lt;p>로드밸런서가 이를 지원하기 위해 고정 세션이라는 기능을 제공하지만, 이는 로드밸런서에 부담을 줄 수 있다.&lt;/p>
&lt;p>또한 로드 밸런서 뒷단에 서버를 추가하거나 제거하기도 까다로워지며, 이들 서버의 장애를 처리하기도 복잡해진다.&lt;/p>
&lt;h3 id="무상태-아키텍처">무상태 아키텍처&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_11.png"
width="601"
height="582"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_11_hu39f308bbb91eb0dc2a5c19d7114ea62c_76175_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_11_hu39f308bbb91eb0dc2a5c19d7114ea62c_76175_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="247px"
>&lt;/p>
&lt;p>무상태 아키텍처는 사용자로부터의 HTTP 요청은 어떤 웹 서버로도 전달될 수 있다.&lt;/p>
&lt;p>웹 서버는 상태 정보가 필요할 경우 물리적으로 분리된 공유 저장소로부터 데이터를 가져온다.&lt;/p>
&lt;h3 id="무상태-웹-계층을-갖는-설계">무상태 웹 계층을 갖는 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_12.png"
width="592"
height="593"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_12_hu8a96a4f1289cdc64fec7a7b4b0f65b88_150815_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_12_hu8a96a4f1289cdc64fec7a7b4b0f65b88_150815_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;ul>
&lt;li>세션 데이터를 웹 계층에서 분리하고 지속성 데이터 보관소에 저장하도록 만들었다.
&lt;ul>
&lt;li>공유 저장소는 관계형 데이터베이스일 수도 있고, 캐시일 수도 있으며, NoSQL일 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 정보가 웹 서버들로부터 제거되었으므로 자동으로 규모를 확장할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="데이터-센터">데이터 센터&lt;/h2>
&lt;p>애플리케이션의 사용자가 매우 많다면 가용성을 높이고 쾌적하게 사용할 수 있도록 하기 위해 여러 데이터 센터를 지원하는 것이 필수적이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_13.png"
width="605"
height="612"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_13_huacec91b27a2e95c1fae44550dc9946c4_231088_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_13_huacec91b27a2e95c1fae44550dc9946c4_231088_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="237px"
>&lt;/p>
&lt;p>&lt;strong>지리적 라우팅&lt;/strong>&lt;/p>
&lt;p>장애가 없는 상황에서 사용자는 가장 가까운 데이터 센터로 안내되는데 이 절차를 지리적 라우팅(geoDNS-routing 또는 geo-routing)이라고 부른다.&lt;/p>
&lt;p>geoDNS는 사용자의 위치에 따라 도메인 이름을 어떤 IP 주소로 변활할지 결정할 수 있도록 해주는 DNS 서비스다.&lt;/p>
&lt;p>&lt;strong>데이터 센터 장애&lt;/strong>&lt;/p>
&lt;p>데이터 센터 중 하나에 심각한 장애가 발생하면 모든 트래픽은 장애가 없는 데이터 센터로 전송된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_14.png"
width="598"
height="619"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_14_huae6b76823045f17d81dcfd1753a37701_207085_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_14_huae6b76823045f17d81dcfd1753a37701_207085_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>이에 따라 다중 데이터센터 아키텍처를 만들려면 몇 가지 기술적 난제를 해결해야 한다.&lt;/p>
&lt;ul>
&lt;li>트래픽 우회
&lt;ul>
&lt;li>올바른 데이터센터로 트래픽을 보내는 효과적인 방법을 찾아야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 동기화(Synchronization)
&lt;ul>
&lt;li>데이터를 여러 데이터센터에 걸쳐 다중화 하여, 장애 복구 시에도 데이터를 동기화 할 수 있도록 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트와 배포
&lt;ul>
&lt;li>여러 데이터 센터를 사용하도록 시스템이 구성된 상황이라면 웹 사이트 또는 애플리케이션을 여러 위치에서 테스트 해보는 것이 중요하다.&lt;/li>
&lt;li>자동화된 배포 도구는 모든 데이터 센터에 동일한 서비스가 설치되도록 하는 데 중요한 일을 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="메시지-큐message-queue">메시지 큐(Message Queue)&lt;/h2>
&lt;p>시스템을 더 큰 규모로 확장하기 위해서는 시스템의 컴포넌트를 분리하여, 각기 독립적으로 확장될 수 있어야 한다.&lt;/p>
&lt;p>메시지 큐는 분산 시스템이 이 문제를 풀기 위해 채용하고 있는 핵심 전략 가운데 하나다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_15.png"
width="606"
height="141"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_15_huc34a000f73eb7366f54fab25c10cd600_37954_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_15_huc34a000f73eb7366f54fab25c10cd600_37954_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="429"
data-flex-basis="1031px"
>&lt;/p>
&lt;p>메시지 큐는 메시지의 무손실을 보장하는 비동기 통신을 지원하는 컴포넌트로 메시지의 버퍼 역할을 하며, 비동기적으로 전송한다.&lt;/p>
&lt;ol>
&lt;li>생산자 또는 발행자라고 불리는 입력 서비스가 메시지를 만들어 메시지 큐에 발행한다.&lt;/li>
&lt;li>소비자 혹은 구독자라 불리는 서비스 혹은 서버가 메시지를 받아 그에 맞는 동작을 수행한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>메시지 큐를 이용하면 서비스 또는 서버 간 결합이 느슨해져서, 규모 확장성이 보장되어야 하는 안정적 애플리케이션을 구성하기 좋다.&lt;/p>
&lt;ul>
&lt;li>생산자는 소비자 프로세스가 다운되어 있어도 메시지를 발행할 수 있다.&lt;/li>
&lt;li>소비자는 생산자 서비스가 가용한 상태가 아니더라도 메시지를 수신할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>큐가 커지면 더 많은 작업 프로세스를 추가해야 처리 시간을 줄일 수 있으며, 큐가 거의 항상 비어있는 상태라면, 작업 프로세스의 수를 줄일 수 있다.&lt;/p>
&lt;h2 id="로그-메트릭-그리고-자동화">로그, 메트릭 그리고 자동화&lt;/h2>
&lt;p>웹 사이트와 함께 사업 규모가 커지고 나면, 로그나 메트릭, 자동화 같은 도구에 필수적으로 투자해야한다.&lt;/p>
&lt;ul>
&lt;li>로그
&lt;ul>
&lt;li>시스템의 오류와 문제들을 쉽게 찾아낼 수 있게 돕는다.&lt;/li>
&lt;li>로그를 단일 서비스로 모아주는 도구를 활용하면 더 편리하게 검색하고 조회할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메트릭
&lt;ul>
&lt;li>사업 현황에 관한 유용한 정보를 얻을 수도 있고, 시스템의 현재 상태를 쉽게 파악할 수 있다.&lt;/li>
&lt;li>호스트 단위 메트릭: CPU, 메모리, 디스크 I/O,에 관한 메트릭&lt;/li>
&lt;li>종합 메트릭: 데이터베이스 계층의 성능, 캐시 계층의 성능 등&lt;/li>
&lt;li>핵심 비즈니스 메트릭: 일별 능동 사용자, 수익, 재방문 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화
&lt;ul>
&lt;li>시스템이 크고 복잡해지면 생산성을 높이기 위해 자동화 도구를 활용해야한다.&lt;/li>
&lt;li>지속적 통합을 활용한 검증 절차 수행 및 빌드, 테스트, 배포 절차 자동화 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="수정한-설계안">수정한 설계안&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_16.png"
width="595"
height="741"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_16_hu91dcf9847683962bf50eb168546423cd_177817_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_16_hu91dcf9847683962bf50eb168546423cd_177817_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;ul>
&lt;li>메시지 큐는 각 컴포넌트가 보다 느슨히 결합될 수 있도록 하고, 결함에 대한 내성을 높인다.&lt;/li>
&lt;li>로그, 모니터링, 메트릭, 자동화 등을 지원하기 위한 장치를 추가한다.&lt;/li>
&lt;/ul>
&lt;h2 id="데이터베이스-규모-확장">데이터베이스 규모 확장&lt;/h2>
&lt;p>저장할 데이터가 많아지면 데이터베이스에 대한 부하도 증가한다.&lt;/p>
&lt;p>데이터베이스의 규모를 확장하는데는 앞서 언급했던 수직적 규모 확장과 수평적 규모 확장을 고려할 수 있다.&lt;/p>
&lt;p>&lt;strong>수평적 확장&lt;/strong>&lt;/p>
&lt;p>기존 서버에 더 많은, 고성능의 자원을 증설하는 방법이다.&lt;/p>
&lt;p>스택오버플로는 천만 명의 사용자 전부를 단 한 대의 마스터 데이터베이스로 처리했다.&lt;/p>
&lt;p>하지만 언급했던대로 몇가지 심각한 약점이 있다.&lt;/p>
&lt;ul>
&lt;li>무한 증설할 수는 없다.&lt;/li>
&lt;li>SPOF로 인한 위험성이 크다.&lt;/li>
&lt;li>비용이 많이 든다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>수평적 확장&lt;/strong>&lt;/p>
&lt;p>데이터베이스의 수평적 확장은 샤딩(sharding)이라고도 부르는데, 더 많은 서버를 추가함으로써 성능을 향상시킬 수 있도록 한다.&lt;/p>
&lt;h3 id="샤딩">샤딩&lt;/h3>
&lt;ul>
&lt;li>대규모 데이터베이스를 샤드(shard)라고 부르는 작은 단위로 분할하는 기술을 일컫는다.&lt;/li>
&lt;li>모든 샤드는 같은 스키마를 쓰지만 보관되는 데이터 사이에는 중복이 없다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_17.png"
width="369"
height="266"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_17_huc997d539c0fa3f28c4bae7dad9a2068b_33539_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_17_huc997d539c0fa3f28c4bae7dad9a2068b_33539_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="332px"
>&lt;/p>
&lt;p>위의 예시에서 &lt;code>user_id % 4&lt;/code>를 해시 함수로 사용하여 데이터가 보관되는 샤드를 정한다.&lt;/p>
&lt;p>이처럼 샤딩 전략을 구현할 때 고려해야 할 가장 중요한 것은 &lt;strong>샤딩 키&lt;/strong>를 어떻게 정하냐 하는 것이다.&lt;/p>
&lt;ul>
&lt;li>샤딩 키(파티션 키)는 데이터가 어떻게 분살될지 정하는 하나 이상의 컬럼으로 구성된다.&lt;/li>
&lt;li>샤딩 키를 통해 올바른 데이터베이스에 질의를 보내어 데이터 조회나 변경을 처리하므로 효율을 높일 수 있다.&lt;/li>
&lt;/ul>
&lt;p>샤딩 키를 정할 때는 데이터를 고르게 분할 할 수 있도록 하는 게 가장 중요하다.&lt;/p>
&lt;p>&lt;strong>주의사항&lt;/strong>&lt;/p>
&lt;p>샤딩은 데이터베이스 규모 확장을 실현하는 휼륭한 기술이지만 완벽하지 않으며, 도입하면 시스템이 복잡해지고 풀어야 할 새로운 문제도 생긴다.&lt;/p>
&lt;ul>
&lt;li>데이터의 재 샤딩
&lt;ul>
&lt;li>데이터가 너무 많아져서 하나의 샤드로는 더 이상 감당하기 어려울 때&lt;/li>
&lt;li>샤드 소진: 샤드 간 데이터 분포가 균등하지 못하여 어떤 샤드에 할당된 공간 소모가 다른 사드에 비해 빨리 진행될 때&lt;/li>
&lt;li>이러한 형상이 발생하면 샤드 키를 계산하는 함수를 변경하고 데이터를 재배치 하여야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유명인사 문제(핫스팟 키 문제)
&lt;ul>
&lt;li>특정 샤드에 질의가 집중되어 서버에 과부하가 걸리는 문제다.&lt;/li>
&lt;li>특정 샤드의 원인에 대해 샤드를 하나씩 할당해야 할 수도 있고, 더 잘개 쪼개야 할 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>조인과 비정규화
&lt;ul>
&lt;li>데이터베이스를 여러 샤드 서버로 쪼개고 나면, 여러 샤드에 걸친 데이터를 조인하기가 힘들어진다.&lt;/li>
&lt;li>데이터베이스를 비정규화하여 하나의 테이블에서 질의가 수행될 수 있도록 하는 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="샤드를-적용한-아키텍처">샤드를 적용한 아키텍처&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_18.png"
width="643"
height="800"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_18_hu3cfaabe2145c01222e45ae94975b52ee_217530_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_18_hu3cfaabe2145c01222e45ae94975b52ee_217530_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;ul>
&lt;li>데이터베이스에 대한 부하를 줄이기 위해 굳이 관계형 데이터베이스가 요구되지 않는 기능들은 NoSQL로 이전할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="백만-사용자-그리고-그-이상">백만 사용자, 그리고 그 이상&lt;/h2>
&lt;p>시스템의 규모를 확장하는 것은 지속적이고 반복적인 과정이며, 이번 장에서 다룬 내용을 반복하다 보면 원하는 규모의 시스템을 달성할 수 있게 된다.&lt;/p>
&lt;p>그러나 수백만 사용자 이상을 지원하려면 새로운 전략을 도입해야 하고 지속적으로 시스템을 가다듬어야 할 것이다.&lt;/p>
&lt;ul>
&lt;li>시스템 최적화 및 마이크로서비스 등&lt;/li>
&lt;/ul>
&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>웹 계층은 무상태 계층으로&lt;/li>
&lt;li>모든 계층에 다중화 도입&lt;/li>
&lt;li>가능한 한 많은 데이터를 캐시할 것&lt;/li>
&lt;li>여러 데이터 센터를 지원할 것&lt;/li>
&lt;li>정적 콘텐츠는 CDN을 통해 서비스할 것&lt;/li>
&lt;li>데이터 계층은 샤딩을 통해 그 규모를 확장할 것&lt;/li>
&lt;li>각 계층은 독립적 서비스로 분할할 것&lt;/li>
&lt;li>시스템을 지속적으로 모니터링하고, 자동화 도구들을 활용할 것&lt;/li>
&lt;/ul></description></item></channel></rss>