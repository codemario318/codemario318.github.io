<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ToyMario on Mario Blog</title><link>https://codemario318.github.io/tags/toymario/</link><description>Recent content in ToyMario on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Thu, 27 Apr 2023 12:30:18 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/toymario/index.xml" rel="self" type="application/rss+xml"/><item><title>[Toy Mario: Auth] 1. 스프링부트 프로젝트 구성하기</title><link>https://codemario318.github.io/post/toy-mario/0/auth/1/</link><pubDate>Thu, 27 Apr 2023 12:30:18 +0900</pubDate><guid>https://codemario318.github.io/post/toy-mario/0/auth/1/</guid><description>&lt;img src="https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_cover.jpeg" alt="Featured image of post [Toy Mario: Auth] 1. 스프링부트 프로젝트 구성하기" />&lt;p>안녕하세요, 마리오입니다 :)&lt;br>
Auth 영역 개발 처음은 스프링부트 프로젝트 구성입니다. 스프링 공식 문서에 있는 가이드를 참고하였습니다.&lt;/p>
&lt;h2 id="새-프로젝트-만들기">새 프로젝트 만들기&lt;/h2>
&lt;p>가이드 문서에 나온대로 Spring Initializr를 사용하여 프로젝트를 생성해보겠습니다. IntelliJ에도 통합되어 있어 IDE에서 명령줄이나 웹 UI를 사용하지 않고도 새 프로젝트를 만들고 가져올 수 있다고 하네요.&lt;/p>
&lt;p>&lt;a class="link" href="https://start.spring.io/#!language=kotlin&amp;amp;type=gradle-project-kotlin" target="_blank" rel="noopener"
>https://start.spring.io/#!language=kotlin&amp;amp;type=gradle-project-kotlin&lt;/a>링크에 접속하여 언어를 &lt;code>Kotlin&lt;/code>, 빌드 도구를 &lt;code>Gradle - Kotlin&lt;/code>으로 설정하겠습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_1.png"
width="1138"
height="680"
srcset="https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_1_hucf844cc59bc9a1c9c43768008a0f795e_158888_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_1_hucf844cc59bc9a1c9c43768008a0f795e_158888_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="401px"
>&lt;/p>
&lt;p>그 외 설정은 starter.spring.io의 기본 설정으로 유지하고, Dependencies만 필요한것을 추가하여 사용하겠습니다.&lt;/p>
&lt;ul>
&lt;li>Spring Web&lt;/li>
&lt;li>Spring Data JPA&lt;/li>
&lt;li>H2 Database&lt;/li>
&lt;li>Spring Boot DevTools&lt;/li>
&lt;li>Spring Security&lt;/li>
&lt;li>Redis&lt;/li>
&lt;/ul>
&lt;h2 id="persistence-with-jpa">Persistence with JPA&lt;/h2>
&lt;p>&lt;code>Kotlin&lt;/code>에서는 무분별한 상속을 막기 위해 기본적으로 모든 클래스는 기본 변경자가 &lt;code>final&lt;/code>로 처리됩니다. &lt;code>Hibernate&lt;/code>의는 이러한 규칙을 강요하지않아 &lt;code>final entity&lt;/code>를 받더라도 에러가 발생하지는 않지만, &lt;code>JPA&lt;/code>와 관련된 클래스와 프로퍼티들은 반드시 &lt;code>open&lt;/code> 되어야 합니다(&lt;a class="link" href="https://spring.io/guides/tutorials/spring-boot-kotlin/#:~:text=as%20described%20in-,KT%2D28525,-.%20We%20are%20going" target="_blank" rel="noopener"
>KT-28525&lt;/a>).&lt;/p>
&lt;p>이에 따라 &lt;code>final&lt;/code>로 해석되는 &lt;code>Kotlin Class&lt;/code>를 그대로 활용할 경우 &lt;code>lazy fetching&lt;/code>에 활용되는 &lt;code>Proxy&lt;/code>가 정상적으로 동작하지 못해 &lt;code>eager fetching&lt;/code>으로 처리되어 데이터 조회시 성능 이슈를 발생 시킬 수 있습니다.&lt;/p>
&lt;p>이러한 문제는 &lt;code>allopen&lt;/code> 플러그인을 통해 해결 가능하므로, 플러그인 관련 코드를 &lt;code>build.gradle.kts&lt;/code> 추가해주겠습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">plugins&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">kotlin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;plugin.allopen&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="s2">&amp;#34;1.7.22&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">allOpen&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">annotation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;jakarta.persistence.Entity&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">annotation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;jakarta.persistence.Embeddable&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">annotation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;jakarta.persistence.MappedSuperclass&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="kapt">kapt&lt;/h2>
&lt;p>&lt;code>kapt(Kotlin Annotation Processing Tool)&lt;/code>는 &lt;code>Kotlin&lt;/code>에서 어노테이션 프로세서(annotation processor)를 실행하고 처리하는 도구로써 &lt;code>Kotlin&lt;/code>으로 어노테이션을 작성하고 실행하기 위해 사용됩니다.&lt;/p>
&lt;p>&lt;code>Kotlin&lt;/code>에서는 애플리케이션 프로퍼티를 사용할 때 읽기 전용 프로퍼티 사용을 권장하는데, 커스텀 프로퍼티는 IDE에서 인식하지 못하기 때문에 메타데이터 생성을 위해 &lt;code>spring-boot-configuration-processor&lt;/code> 종속성을 이용하여 &lt;a class="link" href="https://kotlinlang.org/docs/reference/kapt.html" target="_blank" rel="noopener"
>Kapt&lt;/a>를 구성해야한다고 하네요.&lt;/p>
&lt;p>마찬가지로 &lt;code>build.gradle.kts&lt;/code>에 관련 설정을 추가하겠습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">plugins&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">kotlin&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;kapt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">version&lt;/span> &lt;span class="s2">&amp;#34;1.7.22&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dependencies&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">kapt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;org.springframework.boot:spring-boot-configuration-processor&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&amp;ldquo;설정 &amp;gt; 플러그인&amp;rdquo; 에서 &lt;code>Spring Boot&lt;/code> 플러그인이 활성되어 있는지 확인&lt;br>
&lt;img src="https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_2.png"
width="2188"
height="1656"
srcset="https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_2_hu9768a194a00d126b7a26866c6f0c2d69_670309_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_2_hu9768a194a00d126b7a26866c6f0c2d69_670309_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/li>
&lt;li>&amp;ldquo;설정 &amp;gt; 빌드, 실행, 배포 &amp;gt; 컴파일러 &amp;gt; 어노테이션 프로세서&amp;rdquo; 에서 어노테이션 처리 활성화
&lt;img src="https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_3.png"
width="2188"
height="1656"
srcset="https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_3_hu9768a194a00d126b7a26866c6f0c2d69_723344_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/toy-mario/0/auth/1/toy_mario_0_auth_1_3_hu9768a194a00d126b7a26866c6f0c2d69_723344_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/li>
&lt;li>터미널에서 &lt;code>./gradlew kaptKotlin&lt;/code> 명령 실행하여 메타데이터 생성&lt;/li>
&lt;/ul>
&lt;h2 id="끝으로">끝으로&lt;/h2>
&lt;p>프로젝트를 생성하고 기본적으로 필요한 구성은 모두 끝난 것 같습니다. 다음 차례 부터는 구현이되겠네요!&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다 :D&lt;/p></description></item><item><title>[Toy Mario: Auth] 0. 시작</title><link>https://codemario318.github.io/post/toy-mario/0/auth/0/</link><pubDate>Wed, 26 Apr 2023 13:49:18 +0900</pubDate><guid>https://codemario318.github.io/post/toy-mario/0/auth/0/</guid><description>&lt;img src="https://codemario318.github.io/post/toy-mario/0/auth/0/toy_mario_cover.jpeg" alt="Featured image of post [Toy Mario: Auth] 0. 시작" />&lt;p>안녕하세요, 마리오입니다 :)&lt;br>
프로젝트 첫 걸음으로 Auth 영역을 만들어 보겠습니다.&lt;/p>
&lt;h2 id="기술-검토">기술 검토&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/toy-mario/0/auth/0/toy_mario_0_auth_1.webp"
width="1000"
height="420"
srcset="https://codemario318.github.io/post/toy-mario/0/auth/0/toy_mario_0_auth_1_hu5d98a5c6047b7339a15e348873a93ccf_9824_480x0_resize_q75_h2_box_2.webp 480w, https://codemario318.github.io/post/toy-mario/0/auth/0/toy_mario_0_auth_1_hu5d98a5c6047b7339a15e348873a93ccf_9824_1024x0_resize_q75_h2_box_2.webp 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="238"
data-flex-basis="571px"
>&lt;/p>
&lt;p>인증 관련 기능을 별도 API 서버로 분리하여 구현하기 위해 &lt;code>JWT(JSON Web Token)&lt;/code>인증 방식이 가장 적절하다고 판단하였고,
&lt;code>JWT&lt;/code>인증 구현 관련 정보가 가장 많은 &lt;code>Spring Boot&lt;/code>를 사용하려고 합니다.&lt;/p>
&lt;p>언어는 &lt;code>Java&lt;/code>, &lt;code>Kotlin&lt;/code>중 선택할 수 있었는데요!&lt;br>
상대적으로 &lt;code>Java&lt;/code>가 더 많은 정보들이 있었지만, 17 버전 이후부터는 &lt;code>Kotlin&lt;/code>과 큰 차이가 없어서 평소에 공부하고 싶었던 &lt;code>Kotlin&lt;/code>으로 결정하였습니다.&lt;/p>
&lt;h2 id="기능-명세">기능 명세&lt;/h2>
&lt;p>Auth 영역에서 필수적이라고 생각되는 기능들은 아래와 같습니다. 회원 기능을 구현하는 방식은 다양하게 존재하지만, 저는 이메일을 ID로 사용하는 방식으로 구현해보려고 합니다.&lt;/p>
&lt;ul>
&lt;li>회원가입&lt;/li>
&lt;li>로그인&lt;/li>
&lt;li>로그아웃&lt;/li>
&lt;li>비밀번호 재설정&lt;/li>
&lt;li>회원탈퇴&lt;/li>
&lt;/ul>
&lt;h3 id="메일-발송">메일 발송&lt;/h3>
&lt;p>ID를 이메일로 활용하기 때문에, 사용자가 자신의 이메일을 사용했는지 검증하는 처리가 필요합니다. 비밀번호 재설정에서도 필요하겠네요.&lt;br>
이러한 이유로 이메일 검증을 위해 입력한 이메일 주소로 &lt;strong>인증번호&lt;/strong>를 보내서 확인하는 처리가 필요할 것 같습니다.&lt;/p>
&lt;p>메일 발송도 여러 방식으로 처리 가능한데요. 저는 이메일 발송 인터페이스를 구현하고 처음에는 스프링에서 제공하는 라이브러리를 활용하여 구현하고, 이후에 별도 서버로 분리하여 &lt;strong>메시지큐&lt;/strong>를 활용해 발송하는 방식으로 구현해보겠습니다.&lt;/p>
&lt;h3 id="인증-번호-관리">인증 번호 관리&lt;/h3>
&lt;p>사용자가 입력한 인증 번호를 확인하기 위해 발급한 인증 번호 관리가 필요한데 인증 번호는 영속성을 유지할 필요가 없습니다.&lt;br>
따라서 일정 시간만 유지하는 것이 기능 이슈가 적을 것으로 생각되기 때문에 &lt;code>Redis&lt;/code>를 활용해보겠습니다.&lt;/p>
&lt;h3 id="access-token-only">Access Token Only&lt;/h3>
&lt;p>앞서 말씀 드렸던 것 처럼 &lt;code>JWT&lt;/code>를 활용하여 인증을 구현할 예정인데요. 이를 위해 &lt;code>Spring Security&lt;/code>를 활용할 예정입니다.&lt;br>
로그인 유지 기간이 오랜 시간은 필요하지 않을 것 같아 &lt;code>Refresh Token&lt;/code>은 사용하지 않겠습니다.&lt;/p>
&lt;h3 id="jwt-blacklist">JWT Blacklist&lt;/h3>
&lt;p>&lt;code>JWT&lt;/code>를 이용해 인증 처리를 하게 되면 토큰이 만료되기 전까지 유효한 토큰으로 인식되는데, 로그아웃을 했을 경우 해당 토큰을 더 이상 사용하지 못하게 해야합니다.&lt;br>
저는 인증번호에서도 사용한 &lt;code>Redis&lt;/code>를 통해 &lt;code>JWT Blacklist&lt;/code>를 구현하여 로그아웃을 구현하겠습니다.&lt;/p>
&lt;h2 id="끝으로">끝으로&lt;/h2>
&lt;p>사실 스프링을 제대로 써본적이 없고, kotlin도 처음이어서 걱정이 앞서네요 &amp;hellip; &lt;br>
그래도 최선을 다해서 해보겠습니다! 끝까지 읽어주셔서 감사합니다 :D&lt;/p></description></item><item><title>[Toy Mario] 시작</title><link>https://codemario318.github.io/post/toy-mario/0/1/</link><pubDate>Wed, 26 Apr 2023 10:00:01 +0900</pubDate><guid>https://codemario318.github.io/post/toy-mario/0/1/</guid><description>&lt;img src="https://codemario318.github.io/post/toy-mario/0/1/toy_mario_cover.jpeg" alt="Featured image of post [Toy Mario] 시작" />&lt;p>안녕하세요, 마리오입니다 :)&lt;/p>
&lt;p>일을 쉬는 동안 평소에 생각만 하고 있던 토이 프로젝트를 구현해보려 합니다. 그리고 프로젝트를 수행하는 과정에서 했던 고민과 학습 내용들을 글로 남겨보겠습니다.&lt;/p>
&lt;h2 id="구조">구조&lt;/h2>
&lt;p>사용자의 데이터를 받아 학습된 인공지능 모델을 통해 나온 결과를 제공하는 재미 위주의 서비스를 만들어 볼 예정입니다. 대략적인 흐름을 살펴보면 아래와 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/toy-mario/0/1/toy_mario_0_1.png"
width="783"
height="303"
srcset="https://codemario318.github.io/post/toy-mario/0/1/toy_mario_0_1_hua56a0005a5b424b1e4971563b91b580a_33725_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/toy-mario/0/1/toy_mario_0_1_hua56a0005a5b424b1e4971563b91b580a_33725_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="258"
data-flex-basis="620px"
>&lt;/p>
&lt;p>처음엔 이미지 데이터를 이용하는 서비스만 생각했는데, 이후에도 다른 인공지능 모델들도 활용하고 싶었습니다. 그래서 모델마다 하나의 서비스를 가지고 모델이 추가될때마다 확장 가능할 수 있게 구성해봤습니다.&lt;/p>
&lt;p>시작할때는 데이터만 받는 방식으로 간단하게 만들어 보려고 했는데 고민하다보니 처음보다 복잡해졌네요.&lt;br>
대략적인 구조는 이렇지만 아직 공부가 부족하기 때문에 프로젝트 진행에 따라 바뀔수도 있을 것 같습니다 :D&lt;/p>
&lt;h3 id="auth-영역">Auth 영역&lt;/h3>
&lt;p>처음에 고려했던 부분은 아니지만 사용자가 자신이 사용했던 서비스의 결과를 다시 확인한다던가, 공유 한다던가 할때 더 많은 기능을 제공할 수 있을 것 같아 추가하게 되었습니다.&lt;/p>
&lt;p>이메일 정도만 활용해서 간단한 회원 기능을 구성할 예정입니다.&lt;/p>
&lt;h3 id="service-영역">Service 영역&lt;/h3>
&lt;p>클라이언트의 요청 처리를 담당하게 될 영역입니다.&lt;br>
사용자가 보낸 데이터를 받고, 인증된 사용자에게 Data API 서버를 통해 모델의 결과를 받아와서 다시 클라이언트에게 제공하는 역할을 담당합니다.&lt;/p>
&lt;h3 id="data-영역">Data 영역&lt;/h3>
&lt;p>Service API 서버를 통해 받은 데이터를 처리하는 서버입니다. 데이터 관련 역할을 분리하기 위해서 구성해봤습니다.&lt;/p>
&lt;ul>
&lt;li>데이터 전처리&lt;/li>
&lt;li>모델에게 결과 받아오기&lt;/li>
&lt;li>데이터 아카이빙&lt;/li>
&lt;/ul>
&lt;p>위 3가지 역할을 담당하게 될 것 같은데, 처음 구현할 이미지 데이터를 활용하는 서비스는 데이터 전처리가 클라이언트, Service 영역 에서도 가능하고, 아카이빙도 Service 영역에서 해결하는게 좋을 수도 있을 것 같아 고민이 많은 부분이네요.&lt;/p>
&lt;p>Data 영역은 개발 과정에서 역할을 나누게 되어 없어지거나, 여러개 작은 영역으로 분리할수도 있을 것 같네요.&lt;/p>
&lt;h3 id="model-영역">Model 영역&lt;/h3>
&lt;p>요청받은 데이터로 모델의 결과를 응답하는 영역입니다. 그리고 해당 모델을 새로 저장된 데이터로 다시 학습 하게 구현해 볼 예정입니다.&lt;/p>
&lt;h2 id="끝으로">끝으로&lt;/h2>
&lt;p>고민 하다보니 욕심이 많아져서 이것 저것 많은 기능을 넣게 되었네요. 앞으로 험난한 길을 가게될 것으로 예상됩니다 :(&lt;/p>
&lt;p>앞서 조금씩 언급했던 내용처럼 처음에는 간단한 CV 모델을 활용해서 전체 흐름을 파악해 볼 생각이에요. 느리더라도 꾸준히 수행해서 꼭 완성해보도록 하겠습니다.&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다 :D&lt;/p></description></item></channel></rss>