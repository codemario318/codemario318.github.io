<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>커넥트 재단 on Mario Blog</title><link>https://codemario318.github.io/tags/%EC%BB%A4%EB%84%A5%ED%8A%B8-%EC%9E%AC%EB%8B%A8/</link><description>Recent content in 커넥트 재단 on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sun, 01 Sep 2024 21:00:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/%EC%BB%A4%EB%84%A5%ED%8A%B8-%EC%9E%AC%EB%8B%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>멤버십 과정 2주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/2/</link><pubDate>Sun, 01 Sep 2024 21:00:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/2/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/cover.png" alt="Featured image of post 멤버십 과정 2주차 회고" />&lt;p>멤버십 과정 두 번째 주가 마무리 되었습니다. 🥳&lt;/p>
&lt;p>이번주는 예상대로 1주차에 만든 결과물에 새로운 기술들을 이용하여 개선하는 미션이 주어졌습니다.&lt;/p>
&lt;p>&lt;strong>프론트엔드&lt;/strong>는 &lt;code>DOM API&lt;/code>, &lt;code>Event&lt;/code>, &lt;code>Fetch API&lt;/code>를 활용하여 클라이언트 영역에서의 동적인 UI로 개선하는 내용이 주어졌고, &lt;strong>백엔드&lt;/strong>는 가상환경에 데이터베이스를 설치하고, 서버에서 연동하는 미션이 주어졌습니다.&lt;/p>
&lt;p>사실 프론트엔드 영역은 처음부터 CSR로 아예 분리해서 진행하고 있었기 때문에 큰 변경은 없었어요, 그래서 리펙토링을 위주로 진행했던 것 같습니다.&lt;/p>
&lt;p>백엔드도 리포지토리를 인터페이스를 통해 잘 분리했었기 때문에 큰 이슈 없이 진행되었어요&lt;/p>
&lt;p>그럼에도 불구하고 새롭게 배운 내용들은 제법 있었는데, 그 내용들을 언급해보면 좋을 것 같아요😁&lt;/p>
&lt;h2 id="프론트엔드">프론트엔드&lt;/h2>
&lt;p>프론트엔드 영역은 이미 언급했던 것 처럼 큰 변경사항은 없었습니다. HTML, CSS 구조를 조금 개선하고, TS 코드들을 조금 개선하였어요&lt;/p>
&lt;p>그 중 가장 큰 개선을 꼽으라면 &lt;strong>이벤트 위임&lt;/strong>(Event Delegation)을 통해 TS 코드를 개선했던 것을 꼽을 수 있을 것 같습니다.&lt;/p>
&lt;h3 id="이벤트-위임">이벤트 위임&lt;/h3>
&lt;p>저는 현업에서 &lt;strong>Vue3&lt;/strong>로 프론트엔드를 개발했었는데요, 그렇기 때문에 &lt;code>v-on&lt;/code>을 이용하여 DOM 요소에 이벤트를 직접 바인딩 하는 방식에 적응되어있었습니다.&lt;/p>
&lt;p>그리고 혼자 사용해봤던 &lt;strong>React&lt;/strong>에서도 &lt;code>onClick&lt;/code> 같은 방식으로 직접 바인딩해줬었어요.&lt;/p>
&lt;p>그래서 이번 &lt;strong>Vanilla TypeScript&lt;/strong>로 개발을 진행하면서도 별 생각없이 &lt;code>&amp;lt;li&amp;gt;&lt;/code> 처럼 반복적으로 들어가는 요소의 &lt;strong>이벤트 등록&lt;/strong>을 각각 바인딩 해주는 방식을 사용했습니다. 아래처럼요!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">renderItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLUListElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$ul&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ul.item-list&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">makeItemElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceChildren&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeItemElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLLIElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;li&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">li&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그런데 문제는 &lt;strong>Vue&lt;/strong>에서는 동적으로 생성된 DOM 이라고 하더라도 언마운트될 때 자동으로 바인딩 된 이벤트 리스너들이 정리되어 신경 쓸 필요가 없고, &lt;strong>React&lt;/strong>같은 경우는 &lt;strong>Synthetic Event System&lt;/strong>을 통해 최상위 루트 노드에서 모든 이벤트들을 위임받아 각 컴포넌트로 전달하는 방식으로 처리하여 성능상의 이점을 제공한다는 것을 알게 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img.png"
width="840"
height="650"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_hu06827f719d27f9740548ce869145ec8d_92734_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_hu06827f719d27f9740548ce869145ec8d_92734_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Synthetic Event System"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>위 예시처럼 이벤트 위임을 사용하지 않을 경우 몇 가지 문제가 발생할 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>성능 문제&lt;/strong>&lt;/p>
&lt;p>동적으로 생성된 여러 개의 요소에 이벤트 리스너를 개별적으로 추가하면, DOM에 많은 수의 이벤트 리스너가 바인딩됩니다.&lt;/p>
&lt;p>이로 인해 매우 많은 요소가 있을 경우 각각의 리스너가 메모리에 로드되면서 렌더링 속도가 느려지거나 메모리 사용량이 급격히 증가할 수 있습니다.&lt;/p>
&lt;p>또한 이벤트가 발생할 때마다 모든 이벤트 핸들러가 독립적으로동작하므로 성능 저하가 발생할 수도 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>유지보수성 문제&lt;/strong>&lt;/p>
&lt;p>동일한 유형의 이벤트를 처리하기 위해 여러 요소에 유사한 이벤트 핸들러가 중복으로 작성되어 수정이 필요할 때 실수를 유발할 수 있습니다.&lt;/p>
&lt;p>또한 코드의 복잡성을 높히게 될 수 있습니다. 특히 동적으로 요소가 추가, 삭제되는 경우, 각각의 이벤트 핸들러를 적절하게 관리하는 것이 어려워 질 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>그래서 저는 아래와 같은 형식으로 코드들을 개선하였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">renderItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$ul&lt;/span>: &lt;span class="kt">HTMLUListElement&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">items&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">makeItemElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceChildren&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">$items&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ...items 대신 ...$items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">bindItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$ul&lt;/span>: &lt;span class="kt">HTMLUListElement&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">HTMLElement&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleClickItemButton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeItemElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLLIElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;li&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$button&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">$li&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="백엔드">백엔드&lt;/h2>
&lt;p>백엔드 미션에서는 위에서 언급했던대로 데이터베이스를 연동해야하는 미션이 주어졌습니다.&lt;/p>
&lt;p>처음 가상 환경으로 리눅스 서버를 구성하고 데이터베이스 서버를 만들었어야 했는데, 마스터이신 &lt;strong>호눅스&lt;/strong>님이 &lt;strong>AWS EC2&lt;/strong>로 해보는 것도 허용하셔서 &lt;strong>EC2&lt;/strong>를 띄워 데이터베이스 서버를 구성하였어요&lt;/p>
&lt;p>이번 미션에서 데이터베이스에 관련하여 새롭게 알게된 점을 공유해보려고합니다.&lt;/p>
&lt;h3 id="외래키-제약조건-설정-문제">외래키 제약조건 설정 문제&lt;/h3>
&lt;p>저는 지금까지 데이터베이스를 설계할 때는 외래키 제약 조건을 표시하지만 실제 데이터베이스에서는 외래키를 설정하지 않는 것이 일반적인 것으로 알고 있었습니다.&lt;/p>
&lt;p>사실 틀린 말은 아닌 것 같아요. 이전 직장에서 제가 활용했던 대부분의 테이블에는 외래키 제약 조건이 설정되어있지 않았고, 몇몇 강의에서도 관련 내용들을 언급합니다.&lt;/p>
&lt;p>이전 직장에서 꽤 큰 개편 프로젝트를 수행하며 기존 테이블을 마이그레이션 했었는데, 이때 DBA 에게 물어봤을 때는 &lt;strong>성능 문제&lt;/strong>와 &lt;strong>작업 편의성&lt;/strong> 등을 이유로 말씀해주셨었습니다.&lt;/p>
&lt;p>그리고 제가 학습했던 책인 &lt;strong>Real MySQL 8.0&lt;/strong>에서도 &lt;code>InnoDB&lt;/code> 스토리지 엔진을 설명하는 부분에서 &lt;strong>&lt;code>외래 키는 데이터베이스 서버 운영의 불편함 때문에 서비스용 데이터베이스에서는 생성하지 않는 경우도 자주 있다.&lt;/code>&lt;/strong> 라는 내용을 언급하고 있습니다.&lt;/p>
&lt;p>그런데 이번 마스터 세션에서 관련 이야기가 나왔고, 조금 다른 의견을 들을 수 있었어요&lt;/p>
&lt;p>&lt;strong>일단 외래키를 사용하지 않아야 한다고 주장하는 이유&lt;/strong>를 조금 더 자세히 살펴보겠습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>성능 문제&lt;/strong>&lt;/p>
&lt;p>외래키 제약조건은 데이터베이스가 데이터 무결성을 유지하기 위해 참조 무결성을 확인해야하므로, 데이터 삽입, 수정, 삭제 시 추가적인 연산(잠금)이 발생하고, 이러한 처리가 성능의 저하를(데드락 등) 발생시킨다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>데이터 마이그레이션&lt;/strong>&lt;/p>
&lt;p>데이터 마이그레이션 작업 중 외래키 제약 조건이 있는 경우, 데이터 삽입 순서에 따라 제약조건 위반이 발생할 수 있기 때문에, 이러한 문제를 피하기 위해 외래키 제약조건을 사용하지 않거나, 일시적으로 비활성화한 후 작업을 수행해야한다.&lt;/p>
&lt;hr>
&lt;p>대표적으로 언급된 두 가지 문제로 인해 어플리케이션단에서의 처리를 통해 외래키 제약 조건 문제를 해소하려고 하는 시도가 많은 것 같습니다.&lt;/p>
&lt;p>두 가지 이유 모두 타당하지만 외래키 제약 조건으로 인해 발생하는 &lt;strong>성능 저하&lt;/strong>는 대부분의 서비스에서는 의미있는 수준은 아니라고 해요&lt;/p>
&lt;p>다만 데이터가 꽤 많이 적재되어있는 상태에서 복잡한 외래키 제약조건이 설정되어있는 컬럼을 수정하는 작업은 위험하고, 비용이 많이 발생하는 작업이기 때문에, 변경이 많이 필요할 수 있는 테이블에는 외래키 제약 조건을 설정하지 않는 것이 타당할 수 있다고 합니다.&lt;/p>
&lt;p>그렇기 때문에 프로젝트가 충분히 안정화되었다면, 이후 제약 조건을 추가하는 것이 좋다는 것이 좋다는 의견이었습니다.&lt;/p>
&lt;hr>
&lt;p>그래서 결론적으로 이야기하면 &lt;strong>&lt;code>외래키 제약조건을 사용하지 않는 것은 국룰은 아니다.&lt;/code>&lt;/strong> &lt;strong>&lt;code>외래키 제약조건을 무분별하게 사용하는 것은 지양하자&lt;/code>&lt;/strong> 정도로 요약할 수 있을 것 같습니다. &lt;del>사실 개인 취향인가 싶어요&lt;/del>&lt;/p>
&lt;h3 id="uuid-성능-문제">UUID 성능 문제&lt;/h3>
&lt;p>이번 데이터 모델을 설계하면서 모든 ID 컬럼은 &lt;strong>UUID&lt;/strong>로 설정했습니다.&lt;/p>
&lt;p>사실 UUID는 생성되는 특징으로 인해 전역적으로 충돌 가능성이 매우 낮은 고유한 ID를 만들 수 있어, 분산 환경에서 많이 사용하게됩니다.&lt;/p>
&lt;p>이번 미션은 RDBMS를 사용하는 것 이었고, RDBMS는 동기화의 어려움으로 인해 마스터 DB를 여러대 두는 방식을 적극적으로 고려하지는 않습니다.&lt;/p>
&lt;p>그래서인지 스터디 그룹원 중 한분이 &lt;code>AUTO_INCREMENT&lt;/code>를 사용하지 않고 UUID를 사용한 이유를 질문해주셨어요. 그래서 저는 아래와같이 답변을 했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>키 생성 처리를 데이터베이스와 분리&lt;/strong>&lt;/p>
&lt;p>일단 저는 키값을 데이터베이스에서 생성한다는 것 자체가 비즈니스 로직과 데이터베이스에 의존의 생긴다고 생각했어요! 이는 추후 데이터베이스를 NoSQL로 변경한다던가 분산 데이터베이스로 전환한다던가 하는 문제에서 비교적 자유로울 수 있습니다.&lt;/p>
&lt;p>&lt;code>AUTO_INCREMENT&lt;/code>가 충돌없는 키 값을 만들어야하는 규칙에서도 자유로울 수 있다고 생각했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>키 생성을 서버가 담당&lt;/strong>&lt;/p>
&lt;p>RDBMS의 &lt;code>AUTO_INCREMENT&lt;/code>를 사용한다는 것은 결국 관련 처리를 위한 자원이 필요하다는 것을 의미해요&lt;/p>
&lt;p>대부분 웹 서버는 HTTP를 활용한 무상태성을 유지하도록 구현되기 때문에 수평 확장이 비교적 쉬운 반면, RDBMS는 동기화의 어려움으로 인해 읽기 작업 외의 기능은 결국 마스터 데이터베이스 1대가 처리하게 됩니다.&lt;/p>
&lt;p>말씀해주신것처럼 &lt;code>AUTO_INCREMENT&lt;/code>를 사용한다면 웹 서버가 관련 처리를 하지 않기 때문에 부하가 덜 발생하는 것 처럼 보이지만, 결과적으로 성능의 병목이되기 쉬운 RDBMS의 부하를 증가 시키게 되는 것이죠&lt;/p>
&lt;p>UUID 생성에는 많은 부하가 발생하지 않고, 웹 서버는 수평적 확장이 쉽기 때문에 많은 처리가 필요하다면 데이터베이스에서 발생하는 부하를 조금이나마 줄일 수 있을 것이라고 생각했어요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>코드 품질&lt;/strong>&lt;/p>
&lt;p>첫 번째와 많이 겹치는 부분이긴한데, 제 백엔드 처리를 보시면 서비스 로직에서 사용자의 요청으로 받은 입력으로 엔티티를 만들어 사용하는 것을 보실 수 있을거에요&lt;/p>
&lt;p>이 때 최초 생성하는 엔티티에 대해서는 UUID를 직접 만들어주고 있는데, &lt;code>AUTO_INCREMENT&lt;/code>를 사용하게되면 RDBMS에서 값을 생성해주기 전 까지는 id 값을 알 수 없기 때문에 해당 값에 null을 허용해야한다는 문제? 도 있다고 생각했어요&lt;/p>
&lt;p>&lt;code>null&lt;/code> 허용하게 되었을 때 발생할 수 있는 문제들과 &lt;code>null&lt;/code>을 처리해야함으로 인해 만들어지는 비즈니스 로직, 그리고 &lt;code>null&lt;/code>로 인한 코드 오염을 예방하기 위해 조금 더 엄격한 타입을 사용하려는 의도도 있었습니다.&lt;/p>
&lt;hr>
&lt;p>이러한 이유를 들어서 설명했는데 작업하다보니 두 번째 이유인 &lt;strong>키 생성을 서버가 담당하여 RDBMS의 부하를 조금이나마 덜겠다.&lt;/strong> 는 이유는 틀릴수도 있지 않을까라는 생각을 하게 되었습니다.&lt;/p>
&lt;h4 id="mysql의-pk">MySQL의 PK&lt;/h4>
&lt;p>MySQL의 InnoDB 스토리지 엔진을 사용하게되면, 모든 테이블은 기본적으로 &lt;strong>프라이머리 키&lt;/strong>를 기준으로 &lt;strong>클러스터링&lt;/strong>되어 저장됩니다.&lt;/p>
&lt;p>&lt;strong>PK&lt;/strong>를 B-Tree 계열 자료 구조를 통해 값의 순서대로 디스크에 저장하게되고, 모든 세컨더리 인덱스는 레코드의 주소 대신 프라이머리의 키 값을 논리적은 주소로 사용하게되어요&lt;/p>
&lt;p>이러한 특성 때문에 충돌 가능성이 지극히 낮은 랜덤한 값을 만들어내는 &lt;code>UUID v4&lt;/code>로 PK로 설정하면, 성능의 저하가 발생할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2.png"
width="926"
height="657"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2_hu4c15cba2b4aacfb7cc2a03a3c364cd6f_50081_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2_hu4c15cba2b4aacfb7cc2a03a3c364cd6f_50081_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="v4 - Random 포함"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;br>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1.png"
width="926"
height="657"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1_hu9678aa1d8eaa8f3bbabd1ff9874b8021_56627_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1_hu9678aa1d8eaa8f3bbabd1ff9874b8021_56627_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="v4 - Random 제외"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;/p>
&lt;p>위 그래프는 배치당 100,000건의 데이터를 &lt;code>INSERT&lt;/code>하는 쿼리에서 성능 차이를 보여줍니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3.png"
width="885"
height="588"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3_hu7772b5810b6ad334b763624da5431ad0_25600_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3_hu7772b5810b6ad334b763624da5431ad0_25600_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="테스트가 실행되는 데 걸린 시간"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>극단적인 상황이긴 하지만, 히스토그램을 살펴보면 &lt;code>AUTO_INCREMENT&lt;/code>에 비해서 &lt;code>UUID v4&lt;/code>가 성능이 크게 떨어지는 것을 볼 수 있습니다.&lt;/p>
&lt;p>그래서 &lt;strong>데이터베이스의 부하를 줄인다.&lt;/strong> 는 말은 틀렸다고 볼 수 있을 것 같습니다.&lt;/p>
&lt;p>물론 이 그래프의 출처에서는 &lt;code>Sequential UUID v4&lt;/code>를 사용했을 경우 성능이 의미있는 수준의 차이는 아니기 때문에 사용할 것을 권하고는 있습니다.🤣&lt;/p>
&lt;h4 id="mysql의-uuid-처리-방식">MySQL의 UUID 처리 방식&lt;/h4>
&lt;p>MySQL은 컬럼 타입으로 UUID를 제공하고 있지는 않습니다. 그래서 사용하려면 몇가지 절차가 필요합니다.&lt;/p>
&lt;p>아래는 테이블을 생성하는 예시입니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>UUID를 &lt;code>CHAR(36)&lt;/code> 형식으로 사용&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">CHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">36&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID&lt;/span>&lt;span class="p">()),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TIMESTAMP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CURRENT_TIMESTAMP&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UUID를 생성하는 함수는 존재하지만 컬럼 타입으로는 존재하지 않기 때문에, &lt;code>CHAR(36)&lt;/code>으로 지정한 모습입니다.&lt;/p>
&lt;p>여기에서 컬럼의 크기를 작게 만드는 방법도 적용 가능해요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>UUID를 &lt;code>BINARY(16)&lt;/code> 형식으로 사용&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">BINARY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID&lt;/span>&lt;span class="p">())),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TIMESTAMP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CURRENT_TIMESTAMP&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UUID를 &lt;code>BINARY(16)&lt;/code>으로 선언하고, 저장할 떼 UUID를 &lt;code>BINARY&lt;/code>로 변환하여 저장하는 방법입니다.&lt;/p>
&lt;p>성능을 테스트하지는 않았지만, 함수로 인한 처리가 필요하다는 부분이 조금 꺼림직하더라구요😅&lt;/p>
&lt;hr>
&lt;p>위와 같이 &lt;code>BINARY(16)&lt;/code>으로 선언했다면, 읽어올때도 변환이 필요하게됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">BIN_TO_UUID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>UUID_TO_BIN&lt;/code>과 반대로 &lt;code>BIN_TO_UUID&lt;/code>를 써서 변환해줘야해요&lt;/p>
&lt;hr>
&lt;p>물론 UUID를 애플리케이션 단에서 생성하고있고, 애플리케이션 단에서 변환하는 처리가 들어가면 문제가 작아질 것 같지만 그래도 뭔가&amp;hellip; 좀 불편한 느낌은 지울 수 없는 것 같아요🥲&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>이번주는 생각보다 많은 내용들을 배워가는 것 같아요.&lt;/p>
&lt;p>책들로 학습했던 내용들을 저의 코드에 반영해보려고하니 여러 다른 것들도 알 수 있게 되어 뜻 깊은 것 같습니다.&lt;/p>
&lt;p>다음주 부터는 멘토님이 붙어 직접 코드리뷰를 해주신다고 하는군요! 그리고 어떤 미션들이 나올까 정말 기대됩니다.&lt;/p>
&lt;p>또 2주간 함께했던 스터디 그룹원들과도 헤어지고 새로운 스터디 그룹원들을 만나는데 어떤 분들일지 기대되네요&lt;/p>
&lt;p>한 주간 모두 고생 많으셨습니다. 다음주도 최선을 다해봐요🔥&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다.😊&lt;/p></description></item><item><title>멤버십 과정 1주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/1/</link><pubDate>Sun, 25 Aug 2024 21:00:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/1/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/cover.png" alt="Featured image of post 멤버십 과정 1주차 회고" />&lt;p>멤버십 과정 첫 주가 마무리 되었습니다. 🥳&lt;/p>
&lt;p>멤버십 과정은 실무형 프로젝트를 반복 수행하며 &lt;strong>도메인 지식&lt;/strong>과 &lt;strong>기술&lt;/strong>을 학습하는 &lt;strong>학습 스프린트&lt;/strong> 8주, &lt;strong>팀&lt;/strong>을 이뤄 기술적으로 완성도 있는 &lt;strong>서비스&lt;/strong>를 만드는 &lt;strong>그룹프로젝트&lt;/strong> 6주로 구성되어 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img.png"
width="660"
height="1043"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_hu1befaeec4069fafd4d6776d0ba2f8324_93826_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_hu1befaeec4069fafd4d6776d0ba2f8324_93826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="멤버십 과정"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;p>첫 4주는 &lt;strong>기본적으로 알아야하는 도메인 지식과 기술을 모두 활용&lt;/strong>하여 서비스를 만들며 학습하고, 이후 4주는 조금 더 알고 싶은 도메인을 선택하여 더 깊게 학습해보는 과정이 기다리고 있습니다.&lt;/p>
&lt;p>그래서 첫 주는 가장 기본적인 형태의 웹 서비스를 바닐라로 만들어 보는 미션이 주어졌어요&lt;/p>
&lt;p>아마 기능들이 추가되고, 기존 기능을 개선해보는 미션이 주어지며 점점 더 완성도 높은 서비스로 바꿔가는 흐름으로 진행될 것 같습니다.&lt;/p>
&lt;h2 id="챌린지와-다른점">챌린지와 다른점&lt;/h2>
&lt;p>멤버십 과정은 챌린지 과정과는 추구하는 방향은 같지만 진행되는 방식이 조금 달랐습니다.&lt;/p>
&lt;p>훨씬 현업과 같은 환경으로 프로젝트를 수행하며 개발에 필요한 내용들을 스스로 학습 방식으로 진행되었어요&lt;/p>
&lt;h3 id="데일리-스크럼과-피어세션">데일리 스크럼과 피어세션&lt;/h3>
&lt;p>&lt;strong>학습 스프린트&lt;/strong>라는 단어를 보고 눈치 채셨을수도 있을 것 같은데요!&lt;/p>
&lt;p>챌린지 과정에서는 매일 동료들의 피드백을 받고, 서로의 생각을 공유해보는 피어세션을 가졌다면, 멤버십 과정의 &lt;strong>학습 스프린트&lt;/strong>에서는 애자일 방법론 중 하나인 스크럼을 진행하듯 &lt;strong>데일리 스크럼&lt;/strong>을 진행합니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1.png"
width="720"
height="416"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1_hu81dea2dde4003a9de1affb998ffda14f_161826_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1_hu81dea2dde4003a9de1affb998ffda14f_161826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="스크럼"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>챌린지 과정의 피어세션과는 달리 스터디 그룹의 구성원이 2주간 같이 학습한다는 점도 다른 부분이네요&lt;/p>
&lt;p>&lt;strong>멤버십 과정의 피어세션&lt;/strong>은 &lt;strong>매주 금요일 아침 3시간&lt;/strong> 동안 &lt;strong>1번만&lt;/strong> 진행하게됩니다.&lt;/p>
&lt;p>데일리 스크럼은 30분 정도 짧은 시간동안 &lt;strong>어제 수행한 작업 내용&lt;/strong>과 &lt;strong>오늘 수행할 작업내용&lt;/strong> 그리고 하면서 발생했던 문제들을 공유하는 시간이었어요&lt;/p>
&lt;p>데일리 스크럼에서 그룹원들의 애로사항에 대해 방향성을 제시해주려고 노력했는데, 도움이 많이 되셨다고 말씀해주셔서 뿌듯했습니다 🤩&lt;/p>
&lt;h3 id="pr과-코드리뷰">PR과 코드리뷰&lt;/h3>
&lt;p>챌린지 과정에서는 당일 오전 9시까지 제출한 결과물을 바탕으로 어느정도 구현했는지, 잘한점, 개선할 점 등을 찾아 피어세션에 공유하였다면, 멤버십 과정에서는 1일 1PR을 만들고 자정에 자동으로 머지되는 방식이었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2.png"
width="1200"
height="662"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2_hu2d7aa351f7187e8bceef60dfdec2312c_42601_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2_hu2d7aa351f7187e8bceef60dfdec2312c_42601_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pull Request"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>PR을 남길 때 어떤 부분을 작업했는지, 어떤 부분들을 학습했는지, 어떤 부분에서 고민이 있었고 어떻게 해결하였는지 꼭 남겨야 했습니다.&lt;/p>
&lt;p>그리고 이 PR을 기반으로 시간이 날 때마다 각자 알아서 비동기적으로 코드 리뷰를 진행하는 방향으로 가이드 되었어요&lt;/p>
&lt;p>저는 평균적으로 &lt;strong>매일 아침 9시부터 데일리 스크럼 전 까지&lt;/strong> 그룹원들의 코드를 확인하고 코멘트를 남기려 노력했습니다.&lt;/p>
&lt;blockquote>
&lt;p>퇴사 전에는 출근하고 오전 동안에는 VOC를 확인 후에 코드리뷰하는 것이 루틴이었는데, 오랜만에 출근해서 일하는 느낌이었네요😂&lt;/p>
&lt;/blockquote>
&lt;h3 id="미션">미션&lt;/h3>
&lt;p>위에서 언급한 것 처럼 조금 더 실무에 가까운 미션들이 주어졌습니다.&lt;/p>
&lt;p>Figma 산출물을 직접 분석하고 프로젝트를 설계해야 했었네요&lt;/p>
&lt;blockquote>
&lt;p>풀스택 개발자로 일 할때는 퍼블리셔 분들이 계셔서 Figma를 볼 일이 잘 없었는데 반가웠습니다😄&lt;/p>
&lt;/blockquote>
&lt;p>매주 월요일에 미션이 공개되는데, 월요일 PR에는 &lt;strong>나만의 주간 계획서&lt;/strong>를 꼭 포함시켜야 한다는 가이드가 있었어요&lt;/p>
&lt;p>현업에서는 WBS를 작성했겠지만 조금 과한 것 같아 &lt;code>mermaid&lt;/code>를 이용해 &lt;code>gantt&lt;/code> 차트를 일 별 작업에 맞추어 그려 주간 계획서를 만들어 봤습니다.&lt;/p>
&lt;blockquote>
&lt;p>이러한 부분도 협업과 매우 유사하다고 느껴졌어요 ㅎㅎ&lt;/p>
&lt;/blockquote>
&lt;p>이렇게 세운 계획에 맞추어 자신만의 속도로 미션을 수행하면 되었습니다.&lt;/p>
&lt;h2 id="학습-내용">학습 내용&lt;/h2>
&lt;p>첫 4주는 풀스택 과정인 만큼 프론트엔드와 백엔드 모두 구현해야 했습니다.&lt;/p>
&lt;p>어떤 내용인지는 비밀이지만🤫 &lt;strong>express&lt;/strong>와 &lt;strong>템플릿 엔진&lt;/strong>, &lt;strong>Vanilla JS&lt;/strong>를 이용하는 고전적인 방식의 &lt;strong>SSR&lt;/strong>로 만들어 보는 것이 목표였습니다.&lt;del>저는 목표대로 안했네요&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3.png"
width="435"
height="157"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3_hudb88119dd717241f9061b504e1bd0d00_24570_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3_hudb88119dd717241f9061b504e1bd0d00_24570_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="express"
class="gallery-image"
data-flex-grow="277"
data-flex-basis="664px"
>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8.png"
width="299"
height="168"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8_huf83071bd05fabec43e8d5e1101b604b5_4861_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8_huf83071bd05fabec43e8d5e1101b604b5_4861_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TypeScript"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/p>
&lt;p>Figma와 언어 정도를 제외하면 큰 제약이 없어 굉장한 자유도가 주어졌어요&lt;/p>
&lt;p>저는 &lt;strong>PHP&lt;/strong> 백엔드에 &lt;strong>jQuery&lt;/strong>를 이용하는 레거시를 운영했었기 때문에 고전적인 방식의 SSR을 구현하는 데 익숙해서 색다르게 &lt;strong>Vanilla TS&lt;/strong>를 활용한 &lt;strong>SPA&lt;/strong>를 시도했습니다.&lt;/p>
&lt;h3 id="프론트엔드">프론트엔드&lt;/h3>
&lt;p>&lt;strong>HTML/CSS&lt;/strong>&lt;/p>
&lt;p>일단 직접 HTML, CSS를 이용하여 UI를 구현해야 했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5.png"
width="792"
height="612"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5_hud1b24fd2279ceb30e07ec48a1e0b1e8b_31306_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5_hud1b24fd2279ceb30e07ec48a1e0b1e8b_31306_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="HTML, CSS"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>사실 저는 &lt;strong>UI 개발 인턴&lt;/strong>을 경험했기 때문에 마크업이 익숙한 편 이었는데&amp;hellip;&lt;/p>
&lt;p>풀스택 개발자로 일할 때는 마크업을 직접 구현하지 않아서 그런지 오랜만에 하려니 처음엔 조금 어색하더라구요🥲&lt;del>하지만 금방 익숙해졌어요&lt;/del>&lt;/p>
&lt;p>적응하는 데 시간이 조금 더 필요했던 부분은 &lt;strong>Floxbox&lt;/strong> 레이아웃이었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6.png"
width="325"
height="200"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6_hu095e62d0763cda11e453936824cdf63c_5283_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6_hu095e62d0763cda11e453936824cdf63c_5283_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="CSS FLEXBOX"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>이전 &lt;strong>UI 개발 인턴&lt;/strong>에서는 &lt;strong>IE 8&lt;/strong> 대응을 기본으로 학습했기 때문에 &lt;code>float&lt;/code>에 더 익숙했기 때문인데요&lt;/p>
&lt;p>Figma도 박스 모델을 기준이 아닌 Flexbox을 기준으로 만들어져 있었습니다.&lt;/p>
&lt;p>Flexbox에 익숙해지고 나서야 Figma를 제대로 이해할 수 있었네요&amp;hellip;&lt;/p>
&lt;p>IE8 대응할 때 사용하지 않던 CSS 변수, 함수등이 적극적으로 사용되어 있어서 처음엔 많이 혼란스러웠습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Vanilla TS&lt;/strong>&lt;/p>
&lt;p>바닐라 타입스크립트로 SPA 방식을 활용하기 위해 &lt;strong>Vite&lt;/strong>를 이용해 개발 환경을 구성하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7.png"
width="1200"
height="589"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7_hub81d93aaf499e50c31d82ce55491e085_214787_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7_hub81d93aaf499e50c31d82ce55491e085_214787_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Vite"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>Vite 같은 경우 현업에서 &lt;strong>Vue3&lt;/strong>를 이용하여 프론트엔드 개발할 때 좋았던 경험이 있었고, &lt;strong>Vanilla TS&lt;/strong> 환경을 쉽게 만들 수 있도록 제공해줘서 활용해봤습니다.&lt;/p>
&lt;h3 id="백엔드">백엔드&lt;/h3>
&lt;p>express를 활용하여 서버를 구성해야했습니다.&lt;del>마스터인 호눅스님이 처음에는 node http로 구현하는 것을 고려하셨다고 하네요&lt;/del>&lt;/p>
&lt;p>저는 &lt;strong>타입스크립트&lt;/strong>를 활용하여 프로젝트를 구성했는데, 자바스크립트의 &lt;strong>자유로움을 제한&lt;/strong>하고, &lt;strong>타입의 장점&lt;/strong>을 취하기 위해서였어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9.png"
width="1127"
height="843"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="레이어드 아키텍처"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>이를 최대한 활용하기 위해 &lt;strong>레이어드 아키텍처&lt;/strong>와 &lt;strong>DI&lt;/strong>를 적극적으로 활용하여 서버를 구성하였습니다.&lt;/p>
&lt;p>express에서 라우터를 사용하는 구조가 &lt;code>Laravel&lt;/code>, &lt;code>Ruby on Rails&lt;/code>와 비슷하다고 느껴서 이를 참고하여 아키텍처를 구성해봤어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10.png"
width="2200"
height="1100"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10_huf6da5d764d39438817b888350c776b1d_196442_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10_huf6da5d764d39438817b888350c776b1d_196442_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Laravel"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11.png"
width="366"
height="138"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11_hud750c3d05a262006ab0b0b0a5c7abbcf_6176_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11_hud750c3d05a262006ab0b0b0a5c7abbcf_6176_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Ruby on Rails"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="636px"
>&lt;/p>
&lt;p>처음에는 &lt;strong>데이터베이스&lt;/strong>를 절대 활용하지 말고 &lt;strong>목업 데이터&lt;/strong>를 활용해서 개발하라는 제약 사항이 있었습니다.&lt;/p>
&lt;p>그래서 저는 &lt;code>Spring Data&lt;/code>를 참고하여 Repository(Model)을 &lt;strong>인터페이스&lt;/strong>로 구현하고, 더미 데이터를 주입받은 &lt;code>Repository&lt;/code>를 구현하여 이후 데이터베이스 연결을 쉽게 적용할 수 있도록 대응해봤습니다.&lt;/p>
&lt;h2 id="아쉬웠던-점">아쉬웠던 점&lt;/h2>
&lt;h3 id="테스트-코드">테스트 코드&lt;/h3>
&lt;p>챌린지 과정에서는 TDD 활용하여 미션들을 수행하려했었는데, 이번주 미션에서는 TDD는 커녕 테스트 코드도 작성하지 않았습니다 😅&lt;/p>
&lt;p>백엔드 코드는 더미 데이터를 활용하는 단순한 처리였기 때문에 굳이 붙여야 하나? 라는 생각이 들었던 것 같고, 프론트엔드 코드는 처음 고전적인 방식의 SSR에서 SPA로 넘어가는 과정에서 구조 변경이 잦아 마지막 날에야 설계가 확정이 되었습니다.&lt;/p>
&lt;p>그리고 FE쪽은 어떻게 테스트를 해야할 지 감이 안오더군요 🥲&lt;/p>
&lt;p>이번주에 설계가 확정된 만큼 다음주에는 TDD를 시도해 볼 수는 있을 것 같습니다. TTD 까지는 아니더라도 테스트 코드를 어떻게 붙여야할 지 고민을 많이 해보게될 것 같아요 🙃&lt;/p>
&lt;h3 id="커뮤니티-활동">커뮤니티 활동&lt;/h3>
&lt;p>챌린지 과정에서는 &lt;code>Slack&lt;/code>에 올라오는 질문이나 의견에 답변을 많이 하려고 노력했었는데, 프론트 개발이 들어가서 그런지 모니터를 Slack에 할당할 수 없어 관심을 많이 못 줬던 것 같습니다.&lt;del>변명&lt;/del>&lt;/p>
&lt;p>다음주에는 &lt;code>Slack&lt;/code>에 조금 더 주의를 기울이려고 의식적으로 노력해봐야겠어요🔥&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>데일리 스크럼, 그룹 리뷰, 피어 세션, 코드리뷰에서 제가 아는 모든 것을 공유하려고 열심히 노력했는데 다른 분들에게 도움이 되었을지 궁금하네요&lt;/p>
&lt;p>그룹끼리 하는 활동을 넘어 다른 분들에게도 긍정적인 영향을 주고 영감을 주기 위해 더 많은 노력이 필요할 것 같습니다.&lt;/p>
&lt;p>남은 기간도 끝까지 모두 화이팅~~~🔥🔥🔥&lt;/p></description></item><item><title>부스트캠프 웹・모바일 9기 챌린지까지 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/reason/</link><pubDate>Tue, 13 Aug 2024 13:45:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/reason/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/cover.png" alt="Featured image of post 부스트캠프 웹・모바일 9기 챌린지까지 회고" />&lt;p>부스트캠프 웹·모바일 9기 &lt;strong>챌린지&lt;/strong>과정이 8월 9일로써 마무리 되었습니다👏👏👏&lt;/p>
&lt;p>6월 24일 시작된 &lt;strong>베이직&lt;/strong>부터 참여했으니 거의 2개월 정도의 시간이 정신없이 흘러갔네요&lt;/p>
&lt;p>&lt;a class="link" href="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/" >&lt;strong>챌린지 1주차 회고&lt;/strong>&lt;/a>를 보시면 아시겠지만 저는 &lt;strong>부스트캠프 웹·모바일 5기 챌린지 과정&lt;/strong>을 수료했습니다. 그리고 이름 들으면 대부분 아실만한 중견 서비스 기업에서 2년 조금 안되는 경력도 있어요&lt;/p>
&lt;p>그래서인지 주변 사람들에게 말했을 때는 &amp;ldquo;&lt;strong>너 이미 꽤 하잖아? 부트캠프에 다시 갈 필요가 있어?&lt;/strong>&amp;rdquo; 라는 반응이 주 였던 것 같고, 1주차 그룹회고에서 수료생임을 밝혔을 때는 &amp;ldquo;&lt;strong>혹시.. 굳이 다시 하신 이유를 물어봐도 괜찮을까요?&lt;/strong>&amp;rdquo; 라는 반응이 있었어요.&lt;/p>
&lt;p>그래서 이번 회고에서 &lt;strong>어떤 부분이 좋았었는지&lt;/strong>, &lt;strong>왜 부스트캠프를 다시 선택했는지&lt;/strong>, &lt;strong>다시 참여했어도 성장했는지&lt;/strong> 등을 함께 남기면, 다음 참여하실 분들에게 큰 도움이 될 것 같아 글을 남깁니다.&lt;/p>
&lt;h2 id="부캠를-통해-얻을-수-있었던-것들">부캠를 통해 얻을 수 있었던 것들&lt;/h2>
&lt;p>부스트캠프를 통해 단기간에 빠른 &lt;strong>역량 향상&lt;/strong>을 할 수 있었어요, 하지만 개발 역량 향상은 부캠에서 얻을 수 있는 것들 중에 &lt;strong>가장 사소한 부분&lt;/strong>입니다.&lt;/p>
&lt;p>저 같은 경우는 부스트캠프 웹·모바일 5기 &lt;strong>챌린지&lt;/strong>과정을 수료한 직후 보다, 현업에서 업무를 수행하며 좋은 경험이었다는 것을 실감할 수 있었던 것 같아요!&lt;/p>
&lt;p>챌린지 과정에서의 어떤 부분들이 저에게 큰 자산이 되었는지 말씀드려보면 좋을 것 같습니다😀&lt;/p>
&lt;h3 id="인식의-부재와-우매함의-봉우리">인식의 부재와 우매함의 봉우리&lt;/h3>
&lt;p>필립 G.아모어가 집필한 &lt;strong>The Laws Of Software Process&lt;/strong>라는 책에서 무지의 다섯 가지 단계에 대해서 언급하는데&lt;/p>
&lt;p>소프트웨어 전문가들이 자신이 알고 있는 것과 알지 못하는 것을 이해하는 지표로 사용할 것을 권하고 있습니다.&lt;/p>
&lt;ul>
&lt;li>0 단계: &lt;strong>무지의 부재&lt;/strong>
&lt;ul>
&lt;li>어떤 것을 알고 있음을 증명할 수 있는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1 단계: &lt;strong>지식의 부재&lt;/strong>
&lt;ul>
&lt;li>어떤 것을 알지 못하는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2 단계: &lt;strong>인식의 부재&lt;/strong>
&lt;ul>
&lt;li>어떤 것을 알지 못한다는 그 자체를 모르는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3 단계: &lt;strong>효율적인 프로세스의 결여&lt;/strong>
&lt;ul>
&lt;li>무언가를 모든다는 사실을 알지 못한다는 것을 밝혀낼 적절하고 효과적인 방법이 없는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>4 단계: &lt;strong>메타무지&lt;/strong>
&lt;ul>
&lt;li>무지의 5단계에 관해 알지 못하는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>저는 이런 무지의 단계를 보며 &lt;strong>더닝 크루거 효과&lt;/strong>(인지 편향 그래프)가 같이 떠올랐어요&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_2.png"
width="1024"
height="852"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_2_hu61037d9faac5eab647ba6b332936daa8_265432_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_2_hu61037d9faac5eab647ba6b332936daa8_265432_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="더닝 크루거 효과"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>자신이 가능 능력에 비해 자신의 능력을 과대평가&lt;/li>
&lt;li>다른 사람의 능력을 알아보지 못함&lt;/li>
&lt;li>자신의 능력부족으로 직면하는 어려움에 대한 인식저하&lt;/li>
&lt;li>깨달음과 지식의 증가를 통해 능력이 증가한 후 자신의 능력부족을 인지, 인정&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>더닝 크루거 효과는 &lt;strong>우매함의 봉우리&lt;/strong>(mount stupid)로 유명한데요, &lt;strong>기존에 알고 있는 것이 사실과 다르거나 틀리다는 것을 인지하게 되면서 겸손한 자세로 배우려는 태도를 갖게 된다는 것&lt;/strong>을 설명합니다.&lt;/p>
&lt;hr>
&lt;p>부캠에 입과하는 대부분 캠퍼분들은 &lt;strong>학교에서 꽤 잘하는&lt;/strong>, &lt;strong>동아리 에이스&lt;/strong> 등 각자 본인 역량에 &lt;strong>자부심&lt;/strong>이 있으셨을거에요&lt;/p>
&lt;p>저 같은 경우 이러한 자부심은 5단계 무지 중 2단계인 &lt;strong>인식의 부재&lt;/strong>가 바탕이 되었었는데요&lt;/p>
&lt;p>그러한 이유로 각자 &lt;del>한따까리&lt;/del> 잘 하시던 분들이 만들어낸 &lt;strong>각자 다르게 잘한 결과물&lt;/strong>들을 통해 &lt;strong>문제를 한번에 많이 인식&lt;/strong>하게되고, &lt;strong>절망의 계곡&lt;/strong>으로 빠르게 떨어지게됩니다🎢&lt;/p>
&lt;blockquote>
&lt;p>아는만큼 보인다는 말의 뜻을 알게됩니다😂&lt;/p>
&lt;/blockquote>
&lt;p>이러한 부분은 주니어라면 언젠간 꼭 느끼게 되는 경험인데, 이후 생각해보니 &lt;strong>빨리 경험해서 오히려 좋아&lt;/strong>!라는 생각이 들더라구요&lt;/p>
&lt;p>남들보다 빠르게 &lt;strong>깨달음의 오르막&lt;/strong>을 오르게되며, &lt;strong>겸손&lt;/strong>해지는 것은 물론이고 &lt;strong>다른 사람들의 의견을 존중할 수 밖에 없게 되어버립니다&lt;/strong>.&lt;/p>
&lt;h3 id="좋은-결과물에-대한-기준">좋은 결과물에 대한 기준&lt;/h3>
&lt;p>부스트캠프 챌린지에서의 경험이 없었다면, 아마도&amp;hellip; 개발자로 업무를 수행하면서 길을 잃고 해맸을 것 같다는 생각을 많이 했었어요&lt;/p>
&lt;p>이러한 생각을 하게 되었던 이유는 &lt;strong>개발자가 만들어내는 결과물의 품질은 중요하지 않다&lt;/strong>고 생각하는 환경이 훨씬 더 많다고 느껴졌기 때문입니다.&lt;/p>
&lt;p>이로 인해 조직에서 정의하는 좋은 개발자의 기준도 &lt;strong>이상적인 개발자의 기준&lt;/strong>과는 생각보다 많은 차이가 있었어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_3.png"
width="2560"
height="1920"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_3_hu6aaef46727c3eb7bf840a170de427f50_13972357_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_3_hu6aaef46727c3eb7bf840a170de427f50_13972357_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="나침반"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>정말 아쉽게도 &lt;strong>기술을 중요하게 생각하지 않는(말로만 중요하다고 하는, 기준이 낮은)&lt;/strong> 회사들이 정말 많습니다.&lt;/p>
&lt;p>&lt;strong>클린코드&lt;/strong>와 같은 여러 책 들에서도 언급되는 내용이지만, 이러한 회사들은 대부분 무리한 일정으로 결과물을 만들어내길 원하고 이러한 과정이 반복되며 악순환이 발생합니다.&lt;/p>
&lt;ul>
&lt;li>사실 서류상으로 책임을 회피을 하기 위해 그러는 것 같다고 느껴지기도 했어요&lt;/li>
&lt;/ul>
&lt;p>이런 환경이 고착화되면 굉장히 많은 문제가 발생하지만, 그 중에서도 &lt;strong>품질에 대한 기준이 없어지거나 왜곡되는 현상&lt;/strong>이 신입 개발자에게 가장 치명적이라고 생각합니다.&lt;/p>
&lt;p>경험이 적은 &lt;strong>신입 개발자&lt;/strong>가 이러한 환경에 노출되면, &lt;strong>왜곡된 품질 기준이 옳은 방향이라고 믿게 되어버리는 문제&lt;/strong>까지 발생할 수 있고, 안타깝게도 실제로 많이 보이는 사례입니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>&amp;ldquo;이러한 환경에서 부스트캠프는 저에게 좋은 결과물에 대한 기준을 잡아줬습니다.&amp;rdquo;&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>신입 혹은 예비 개발자들은 위에서 언급한 &lt;strong>인식의 부재&lt;/strong> 즉, 좋은 결과물에 대한 기준이 없거나, 많이 낮기 때문에 위과 같은 문제가 발생하게 된다고 생각합니다.&lt;/p>
&lt;p>&lt;strong>좋은 결과물에 대한 기준&lt;/strong>을 잡기 위해서는 당연하게도 좋은 결과물을 많이 접해봐야하지만 현실적으로 너무 어려운 일이죠&amp;hellip;&lt;/p>
&lt;p>하지만! 부스트캠프에서 다양한 강점을 가진 분들이 모여 각기 만들어낸 &lt;strong>좋은 결과물들을 많이 접할 수 있었습니다&lt;/strong>.&lt;/p>
&lt;p>그래서 저는 &lt;strong>왜곡된 품질 기준이 옳은 방향이라고 믿게 되어버리는 문제&lt;/strong>에서 비교적 자유로울 수 있었습니다.&lt;/p>
&lt;h3 id="효진적-사고">효진적 사고&lt;/h3>
&lt;p>최근 마무리된 올림픽 사격 여자 공기소총 10m 국가대표인 방효진 선수님은 &amp;ldquo;&lt;strong>나도 부족하지만 남도 별거 아니다.&lt;/strong>&amp;ldquo;라며 불안을 인정하는 &lt;strong>효진적 사고&lt;/strong>로 그 부담감을 극복하고 금매달을 따 내실 수 있었다는 인터뷰를 봤습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img.png"
width="1000"
height="666"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_hu3d22d5200bf24b9d7a6120cb6d3cc0ea_320545_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_hu3d22d5200bf24b9d7a6120cb6d3cc0ea_320545_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="효진적 사고"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>저도 5기 챌린지가 끝나고 멤버쉽에 가지 못했고, 잘 하시는분들을 직접 많이 접하다보니 저의 역량에 대해서 자신감이 많이 떨어져 있었어요&lt;/p>
&lt;p>하지만 시간이 흐를수록 제 자신이 성장했다는 것을 확인할 수 있었던 계기들이 있었고, 결과적으로 이러한 &lt;strong>효진적 사고&lt;/strong>를 탑재하게 되었습니다.&lt;/p>
&lt;blockquote>
&lt;p>응. 맞아 나 지금은 잘 못해.&lt;br>
근데 내가 평생 못 할 것 같아?&lt;br>
나는 계속 노력할 거고 조금씩 성장해왔어&lt;br>
언젠간 잘 하게 될 거야!&lt;/p>
&lt;/blockquote>
&lt;p>운영진 &lt;code>제이&lt;/code>님이 공유해주셨던 명언도 다시 생각나네요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_1.png"
width="1280"
height="719"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_1_huae20d1c975a995814f6297f664d9bf86_1082311_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_1_huae20d1c975a995814f6297f664d9bf86_1082311_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>&lt;del>억까에도 강해집니다.&lt;/del>&lt;/p>
&lt;hr>
&lt;p>글을 쓰고보니 모두 동료 캠퍼들 덕분에 생기는 긍정적인 영항이었군요!&lt;/p>
&lt;h2 id="부캠에-다시-지원한-이유">부캠에 다시 지원한 이유&lt;/h2>
&lt;p>그래서 왜 다시 지원했느냐라고 물어보신다면..! 아래와 같은 이유들이 있습니다.&lt;/p>
&lt;h3 id="동기부여">동기부여&lt;/h3>
&lt;p>퇴사 후 푹 쉬고 다시 준비를 시작하는데&amp;hellip; 너무 재미가 없었어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_4.png"
width="202"
height="250"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_4_huef1e4428669a0019381cbc587f881aa4_9852_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_4_huef1e4428669a0019381cbc587f881aa4_9852_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="193px"
>&lt;/p>
&lt;p>퇴사 전 1년간 팀에서 가장 많은 티켓을 끊은 &lt;strong>티켓머신&lt;/strong>이었던 저는 빡빡한 개발 일정으로부터 나오는 도파민에 뇌가 절여저 있었기 때문에, 저의 의지만으로는 동기부여를 하기 턱없이 부족했습니다.&lt;/p>
&lt;p>그래서 저를 부추길 강한 프레셔가 필요했어요🤣&lt;/p>
&lt;p>부캠의 어려운 미션과 빡센 일정이라면 저를 움직이게 만들 것 이라고 생각했고, 이러한 환경에 저를 던져야했습니다.&lt;/p>
&lt;h3 id="내-수준-파악하기">내 수준 파악하기&lt;/h3>
&lt;p>부캠은 경력 2년 이하의 주니어까지 참여 가능한 만큼 &lt;strong>왜 오셨을까&lt;/strong> 생각이 들 만큼 잘 하시는 분들도 많이 계셨습니다.&lt;/p>
&lt;p>그리고 &lt;strong>경력이 없는데 이렇게까지 잘해질 수 있나&lt;/strong> 싶을 정도로 잘 하시는 분들도 많이 계셨었죠&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_5.png"
width="900"
height="510"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_5_hu3968b287ed5d44b9ba3c6f0d96d1204e_616267_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_5_hu3968b287ed5d44b9ba3c6f0d96d1204e_616267_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>그래서 이 분들과 저를 비교하면 저의 수준을 어느정도 파악할 수 있다고 생각했습니다.&lt;/p>
&lt;h3 id="도움을-드리고-싶어요">도움을 드리고 싶어요&lt;/h3>
&lt;p>개발자로 얼마 안되는 기간 일 하면서 학교 후배, 동료 개발자 등 여러 주니어 개발자들과 자연스럽게 대화할 기회들이 있었는데, 같이 고민에 대해 이야기하다보면 개인적으로 안타까운 상황들이 있었습니다.&lt;/p>
&lt;p>대부분의 경우는 위에서 언급했던 더닝-크루거 효과의 &lt;strong>우매함의 봉우리&lt;/strong>와 &lt;strong>절망의 계곡&lt;/strong>에서 발생하는 문제들이었어요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>우매함의 봉우리&lt;/strong>&lt;/p>
&lt;p>개발자 채용 설명회에 참여해본 분들은 &lt;strong>신입 개발자는 역량으로 뽑지 않는다.&lt;/strong> 던가 &lt;strong>잠재력이 중요하다.&lt;/strong> 이런 말씀을 많이 들어보셨을겁니다.&lt;/p>
&lt;p>이런 내용을 들으면 &lt;strong>듣기 좋으라고 하는 소리&lt;/strong>다. &lt;strong>스펙이 잠재력 아니냐&lt;/strong>라고 생각하시는 분들이 많은 것 같아요(아예 틀린 말은 아니라고 생각합니다.)&lt;/p>
&lt;p>그래서 결국 &lt;strong>실력으로 증명해야한다&lt;/strong> 라고 결론을 낸 분들을 많이 접할 수 있었던 것 같습니다.&lt;/p>
&lt;p>그런데 일해보니까 정말 그렇지 않아요 정말 &lt;strong>역량으로만 뽑지 않고&lt;/strong>, 성과를 중요하게 생각하는 회사들은 스펙은 크게 고려하지 않는 것 같습니다.&lt;/p>
&lt;ul>
&lt;li>정확히 말하면 역량을 기준으로 잡으면 뽑을 사람이 없어요. 그럴거면 신입 말고 경력을 뽑는게 더 좋겠죠(저 포함 신입들 다 왠만큼 합니다.)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>이렇게 &lt;strong>실력으로 증명한다&lt;/strong>라고 결론을 내리신 분들은 대부분 본인이 &lt;strong>뽑힐만한 역량&lt;/strong>이라고 믿는 분들이 많습니다. 사실 우매함의 봉우리 쯤에 있는 상태로 &lt;strong>본인의 부족함을 인지하지 못하는 경우&lt;/strong>가 많아요&lt;/p>
&lt;p>전 직장에 한 기수 먼저 들어온 주니어 개발자의 사례를 말씀드릴 수 있을 것 같아요, 취업 준비 기간을 오래 갖지 않으시고 거의 현역으로 입사했던 개발자였습니다.&lt;/p>
&lt;p>이 분은 전환형 인턴 과정에서 적극적인 의사 표현과 태도, 열정을 높게 평가받아 높은 성적으로 전환되었지만, 본인은 &lt;strong>개발자로서의 역량&lt;/strong>을 높게 평가받아 전환되었다고 믿고 있었습니다.&lt;/p>
&lt;p>전환 이후에도 열정적으로 업무를 수행하셨죠, 하지만 시간이 지날수록 연차가 낮을 때는 용인할 수 있는 실수나 낮은 품질의 코드가 개선되지않아 평가가 나빠졌어요&lt;/p>
&lt;p>그럼에도 불구하고 본인이 역량이 괜찮은 개발자라는 믿음을 버리지 못하셨고, 결국엔 성장을 포기하시게 되었습니다.&lt;/p>
&lt;hr>
&lt;p>이 문제가 앞서 언급했던 절망의 계곡에 빠르게 진입하지 못했고, 좋은 결과물에 대한 기준이 없었기 때문에 발생한 문제로 생각하고 있습니다.&lt;/p>
&lt;p>조금 극단적인 예시이지만 이러한 문제를 경험하지 않기 위해서, 극복하기 위해서는 &lt;strong>조금이라도 빨리 좋은 결과물들을 많이 보는 것&lt;/strong>이 중요하다고 생각했어요&lt;/p>
&lt;p>그래서 저도 이러한 &lt;strong>좋은 결과물에 조금이라도 도움&lt;/strong>이 될 수 있지 않을까라는 생각했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>절망의 계곡&lt;/strong>&lt;/p>
&lt;p>&lt;strong>우매함의 봉우리&lt;/strong>에서 내려왔다면 다음 문제인 &lt;strong>절망의 계곡&lt;/strong>을 만나게 됩니다.&lt;/p>
&lt;p>&lt;strong>절망의 계곡&lt;/strong>에서 큰 타격을 입으시는 분들은 본인에 역량에 자부심이 강하던 분들이시죠&lt;/p>
&lt;p>위 사례로 언급했던 주니어 개발자는 &lt;strong>절망의 계곡&lt;/strong>에 들어서는 과정에서 본인이 &lt;strong>역량이 떨어지는 개발자&lt;/strong>라는 것을 인정하기 어려웠고, 결과적으로 최악이라고 생각되는 회피를 선택하셨습니다.&lt;/p>
&lt;p>저도 학교나 동아리, 대외 활동에서 주로 &lt;strong>버스 기사&lt;/strong> 역할을 했었고 나름 제 역량에 대한 자부심도 있었기 때문에, 부캠을 끝내고 &lt;strong>절망의 계곡&lt;/strong>에서 벗어나지 못하고 한동안 힘들었던 경험이 있었어요&lt;/p>
&lt;p>&lt;strong>절망의 계곡&lt;/strong>에서 느끼는 감정들은 성장을 위해 꼭 필요하다고 생각합니다.&lt;/p>
&lt;p>그렇지만 오래 느낄 필요는 없다고 생각해요&lt;/p>
&lt;p>자칫 저와 같이 극복하는 데 오랜 시간이 필요한 분들이 있을 수 있고(&lt;del>사실 많을 것 같다고 생각했어요&lt;/del>) 그런 분들에게 &lt;strong>포기하지 않도록, 금방 회복할 수 있도록 힘을 드리고 싶었습니다&lt;/strong>.&lt;/p>
&lt;h2 id="이전과-달라진-점">이전과 달라진 점&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_7.png"
width="706"
height="185"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_7_hu9911f82412a204b00daa00a53b2b0ae1_34300_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_7_hu9911f82412a204b00daa00a53b2b0ae1_34300_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="381"
data-flex-basis="915px"
>&lt;/p>
&lt;p>부스트캠프 웹・모바일 9기는 이전과 같이 &lt;strong>기본기&lt;/strong>와 &lt;strong>문제 해결력&lt;/strong>에 대한 내용들을 깊게 체험해볼 수 있다는 점은 같았지만, 5기와 비교했을 때 많은 것이 달라져 있었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_6.png"
width="706"
height="258"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_6_hud2cb05f4035abd3ffd1dc423dcf5c4e4_48487_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_6_hud2cb05f4035abd3ffd1dc423dcf5c4e4_48487_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="부스트캠프 웹・모바일 9기 "
class="gallery-image"
data-flex-grow="273"
data-flex-basis="656px"
>&lt;/p>
&lt;p>이러한 이유로 어떠한 부분이 달랐는지 살펴보고, 제가 어떤 부분에서 신경을 썻는지 살펴보면 좋을 것 같아요&lt;/p>
&lt;h3 id="베이직-과정">베이직 과정&lt;/h3>
&lt;p>처음으로 베이직 과정이 신설되었습니다.&lt;/p>
&lt;p>베이직 과정은 1차 문제해결력 &lt;strong>테스트 결과&lt;/strong>에 따라 &lt;strong>선택적&lt;/strong>으로 참여하는 과정이었는데, 저 같은 경우 2차 문제해결력 테스트 직행이었지만 참여했어요&lt;/p>
&lt;p>제 기억에는 대략 &lt;strong>1,000명&lt;/strong> 이상이 베이직 과정에 참여하셨던 것으로 알고있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_8.png"
width="659"
height="856"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_8_hu267a7ae569560af840a84029d440e5d8_66515_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_8_hu267a7ae569560af840a84029d440e5d8_66515_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="베이직 과정"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="184px"
>&lt;/p>
&lt;p>5기 챌린지 과정과 마찬가지로 &lt;strong>다른 사람들의 결과물을 확인&lt;/strong>할 수도 있었고, &lt;strong>팀 활동&lt;/strong>도 있다는 점이 특별했던 것 같습니다.&lt;/p>
&lt;p>결과물에는 자신이 문제를 해결해나간 과정을 &lt;strong>README&lt;/strong>를 통해 꼭 남겨야 했기 때문에 다른 사람의 접근 방식들도 잘 파악할 수 있었습니다.&lt;/p>
&lt;p>아마 개발 관련 학습을 오래 하시지 않았다면, 베이직 과정을 성실하게 참여하고 다른 분들의 결과물들은 볼 수 있는 것 만으로도 많은 도움이 되셨을 것 같다는 생각이 들었어요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>미션&lt;/strong>&lt;/p>
&lt;p>베이직 과정은 &lt;strong>요구 사항은 조금 복잡하지만 구현 자체는 어렵지 않은 미션&lt;/strong>들을 해결해야했습니다.&lt;/p>
&lt;p>5기 챌린지 과정 미션에 비교한다면, 베이직의 미션은 &lt;strong>챌린지 미션에서 구현해야 할 전체 기능 중 일부 기능을 구현&lt;/strong>하는 정도로 느껴졌던 것 같습니다.&lt;/p>
&lt;p>다만 &lt;strong>깔끔한 설계&lt;/strong>가 반영되었을 때 완전히 다른 결과물을 만들 수 있어서, 평소 &lt;strong>알고리즘 테스트&lt;/strong>같이 &lt;strong>구현&lt;/strong>만을 위한 코딩을 해오신 분들 이라면, 다른 잘한 결과물을 봤을 때 &lt;strong>내 결과물이 뭔가 잘못됐다는 것&lt;/strong>을 느꼈을 것 같았어요&lt;/p>
&lt;p>저 같은 경우 구현 자체에는 시간이 많이 필요하지 않았습니다. 그래서 많은 시간을 &lt;strong>좋은 설계&lt;/strong>를 위해 활용했던 것 같습니다.&lt;/p>
&lt;p>거기에 더해서 &lt;strong>읽기 쉬운 코드&lt;/strong>를 만들고, 저의 생각과 코드를 더 쉽게 이해할 수 있도록 분석 부터 구현까지의 모든 과정을 상세히 &lt;code>README&lt;/code>에 기록하려고 노력하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>팀 활동&lt;/strong>&lt;/p>
&lt;p>팀 활동에서 특별했던 점은 &lt;strong>구현&lt;/strong>뿐만이 아니라 &lt;strong>설계&lt;/strong>미션이 주어졌다는 점 인데요&lt;/p>
&lt;p>개발을 할수록 느끼는 점은 설계가 참 중요하다는 것 입니다.&lt;/p>
&lt;p>저는 설계를 완성하는 과정에서 소프트웨어가 완성된다고 생각해요, 구현은 그 설계를 코드로 조금 더 상세하게 옮겨 적는 것 뿐이라고 생각하죠&lt;/p>
&lt;p>그래서 저는 항상 프로그래밍에서 구현 자체는 &lt;strong>사소한 부분&lt;/strong>이라고 말 합니다.&lt;/p>
&lt;p>설계의 중요한 역할 중 하나는 &lt;strong>머리속에 떠다니는 내용&lt;/strong>들을 글이나 그림을 통해 &lt;strong>현실 세계로 가져와 규격화&lt;/strong>하는 것이라고 생각합니다.&lt;/p>
&lt;p>그렇기 때문에 &lt;strong>설계에 대한 개념&lt;/strong> 자체가 없으셨던 분들, &lt;strong>중요성을 체감하지 못하셨던&lt;/strong> 분들은 팀 활동을 통해 설계를 하며 다른 사람들의 생각을 더 깊게 이해해보고 정리하는 과정이 성장에 큰 도움이 될 것 같다고 느꼈어요&lt;/p>
&lt;p>교육을 설계하실 때 굉장히 많은 고민이 있었다는 것이 느껴졌습니다.&lt;/p>
&lt;p>저는 팀 활동에서 다른분들과 함께 의견들을 &lt;strong>글과 그림&lt;/strong>으로 표현해보며 &lt;strong>생각을 공유&lt;/strong>하기 위해 노력했고, &lt;strong>설계가 필요한 이유&lt;/strong>들을 최대한 느낄 수 있도록 노력했습니다.&lt;/p>
&lt;h3 id="챌린지-과정">챌린지 과정&lt;/h3>
&lt;p>챌린지 과정에서의 학습 내용들은 5기때와 차이가 없었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_9.png"
width="659"
height="796"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_9_hu780288bc0f995229df3b04df16b12514_75590_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_9_hu780288bc0f995229df3b04df16b12514_75590_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="챌린지 과정"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="198px"
>&lt;/p>
&lt;p>하지만&amp;hellip; 3년간 무슨 일들이 있었을까요? 난이도는 꽤 많이 상승되었다고 느껴졌습니다.&lt;/p>
&lt;p>&lt;strong>Chat-GPT&lt;/strong>와 같이 개발을 도와줄 도구가 등장했다는 것도 난이도 상승에 영향을 줬을 수도 있을 것 같고, &lt;strong>베이직 과정&lt;/strong>에서 잘 하시는 분들이 많아 난이도를 올렸을까? 라는 생각도 들었어요&lt;/p>
&lt;p>아니면 &lt;strong>아는 만큼 보인다&lt;/strong>는 말 처럼 제가 더 성장해서 문제의 본질을 더 잘 알게되었을까? 라는 생각도 들었던 것 같습니다.&lt;/p>
&lt;p>무슨 이유던 이전보다는 많이 어렵게 느껴졌어요. 5기때는 요구사항을 모두 만족하지 못했던 미션이 마지막 2개쯤 뿐이었고, 대부분 &lt;strong>오후 12시&lt;/strong> 이전에 마무리 했었다면&amp;hellip;&lt;/p>
&lt;p>9기 챌린지 과정에서는 요구사항을 모두 만족시키지 못한 과제가 꽤 있었고, 적어도 &lt;strong>오전 2시&lt;/strong>까지는 문제해결을 위해 시간을 보냈습니다.&lt;/p>
&lt;p>사실 문제해결을 통한 역량이 향상되는 것은 큰 기대를 하고 있지 않았었는데, 관련 내용들을 다시 복기하고 결과물을 만들어가는 과정에서 기대보다 더 많은 성장을 할 수 있었습니다.&lt;/p>
&lt;h3 id="짝-미션">짝 미션&lt;/h3>
&lt;p>5기때와 가장 큰 차이점은 &lt;strong>짝 미션&lt;/strong>이었습니다.&lt;/p>
&lt;p>짝 미션은 챌린지 과정 4주 중 마자막 2주는 짝 미션을 중심으로 진행될 만큼 큰 비중을 차지했어요&lt;/p>
&lt;p>짝과 함께 설계 후 각자 결과물을 만들어보는 &lt;strong>짝 설계&lt;/strong>, 짝과 설계와 구현을 함께하는 &lt;strong>짝 구현&lt;/strong>, 단순히 같이 개발하는 &lt;strong>짝 구현&lt;/strong>을 넘어 &lt;strong>페어 프로그래밍&lt;/strong>을 해야하는 미션도 있었고, 같이 만든 결과물을 각자 개선해보는 &lt;strong>각자 개선하기&lt;/strong>, 각자 만든 결과물을 같이 개선해보는 &lt;strong>짝 개선&lt;/strong>이 있었습니다.&lt;/p>
&lt;p>현업에서도 관련 경험이 없었기 때문에 굉장히 흥미로웠는데 이 중 &lt;strong>짝 설계&lt;/strong>와 &lt;strong>페이 프로그래밍&lt;/strong>이 가장 인상적이었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>짝 설계&lt;/strong>&lt;/p>
&lt;p>혼자 미션을 수행할 때는 요구사항 분석 과정에서 애매한 부분에 대해 의사 결정에 시간이 많이 필요했었습니다.&lt;/p>
&lt;p>하지만 짝과 함께 설계를 진행하며 짝과 함께 미션 요구사항을 분석하며 서로 중요하다고 생각되는 것들, 불필요하다고 생각하는 것들을 공유하고 토론하며 훨신 더 빠른 의사결정을 했던 경험이 아주 긍정적이었어요😀&lt;/p>
&lt;p>서로 다르게 이해한 부분을 줄이기 위해 필요한 기능들을 &lt;code>mermaid&lt;/code>를 활용하여 &lt;strong>클래스 다이어그램&lt;/strong>을 이용해 시각화하기도 했습니다.&lt;/p>
&lt;p>같은 설계를 통해 구현했음에도 불구하고, 큰 틀을 제외한 세부 사항들이 완전히 달랐다는 것은 정말 흥미로웠네요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>페어 프로그래밍&lt;/strong>&lt;/p>
&lt;p>여러번의 페어 프로그래밍이 있었지만 마지막 미션이 가장 기억에 남습니다.&lt;/p>
&lt;p>짝이 저와 마찬가지로 &lt;strong>TDD&lt;/strong>를 계속해서 시도하고 계셨던 분이셔서 자연스럽게 &lt;strong>TDD&lt;/strong>를 활용해서 페이 프로그래밍을 수행하였습니다.&lt;/p>
&lt;p>기능 단위를 기준으로 같이 테스트 케이스를 만들고 네비게이터와 드라이버 역할은 바꿔가며 진행하였는데, 실시간으로 피드백을 주고받으며 점진적으로 더욱 좋은 결과물을 만들어가는 과정이 굉장히 유익하다고 느껴졌어요&lt;/p>
&lt;p>애자일 방법론에서 반복적이고 점진적인 개선과 협업 정신을 위해 &lt;strong>TDD&lt;/strong>와 페어 프로그래밍을 강조하는 지 이유를 조금이나마 느낄 수 있었던 것 같습니다.&lt;/p>
&lt;h2 id="내가-시도한-것들">내가 시도한 것들&lt;/h2>
&lt;p>협업에서 풀스택 개발자로서 일하는 과정에서 저에게 부족한 부분이라고 생각되었던 &lt;strong>문서화&lt;/strong>와 &lt;strong>TDD&lt;/strong>를 적극적으로 시도하려했습니다.&lt;/p>
&lt;h3 id="문서화">문서화&lt;/h3>
&lt;p>개발자로 일하는 과정에서 문서화를 하지 않았던 것은 아닙니다.&lt;/p>
&lt;p>복잡한 업무라던가 새롭게 추가되는 기능 같은 경우에는 꽤나 꼼꼼히 문서를 작성하기도 했었어요&lt;/p>
&lt;p>하지만 이 외에는 단순히 업무 기록을 위해(이후 발생할 시시비비를 가리기 위해) 문서를 작성하는 느낌이 강했습니다.&lt;/p>
&lt;ul>
&lt;li>물론 전 회사에서도 업무 기록 수준의 문서화를 요구했습니다. (사실 저는 개발 문서라고 생각하지 않았어요)&lt;/li>
&lt;/ul>
&lt;p>개발 문서는 정책을 협의하는 과정에서 왜 이렇게 선택할 수 밖에 없었는지, 구조를 왜 이렇게 해야했는지와 같은 히스토리와 앞으로 어떤 식으로 수정되길 바라는지와 같은 내용들을 통해 이후 유지 보수를 더 잘 할수 있도록 만들어주는 것이 목표라고 생각했습니다.&lt;/p>
&lt;p>이후 해당 영역을 담당할 개발자들이 관련 내용을 보며 다른 접근 방식을 알고 있어 개선한다던가 하는 긍정적인 효과를 기대했던것이죠&lt;/p>
&lt;p>하지만 업무 기록 수준의 문서화를 요구받다보니 시간을 많이 부족했고, 다른 문서들도 업무 기록 수준이었기 때문에 참고할만한 자료도 없었습니다. 그래서 점점 공을 많이 안들이게 되더라구요&lt;/p>
&lt;p>미션을 수행하면서 만들어지는 요구사항 분석 내용, 설계 등과 같은 내용들은 유지보수와는 관계가 없겠지만, 다른사람들이 보고 내 결과물을 쉽게 파악할 수 있다는 부분에서는 공통점이 있다고 생각했습니다.&lt;/p>
&lt;p>그래서 &lt;strong>더 좋은 피드백을 받기 위해&lt;/strong>서, 다른 분들이 &lt;strong>더 쉽게 영감을 받게 만들기 위해&lt;/strong> 분석 내용과 설계 등을 최대한 상세하면서도 잘 읽히도록 만들기 위해 노력했던 것 같습니다.&lt;/p>
&lt;h3 id="tdd">TDD&lt;/h3>
&lt;p>이전 직장은 &lt;strong>저품질 레거시 코드&lt;/strong>로 인해 &lt;strong>악순환&lt;/strong>이 발생하고 있는 상황이었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_10.png"
width="549"
height="511"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_10_hu6cdd1210a5ec7711f022e0a0c59659a4_16478_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_10_hu6cdd1210a5ec7711f022e0a0c59659a4_16478_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="레거시의 악순환"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="257px"
>&lt;/p>
&lt;p>주요 원인 중 하나는 테스트 코드를 전혀 작성하지 않고 QA에 의존하는 개발이 원인이라고 생각했어요&lt;/p>
&lt;ul>
&lt;li>테스트 코드가 없으니 변경 자체가 굉장히 도전적인 일이 되어버립니다.&lt;/li>
&lt;li>그러다 보니 최소한의 변경을 위해 작은 코드들이 붙여져 나갔고 코드 품질은 더 나빠지게 되어버렸습니다.&lt;/li>
&lt;li>코드의 결합이 높고, 중복되는 로직이 많다보니 테스트 코드 자체를 시도하는 것이 어려웠습니다.&lt;/li>
&lt;li>같은 이유로 이미 구현되어있는 비즈니스 로직 분석이 굉장히 어려웠습니다.&lt;/li>
&lt;/ul>
&lt;p>이러한 환경에서 개발을 수행하다보니 테스트 코드의 중요성을 크게 느꼈지만, 어떻게 접근해야할지 감을 잡을 수 없어 적용하지 못했습니다.&lt;/p>
&lt;hr>
&lt;p>퇴사 이후 &lt;strong>TDD&lt;/strong>를 적극적으로 활용하는 회사의 과제 테스트를 수행해볼 기회가 있었습니다.&lt;/p>
&lt;p>이를 위해 테스트 코드 관련 자료들을 찾아가며 나름대로 테스트들을 만들었고, 이후 면접에서 어떤 식으로 테스트 코드를 작성하는지 물어본 후 대략적인 방향성을 배울 수 있었어요.&lt;/p>
&lt;p>이 때 들었던 내용 중 가장 인상깊었던 내용은&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>&amp;ldquo;저희는 요구사항과 정책이 완성되면 그 내용들을 전부 테스트 코드로 작성해요&amp;rdquo;&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>였습니다. 나중에 찾아보니 &lt;strong>BDD&lt;/strong>가 요런 맥락으로 진행되더라구요&lt;/p>
&lt;p>그래서 저도 이러한 방식들을 적용해보려 시도했고 어느정도 &lt;strong>TDD&lt;/strong> 적응할 수 있었던 것 같습니다.&lt;/p>
&lt;h3 id="애자일스러운-개발">애자일스러운 개발&lt;/h3>
&lt;p>&lt;strong>TDD&lt;/strong>와 더불어 변경을 가정하고 전체 기능의 일부만 설계하고 구현해나가는 &lt;strong>애자일스러운 개발&lt;/strong>을 시도했습니다.&lt;/p>
&lt;p>처음에는 전체를 설계하고 기능을 나누어 구현하는 방식으로 진행했었는데, 구현 과정에서 요구사항을 잘못 분석했거나, 설계가 잘못된 것을 확인하게 되는 경우가 종종 있었습니다.&lt;/p>
&lt;p>이 중 일부는 큰 변경이 따라와서 설계 전체가 흔들리게되는 경우가 종종 발생했었어요&lt;/p>
&lt;p>이 때문에 고민하고 있었는데, 부스트캠프 마스터인 &lt;strong>JK&lt;/strong>님이 애자일스러운 개발에 대해 언급해주셨고, 이를 즉시 반영하였습니다.&lt;/p>
&lt;p>필요하다고 생각되는 기능들을 대략적으로 분리한 후 그 중 일부만 설계하고 개발했는데 당연하게도 변경은 발생했지만, 영향 범위는 극히 제한적이었어요.&lt;/p>
&lt;p>&lt;strong>TDD&lt;/strong>와 결합하니 마치 게임을 하는 것 같은 느낌마저 받을 수 있었습니다 🎮🎮&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>13일부터 글을 작성하기 시작했는데 16일에 마무리하게 되었습니다. 간만에 많은 시간을 들여 글을 써본 것 같네요&lt;/p>
&lt;p>글을 작성하는 도중에 3차 문제해결력 테스트 결과가 나왔어요. 이번에는 멤버쉽을 경험할 수 있게 되었습니다.👊&lt;/p>
&lt;p>멤버쉽에 가지 못하시는 분들도 계실 것 같아요! 하지만 낙담하지 않으셨으면 좋겠습니다.&lt;/p>
&lt;p>저도 5기에는 챌린지 과정까지만 참여할 수 있었지만, 챌린지에서의 경험만으로도 큰 성장을 이뤘다고 생각해요&lt;/p>
&lt;p>실제로 취업 후 팀 막내였음에도 불구하고 구현에서만큼은 상위권이었습니다. 마찬가지로 어디 가서 꿀리지 않으실거에요🔥&lt;/p>
&lt;p>앞으로 시작할 개발자 커리어에서 부스트캠프는 하나의 마일 스톤일 뿐입니다. 중요한 체크 포인트 하나를 달성했으니 다른 체크포인트를 달성해야겠죠?&lt;/p>
&lt;p>앞으로 달성해야할 체크포인트를 위해 포기하지말고 함께 끝까지 나아가봐요 🏁&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다😄&lt;/p></description></item></channel></rss>