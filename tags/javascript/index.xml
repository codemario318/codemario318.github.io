<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Mario Blog</title><link>https://codemario318.github.io/tags/javascript/</link><description>Recent content in Javascript on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Fri, 20 Sep 2024 11:29:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>멤버십 1차 학습스프린트 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/4/</link><pubDate>Fri, 20 Sep 2024 11:29:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/4/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/4/cover.png" alt="Featured image of post 멤버십 1차 학습스프린트 회고" />&lt;p>추석을 앞두고 4주간의 1차 학습스프린트가 마무리되었습니다🥳&lt;/p>
&lt;p>학습스프린트가 끝나고 1주간 인터미션 기간이 주어졌는데 이 또한 끝나가네요&lt;/p>
&lt;p>인터미션이 끝나기 전에 1차 학습스프린트를 돌아보려합니다.&lt;/p>
&lt;h2 id="데일리-스크럼">데일리 스크럼&lt;/h2>
&lt;p>이전 회고에서 언급했듯 학습스프린트는 2주간 유지되는 &lt;strong>스터디 그룹&lt;/strong>원들과 매일 아침 &lt;strong>데일리 스크럼&lt;/strong>을 진행하게됩니다.&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에서는 개인당 &lt;strong>5분&lt;/strong>정도의 시간이 주어져, 자신이 &lt;strong>어제 작업한 내용&lt;/strong>과 &lt;strong>오늘 작업할 내용&lt;/strong> 같은 미션 진행 상황을 공유하는 시간이었어요&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에 시간이 많이 주어지지 않기 때문에 원활한 진행을 위해 매일 만들어야하는 &lt;strong>PR&lt;/strong>에 &lt;strong>어떤 고민을 통해 어떤 결과물&lt;/strong>을 만들었는지 간략하지만 잘 이해할 수 있도록 작성해야했습니다.&lt;/p>
&lt;p>다양한 분들의 PR을 보면서 흥미로운 부분이 꽤 있었어요&lt;/p>
&lt;p>저는 PR을 간략하게 적는 편 이었는데, 몇몇 분 께서는 자신이 어떤 고민을 했는지, 그 고민을 하기위해 어떤 내용들을 공부했는지, 그리고 그것을 어떻게 적용했는지 너무나 꼼꼼하게 적어주시는 분들도 계셔서 보는 재미도 있었습니다.&lt;/p>
&lt;p>이를 보고 저도 PR을 정말 꼼꼼히 남겨야겠다고 반성하게 되었네요🤣&lt;/p>
&lt;h2 id="그룹-리뷰">그룹 리뷰&lt;/h2>
&lt;p>매일 진행되는 &lt;strong>데일리 스크럼&lt;/strong>에 더해 매주 화요일과 목요일은 &lt;strong>그룹 리뷰&lt;/strong>가 진행되었습니다.&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에서는 개인당 &lt;strong>5분&lt;/strong>정도의 시간이 주어져, 자신이 &lt;strong>어제 작업한 내용&lt;/strong>과 &lt;strong>오늘 작업할 내용&lt;/strong> 그리고 &lt;strong>방향성에 대한 약간의 고민&lt;/strong> 정도를 이야기하는 시간이었다면, &lt;strong>그룹 리뷰&lt;/strong>는 서로의 중간 결과물과 학습 내용에 대하여 리뷰하고, 진행 상황에 대한 피드백을 주고받는 시간으로 꽤 많은 시간이 주어졌어요&lt;/p>
&lt;p>저 같은 경우는 매일 아침 다른 그룹원들의 코드를 읽고 PR에 코드리뷰를 남기는 활동을 지속적으로 하고 있었는데, 이 때 다른 그룹원들의 &lt;strong>잘한 점&lt;/strong>, &lt;strong>아쉬운 점&lt;/strong>, &lt;strong>다양한 접근 방법이 나올수 있는 내용&lt;/strong> 등 토론하고 싶은 주제를 기억하고 있다가 그룹 리뷰에서 언급하여 같이 이야기해 보는 시간을 가지려고 했습니다.&lt;/p>
&lt;p>그리고 뒤에서 언급할 &lt;strong>멘토님의 코드리뷰&lt;/strong>에서 그룹원들이 각각 받은 &lt;strong>피드백에 대한 자신의 해석&lt;/strong>이나, 애매하다고 느껴지는 &lt;strong>피드백에 대해 다른 그룹원들의 의견도 나눠보는 시간&lt;/strong>도 참 의미있었네요 😊&lt;/p>
&lt;h2 id="피어세션">피어세션&lt;/h2>
&lt;p>&lt;strong>피어세션&lt;/strong>은 매일 아침에 진행했었던 챌린지 과정의 피어세션과 달리 매주 금요일 오전에 진행된 활동으로, 기존 스터디 그룹원들이 아닌 &lt;strong>새로 배정된 다른 캠퍼님들의 한 주간의 과정을 살펴보고 결과물에 대해 리뷰&lt;/strong>하는 시간이었습니다.&lt;/p>
&lt;p>같은 주제로 미션을 수행하기는 하지만 캠퍼분들 각각 &lt;strong>다른 접근 방법을 시도&lt;/strong>한다는 점과 &lt;strong>지금까지 수행한 작업들을 모두 확인&lt;/strong>해야한다는 점 등 여러 이유로 피어세션을 준비하는 시간이 1시간 정도 별도로 주어졌어요&lt;/p>
&lt;p>피어세션에 참여하시는 캠퍼님들은 그룹원들과 달리 &lt;strong>제 코드를 처음 확인&lt;/strong>하기 때문에 &lt;strong>작업 내용&lt;/strong>과 &lt;strong>과정&lt;/strong>, &lt;strong>흐름&lt;/strong> 등을 쉽게 파악하실 수 있도록 &lt;code>README&lt;/code>에 &lt;strong>한 주간의 작업 내용을 잘 정리&lt;/strong>하고, 매일 남기는 PR에 &lt;strong>어떤 작업을 수행하고 왜 그런 선택을 했는지 잘 드러나도록&lt;/strong> 남기려고 노력했습니다.&lt;/p>
&lt;hr>
&lt;p>피어세션에서 만났던 캠퍼분들 중에는 미션을 착실히 수행하고계신 분들이 많았지만, 일부는 &lt;code>Nest&lt;/code>, &lt;code>React&lt;/code> 같은 것들을 직접 구현해보는 등 자신히 하고싶었던 것을 위해 노력하셨던 분들도 있었어요&lt;/p>
&lt;p>특히 기억에 남는 피어세션은, 한 분은 &lt;code>Nest&lt;/code>를 구현하셨고, 한 분은 &lt;code>express&lt;/code>의 기본적인 기능들을 활용하여 미션을 수행하신 분이 모였던 피어세션이었습니다.&lt;/p>
&lt;p>&lt;code>Nest&lt;/code>를 구현하신 분은 &lt;code>@Controller&lt;/code>, &lt;code>@Service&lt;/code>와 같은 어노테이션 등을 비롯한 여러 편의 기능을 제공하기 위해 굉장히 복잡한 로직들을 구현하신 반면, &lt;code>express&lt;/code>의 기본 기능으로만 미션을 수행하셨던 분은 매우 간결한 로직으로 누구나 쉽게 이해할 수 있는 코드를 만드셨는데, 이 양극단의 코드를 비교하는게 굉장히 흥미로웠네요 😁&lt;/p>
&lt;p>&lt;code>Nest&lt;/code>를 구현하신 분의 작업물에서 복잡한 로직을 통해 만든 편의성으로, 개발자가 &lt;strong>실제로 작성하게 될 영역들이 매우 깔끔해지는 것&lt;/strong>을 보며 감탄했었고,&lt;/p>
&lt;p>&lt;code>express&lt;/code>의 기본 기능으로만 구현하신 분들의 작업물을 보며, &lt;strong>내가 좀 겉멋이 들었나?&lt;/strong>, &lt;strong>내가 작성한 코드는 정말로 필요했던 것일까?&lt;/strong>, &lt;strong>더 간결하게 풀어낼 수는 없었던 것 일까?&lt;/strong> 같은 생각이 들면서 제 자신을 돌아보는 계기가 되었습니다 😌&lt;/p>
&lt;h2 id="그룹-회고">그룹 회고&lt;/h2>
&lt;p>&lt;strong>그룹 회고&lt;/strong>는 매 주 금요일 피어세션이 끝나고 진행된 활동으로 &lt;strong>그룹원들과 한 주간의 그룹 활동에 대해 돌아보는 시간&lt;/strong>이었습니다.&lt;/p>
&lt;p>주로 직전 피어세션에서 &lt;strong>인상깊었던 내용들에 대해 공유하여 그룹원들 끼리도 고민해보는 시간&lt;/strong>과 더 나은 그룹 활동을 위해 각자 그룹 활동간에 &lt;strong>좋았던 점&lt;/strong>, &lt;strong>아쉬웠던 점&lt;/strong>, &lt;strong>느낀 점&lt;/strong> 등에 대해 이야기해보고 그라운드 룰을 다시 조정해보는 시간을 가졌고, 자연스럽게 &lt;strong>새롭게 알게된 내용들에 대해서 공유&lt;/strong>하기도 했어요&lt;/p>
&lt;p>&lt;strong>새롭게 알게된 내용들을 공유하는 시간&lt;/strong>에서 학습했던 내용인 &lt;strong>&amp;ldquo;MySQL에서 UUID를 PK로 사용했을때 성능&amp;rdquo;&lt;/strong> 에 대한 아티클과 &lt;strong>&amp;ldquo;유일한 ID 생성하는 방법&amp;rdquo;&lt;/strong> 에 대한 아티클을 공유하기도 했습니다.&lt;/p>
&lt;hr>
&lt;p>그룹 활동에 대한 &lt;strong>느낀점을 공유하는 시간&lt;/strong>에는 사실 그룹 활동보다는 자신이 부족해서 아쉬웠던 내용들이 주로 언급되었어요&lt;/p>
&lt;p>그래서 저는 다른 그룹원들이 자신감을 가지실 수 있도록 열심히 응원하려고 노력해봤습니다 👊&lt;/p>
&lt;p>그 중 하나는 &lt;strong>&amp;ldquo;미션 관련 이야기를 할 때 자신의 기술적인 부족함 때문에 적극적으로 참여하는게 망설여진다.&amp;rdquo;&lt;/strong> 와 같은 고민을 토로해주신 분이 계셨는데, &lt;strong>&amp;ldquo;정답도 중요하지만 그보다 어떤 생각을 가지고 문제를 접근하는지가 더 중요하고, 이를 통해 더 큰 영감을 얻을 수 있다&amp;rdquo;&lt;/strong> 와 같은 답변을 드렸었는데, 도움이 되었다고 말씀하셔서 뿌듯했었네요 😁&lt;/p>
&lt;h2 id="코드리뷰">코드리뷰&lt;/h2>
&lt;p>챌린지 과정에서는 매일 진행되는 피어세션에서 Gist를 통해 공유된 각자의 결과물을 리뷰했었기 때문에, 매일 아침에 다른 분들의 결과물을 확인했었는데요&lt;/p>
&lt;p>맴버십 과정에서는 매일 수행한 작업에 대해 PR을 남겨야 했고, 남기 PR을 기반으로 코드 리뷰를 진행할 수 있었습니다.&lt;/p>
&lt;p>그래서 각자의 결과물을 리뷰할 시간이 할당되지는 않았았고, &lt;strong>비동기&lt;/strong>적으로 코드리뷰를 각자 진행할 것이 권장되기도 했습니다.&lt;/p>
&lt;p>그래서 저는 챌린지와 마찬가지로 매일 아침 데일리 스크럼 전 다른 그룹원들의 코드를 리뷰하는 시간을 루틴으로 유지하여 PR을 통해 &lt;strong>개선점&lt;/strong>, &lt;strong>잘한점&lt;/strong>, &lt;strong>궁금한점&lt;/strong> 등을 남겼어요&lt;/p>
&lt;h2 id="멘토님의-코드리뷰">멘토님의 코드리뷰&lt;/h2>
&lt;p>스프린트 3주차 부터 멘토님의 코드리뷰가 시작되었습니다.&lt;/p>
&lt;p>멘토님의 코드리뷰는 &lt;strong>정답을 알려주기보다는 정답을 찾아갈 수 있는 코멘트&lt;/strong>들 남겨주셔서 &lt;strong>몰랐던 내용&lt;/strong>을 알아가기도 하고, &lt;strong>깊게 고민하지 않았던 내용들을 조금 더 깊게 고민해보는 계기&lt;/strong>가 되어 개인적으로는 너무 좋았어요&lt;/p>
&lt;p>저희 그룹을 담당해주셨던 멘토님은 현업에서 바닐라 타입스크립트로 프론트엔드 개발을 하고계셨는데, 그래서인지 &lt;strong>타입스크립트를 타입스크립트처럼 활용하는 방법에 대해서 많이 고민해볼 수 있는 코멘트&lt;/strong>를 남겨 주셨습니다.&lt;/p>
&lt;p>일례로 &lt;strong>타입을 추론이 가능하게하는 타입스크립트 코드&lt;/strong>를 작성하는 법, &lt;strong>Narrowing, Assertion을 최소화 하는 법&lt;/strong> 등에 대한 코멘트를 남겨주셔서 개인적으로 학습과 고민을 해볼 수 있었고, 다른 그룹원들과도 같이 이야기 해보기도 했어요 &lt;del>아직 모르는 부분이 많지만&lt;/del>&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>4주간 미션을 수행하면서 시간이 굉장히 빨리 가더라구요! 한게 많이 없다고 생각했는데 돌아보니 생각보다 많은 배움이 있었던 것 같네요 🤣&lt;/p>
&lt;p>다음 주 부터는 이전에 선택했던 더 집중해서 경험하고 싶은 분야에 대한 미션이 주어집니다. (저는 백엔드를 선택했어요)&lt;/p>
&lt;p>미션은 그대로 풀스택으로 진행되지만 선택 분야의 비중을 7:3 정도로 조절된다고해요&lt;/p>
&lt;p>그리고 신청자에 한해서 오프라인으로 활동이 진행되는데, 저는 양재에 있는 &lt;strong>코드 스쿼드&lt;/strong>에서 참여하게 되었습니다. 많이 기대되는군요 ㅎㅎ&lt;/p>
&lt;p>이제 남은 인터미션을 즐기러 가보겠습니다. 끝까지 읽어주셔서 감사합니다 😁&lt;/p></description></item><item><title>멤버십 과정 3주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/3/</link><pubDate>Sun, 08 Sep 2024 17:34:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/3/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/cover.png" alt="Featured image of post 멤버십 과정 3주차 회고" />&lt;p>멤버십 과정 세 번째 주가 마무리 되었습니다. 🥳&lt;/p>
&lt;p>저번주에 언급했던 것 처럼 이번주 부터는 멘토님의 코드리뷰가 시작되었는데, 저희 그룹을 담당해주신 멘토님이 타입스크립트에 대한 경험이 많으셨습니다.&lt;/p>
&lt;p>코드리뷰에서 제가 활용하던 타입스크립트에서 몇 가지 주의할 점을 짚어주셨고 덕분에 큰 도움이 되었어요!&lt;/p>
&lt;p>이러한 부분들을 같이 확인해보면 좋을 것 같습니다.&lt;/p>
&lt;h2 id="타입스크립트에서의-인터페이스">타입스크립트에서의 인터페이스&lt;/h2>
&lt;p>저 같은 경우는 백엔드를 설계할 때 여러 프레임워크들의 장점들을 뽑아 구성해보려고 했었습니다.&lt;/p>
&lt;p>그 중 실제 데이터에 접근이 필요한 부분을 &lt;code>Spring data&lt;/code>를 참고하여 &lt;strong>저장소 패턴(Repository Pattern)&lt;/strong> 을 적용하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img.png"
width="543"
height="190"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_hue156cc0d8f93bfe7bfbcecea2be046a0_11819_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_hue156cc0d8f93bfe7bfbcecea2be046a0_11819_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="저장소 패턴"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="685px"
>&lt;/p>
&lt;p>저장소 패턴은 객체지향 설계에서 &lt;strong>도메인 모델(핵심 비즈니스 로직)&lt;/strong> 과 &lt;strong>데이터 소스&lt;/strong> 사이의 추상화를 통해 &lt;strong>비즈니스 로직과 실제 데이터 저장 처리의 관심사를 분리&lt;/strong>하는 패턴입니다.&lt;/p>
&lt;p>사실 이 자체는 문제가 없었지만 이를 활용하기 위한 코드에 약간의 문제가 있었습니다.&lt;/p>
&lt;p>인터페이스를 구현하도록 하여 서비스 로직에서 활용하도록 했는데, 제가 작성한 코드를 게시글을 의미하는 &lt;code>Post&lt;/code>로 바꾸어 확인해보면 아래와 같습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Post&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">content&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createdAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">updatedAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">PostRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Post&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">PostDummyRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">data&lt;/span>: &lt;span class="kt">Post&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Post&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">??&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">PostService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">postRepository&lt;/span>: &lt;span class="kt">PostRepository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findPost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">post&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">에 해당하는 글이 없습니다.`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">post&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>언뜻 보면 나쁘지 않아 보이죠? 멘토님은 아래와 같은 코멘트를 남겨주셨어요.&lt;/p>
&lt;blockquote>
&lt;p>이 인터페이스가 타입스크립트 개발 느낌보다는 자바로 개발을 하는거 같다는 느낌을 많이 주네요&lt;br>
타입스크립트에서 이런 인터페이스는 어떤 의미를 가지게 될까요?&lt;/p>
&lt;/blockquote>
&lt;p>그래서 왜 이런 코멘트를 남기셨을까 고민해본결과는 바로 &lt;strong>덕 타이핑&lt;/strong>이었습니다.&lt;/p>
&lt;h3 id="덕-타이핑">덕 타이핑&lt;/h3>
&lt;p>덕 타이핑(duck typing)은 동적 타이핑의 한 종류로, &lt;strong>객체의 변수 및 메소드의 집합이 객체의 타입을 결정&lt;/strong>하는 것을 의미합니다. 아래와 같은 문구는 한번 쯤 들어보셨을거에요&lt;/p>
&lt;blockquote>
&lt;p>만약 어떤 새가 오리처럼 걷고, 헤엄치고, 꽥꽥거리는 소리를 낸다면 나는 그 새를 오리라고 부를 것이다.&lt;/p>
&lt;/blockquote>
&lt;p>타입스크립트도 타입을 덕 타이핑으로 타입을 처리합니다. 그렇다면 제가 작성한 코드는 어떠한 문제가 있었던걸까요? 새로운 예시를 한번 보겠습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Comment&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">postId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">content&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createdAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">updatedAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">CommentRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findByPostId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">postId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span>&lt;span class="err">[]&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">CommentDummyRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">data&lt;/span>: &lt;span class="kt">Post&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">comment&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">comment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">??&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findByPostId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">postId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span>&lt;span class="err">[]&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">comment&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">comment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postId&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">postId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위처럼 &lt;code>Comment&lt;/code>라는 도메인 모델이 있다고 가정해보면 아래와 같은 코드는 오류를 발생시키지 않습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span>: &lt;span class="kt">Comment&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">repository&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">CommentDummyRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">PostService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">repository&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이게 바로 덕 타이핑 덕뿐인데요, &lt;code>PostRepository&lt;/code>가 요구하는 구성 요소들을 &lt;code>CommentDummyRepository&lt;/code>가 모두 포함하고 있고, 반환값으로 사용되는 &lt;code>Comment&lt;/code>도 &lt;code>Post&lt;/code>가 요구하는 구성 요소들을 모두 포함하고 있기 때문에 &lt;code>CommentDummyRepository&lt;/code>를 &lt;code>PostRepository&lt;/code>로 보는것이죠&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_1.png"
width="350"
height="350"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_1_hud55745bf13d67a9be94260657be56e3a_36113_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_1_hud55745bf13d67a9be94260657be56e3a_36113_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="덕 타이핑"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>멘토님이 &lt;strong>자바&lt;/strong>같다고 하신 이유도, 자바였다면 전혀 문제가 없을 코드였기 때문이었겠죠?&lt;/p>
&lt;p>그래서 제가 생각한 근본적인 문제는 &lt;strong>인터페이스에 선언된 메소드가 충분히 서술적이지 않은 것&lt;/strong>이 문제였던 것이었습니다.&lt;/p>
&lt;p>엔티티는 어쩔수없다고 하더라도 리포지토리 인터페이스는 아래와 같이 만든다면 문제를 충분히 예방할 수 있을 것으로 보입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">PostRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findPostById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Post&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">CommentRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findCommentById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findCommentsByPostId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">postId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span>&lt;span class="err">[]&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="no-return-await">no-return-await&lt;/h2>
&lt;p>ESLint에서 제공하는 규칙 중 하나인 &lt;code>no-return-await&lt;/code>는 코드에서 &lt;code>return await&lt;/code>을 사용하는 것을 금지하는 규칙입니다. 저는 사실 아래 예시처럼 &lt;code>await&lt;/code>를 쓰고 있었어요&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">example() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">someAsyncFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>저렇게 &lt;code>return await&lt;/code>를 하지 않으면 &lt;code>Promise&amp;lt;Promise&amp;lt;??&amp;gt;&amp;gt;&lt;/code> 형식으로 반환될 것이라고 생각했었기 때문인데요..😅&lt;/p>
&lt;p>&lt;code>async&lt;/code> 함수는 자동으로 &lt;code>Promise&lt;/code>를 반환하므로, &lt;code>await&lt;/code> 없이도 &lt;code>Promise&lt;/code>가 제대로 처리되는걸 이제야 알았습니다. 그래서 아래와 같은 코드도 동일하게 처리됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">example() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">someAsyncFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>return await&lt;/code>는 일반적으로 추가적인 &lt;code>Promise&lt;/code> 처리 단계를 유발하기 때문에 사용하지 않는 걸 권하고 있었습니다.&lt;/p>
&lt;p>아래와 같은 경우는 &lt;code>return await&lt;/code>가 필요한 경우입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">example() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">someAsyncFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Error occurred:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위와 같은 경우는 &lt;code>await return&lt;/code>을 하지 않으면, 로직 실행이 비동기로 처리되기때문에 &lt;code>try...catch&lt;/code> 블록 내에서 에러가 발생할 때 의도대로 처리되지 않습니다.&lt;/p>
&lt;h2 id="타입-추론">타입 추론&lt;/h2>
&lt;p>타입 추론(Type Inference)은 개발자가 명시적으로 타입을 지정하지 않아도 타입스크립트 컴파일러가 변수나 표현식의 타입을 자동으로 추론하는 것을 의미합니다.&lt;/p>
&lt;p>사실 타입스크립트 뿐만 아니라 Go, Kotlin 같은 언어에서도 제공합니다.&lt;/p>
&lt;p>매주 금요일 진행되는 마스터 세션에서는 지원자의 코드를 마스터님이 직접 리뷰해주시는데, 그때 나왔던 주제 중 하나였어요&lt;/p>
&lt;p>결론은 &lt;strong>타입을 적게 쓸수록 좋다.&lt;/strong> 였습니다.&lt;/p>
&lt;p>개인적으로 찾아보니 타입 추론을 잘 활용하면 아래와 같은 장점이 있다고 합니다.&lt;/p>
&lt;ul>
&lt;li>코드 간결성&lt;/li>
&lt;li>개발 생산성 향상
&lt;ul>
&lt;li>개발자가 타입을 일일이 지정하는 수고를 덜 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>조금 더 생각해보니 &lt;strong>타입 추론이 잘 이루어지는 코드&lt;/strong>들은 처리해야할 작업의 시작, 끝 정도만 타입을 명시적으로 지정해도 잘 동작하는 코드이더군요&lt;/p>
&lt;p>그래서 사실 본체는 &lt;strong>타입 추론이 잘 되는 코드를 작성하는 것이 세부사항에 대한 설계, 관심사 분리나 기능 분리가 잘 된 코드&lt;/strong>였던게 아닐까 싶습니다.&lt;/p>
&lt;p>아직 확신은 없지만 타입 추론을 최대한 활용하는 방식으로 구현을 해봐야할 것 같아요 🤣&lt;/p>
&lt;h2 id="의견과-모르는-것">의견과 모르는 것&lt;/h2>
&lt;p>이번 주 그룹 회고에서 한 캠퍼분이 본인의 아쉬운 점으로 아래와 같은 이야기를 하셨습니다.&lt;/p>
&lt;blockquote>
&lt;p>다른 분들의 질문에 대해 잘 몰라서 많은 답변을 해드릴 수 없었던 부분이 아쉬웠어요&lt;/p>
&lt;/blockquote>
&lt;p>그래서 저는 아래와 같은 답변을 드렸어요&lt;/p>
&lt;blockquote>
&lt;p>꼭 알아야만 답변을 할 수 있는걸까요?&lt;br>
답변이 맞고 틀리고는 상관 없이 의견 자체를 공유하는 것이 중요한 것 아닐까요?&lt;/p>
&lt;/blockquote>
&lt;p>돌이켜보면 저도 이런 고민들을 많이 했던 것 같고, 지금도 조금은 하고 있는 것 같아요.&lt;/p>
&lt;p>뭔가 나의 의견이 정답이 아니었으면 큰 잘못을 한 것 같고, 내 답변이 하찮아서 도움이 안되면 창피하기도 하고, 등등 이런 생각들을 주로 했던 것 같습니다.&lt;/p>
&lt;p>그런데 시간이 지나면서 이런 생각들을 많이 하지 않게된 것 같아요&lt;/p>
&lt;hr>
&lt;p>그러한 &lt;strong>첫 번째&lt;/strong> 이유로 실제 일을 해보면서 이미 널리 알려진 방법들이 내가 풀어야하는 문제에 딱 들어맞는 경우는 많이 없었던 것 같습니다.(그래서 어려운 것 이겠지만요 ㅎㅎ)&lt;/p>
&lt;p>그래서 정답에 대한 의견은 거의 들을 수 없었을 뿐더러, 방향성이나 문제에 대한 의견을 많이 들었을 때 그 상황에서 할 수 있는 &lt;strong>최선의 선택&lt;/strong>을 찾을 수 있었던 것 같아요&lt;/p>
&lt;hr>
&lt;p>두 번째 이유로는 개발자는 결국 &lt;strong>문제를 해결하는 사람&lt;/strong>이라는 점 인 것 같습니다.&lt;/p>
&lt;p>어떠한 문제를 해결하려고 할 때 다른 사람들이 같은 문제를 어떻게 해석하는지, 어떤 부분들을 중요하게 생각하는지 와 같은 생각들을 들었을 때 실제로 저의 문제를 바라보는 시야라던가, 문제를 해석하는 근본적인 역량이 향상된다고 느껴졌었기 때문이에요&lt;/p>
&lt;hr>
&lt;p>그래서 저는 다른 사람들이 어떠한 문제에 대해 질문 했을 때, 제가 생각할 수 있는 모든 것을 다 동원해서 같이 고민해주고 있는 것 같아요, 그 사람이 저의 관점을 어떻게 해석하는지도 너무 궁금하거든요&lt;/p>
&lt;p>그래서 결론은 &lt;strong>개인의 의견은 너무나도 소중하고 값진 것 이니까 서로 많이 공유해요&lt;/strong> 였네요😄&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>아직 멘토님의 피드백을 모두 반영하지 못했는데 다음주는 더욱 더 바쁠 것 같습니다.&lt;/p>
&lt;p>다음주까지 끝나면 첫번째 개인 프로젝트가 끝나고 &lt;strong>인터미션&lt;/strong>기간이 주어진다고해요&lt;/p>
&lt;p>이번 주는 할일이 많이 남은 만큼 열심히 불태우고 인터미션 기간에 푹 쉬어야겠습니다.&lt;/p>
&lt;p>한 주 모두 고생 많으셨습니다🔥&lt;/p></description></item><item><title>멤버십 과정 2주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/2/</link><pubDate>Sun, 01 Sep 2024 21:00:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/2/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/cover.png" alt="Featured image of post 멤버십 과정 2주차 회고" />&lt;p>멤버십 과정 두 번째 주가 마무리 되었습니다. 🥳&lt;/p>
&lt;p>이번주는 예상대로 1주차에 만든 결과물에 새로운 기술들을 이용하여 개선하는 미션이 주어졌습니다.&lt;/p>
&lt;p>&lt;strong>프론트엔드&lt;/strong>는 &lt;code>DOM API&lt;/code>, &lt;code>Event&lt;/code>, &lt;code>Fetch API&lt;/code>를 활용하여 클라이언트 영역에서의 동적인 UI로 개선하는 내용이 주어졌고, &lt;strong>백엔드&lt;/strong>는 가상환경에 데이터베이스를 설치하고, 서버에서 연동하는 미션이 주어졌습니다.&lt;/p>
&lt;p>사실 프론트엔드 영역은 처음부터 CSR로 아예 분리해서 진행하고 있었기 때문에 큰 변경은 없었어요, 그래서 리펙토링을 위주로 진행했던 것 같습니다.&lt;/p>
&lt;p>백엔드도 리포지토리를 인터페이스를 통해 잘 분리했었기 때문에 큰 이슈 없이 진행되었어요&lt;/p>
&lt;p>그럼에도 불구하고 새롭게 배운 내용들은 제법 있었는데, 그 내용들을 언급해보면 좋을 것 같아요😁&lt;/p>
&lt;h2 id="프론트엔드">프론트엔드&lt;/h2>
&lt;p>프론트엔드 영역은 이미 언급했던 것 처럼 큰 변경사항은 없었습니다. HTML, CSS 구조를 조금 개선하고, TS 코드들을 조금 개선하였어요&lt;/p>
&lt;p>그 중 가장 큰 개선을 꼽으라면 &lt;strong>이벤트 위임&lt;/strong>(Event Delegation)을 통해 TS 코드를 개선했던 것을 꼽을 수 있을 것 같습니다.&lt;/p>
&lt;h3 id="이벤트-위임">이벤트 위임&lt;/h3>
&lt;p>저는 현업에서 &lt;strong>Vue3&lt;/strong>로 프론트엔드를 개발했었는데요, 그렇기 때문에 &lt;code>v-on&lt;/code>을 이용하여 DOM 요소에 이벤트를 직접 바인딩 하는 방식에 적응되어있었습니다.&lt;/p>
&lt;p>그리고 혼자 사용해봤던 &lt;strong>React&lt;/strong>에서도 &lt;code>onClick&lt;/code> 같은 방식으로 직접 바인딩해줬었어요.&lt;/p>
&lt;p>그래서 이번 &lt;strong>Vanilla TypeScript&lt;/strong>로 개발을 진행하면서도 별 생각없이 &lt;code>&amp;lt;li&amp;gt;&lt;/code> 처럼 반복적으로 들어가는 요소의 &lt;strong>이벤트 등록&lt;/strong>을 각각 바인딩 해주는 방식을 사용했습니다. 아래처럼요!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">renderItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLUListElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$ul&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ul.item-list&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">makeItemElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceChildren&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeItemElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLLIElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;li&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">li&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그런데 문제는 &lt;strong>Vue&lt;/strong>에서는 동적으로 생성된 DOM 이라고 하더라도 언마운트될 때 자동으로 바인딩 된 이벤트 리스너들이 정리되어 신경 쓸 필요가 없고, &lt;strong>React&lt;/strong>같은 경우는 &lt;strong>Synthetic Event System&lt;/strong>을 통해 최상위 루트 노드에서 모든 이벤트들을 위임받아 각 컴포넌트로 전달하는 방식으로 처리하여 성능상의 이점을 제공한다는 것을 알게 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img.png"
width="840"
height="650"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_hu06827f719d27f9740548ce869145ec8d_92734_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_hu06827f719d27f9740548ce869145ec8d_92734_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Synthetic Event System"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>위 예시처럼 이벤트 위임을 사용하지 않을 경우 몇 가지 문제가 발생할 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>성능 문제&lt;/strong>&lt;/p>
&lt;p>동적으로 생성된 여러 개의 요소에 이벤트 리스너를 개별적으로 추가하면, DOM에 많은 수의 이벤트 리스너가 바인딩됩니다.&lt;/p>
&lt;p>이로 인해 매우 많은 요소가 있을 경우 각각의 리스너가 메모리에 로드되면서 렌더링 속도가 느려지거나 메모리 사용량이 급격히 증가할 수 있습니다.&lt;/p>
&lt;p>또한 이벤트가 발생할 때마다 모든 이벤트 핸들러가 독립적으로동작하므로 성능 저하가 발생할 수도 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>유지보수성 문제&lt;/strong>&lt;/p>
&lt;p>동일한 유형의 이벤트를 처리하기 위해 여러 요소에 유사한 이벤트 핸들러가 중복으로 작성되어 수정이 필요할 때 실수를 유발할 수 있습니다.&lt;/p>
&lt;p>또한 코드의 복잡성을 높히게 될 수 있습니다. 특히 동적으로 요소가 추가, 삭제되는 경우, 각각의 이벤트 핸들러를 적절하게 관리하는 것이 어려워 질 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>그래서 저는 아래와 같은 형식으로 코드들을 개선하였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">renderItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$ul&lt;/span>: &lt;span class="kt">HTMLUListElement&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">items&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">makeItemElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceChildren&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">$items&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ...items 대신 ...$items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">bindItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$ul&lt;/span>: &lt;span class="kt">HTMLUListElement&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">HTMLElement&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleClickItemButton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeItemElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLLIElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;li&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$button&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">$li&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="백엔드">백엔드&lt;/h2>
&lt;p>백엔드 미션에서는 위에서 언급했던대로 데이터베이스를 연동해야하는 미션이 주어졌습니다.&lt;/p>
&lt;p>처음 가상 환경으로 리눅스 서버를 구성하고 데이터베이스 서버를 만들었어야 했는데, 마스터이신 &lt;strong>호눅스&lt;/strong>님이 &lt;strong>AWS EC2&lt;/strong>로 해보는 것도 허용하셔서 &lt;strong>EC2&lt;/strong>를 띄워 데이터베이스 서버를 구성하였어요&lt;/p>
&lt;p>이번 미션에서 데이터베이스에 관련하여 새롭게 알게된 점을 공유해보려고합니다.&lt;/p>
&lt;h3 id="외래키-제약조건-설정-문제">외래키 제약조건 설정 문제&lt;/h3>
&lt;p>저는 지금까지 데이터베이스를 설계할 때는 외래키 제약 조건을 표시하지만 실제 데이터베이스에서는 외래키를 설정하지 않는 것이 일반적인 것으로 알고 있었습니다.&lt;/p>
&lt;p>사실 틀린 말은 아닌 것 같아요. 이전 직장에서 제가 활용했던 대부분의 테이블에는 외래키 제약 조건이 설정되어있지 않았고, 몇몇 강의에서도 관련 내용들을 언급합니다.&lt;/p>
&lt;p>이전 직장에서 꽤 큰 개편 프로젝트를 수행하며 기존 테이블을 마이그레이션 했었는데, 이때 DBA 에게 물어봤을 때는 &lt;strong>성능 문제&lt;/strong>와 &lt;strong>작업 편의성&lt;/strong> 등을 이유로 말씀해주셨었습니다.&lt;/p>
&lt;p>그리고 제가 학습했던 책인 &lt;strong>Real MySQL 8.0&lt;/strong>에서도 &lt;code>InnoDB&lt;/code> 스토리지 엔진을 설명하는 부분에서 &lt;strong>&lt;code>외래 키는 데이터베이스 서버 운영의 불편함 때문에 서비스용 데이터베이스에서는 생성하지 않는 경우도 자주 있다.&lt;/code>&lt;/strong> 라는 내용을 언급하고 있습니다.&lt;/p>
&lt;p>그런데 이번 마스터 세션에서 관련 이야기가 나왔고, 조금 다른 의견을 들을 수 있었어요&lt;/p>
&lt;p>&lt;strong>일단 외래키를 사용하지 않아야 한다고 주장하는 이유&lt;/strong>를 조금 더 자세히 살펴보겠습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>성능 문제&lt;/strong>&lt;/p>
&lt;p>외래키 제약조건은 데이터베이스가 데이터 무결성을 유지하기 위해 참조 무결성을 확인해야하므로, 데이터 삽입, 수정, 삭제 시 추가적인 연산(잠금)이 발생하고, 이러한 처리가 성능의 저하를(데드락 등) 발생시킨다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>데이터 마이그레이션&lt;/strong>&lt;/p>
&lt;p>데이터 마이그레이션 작업 중 외래키 제약 조건이 있는 경우, 데이터 삽입 순서에 따라 제약조건 위반이 발생할 수 있기 때문에, 이러한 문제를 피하기 위해 외래키 제약조건을 사용하지 않거나, 일시적으로 비활성화한 후 작업을 수행해야한다.&lt;/p>
&lt;hr>
&lt;p>대표적으로 언급된 두 가지 문제로 인해 어플리케이션단에서의 처리를 통해 외래키 제약 조건 문제를 해소하려고 하는 시도가 많은 것 같습니다.&lt;/p>
&lt;p>두 가지 이유 모두 타당하지만 외래키 제약 조건으로 인해 발생하는 &lt;strong>성능 저하&lt;/strong>는 대부분의 서비스에서는 의미있는 수준은 아니라고 해요&lt;/p>
&lt;p>다만 데이터가 꽤 많이 적재되어있는 상태에서 복잡한 외래키 제약조건이 설정되어있는 컬럼을 수정하는 작업은 위험하고, 비용이 많이 발생하는 작업이기 때문에, 변경이 많이 필요할 수 있는 테이블에는 외래키 제약 조건을 설정하지 않는 것이 타당할 수 있다고 합니다.&lt;/p>
&lt;p>그렇기 때문에 프로젝트가 충분히 안정화되었다면, 이후 제약 조건을 추가하는 것이 좋다는 것이 좋다는 의견이었습니다.&lt;/p>
&lt;hr>
&lt;p>그래서 결론적으로 이야기하면 &lt;strong>&lt;code>외래키 제약조건을 사용하지 않는 것은 국룰은 아니다.&lt;/code>&lt;/strong> &lt;strong>&lt;code>외래키 제약조건을 무분별하게 사용하는 것은 지양하자&lt;/code>&lt;/strong> 정도로 요약할 수 있을 것 같습니다. &lt;del>사실 개인 취향인가 싶어요&lt;/del>&lt;/p>
&lt;h3 id="uuid-성능-문제">UUID 성능 문제&lt;/h3>
&lt;p>이번 데이터 모델을 설계하면서 모든 ID 컬럼은 &lt;strong>UUID&lt;/strong>로 설정했습니다.&lt;/p>
&lt;p>사실 UUID는 생성되는 특징으로 인해 전역적으로 충돌 가능성이 매우 낮은 고유한 ID를 만들 수 있어, 분산 환경에서 많이 사용하게됩니다.&lt;/p>
&lt;p>이번 미션은 RDBMS를 사용하는 것 이었고, RDBMS는 동기화의 어려움으로 인해 마스터 DB를 여러대 두는 방식을 적극적으로 고려하지는 않습니다.&lt;/p>
&lt;p>그래서인지 스터디 그룹원 중 한분이 &lt;code>AUTO_INCREMENT&lt;/code>를 사용하지 않고 UUID를 사용한 이유를 질문해주셨어요. 그래서 저는 아래와같이 답변을 했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>키 생성 처리를 데이터베이스와 분리&lt;/strong>&lt;/p>
&lt;p>일단 저는 키값을 데이터베이스에서 생성한다는 것 자체가 비즈니스 로직과 데이터베이스에 의존의 생긴다고 생각했어요! 이는 추후 데이터베이스를 NoSQL로 변경한다던가 분산 데이터베이스로 전환한다던가 하는 문제에서 비교적 자유로울 수 있습니다.&lt;/p>
&lt;p>&lt;code>AUTO_INCREMENT&lt;/code>가 충돌없는 키 값을 만들어야하는 규칙에서도 자유로울 수 있다고 생각했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>키 생성을 서버가 담당&lt;/strong>&lt;/p>
&lt;p>RDBMS의 &lt;code>AUTO_INCREMENT&lt;/code>를 사용한다는 것은 결국 관련 처리를 위한 자원이 필요하다는 것을 의미해요&lt;/p>
&lt;p>대부분 웹 서버는 HTTP를 활용한 무상태성을 유지하도록 구현되기 때문에 수평 확장이 비교적 쉬운 반면, RDBMS는 동기화의 어려움으로 인해 읽기 작업 외의 기능은 결국 마스터 데이터베이스 1대가 처리하게 됩니다.&lt;/p>
&lt;p>말씀해주신것처럼 &lt;code>AUTO_INCREMENT&lt;/code>를 사용한다면 웹 서버가 관련 처리를 하지 않기 때문에 부하가 덜 발생하는 것 처럼 보이지만, 결과적으로 성능의 병목이되기 쉬운 RDBMS의 부하를 증가 시키게 되는 것이죠&lt;/p>
&lt;p>UUID 생성에는 많은 부하가 발생하지 않고, 웹 서버는 수평적 확장이 쉽기 때문에 많은 처리가 필요하다면 데이터베이스에서 발생하는 부하를 조금이나마 줄일 수 있을 것이라고 생각했어요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>코드 품질&lt;/strong>&lt;/p>
&lt;p>첫 번째와 많이 겹치는 부분이긴한데, 제 백엔드 처리를 보시면 서비스 로직에서 사용자의 요청으로 받은 입력으로 엔티티를 만들어 사용하는 것을 보실 수 있을거에요&lt;/p>
&lt;p>이 때 최초 생성하는 엔티티에 대해서는 UUID를 직접 만들어주고 있는데, &lt;code>AUTO_INCREMENT&lt;/code>를 사용하게되면 RDBMS에서 값을 생성해주기 전 까지는 id 값을 알 수 없기 때문에 해당 값에 null을 허용해야한다는 문제? 도 있다고 생각했어요&lt;/p>
&lt;p>&lt;code>null&lt;/code> 허용하게 되었을 때 발생할 수 있는 문제들과 &lt;code>null&lt;/code>을 처리해야함으로 인해 만들어지는 비즈니스 로직, 그리고 &lt;code>null&lt;/code>로 인한 코드 오염을 예방하기 위해 조금 더 엄격한 타입을 사용하려는 의도도 있었습니다.&lt;/p>
&lt;hr>
&lt;p>이러한 이유를 들어서 설명했는데 작업하다보니 두 번째 이유인 &lt;strong>키 생성을 서버가 담당하여 RDBMS의 부하를 조금이나마 덜겠다.&lt;/strong> 는 이유는 틀릴수도 있지 않을까라는 생각을 하게 되었습니다.&lt;/p>
&lt;h4 id="mysql의-pk">MySQL의 PK&lt;/h4>
&lt;p>MySQL의 InnoDB 스토리지 엔진을 사용하게되면, 모든 테이블은 기본적으로 &lt;strong>프라이머리 키&lt;/strong>를 기준으로 &lt;strong>클러스터링&lt;/strong>되어 저장됩니다.&lt;/p>
&lt;p>&lt;strong>PK&lt;/strong>를 B-Tree 계열 자료 구조를 통해 값의 순서대로 디스크에 저장하게되고, 모든 세컨더리 인덱스는 레코드의 주소 대신 프라이머리의 키 값을 논리적은 주소로 사용하게되어요&lt;/p>
&lt;p>이러한 특성 때문에 충돌 가능성이 지극히 낮은 랜덤한 값을 만들어내는 &lt;code>UUID v4&lt;/code>로 PK로 설정하면, 성능의 저하가 발생할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2.png"
width="926"
height="657"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2_hu4c15cba2b4aacfb7cc2a03a3c364cd6f_50081_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2_hu4c15cba2b4aacfb7cc2a03a3c364cd6f_50081_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="v4 - Random 포함"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;br>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1.png"
width="926"
height="657"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1_hu9678aa1d8eaa8f3bbabd1ff9874b8021_56627_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1_hu9678aa1d8eaa8f3bbabd1ff9874b8021_56627_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="v4 - Random 제외"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;/p>
&lt;p>위 그래프는 배치당 100,000건의 데이터를 &lt;code>INSERT&lt;/code>하는 쿼리에서 성능 차이를 보여줍니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3.png"
width="885"
height="588"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3_hu7772b5810b6ad334b763624da5431ad0_25600_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3_hu7772b5810b6ad334b763624da5431ad0_25600_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="테스트가 실행되는 데 걸린 시간"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>극단적인 상황이긴 하지만, 히스토그램을 살펴보면 &lt;code>AUTO_INCREMENT&lt;/code>에 비해서 &lt;code>UUID v4&lt;/code>가 성능이 크게 떨어지는 것을 볼 수 있습니다.&lt;/p>
&lt;p>그래서 &lt;strong>데이터베이스의 부하를 줄인다.&lt;/strong> 는 말은 틀렸다고 볼 수 있을 것 같습니다.&lt;/p>
&lt;p>물론 이 그래프의 출처에서는 &lt;code>Sequential UUID v4&lt;/code>를 사용했을 경우 성능이 의미있는 수준의 차이는 아니기 때문에 사용할 것을 권하고는 있습니다.🤣&lt;/p>
&lt;h4 id="mysql의-uuid-처리-방식">MySQL의 UUID 처리 방식&lt;/h4>
&lt;p>MySQL은 컬럼 타입으로 UUID를 제공하고 있지는 않습니다. 그래서 사용하려면 몇가지 절차가 필요합니다.&lt;/p>
&lt;p>아래는 테이블을 생성하는 예시입니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>UUID를 &lt;code>CHAR(36)&lt;/code> 형식으로 사용&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">CHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">36&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID&lt;/span>&lt;span class="p">()),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TIMESTAMP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CURRENT_TIMESTAMP&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UUID를 생성하는 함수는 존재하지만 컬럼 타입으로는 존재하지 않기 때문에, &lt;code>CHAR(36)&lt;/code>으로 지정한 모습입니다.&lt;/p>
&lt;p>여기에서 컬럼의 크기를 작게 만드는 방법도 적용 가능해요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>UUID를 &lt;code>BINARY(16)&lt;/code> 형식으로 사용&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">BINARY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID&lt;/span>&lt;span class="p">())),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TIMESTAMP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CURRENT_TIMESTAMP&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UUID를 &lt;code>BINARY(16)&lt;/code>으로 선언하고, 저장할 떼 UUID를 &lt;code>BINARY&lt;/code>로 변환하여 저장하는 방법입니다.&lt;/p>
&lt;p>성능을 테스트하지는 않았지만, 함수로 인한 처리가 필요하다는 부분이 조금 꺼림직하더라구요😅&lt;/p>
&lt;hr>
&lt;p>위와 같이 &lt;code>BINARY(16)&lt;/code>으로 선언했다면, 읽어올때도 변환이 필요하게됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">BIN_TO_UUID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>UUID_TO_BIN&lt;/code>과 반대로 &lt;code>BIN_TO_UUID&lt;/code>를 써서 변환해줘야해요&lt;/p>
&lt;hr>
&lt;p>물론 UUID를 애플리케이션 단에서 생성하고있고, 애플리케이션 단에서 변환하는 처리가 들어가면 문제가 작아질 것 같지만 그래도 뭔가&amp;hellip; 좀 불편한 느낌은 지울 수 없는 것 같아요🥲&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>이번주는 생각보다 많은 내용들을 배워가는 것 같아요.&lt;/p>
&lt;p>책들로 학습했던 내용들을 저의 코드에 반영해보려고하니 여러 다른 것들도 알 수 있게 되어 뜻 깊은 것 같습니다.&lt;/p>
&lt;p>다음주 부터는 멘토님이 붙어 직접 코드리뷰를 해주신다고 하는군요! 그리고 어떤 미션들이 나올까 정말 기대됩니다.&lt;/p>
&lt;p>또 2주간 함께했던 스터디 그룹원들과도 헤어지고 새로운 스터디 그룹원들을 만나는데 어떤 분들일지 기대되네요&lt;/p>
&lt;p>한 주간 모두 고생 많으셨습니다. 다음주도 최선을 다해봐요🔥&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다.😊&lt;/p></description></item><item><title>멤버십 과정 1주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/1/</link><pubDate>Sun, 25 Aug 2024 21:00:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/1/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/cover.png" alt="Featured image of post 멤버십 과정 1주차 회고" />&lt;p>멤버십 과정 첫 주가 마무리 되었습니다. 🥳&lt;/p>
&lt;p>멤버십 과정은 실무형 프로젝트를 반복 수행하며 &lt;strong>도메인 지식&lt;/strong>과 &lt;strong>기술&lt;/strong>을 학습하는 &lt;strong>학습 스프린트&lt;/strong> 8주, &lt;strong>팀&lt;/strong>을 이뤄 기술적으로 완성도 있는 &lt;strong>서비스&lt;/strong>를 만드는 &lt;strong>그룹프로젝트&lt;/strong> 6주로 구성되어 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img.png"
width="660"
height="1043"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_hu1befaeec4069fafd4d6776d0ba2f8324_93826_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_hu1befaeec4069fafd4d6776d0ba2f8324_93826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="멤버십 과정"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;p>첫 4주는 &lt;strong>기본적으로 알아야하는 도메인 지식과 기술을 모두 활용&lt;/strong>하여 서비스를 만들며 학습하고, 이후 4주는 조금 더 알고 싶은 도메인을 선택하여 더 깊게 학습해보는 과정이 기다리고 있습니다.&lt;/p>
&lt;p>그래서 첫 주는 가장 기본적인 형태의 웹 서비스를 바닐라로 만들어 보는 미션이 주어졌어요&lt;/p>
&lt;p>아마 기능들이 추가되고, 기존 기능을 개선해보는 미션이 주어지며 점점 더 완성도 높은 서비스로 바꿔가는 흐름으로 진행될 것 같습니다.&lt;/p>
&lt;h2 id="챌린지와-다른점">챌린지와 다른점&lt;/h2>
&lt;p>멤버십 과정은 챌린지 과정과는 추구하는 방향은 같지만 진행되는 방식이 조금 달랐습니다.&lt;/p>
&lt;p>훨씬 현업과 같은 환경으로 프로젝트를 수행하며 개발에 필요한 내용들을 스스로 학습 방식으로 진행되었어요&lt;/p>
&lt;h3 id="데일리-스크럼과-피어세션">데일리 스크럼과 피어세션&lt;/h3>
&lt;p>&lt;strong>학습 스프린트&lt;/strong>라는 단어를 보고 눈치 채셨을수도 있을 것 같은데요!&lt;/p>
&lt;p>챌린지 과정에서는 매일 동료들의 피드백을 받고, 서로의 생각을 공유해보는 피어세션을 가졌다면, 멤버십 과정의 &lt;strong>학습 스프린트&lt;/strong>에서는 애자일 방법론 중 하나인 스크럼을 진행하듯 &lt;strong>데일리 스크럼&lt;/strong>을 진행합니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1.png"
width="720"
height="416"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1_hu81dea2dde4003a9de1affb998ffda14f_161826_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1_hu81dea2dde4003a9de1affb998ffda14f_161826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="스크럼"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>챌린지 과정의 피어세션과는 달리 스터디 그룹의 구성원이 2주간 같이 학습한다는 점도 다른 부분이네요&lt;/p>
&lt;p>&lt;strong>멤버십 과정의 피어세션&lt;/strong>은 &lt;strong>매주 금요일 아침 3시간&lt;/strong> 동안 &lt;strong>1번만&lt;/strong> 진행하게됩니다.&lt;/p>
&lt;p>데일리 스크럼은 30분 정도 짧은 시간동안 &lt;strong>어제 수행한 작업 내용&lt;/strong>과 &lt;strong>오늘 수행할 작업내용&lt;/strong> 그리고 하면서 발생했던 문제들을 공유하는 시간이었어요&lt;/p>
&lt;p>데일리 스크럼에서 그룹원들의 애로사항에 대해 방향성을 제시해주려고 노력했는데, 도움이 많이 되셨다고 말씀해주셔서 뿌듯했습니다 🤩&lt;/p>
&lt;h3 id="pr과-코드리뷰">PR과 코드리뷰&lt;/h3>
&lt;p>챌린지 과정에서는 당일 오전 9시까지 제출한 결과물을 바탕으로 어느정도 구현했는지, 잘한점, 개선할 점 등을 찾아 피어세션에 공유하였다면, 멤버십 과정에서는 1일 1PR을 만들고 자정에 자동으로 머지되는 방식이었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2.png"
width="1200"
height="662"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2_hu2d7aa351f7187e8bceef60dfdec2312c_42601_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2_hu2d7aa351f7187e8bceef60dfdec2312c_42601_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pull Request"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>PR을 남길 때 어떤 부분을 작업했는지, 어떤 부분들을 학습했는지, 어떤 부분에서 고민이 있었고 어떻게 해결하였는지 꼭 남겨야 했습니다.&lt;/p>
&lt;p>그리고 이 PR을 기반으로 시간이 날 때마다 각자 알아서 비동기적으로 코드 리뷰를 진행하는 방향으로 가이드 되었어요&lt;/p>
&lt;p>저는 평균적으로 &lt;strong>매일 아침 9시부터 데일리 스크럼 전 까지&lt;/strong> 그룹원들의 코드를 확인하고 코멘트를 남기려 노력했습니다.&lt;/p>
&lt;blockquote>
&lt;p>퇴사 전에는 출근하고 오전 동안에는 VOC를 확인 후에 코드리뷰하는 것이 루틴이었는데, 오랜만에 출근해서 일하는 느낌이었네요😂&lt;/p>
&lt;/blockquote>
&lt;h3 id="미션">미션&lt;/h3>
&lt;p>위에서 언급한 것 처럼 조금 더 실무에 가까운 미션들이 주어졌습니다.&lt;/p>
&lt;p>Figma 산출물을 직접 분석하고 프로젝트를 설계해야 했었네요&lt;/p>
&lt;blockquote>
&lt;p>풀스택 개발자로 일 할때는 퍼블리셔 분들이 계셔서 Figma를 볼 일이 잘 없었는데 반가웠습니다😄&lt;/p>
&lt;/blockquote>
&lt;p>매주 월요일에 미션이 공개되는데, 월요일 PR에는 &lt;strong>나만의 주간 계획서&lt;/strong>를 꼭 포함시켜야 한다는 가이드가 있었어요&lt;/p>
&lt;p>현업에서는 WBS를 작성했겠지만 조금 과한 것 같아 &lt;code>mermaid&lt;/code>를 이용해 &lt;code>gantt&lt;/code> 차트를 일 별 작업에 맞추어 그려 주간 계획서를 만들어 봤습니다.&lt;/p>
&lt;blockquote>
&lt;p>이러한 부분도 협업과 매우 유사하다고 느껴졌어요 ㅎㅎ&lt;/p>
&lt;/blockquote>
&lt;p>이렇게 세운 계획에 맞추어 자신만의 속도로 미션을 수행하면 되었습니다.&lt;/p>
&lt;h2 id="학습-내용">학습 내용&lt;/h2>
&lt;p>첫 4주는 풀스택 과정인 만큼 프론트엔드와 백엔드 모두 구현해야 했습니다.&lt;/p>
&lt;p>어떤 내용인지는 비밀이지만🤫 &lt;strong>express&lt;/strong>와 &lt;strong>템플릿 엔진&lt;/strong>, &lt;strong>Vanilla JS&lt;/strong>를 이용하는 고전적인 방식의 &lt;strong>SSR&lt;/strong>로 만들어 보는 것이 목표였습니다.&lt;del>저는 목표대로 안했네요&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3.png"
width="435"
height="157"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3_hudb88119dd717241f9061b504e1bd0d00_24570_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3_hudb88119dd717241f9061b504e1bd0d00_24570_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="express"
class="gallery-image"
data-flex-grow="277"
data-flex-basis="664px"
>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8.png"
width="299"
height="168"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8_huf83071bd05fabec43e8d5e1101b604b5_4861_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8_huf83071bd05fabec43e8d5e1101b604b5_4861_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TypeScript"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/p>
&lt;p>Figma와 언어 정도를 제외하면 큰 제약이 없어 굉장한 자유도가 주어졌어요&lt;/p>
&lt;p>저는 &lt;strong>PHP&lt;/strong> 백엔드에 &lt;strong>jQuery&lt;/strong>를 이용하는 레거시를 운영했었기 때문에 고전적인 방식의 SSR을 구현하는 데 익숙해서 색다르게 &lt;strong>Vanilla TS&lt;/strong>를 활용한 &lt;strong>SPA&lt;/strong>를 시도했습니다.&lt;/p>
&lt;h3 id="프론트엔드">프론트엔드&lt;/h3>
&lt;p>&lt;strong>HTML/CSS&lt;/strong>&lt;/p>
&lt;p>일단 직접 HTML, CSS를 이용하여 UI를 구현해야 했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5.png"
width="792"
height="612"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5_hud1b24fd2279ceb30e07ec48a1e0b1e8b_31306_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5_hud1b24fd2279ceb30e07ec48a1e0b1e8b_31306_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="HTML, CSS"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>사실 저는 &lt;strong>UI 개발 인턴&lt;/strong>을 경험했기 때문에 마크업이 익숙한 편 이었는데&amp;hellip;&lt;/p>
&lt;p>풀스택 개발자로 일할 때는 마크업을 직접 구현하지 않아서 그런지 오랜만에 하려니 처음엔 조금 어색하더라구요🥲&lt;del>하지만 금방 익숙해졌어요&lt;/del>&lt;/p>
&lt;p>적응하는 데 시간이 조금 더 필요했던 부분은 &lt;strong>Floxbox&lt;/strong> 레이아웃이었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6.png"
width="325"
height="200"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6_hu095e62d0763cda11e453936824cdf63c_5283_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6_hu095e62d0763cda11e453936824cdf63c_5283_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="CSS FLEXBOX"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>이전 &lt;strong>UI 개발 인턴&lt;/strong>에서는 &lt;strong>IE 8&lt;/strong> 대응을 기본으로 학습했기 때문에 &lt;code>float&lt;/code>에 더 익숙했기 때문인데요&lt;/p>
&lt;p>Figma도 박스 모델을 기준이 아닌 Flexbox을 기준으로 만들어져 있었습니다.&lt;/p>
&lt;p>Flexbox에 익숙해지고 나서야 Figma를 제대로 이해할 수 있었네요&amp;hellip;&lt;/p>
&lt;p>IE8 대응할 때 사용하지 않던 CSS 변수, 함수등이 적극적으로 사용되어 있어서 처음엔 많이 혼란스러웠습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Vanilla TS&lt;/strong>&lt;/p>
&lt;p>바닐라 타입스크립트로 SPA 방식을 활용하기 위해 &lt;strong>Vite&lt;/strong>를 이용해 개발 환경을 구성하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7.png"
width="1200"
height="589"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7_hub81d93aaf499e50c31d82ce55491e085_214787_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7_hub81d93aaf499e50c31d82ce55491e085_214787_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Vite"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>Vite 같은 경우 현업에서 &lt;strong>Vue3&lt;/strong>를 이용하여 프론트엔드 개발할 때 좋았던 경험이 있었고, &lt;strong>Vanilla TS&lt;/strong> 환경을 쉽게 만들 수 있도록 제공해줘서 활용해봤습니다.&lt;/p>
&lt;h3 id="백엔드">백엔드&lt;/h3>
&lt;p>express를 활용하여 서버를 구성해야했습니다.&lt;del>마스터인 호눅스님이 처음에는 node http로 구현하는 것을 고려하셨다고 하네요&lt;/del>&lt;/p>
&lt;p>저는 &lt;strong>타입스크립트&lt;/strong>를 활용하여 프로젝트를 구성했는데, 자바스크립트의 &lt;strong>자유로움을 제한&lt;/strong>하고, &lt;strong>타입의 장점&lt;/strong>을 취하기 위해서였어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9.png"
width="1127"
height="843"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="레이어드 아키텍처"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>이를 최대한 활용하기 위해 &lt;strong>레이어드 아키텍처&lt;/strong>와 &lt;strong>DI&lt;/strong>를 적극적으로 활용하여 서버를 구성하였습니다.&lt;/p>
&lt;p>express에서 라우터를 사용하는 구조가 &lt;code>Laravel&lt;/code>, &lt;code>Ruby on Rails&lt;/code>와 비슷하다고 느껴서 이를 참고하여 아키텍처를 구성해봤어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10.png"
width="2200"
height="1100"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10_huf6da5d764d39438817b888350c776b1d_196442_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10_huf6da5d764d39438817b888350c776b1d_196442_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Laravel"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11.png"
width="366"
height="138"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11_hud750c3d05a262006ab0b0b0a5c7abbcf_6176_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11_hud750c3d05a262006ab0b0b0a5c7abbcf_6176_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Ruby on Rails"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="636px"
>&lt;/p>
&lt;p>처음에는 &lt;strong>데이터베이스&lt;/strong>를 절대 활용하지 말고 &lt;strong>목업 데이터&lt;/strong>를 활용해서 개발하라는 제약 사항이 있었습니다.&lt;/p>
&lt;p>그래서 저는 &lt;code>Spring Data&lt;/code>를 참고하여 Repository(Model)을 &lt;strong>인터페이스&lt;/strong>로 구현하고, 더미 데이터를 주입받은 &lt;code>Repository&lt;/code>를 구현하여 이후 데이터베이스 연결을 쉽게 적용할 수 있도록 대응해봤습니다.&lt;/p>
&lt;h2 id="아쉬웠던-점">아쉬웠던 점&lt;/h2>
&lt;h3 id="테스트-코드">테스트 코드&lt;/h3>
&lt;p>챌린지 과정에서는 TDD 활용하여 미션들을 수행하려했었는데, 이번주 미션에서는 TDD는 커녕 테스트 코드도 작성하지 않았습니다 😅&lt;/p>
&lt;p>백엔드 코드는 더미 데이터를 활용하는 단순한 처리였기 때문에 굳이 붙여야 하나? 라는 생각이 들었던 것 같고, 프론트엔드 코드는 처음 고전적인 방식의 SSR에서 SPA로 넘어가는 과정에서 구조 변경이 잦아 마지막 날에야 설계가 확정이 되었습니다.&lt;/p>
&lt;p>그리고 FE쪽은 어떻게 테스트를 해야할 지 감이 안오더군요 🥲&lt;/p>
&lt;p>이번주에 설계가 확정된 만큼 다음주에는 TDD를 시도해 볼 수는 있을 것 같습니다. TTD 까지는 아니더라도 테스트 코드를 어떻게 붙여야할 지 고민을 많이 해보게될 것 같아요 🙃&lt;/p>
&lt;h3 id="커뮤니티-활동">커뮤니티 활동&lt;/h3>
&lt;p>챌린지 과정에서는 &lt;code>Slack&lt;/code>에 올라오는 질문이나 의견에 답변을 많이 하려고 노력했었는데, 프론트 개발이 들어가서 그런지 모니터를 Slack에 할당할 수 없어 관심을 많이 못 줬던 것 같습니다.&lt;del>변명&lt;/del>&lt;/p>
&lt;p>다음주에는 &lt;code>Slack&lt;/code>에 조금 더 주의를 기울이려고 의식적으로 노력해봐야겠어요🔥&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>데일리 스크럼, 그룹 리뷰, 피어 세션, 코드리뷰에서 제가 아는 모든 것을 공유하려고 열심히 노력했는데 다른 분들에게 도움이 되었을지 궁금하네요&lt;/p>
&lt;p>그룹끼리 하는 활동을 넘어 다른 분들에게도 긍정적인 영향을 주고 영감을 주기 위해 더 많은 노력이 필요할 것 같습니다.&lt;/p>
&lt;p>남은 기간도 끝까지 모두 화이팅~~~🔥🔥🔥&lt;/p></description></item><item><title>Jest를 활용한 유닛 테스트</title><link>https://codemario318.github.io/post/jest-unit-test/</link><pubDate>Tue, 23 Jul 2024 13:53:35 +0900</pubDate><guid>https://codemario318.github.io/post/jest-unit-test/</guid><description>&lt;img src="https://codemario318.github.io/post/jest-unit-test/cover.png" alt="Featured image of post Jest를 활용한 유닛 테스트" />&lt;h2 id="소프트웨어-테스트란">소프트웨어 테스트란?&lt;/h2>
&lt;p>소프트웨어 테스트는 소프트웨어가 요구사항을 충족하는지, 결함이 없는지, 의도한 대로 작동하는지를 확인하는 것을 목표로 수행됩니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/jest-unit-test/img.png"
width="1024"
height="680"
srcset="https://codemario318.github.io/post/jest-unit-test/img_hu34b341a957e0c9749c8004b23f93334d_19212_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jest-unit-test/img_hu34b341a957e0c9749c8004b23f93334d_19212_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TDD"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>예를 들면 &lt;strong>TDD&lt;/strong>에서 파생된 &lt;strong>BDD&lt;/strong>(행위 주도 개발)는 테스트 코드를 작성할 때 수행할 행위에 대한 명세를 &lt;strong>비 기술적인&lt;/strong> 방식으로 작성하여 명세상의 요구사항을 만족하고 있는지 파악하는데 큰 도움을 주기도합니다.&lt;/p>
&lt;p>이러한 이유로 어떤 회사에서는 개발을 시작하기 전 기획서를 기반으로 요구사항을 테스트 코드에 옮겨놓는 작업부터 하는 곳도 있다고 들었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/jest-unit-test/img_1.png"
width="640"
height="463"
srcset="https://codemario318.github.io/post/jest-unit-test/img_1_hu8a95588ee7e37a1467ddf58bf0d04b87_277163_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jest-unit-test/img_1_hu8a95588ee7e37a1467ddf58bf0d04b87_277163_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>그리고 최근 접했던 &lt;strong>개발자 원칙&lt;/strong>이라는 책에서 &lt;strong>탁월한 성과를 내는 조직의 공통점&lt;/strong>은 &lt;strong>심리적 안정감&lt;/strong>이라는 내용이 있었습니다.&lt;/p>
&lt;p>&lt;strong>심리적 안정감&lt;/strong>은 &lt;strong>실수가 드러났을 때에도 처벌받거나 놀림 받지 않을 것 이라는 믿음&lt;/strong>이라고 하는데, 테스트는 조금 다른 관점에서 &lt;strong>실수가 발생하지 않을 것 이라는 믿음&lt;/strong>을 통해 &lt;strong>안정감&lt;/strong>을 느끼게되어 도전적인 시도를 많이하게 되었다는 의견이 많은 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/jest-unit-test/img_2.png"
width="1024"
height="768"
srcset="https://codemario318.github.io/post/jest-unit-test/img_2_huf4fe4d3807eda6911a791cff0f5cfe22_449498_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jest-unit-test/img_2_huf4fe4d3807eda6911a791cff0f5cfe22_449498_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="V 모델"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>이처럼 테스트는 소프트웨어가 단순히 요구사항을 충족하는지, 결함이 없는지, 의도하는 대로 작동하는지 확인하는 것을 넘어서 &lt;strong>안정감&lt;/strong> 같은 부과적인 효과를 위해서라도 현재 가장 중요한 프로세스라는 평가도 있을 정도입니다.&lt;/p>
&lt;h2 id="unit-test란">Unit Test란?&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/jest-unit-test/img_3.png"
width="1076"
height="1092"
srcset="https://codemario318.github.io/post/jest-unit-test/img_3_hub49cc3aa594321fb7e04a428f3a9147d_349149_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jest-unit-test/img_3_hub49cc3aa594321fb7e04a428f3a9147d_349149_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="테스트 피라미드"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="236px"
>&lt;/p>
&lt;p>테스트의 시작점이라고도 할 수 있는 단위 테스트는 프로그래밍의 최소 단위(함수, 메서드, 객체)를 테스트하는 방법 입니다.&lt;/p>
&lt;p>주요 목적은 각 단위가 예상대로 작동하는지 확인하는 것이며, 소프트웨어 개발 과정에서 매우 중요한 단계로, 코드의 결함을 조기에 발견하고 수정할 수 있도록 도와줍니다.&lt;/p>
&lt;h3 id="주요-특징">주요 특징&lt;/h3>
&lt;p>단위 테스트의 주요 특징은 아래와 같습니다.&lt;/p>
&lt;ul>
&lt;li>빠른 피드백(Quickly)
&lt;ul>
&lt;li>코드를 수정한 직후에 피드백을 받을 수 있도록 빠르게 수행되어야 함&lt;/li>
&lt;li>단위 테스트는 매우 작은 코드 단위를 테스트하기 때문에 빠르게 실행됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>독립성(Isolation)
&lt;ul>
&lt;li>각 테스트는 다른 테스트와 독립적으로 실행되어 테스트 간의 상호작용이나 의존성을 최소화해야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>작은 검증 단위(Veridate)
&lt;ul>
&lt;li>작은 단위를 검증해야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화 가능성(Automatic)
&lt;ul>
&lt;li>자동화되어 개발 과정에서 지속적으로 실행되어야 함&lt;/li>
&lt;li>따라서 반복적인 테스트 작업을 효율적으로 수행 가능해야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개발자 주도
&lt;ul>
&lt;li>개발자가 작성하고 유지 관리함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="좋은-단위-테스트의-특징">좋은 단위 테스트의 특징&lt;/h3>
&lt;p>좋은 단위 테스트는 다음과 같은 특징들을 갖습니다.&lt;/p>
&lt;ul>
&lt;li>독립적
&lt;ul>
&lt;li>각 테스트는 다른 테스트와 독립적으로 실행되어야 함&lt;/li>
&lt;li>테스트가 서로에게 의존하게 되면 문제를 파악하기 어려워짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화 가능
&lt;ul>
&lt;li>단위 테스트는 자동으로 실행될 수 있어야 함&lt;/li>
&lt;li>자동화된 테스트는 반복적으로 실행할 수 있어 지속적인 피드백을 제공할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>반복 가능
&lt;ul>
&lt;li>테스트는 언제든지 반복해서 실행할 수 있어야 하며, 실행할 때마다 동일한 결과를 제공해야 함&lt;/li>
&lt;li>외부 요인에 의한 변동이 없어야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빠른 실행
&lt;ul>
&lt;li>단위 테스트는 빠르게 실행되어야 함&lt;/li>
&lt;li>테스트 실행 시간이 길어지면 개발자가 자주 실행하기 어려워지고 피드백 속도가 느려짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>명확한 목적
&lt;ul>
&lt;li>각 테스트는 특정 기능이나 동작을 검증하는 명확한 목적을 가져야 함&lt;/li>
&lt;li>무엇을 테스트하는지 분명히 알 수 있어야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가독성
&lt;ul>
&lt;li>테스트 코드는 읽기 쉬워야 함&lt;/li>
&lt;li>다른 개발자가 테스트 코드를 보고 쉽게 이해할 수 있어야 하며, 테스트의 의도를 명확히 파악할 수 있어야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>설정 및 정리
&lt;ul>
&lt;li>테스트 실행 전후에 필요한 설정(setup)과 정리(teardown) 작업이 명확히 정의되어 있어야 함&lt;/li>
&lt;li>이는 테스트 환경을 일관되게 유지하는 데 중요함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단일 검증
&lt;ul>
&lt;li>각 테스트는 하나의 동작이나 기능을 검증해야 함&lt;/li>
&lt;li>어떤 테스트가 실패했을 때 그 원인을 쉽게 파악할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>신뢰성
&lt;ul>
&lt;li>테스트는 항상 일관된 결과를 제공해야 함&lt;/li>
&lt;li>테스트 결과가 불안정하면 테스트의 신뢰성이 떨어짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>의존성 최소화
&lt;ul>
&lt;li>외부 시스템이나 데이터베이스와 같은 외부 의존성에 최소한으로 의존해야 함&lt;/li>
&lt;li>필요하다면 목(Mocks)이나 스텁(Stubs) 같은 테스트 대역을 사용하여 외부 의존성을 격리할 수 있어야 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>요약하면 좋은 단위 테스트는 소프트웨어 개발 프로세스의 효율성을 높이고, 코드의 신뢰성을 강화하며, 유지 보수성을 향상시키는 데 중요한 역할을 합니다. 참 어렵군요..😂&lt;/p>
&lt;h2 id="jest란">Jest란?&lt;/h2>
&lt;p>JS진영에서 많이 활용되는 테스트 도구로 &lt;code>Jest&lt;/code>, &lt;code>Mocha&lt;/code> 등이 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/jest-unit-test/img_4.png"
width="484"
height="484"
srcset="https://codemario318.github.io/post/jest-unit-test/img_4_hu6667362b1aeecce3369b167bd4546191_67465_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jest-unit-test/img_4_hu6667362b1aeecce3369b167bd4546191_67465_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Jest"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>그 중 &lt;code>Jest&lt;/code>는 &lt;code>Nest.js&lt;/code>, &lt;code>React&lt;/code>에서도 표준으로 사용되고 있을 만큼 활용도가 높은 뿐만 아니라, 단위 테스트, 통합 테스트, 스냅샷 테스트 등 다양한 테스트 유형을 지원하며, 많은 기능들을 지원하고 있으므로 선택하였습니다.&lt;/p>
&lt;h3 id="환경-준비">환경 준비&lt;/h3>
&lt;p>&lt;code>Node.js&lt;/code> 환경에서 &lt;code>Jest&lt;/code>를 사용해보겠습니다. 이를 위해 환경부터 구성해야합니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>node&lt;/code>, &lt;code>npm&lt;/code>는 설치되어 있다고 가정하고 진행합니다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>프로젝트 초기화&lt;/strong>&lt;/p>
&lt;p>새 프로젝트 디렉토리를 만들고, 만들어진 디렉토리에 프로젝트 초기화를 수행합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">mkdir my-project
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> my-project
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npm init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>타입 스크립트는 &lt;code>npm tsc --init&lt;/code> 명령을 수행하면 됩니다.&lt;/p>
&lt;p>&lt;strong>Jest 설치&lt;/strong>&lt;/p>
&lt;p>프로젝트에 &lt;code>Jest&lt;/code>를 개발 의존성(dev dependency)으로 설치합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">npm install --save-dev jest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>설치가 완료되면 &lt;code>package.json&lt;/code> 파일에 &lt;code>Jest&lt;/code> 관련 설정을 추가합니다.&lt;/p>
&lt;p>&lt;code>scripts&lt;/code> 섹션에 테스트 스크립트를 추가하여 &lt;code>Jest&lt;/code>를 실행할 수 있게 합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;jest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="동작-확인">동작 확인&lt;/h3>
&lt;p>실제 코드를 실행하여 동작을 확인해봅니다.&lt;/p>
&lt;p>&lt;strong>operations.js&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">add&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>operations.test.js&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">add&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./operations&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;adds 1 + 2 to equal 3&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>실행 결과&lt;/strong>&lt;/p>
&lt;p>명령을 실행하여 테스트를 수행해보겠습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">npm &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>정상적으로 수행되는 것을 확인할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/jest-unit-test/img_5.png"
width="264"
height="260"
srcset="https://codemario318.github.io/post/jest-unit-test/img_5_hu60f9a2aa71392d50cb7cbf55bbc5d494_27548_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jest-unit-test/img_5_hu60f9a2aa71392d50cb7cbf55bbc5d494_27548_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="실행 결과"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;h2 id="jest-기본-함수">Jest 기본 함수&lt;/h2>
&lt;p>&lt;code>Jest&lt;/code>를 사용하기위한 기본적인 함수들을 확인해보겠습니다.&lt;/p>
&lt;h3 id="테스트-함수">테스트 함수&lt;/h3>
&lt;p>&lt;strong>&lt;code>test&lt;/code>, &lt;code>it&lt;/code>&lt;/strong>&lt;/p>
&lt;p>단위 테스트를 정의하는 함수로, 두 함수 모두 동일하게 동작하여 편한 것을 사용하면 되겠습니다.&lt;/p>
&lt;p>테스트를 설명할 문자열과 테스트 본문을 포함하는 콜백 함수를 인자로 받습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;함수 설명을 입력해주세요&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">someFunction&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">expectedValue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;함수 설명을 입력해주세요&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">someFunction&lt;/span>&lt;span class="p">()).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">expectedValue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>describe&lt;/code>&lt;/strong>&lt;/p>
&lt;p>테스트를 그룹화 하는 합수입니다.&lt;/p>
&lt;p>관련된 테스트를 하나의 블록으로 묶어 정리할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;MyComponent&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;renders correctly&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;another test&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="기대값-설정-함수">기대값 설정 함수&lt;/h3>
&lt;p>테스트 본문에서 사용하며, 결과가 특정 값임을 확인하는 하게됩니다.&lt;/p>
&lt;p>&lt;strong>&lt;code>expect&lt;/code>&lt;/strong>&lt;/p>
&lt;p>테스트의 기대값을 설정하여, 다양한 매처(Matcher)와 함께 사용되어 값을 검증하게됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">expectedValue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toContain&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toHaveProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;propertyName&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toThrow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>주요 매처&lt;/strong>&lt;/p>
&lt;p>기본적으로 많이 활용되는 매처들은 아래와 같습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>toBe&lt;/code>
&lt;ul>
&lt;li>기본적인 일치 검사를 수행합니다. (엄격한 일치)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toEqual&lt;/code>
&lt;ul>
&lt;li>객체나 배열의 값을 비교합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toBeNull&lt;/code>
&lt;ul>
&lt;li>값이 null인지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toBeDefined&lt;/code>
&lt;ul>
&lt;li>값이 정의되었는지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toBeUndefined&lt;/code>
&lt;ul>
&lt;li>값이 정의되지 않았는지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toBeTruthy&lt;/code>
&lt;ul>
&lt;li>값이 true로 평가될 수 있는지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toBeFalsy&lt;/code>
&lt;ul>
&lt;li>값이 false로 평가될 수 있는지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toContain&lt;/code>
&lt;ul>
&lt;li>배열이나 문자열에 특정 값이 포함되어 있는지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toHaveLength&lt;/code>
&lt;ul>
&lt;li>배열이나 문자열의 길이를 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toHaveProperty&lt;/code>
&lt;ul>
&lt;li>객체가 특정 프로퍼티를 가지고 있는지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toMatch&lt;/code>
&lt;ul>
&lt;li>문자열이 정규 표현식과 일치하는지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>toThrow&lt;/code>
&lt;ul>
&lt;li>함수가 호출될 때 예외를 던지는지 확인합니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="모킹-및-스파이">모킹 및 스파이&lt;/h3>
&lt;p>&lt;strong>&lt;code>jest.fn&lt;/code>&lt;/strong>&lt;/p>
&lt;p>모킹 함수 생성에 사용됩니다.&lt;/p>
&lt;p>함수 호출 여부, 호출 횟수, 인자 등을 추적할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">mockFunction&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">mockFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;arg1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;arg2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockFunction&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toHaveBeenCalled&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mockFunction&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toHaveBeenCalledWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;arg1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;arg2&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>jest.mock&lt;/code>&lt;/strong>&lt;/p>
&lt;p>모듈을 모킹하여 외부 의존성을 대체할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;axios&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">axios&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;axios&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mockResolvedValue&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;mocked data&amp;#39;&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>jest.spyOn&lt;/code>&lt;/strong>&lt;/p>
&lt;p>객체의 메서드를 감시하여 호출 여부, 호출 횟수, 인자 등을 추적할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">method&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="s1">&amp;#39;real implementation&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">spy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">spyOn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;method&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">method&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;arg1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">spy&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toHaveBeenCalledWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;arg1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="훅-hooks">훅 Hooks&lt;/h3>
&lt;p>&lt;strong>&lt;code>beforeAll&lt;/code>, &lt;code>afterAll&lt;/code>&lt;/strong>&lt;/p>
&lt;p>각 테스트 블록 전후에 한 번씩 실행됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">beforeAll&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 모든 테스트 전에 한 번 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">afterAll&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 모든 테스트 후에 한 번 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>beforeEach&lt;/code>, &lt;code>afterEach&lt;/code>&lt;/strong>&lt;/p>
&lt;p>각 테스트 전후에 실행됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">beforeEach&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 각 테스트 전에 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">afterEach&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 각 테스트 후에 실행
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="타임아웃-및-기타-설정">타임아웃 및 기타 설정&lt;/h3>
&lt;p>&lt;strong>&lt;code>jest.setTimeout&lt;/code>&lt;/strong>&lt;/p>
&lt;p>테스트의 타임아웃 시간을 설정합니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">jest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 10초로 타임아웃 설정
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>test.only&lt;/code>&lt;/strong>&lt;/p>
&lt;p>해당 테스트만 실행합니다. 주로 디버깅 용도로 사용됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">only&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;only this test will run&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>test.skip&lt;/code>&lt;/strong>&lt;/p>
&lt;p>해당 테스트를 건너뜁니다. 임시로 테스트를 제외하고자 할 때 사용됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">skip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;this test will be skipped&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="기타">기타&lt;/h3>
&lt;p>찾아보니 유용해 보이는 다른 기능들도 추가합니다.&lt;/p>
&lt;p>&lt;strong>커버리지 확인&lt;/strong>&lt;/p>
&lt;p>테스트 커버리지를 확인할 수 있습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">npx jest --coverage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>사실 이전 직장에서 테스트 코드의 부재로 인한 고통을 뼈져리게 느꼈었기 때문에 테스트의 중요성은 너무나 잘 알고 있습니다.&lt;/p>
&lt;p>꼭 필요하다고 생각하고 있지만, 습관화가 안되어 아직까지는 잘 활용하지 못하고 있었는데 이번 기회를 시작으로 테스트를 잘 적용해보려고 노력해야겠습니다.&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다.😁&lt;/p></description></item><item><title>Vue3 살펴보기</title><link>https://codemario318.github.io/post/vue3/</link><pubDate>Tue, 18 Apr 2023 20:05:16 +0900</pubDate><guid>https://codemario318.github.io/post/vue3/</guid><description>&lt;img src="https://codemario318.github.io/post/vue3/vue3_cover.webp" alt="Featured image of post Vue3 살펴보기" />&lt;h2 id="vue">Vue?&lt;/h2>
&lt;p>개발자에게 더 쉽고, 가볍고, 누구나 빨리 배울 수 있는 접근성이 뛰어난 프레임워크를 목표로 개발됨&lt;/p>
&lt;ul>
&lt;li>기존 HTML 마크업 기반의 템플릿을 그대로 활용&lt;/li>
&lt;li>CSS를 작성하는 스타일도 기존 문법을 그대로 따름&lt;/li>
&lt;li>라우팅, 상태 관리, 빌드 도구 등 공식적으로 지원하는 라이브러리와 패키지를 통해 배포하여 복잡한 로직의 프론트엔드 개발을 비교적 단순하고 쉽게 만듦&lt;/li>
&lt;/ul>
&lt;p>React, Anguler에 비해서 처음 접하는 사용자들이 진입하기에 부담스럽지 않음&lt;/p>
&lt;h2 id="vue3-개선점">Vue3 개선점&lt;/h2>
&lt;h3 id="가상돔-최적화">가상돔 최적화&lt;/h3>
&lt;p>&lt;strong>AS-IS&lt;/strong>&lt;/p>
&lt;p>기존 Vue의 렌더링을 위한 가상 DOM 설계는 HTML 기반의 템플릿을 제공하고 이 템플릿 구문을 가상 DOM 트리로 반환한 후 실제로 DOM의 어떤 영역이 업데이트 되어야 하는지 재귀적으로 탐색하는 방식&lt;/p>
&lt;ul>
&lt;li>이러한 방식은 변경사항 확인을 위해 DOM 트리를 완전 탐색을 하게 되므로, 작은 변경도 트리 전체를 확인하게 되어 비효율적임&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>TO-BE&lt;/strong>&lt;/p>
&lt;p>불필요한 탐색을 위한 코드를 제거하여 렌더링 성능을 향상시켜 가상돔 최적화를 진행함&lt;/p>
&lt;ol>
&lt;li>탬플릿 구문에서 정적 요소와 동적 요소를 구분하여 트리를 탐색할 때 변경이 발생하는 동적 요소만 탐색할 수 있게 변경&lt;/li>
&lt;li>렌더링 시 객체가 여러 번 생성되는 것을 방지하기 위해 컴파일러가 미리 템플릿 구문 내에서 정적 요소, 서브 트리, 데이터 객체 등을 탐지해 렌더러 함수 밖으로 호이스팅함&lt;/li>
&lt;li>컴파일러가 미리 템플릿 구문 내에서 동적 바인딩 요소에 대해 플래그를 생성함
&lt;ul>
&lt;li>특정 요소가 동적 클래스 바인딩을 가지고 있고 정적인 값이 지정된 속성을 갖고 있다면 클래스만 처리하면 되므로, 컴파일러가 미리 생성해둔 플래그로 필요한 부분만 처리하여 렌더링 속도 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="트리쉐이킹-강화">트리쉐이킹 강화&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/vue3/vue3_1.jpg"
width="844"
height="185"
srcset="https://codemario318.github.io/post/vue3/vue3_1_hu0864643fa8eec5604bc841ee767cee36_67113_480x0_resize_q75_box.jpg 480w, https://codemario318.github.io/post/vue3/vue3_1_hu0864643fa8eec5604bc841ee767cee36_67113_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="456"
data-flex-basis="1094px"
>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>트리쉐이킹이란?&lt;/strong>&lt;br>
나무를 흔들어 잎을 떨어트리듯 모듈을 번들링하는 과정에서 사용하지 않는 코드를 제거하여 파일 크기를 줄이는 최적화 방안&lt;/p>
&lt;/blockquote>
&lt;p>Vue3는 템플릿 컴파일러가 실제 사용하는 코드만 임포트 하도록 하였음.&lt;/p>
&lt;p>양방향 데이터 바인딩을 지원하는 v-model 디렉티브와 같은 대부분의 사용자 정의 기능에서 트리쉐이킹이 가능했는데, 이를 강화하여 번들 크기를 절반 이상으로 대폭 줄일 수 있음&lt;/p>
&lt;h3 id="compoistion-api">Compoistion API&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/vue3/vue3_2.jpg"
width="844"
height="403"
srcset="https://codemario318.github.io/post/vue3/vue3_2_hu92b804dcb27f035654d81ef49a2b6939_38490_480x0_resize_q75_box.jpg 480w, https://codemario318.github.io/post/vue3/vue3_2_hu92b804dcb27f035654d81ef49a2b6939_38490_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="209"
data-flex-basis="502px"
>&lt;/p>
&lt;p>&lt;strong>AS-IS&lt;/strong>&lt;/p>
&lt;p>기존 Vue에서 하나의 컴포넌트에 여러 기능이 포함되면, 기능별로 데이터영역, 메소드 영역, 컴퓨티드 영역, 라이프 사이클 훅, 와치 등 많은 로직이 추가되고, 이러한 기능 별로 분리된 코드들이 각각 기능에 맞는 메서드에 포함되게 되어 필연적으로 섞이게 됨.&lt;/p>
&lt;p>이에 따라 여러 기능이 활용될수록 코드는 커지며 복잡도가 증가함&lt;/p>
&lt;p>&lt;strong>TO-BE&lt;/strong>&lt;/p>
&lt;p>컴포지션 API는 모든 코드를 독립적으로 정의할 수 있다. 각 기능을 함수로 묶어 모듈화 하기 때문에 특정 기능의 유지 보수를 위해 해당 기능을 수행하는 함수만 확인하면 된다.&lt;/p>
&lt;h3 id="코드-재사용">코드 재사용&lt;/h3>
&lt;p>&lt;strong>AS-IS&lt;/strong>&lt;/p>
&lt;p>기존 Vue 에서도 mixin, slot 등으로 컴포넌트 코드를 재사용 할 수 있었으나, 믹스인은 한계가 존재했음&lt;/p>
&lt;ol>
&lt;li>프로젝트가 커져 믹스인을 다중으로 상속하게 되면 이름 충돌로 인해 컨벤션 룰이 필요했음&lt;/li>
&lt;li>매개변수를 믹스인을 통해 전달할 수 없어 유연성이 떨어짐&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>TO-BE&lt;/strong>&lt;/p>
&lt;p>컴포지션 API를 사용하면 인스턴스의 특정 기능 단위로 모듈화된 로직을 여러 컴포넌트에서 재사용 할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>mixin?&lt;/strong>&lt;br>
Vue 컴포넌트에 재사용 가능한 기능을 배포하는 유연한 방법. mixin 객체는 모든 구성요서 옵션을 포함할 수 있으며, 컴포넌트에 mixin을 사용하면 해당 mixin의 모든 옵션이 컴포넌트의 고유 옵션에 “혼합”됨&lt;/p>
&lt;/blockquote>
&lt;h2 id="그-외-주요-변화">그 외 주요 변화&lt;/h2>
&lt;h3 id="텔레포트">텔레포트&lt;/h3>
&lt;p>리엑트에서 기본으로 제공하는 포털과 유사한 기능. vue가 기존에 Portal-Vue 플러그인을 통해 제공하고 있었던 기능.&lt;/p>
&lt;p>모달이나 알림 등과 같은 요소를 렌더링하려는 위치가 템플릿 구문이 속하는 컴포넌트와 다른 컴포넌트에 존재할 때, 다른 태그 위치로 모달의 위치를 조정하는 것 처럼 보이게 만드는 것을 CSS를 통해 해결하기 번거롭기 때문에, 보통 모달이 포함된 컴포넌트를 하나 더 만들어 컴포넌트의 구조를 변경하는 방식으로 구현되었음.&lt;/p>
&lt;p>vue3는 텔레포트를 사용하여 모달 컴포넌트를 분리하지 않고도 &lt;!-- raw HTML omitted --> 내부의 HTML을 특정 태그로 옮겨 렌더링 할 수 있게 되었음&lt;/p>
&lt;h3 id="서스펜스">서스펜스&lt;/h3>
&lt;p>서스팬스 컴포넌트는 리액트가 지원하던 컴포넌트 종류 중 하나로, 컴포넌트 내에 있는 조건인 Async 구문이 충족되지 않으면 조건이 충족될 때까지 템플릿 내에 Fallback 구문을 렌더링함.&lt;/p>
&lt;p>컴포지션 API를 통해 setup() 함수 내에서 외부 API에 접근해 데이터를 가져오는 비동기 작업을 수행하면 데이터를 모두 가져올 때까지 로딩 표시를 해야 할 수 있다. 이럴 때 서스펜스를 사용해 컴포넌트를 감싸면 대체할 템플릿 구문을 렌더링 할 수 있다.&lt;/p>
&lt;p>데이터를 가져오는 도중 오류가 발생하면 Vue3의 새로운 라이프사이클 훅인 OnErrorCaptured를 제공하여, 에러에 대한 처리 구문을 Fallback 구문 대신 표시할 수 있다.&lt;/p>
&lt;h3 id="리액티비티-api">리액티비티 API&lt;/h3>
&lt;p>이전 버전의 Vue는 인스턴스 내부에 오브젝트를 선언하고 새로운 속성을 추가하는 것을 감지할 수 없었다. 그래서 기존에는 Vue.set 메소드를 사용하여 기존 객체에 반응성을 부여했다.&lt;/p>
&lt;p>Vue3는 이러한 데이터 반응성을 해결하기 위해 리액티비티 API를 지원한다. 객체에 반응성을 추가하기 위해서 리액티브 메소드를 사용하면 된다.&lt;/p>
&lt;p>단순 값이라면 &lt;code>ref&lt;/code> 메소드를 사용한다. 이외에도 &lt;code>Readonly&lt;/code>, &lt;code>ToRef&lt;/code> 등 반응성을 지원하는 여러 API 가 추가되었다.&lt;/p></description></item><item><title>Javascript - Closure</title><link>https://codemario318.github.io/post/js_closure/</link><pubDate>Mon, 17 Apr 2023 18:11:36 +0900</pubDate><guid>https://codemario318.github.io/post/js_closure/</guid><description>&lt;img src="https://codemario318.github.io/post/js_closure/js_cover.png" alt="Featured image of post Javascript - Closure" />&lt;p>클로저는 &lt;strong>두개의 함수로 만들어진 환경&lt;/strong>으로 이루어진 &lt;strong>특별한 객체의 한 종류&lt;/strong>이다. 여기서 환경이라 함은 클로저가 생성될 때 그 범위에 있던 여러 지역 변수들이 포함 된 &lt;code>context&lt;/code>를 말한다. 이러한 범위는 자바스크립트 코드를 실행하기 위해 발생하는 컴파일 단계에서 결정된다.&lt;/p>
&lt;blockquote>
&lt;p>클로저를 통해서 자바스크립트에는 없는 비공개 속성/메소드, 공개 속성/메소드 처럼 구현 할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="lexical-scope">Lexical Scope&lt;/h2>
&lt;p>자바스크립트 코드를 실행할 때 컴파일 단계에서 몇가지 일이 일어난다. 그중 하나인 &lt;strong>토크나이징&lt;/strong>과 &lt;strong>렉싱&lt;/strong>이 있다.&lt;/p>
&lt;h3 id="토크나이징">토크나이징&lt;/h3>
&lt;p>문자열을 나누어 &lt;strong>토큰&lt;/strong>으로 만드는 과정&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위와 같은 구문을 만나게 되면, 아래와 같은 토큰으로 나눈다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="렉스타임">렉스타임&lt;/h3>
&lt;p>토크나이징의 결과물인 &lt;strong>토큰을 분석하여 생성된 토큰에 의미를 부여하는 것&lt;/strong>을 &lt;strong>렉싱&lt;/strong>이라고 하며, 이 과정을 &lt;strong>렉스타임&lt;/strong>이라고 한다.&lt;/p>
&lt;h3 id="렉시컬-스코프">렉시컬 스코프&lt;/h3>
&lt;p>개발자가 코드를 작성할때 변수를 어디에 작성하는가를 바탕으로 렉스타임에 토큰이 분석되며 스코프가 결정된다. 이때 구성된 유효 범위를 렉스컬 스코프라고 한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">colsole&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 60
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bar&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위의 코드가 실행될때 스코프 버블은 bar 안쪽에서 부터 시작되어 올라간다.&lt;/p>
&lt;p>코드를 해석하는 과정에서 상위에서 하위로 쌓이는 구조로 해석되기 때문에, scope에 대한 검색은 기본적으로 하위에서 상위는 되지만 상위에서 하위로의 검색은 불가능하다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 20
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// error
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="정리">정리&lt;/h3>
&lt;p>컴파일레이션의 렉싱 단계에서 모든 변수들이 어디서 어떻게 선언되었는지 바탕으로 실행 단계에서 스코프를 구성하고, 이렇게 구성되는 스코프가 렉시컬스코프이다.&lt;/p>
&lt;h2 id="클로저-생성하기">클로저 생성하기&lt;/h2>
&lt;ol>
&lt;li>내부 함수가 익명 함수로 되어 외부 함수의 반환값으로 사용된다.&lt;/li>
&lt;li>내부 함수는 외부 함수의 실행 환경에서 실행된다.&lt;/li>
&lt;li>내부 함수에서 사용되는 변수는 외부 함수의 변수 스코프에 있다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">outer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`closure`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">inner&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">inner&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">outer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// console&amp;gt; closure
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>outer&lt;/code>함수를 실행시키는 &lt;code>context&lt;/code>에는 &lt;code>name&lt;/code>이라는 변수가 존재하지 않지만, &lt;code>inner&lt;/code>함수가 &lt;code>outer&lt;/code> 함수 내부에 선언된 &lt;code>name&lt;/code>을 참조하기 때문에, &lt;code>name&lt;/code> 변수에 대한 정보를 알 수 없는 &lt;code>outer&lt;/code> 변수 외부환경에서도 정상 출력된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`Warning`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">outer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sb">`closure`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">inner&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">callFunc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">outer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">callFunc&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// console&amp;gt; closure
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위 코드에서 &lt;code>callFunc&lt;/code> 를 클로저라고 한다. &lt;code>callFunc&lt;/code> 호출에 의해 &lt;code>name&lt;/code> 이라는 값이 console에 출력되는데, &amp;ldquo;&lt;strong>Warning&lt;/strong>&amp;ldquo;이 아니라 &amp;ldquo;&lt;strong>closure&lt;/strong>&amp;ldquo;이다. 즉, &lt;code>outer&lt;/code> 함수의 context 에 속해있는 변수를 참조하는 것이다. 여기서 &lt;code>outer&lt;/code> 함수의 지역변수로 존재하는 &lt;code>name&lt;/code> 변수를 &lt;strong>free variable(자유변수)&lt;/strong> 라고 한다.&lt;/p>
&lt;p>이처럼 &lt;strong>외부 함수 호출이 종료 되더라도 외부 함수의 지역 변수 및 변수 스코프 객체의 체인 관계를 유지할 수 있는 구조&lt;/strong>를 클로저라고 한다.&lt;/p></description></item><item><title>Javascript - this</title><link>https://codemario318.github.io/post/js_this/</link><pubDate>Mon, 17 Apr 2023 18:11:36 +0900</pubDate><guid>https://codemario318.github.io/post/js_this/</guid><description>&lt;img src="https://codemario318.github.io/post/js_this/js_cover.png" alt="Featured image of post Javascript - this" />&lt;p>Javascript에서 &lt;strong>함수의 &lt;code>this&lt;/code> 키워드&lt;/strong>는 다른 언어와 조금 다르게 동작한다. 또한 &lt;a class="link" href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener"
>엄격 모드&lt;/a>와 비엄격 모드에서도 일부 차이가 있다.&lt;/p>
&lt;p>대부분의 경우 &lt;code>this&lt;/code>의 값은 함수를 호출한 방법에 의해 결정되는데, 실행중에는 할당으로 설정할 수 없고 함수를 호출할 때 마다 다를 수 있다.&lt;/p>
&lt;p>ES5는 함수를 어떻게 호출했는지 상관하지 않고 this 값을 설정할 수 있는 &lt;a class="link" href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener"
>bind&lt;/a> 메서드를 도입했고, ES2015는 스스로의 &lt;code>this&lt;/code> 바인딩을 제공하지 않는 &lt;a class="link" href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/%EC%95%A0%EB%A1%9C%EC%9A%B0_%ED%8E%91%EC%85%98" target="_blank" rel="noopener"
>화살표 함수&lt;/a>를 추가했다.(렉시컬 컨텍스트안의 &lt;code>this&lt;/code>값을 유지함)&lt;/p>
&lt;h2 id="전역-문맥">전역 문맥&lt;/h2>
&lt;p>전역 실행 문맥(global execution context)에서 &lt;code>this&lt;/code>는 엄격 모드 여부에 관계 없이 전역 객체를 참조한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 웹 브라우저에서는 window 객체가 전역 객체
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">37&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 37
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;MDN&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;#34;MDN&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;#34;MDN&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="함수-문맥">함수 문맥&lt;/h2>
&lt;p>함수 내부에서 &lt;code>this&lt;/code>의 값은 함수를 호출한 방법에 의해 결정된다.&lt;/p>
&lt;h3 id="단순-호출">단순 호출&lt;/h3>
&lt;p>엄격 모드가 아닐경우 &lt;code>this&lt;/code>의 값이 호출에 의해 설정되지 않으므로, 기본값으로 브라우저에서는 &lt;code>window&lt;/code>인 전역 객체를 참조하게 된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">f1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 브라우저
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">f1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Node.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">f1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">global&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>반면에 엄격 모드에서 &lt;code>this&lt;/code> 값은 실행 문맥에 진입하며 설정되는 값을 유지하므로 다음 예시에서 보여지는 것 처럼 &lt;code>this&lt;/code>는 &lt;code>undefined&lt;/code>로 남아있게 된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">f2&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;use strict&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 엄격 모드 참고
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">f2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>f2&lt;/code>를 객체의 메서드나 속성(예: &lt;code>window.f2()&lt;/code>)이 아닌 직접 호출했기 때문에 &lt;code>this&lt;/code>는 &lt;code>undefined&lt;/code>여야 하지만 브라우저에서 엄격 모드를 지원하지 않는다면 &lt;code>window&lt;/code> 객체를 반환한다.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">prop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">test&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">func&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">func2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">func2&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">func&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">&amp;gt; Object { prop: 42, func: function() {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> var func2 = function() {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> console.log(this);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> console.log(this);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> func2();
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> } }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">&amp;gt; [object Window] // browser
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">&amp;gt; [object global] // node.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>function&lt;/code> 키워드로 선언된 함수가 전역 실행 문맥(global execution context)에서 호출되었기 때문에 &lt;code>this&lt;/code>는 엄격 모드 여부에 관계 없이 전역 객체를 참조한다.&lt;/p>
&lt;h3 id="bind-메서드">&lt;code>bind&lt;/code> 메서드&lt;/h3>
&lt;p>ECMAScript5는 &lt;code>Function.prototype.bind&lt;/code>를 도입했다. &lt;code>f.bind(someObject)&lt;/code>를 호출하면 &lt;code>f&lt;/code>와 같은 본문(코드)과 범위를 가졌지만 &lt;code>this&lt;/code>는 원본 함수를 가진 새로운 함수를 생성한다. 새 함수의 &lt;code>this&lt;/code>는 호출 방식과 상관없이 영구적으로&lt;code>bind()&lt;/code>의 첫 번째 매개변수로 고정된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;azerty&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">g&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// azerty
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">g&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;yoo&amp;#39;&lt;/span>&lt;span class="p">});&lt;/span> &lt;span class="c1">// bind는 한 번만 동작함!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">h&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// azerty
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">37&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">f&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">g&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">g&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">h&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">h&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">g&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">h&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 37, 37, azerty, azerty
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="화살표-함수">화살표 함수&lt;/h3>
&lt;p>화살표 함수에서 &lt;code>this&lt;/code>는 자신을 감싼 정적 범위(lexical context)이다. 전역 코드에서는 전역 객체를 가르킨다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">globalObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">globalObject&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 객체로서 메서드 호출
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">func&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">globalObject&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// call을 사용한 this 설정 시도
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">call&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">globalObject&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bind를 사용한 this 설정 시도
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">globalObject&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>화살표 함수를 &lt;code>call()&lt;/code>, &lt;code>bind()&lt;/code>, &lt;code>apply()&lt;/code>를 사용해 호출할 때 &lt;code>this&lt;/code>의 값을 정해주더라도 무시한다. 사용할 매개변수를 정해주는 건 문제 없지만, 첫 번째 매개변수(&lt;code>thisArg&lt;/code>)는 &lt;code>null&lt;/code>을 지정해야 한다.&lt;/p>
&lt;p>어떤 방법을 사용하든 &lt;code>foo&lt;/code>의 &lt;code>this&lt;/code>는 생성 시점의 것으로 설정된다.(위 예시에서는 &lt;code>global&lt;/code> 객체). 다른 함수 내에서 생성된 화살표 함수에도 동일하게 적용된다. &lt;code>this&lt;/code>는 싸여진 렉시컬 컨텍스트로 유지된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bar&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">fn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">fn2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fn2&lt;/span>&lt;span class="p">()()&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>화살표 함수의 범위는 선언될때 결정되는데, &lt;code>fn&lt;/code>은 &lt;code>obj.bar()&lt;/code>로 호출된 &lt;code>x&lt;/code>를 활용하게 되어 &lt;code>this&lt;/code>가 &lt;code>obj&lt;/code> 를 의미하게 되고, &lt;code>fn2&lt;/code>는 전역 실행 문맥에서 &lt;code>obj.bar&lt;/code> 자체를 &lt;code>fn2&lt;/code>에 할당 하였기 때문에 &lt;code>window&lt;/code>로 설정되었다.&lt;/p>
&lt;h3 id="객체의-메서드를-호출할-때">객체의 메서드를 호출할 때&lt;/h3>
&lt;p>함수를 어떤 객체의 메서드로 호출하면 &lt;code>this&lt;/code>의 값은 그 객체를 사용한다.&lt;/p>
&lt;p>다음 예제에서 &lt;code>o.f()&lt;/code>를 실행할 때 &lt;code>o&lt;/code> 객체가 함수 내부의 &lt;code>this&lt;/code>와 연결된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">prop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">37&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">independent&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">independent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// logs 37
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">g&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">independent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">g&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// logs 42
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>this&lt;/code> 바인딩은 멤버 대상에 영향을 받는다. 함수를 실행할 때, 객체 &lt;code>o.b&lt;/code>의 메소드 &lt;code>g&lt;/code> 로서 호출하면 함수 내부의 &lt;code>this&lt;/code>는 &lt;code>o.b&lt;/code>를 나타낸다.&lt;/p>
&lt;h2 id="객체의-프로토타입-체인에서의-this">객체의 프로토타입 체인에서의 &lt;code>this&lt;/code>&lt;/h2>
&lt;p>메서드가 어떤 객체의 프로토타입 체인 위에 존재한다면, &lt;code>this&lt;/code>의 값은 그 객체가 메서드를 가진 것 처럼 설정된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">f&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">f&lt;/span>&lt;span class="p">());&lt;/span> &lt;span class="c1">// 5
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이 예제에서, &lt;code>f&lt;/code> 속성을 가지고 있지 않은 변수 &lt;code>p&lt;/code>가 할당된 객체는, 프로토타입으로 부터 상속받는다. 그러나 그것은 결국 &lt;code>o&lt;/code>에서 &lt;code>f&lt;/code> 이름을 가진 멤버를 찾는 되는 문제가 되지 않는다 ; &lt;code>p.f&lt;/code>를 찾아 참조하기 시작하므로, 함수 내부의 &lt;code>this&lt;/code>는 &lt;code>p&lt;/code> 처럼 나타나는 객체 값을 취한다. 즉, &lt;code>f&lt;/code>는 &lt;code>p&lt;/code>의 메소드로서 호출된 이후로, &lt;code>this&lt;/code>는 &lt;code>p&lt;/code>를 나타낸다. 이것은 JavaScript의 프로토타입 상속의 흥미로운 기능이다.&lt;/p>
&lt;h2 id="접근자와-설정자의-this">접근자와 설정자의 &lt;code>this&lt;/code>&lt;/h2>
&lt;p>함수를 접근자와 설정자에서 호출하더라도 동일하다. 접근자나 설정자로 사용하는 함수의 &lt;code>this&lt;/code>는 접근하거나 설정하는 속겅을 가진 객체로 묶인다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">a&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span> &lt;span class="nx">average&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defineProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;sum&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">enumerable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">configurable&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">average&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 2, 6
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="생성자로서">생성자로서&lt;/h3>
&lt;p>함수를 &lt;code>new&lt;/code> 키워드와 함께 생성자로 사용하면 &lt;code>this&lt;/code>는 새로 생긱 객체에 묶인다.&lt;/p></description></item><item><title>Javascript - Hoisting</title><link>https://codemario318.github.io/post/js_hoisting/</link><pubDate>Mon, 17 Apr 2023 18:04:35 +0900</pubDate><guid>https://codemario318.github.io/post/js_hoisting/</guid><description>&lt;img src="https://codemario318.github.io/post/js_hoisting/js_cover.png" alt="Featured image of post Javascript - Hoisting" />&lt;p>&lt;code>hoist&lt;/code>라는 단어의 사전적 정의는 &amp;ldquo;끌어올리기&amp;rdquo; 라는 뜻이다. 자바스크립트가 실행될때 선언된 모든 &lt;strong>변수 선언&lt;/strong>부가 코드의 가장 위로 끌어올려진 것 처럼 처리된다.&lt;/p>
&lt;p>호이스트를 통해 변수의 정의가 그 범위에 따라 선언과 할당으로 분리된다. 즉, 변수가 함수 내에서 정의되었을 경우, &lt;strong>선언이 함수 최상위&lt;/strong>로, 함수 바깥에서 정의되었을 경우, 전역 컨텍스트의 최상위로 변경이 된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getX&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 100
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">getX&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위와 같이 정의 되었을때, 아래와 같이 해석된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getX&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">getX&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>선언문은 항상 자바스크립트 엔진 구동시 가장 최우선으로 해석하므로 호이스팅 되고, 할당 구문은 런타임 과정에서 이루어지기 때문에 호이스팅 되지 않는다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="함수의-호이스팅">함수의 호이스팅&lt;/h2>
&lt;p>함수가 &lt;strong>자신이 위치한 코드에 상관없이 함수 선언문 형태로 정의한 함수의 유효범위는 전체 코드의 맨 처음부터 시작&lt;/strong>한다. 함수 선언이 함수 실행 부분보다 뒤에 있더라도 자바스크립트 엔진이 함수 선언을 끌어올리는 것을 의미한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// console&amp;gt; hello
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>foo&lt;/code> 함수에 대한 선언을 호이스팅하여 &lt;code>global&lt;/code> 객체에 등록시키기 때문에 &lt;code>hello&lt;/code>가 제대로 출력된다.&lt;/p>
&lt;h2 id="오류-사례">오류 사례&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// console&amp;gt; Uncaught TypeError: foo is not a function
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>예제의 함수 표현은 함수 리터럴을 할당하는 구조이기 때문에 호이스팅 되지 않으며 그렇기 때문에 아래와 같이 해석되어 런타임 환경에서 &lt;code>Type Error&lt;/code>를 발생시킨다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">foo&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">foo&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// foo = undefined
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// console&amp;gt; Uncaught TypeError: foo is not a function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">‘&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>