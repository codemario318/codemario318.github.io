<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer on Mario Blog</title><link>https://codemario318.github.io/tags/developer/</link><description>Recent content in Developer on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Mon, 12 Aug 2024 10:44:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>챌린지 과정 4주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/</link><pubDate>Mon, 12 Aug 2024 10:44:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/cover.png" alt="Featured image of post 챌린지 과정 4주차 회고" />&lt;p>부스트캠프 챌린지 과정이 4주차로 마무리되었습니다🥳&lt;/p>
&lt;p>주말을 이용하여 미뤄왔던 대청소와 약속들 덕분에 월요일이 되어서야 회고를 쓰게 되네요&lt;/p>
&lt;p>이번주는 미션들을 수행하지는 않겠지만, 그동안 바빠서 마무리하지 못했던 학습 정리로 바쁠 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img.png"
width="900"
height="752"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_huc5e3bd9d0538c93e5f494cd205f8c424_816479_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_huc5e3bd9d0538c93e5f494cd205f8c424_816479_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="아직 한발 남았다."
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>이번 주는 저번주와 마찬가지로 &lt;strong>짝 활동&lt;/strong>을 기본으로 한 주가 구성되었습니다.&lt;/p>
&lt;p>&lt;strong>각자 개발&lt;/strong>후 &lt;strong>짝 개선&lt;/strong>하기, &lt;strong>짝 개발&lt;/strong>후 &lt;strong>각자 개선&lt;/strong>하기로 &lt;strong>데이터베이스&lt;/strong>와 &lt;strong>네트워크&lt;/strong>를 깊게 이해해야만 해결할 수 있는 미션들이 주어졌습니다.&lt;/p>
&lt;p>그리고 마지막 테스트를 위한 &lt;strong>히든 미션&lt;/strong>을 금요일에 수행하였습니다.&lt;/p>
&lt;p>개인적으로 데이터베이스 관련 미션은 많이 어려웠네요 🙃&lt;/p>
&lt;p>이번 회고에는 미션들에 대한 접근 방법에 더해 짝 활동이 어떻게, 무엇을 중심으로 진행되었는지 설명해보겠습니다.&lt;/p>
&lt;h2 id="day16--17-데이터베이스">Day16 ~ 17: 데이터베이스&lt;/h2>
&lt;p>데이터베이스 관련 미션은 &lt;strong>각자 구현&lt;/strong> 후 &lt;strong>짝 개선&lt;/strong>을 수행해야하는 미션이었습니다.&lt;/p>
&lt;p>파일 기반 데이터베이스를 직접 구현해야하는 미션이었는데, 위에서 말씀드렸던 것처럼 개인적으로 많이 어려웠습니다.&lt;/p>
&lt;h3 id="mysql">MySQL&lt;/h3>
&lt;p>이전 직장에서 풀스택 개발자로 업무를 수행해오며 오랜기간 유지되어온 PHP 백엔드 레거시를 운영하는 것이 주 업무였는데요&lt;/p>
&lt;p>그렇다보니 예전 방식으로 그대로 개발을 수행할 수 밖에 없었고, &lt;a class="link" href="https://www.php.net/manual/en/book.pdo.php" target="_blank" rel="noopener"
>PDO&lt;/a>(PHP Data Object)를 사용하고 있었기 때문에 직접 쿼리를 작성해야하는 것은 필수적이었습니다.&lt;/p>
&lt;p>예전 개발 환경과 싱글 스레드 기반으로 순차적인 처리에 중점을 두는 PHP의 특성으로 인해 지금처럼 ORM을 이용하여 작은 쿼리를 여러개 보내는 것 보다는, 굉장히 많은 테이블들을 조인하는 큰 쿼리 하나를 작성해야하는 일도 매우 빈번했습니다.&lt;/p>
&lt;p>그렇다보니 쿼리 튜닝은 저에게 필수적인 역량이었고, 학습에 꽤 많은 공을 들였었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5.png"
width="371"
height="136"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5_hu6fb17a4b1ba75a00ca79acad9d84d206_8737_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5_hu6fb17a4b1ba75a00ca79acad9d84d206_8737_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="MySQL"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="654px"
>&lt;/p>
&lt;p>이러한 이유로 MySQL 내부 동작을 꽤 잘 알고 있다고 생각하여 이번 미션은 MySQL을 모방하는 방식으로 접근했었습니다.&lt;/p>
&lt;h3 id="스토리지-엔진">스토리지 엔진&lt;/h3>
&lt;p>기존 요구사항만을 만족하기 위해서는 단순하게 전체 읽기, 전체 쓰기 방식으로 접근해도 괜찮았지만, 이러한 경우 데이터가 많아지면 급격한 성능 저하가 발생하게됩니다.&lt;/p>
&lt;p>이러한 문제를 해결해보고 싶어 많은 고민을 했는데 이 부분이 정말 어려웠습니다🥲&lt;/p>
&lt;hr>
&lt;p>&lt;strong>InnoDB&lt;/strong>&lt;/p>
&lt;p>데이터베이스의 성능을 나쁘게 만드는 원인은 &lt;strong>디스크 I/O&lt;/strong>에서 발생하는 &lt;strong>병목 현상&lt;/strong>입니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1.png"
width="904"
height="456"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1_hu5128e5d7946208d35600b2a8a7d0222a_52925_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1_hu5128e5d7946208d35600b2a8a7d0222a_52925_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="MySQL 구조"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>MySQL은 크게 &lt;strong>MySQL 엔진&lt;/strong>, &lt;strong>스토리지 엔진&lt;/strong>으로 영역을 구분할 수 있는데, 디스크 I/O에 접근하는 역할은 &lt;strong>스토리지 엔진&lt;/strong>이 전담하여 수행하게 됩니다.&lt;/p>
&lt;p>여러 스토리지 엔진이 있지만 주로 사용되는 &lt;code>InnoDB&lt;/code> 스토리지 엔진은 &lt;strong>버퍼풀&lt;/strong>이라는 메모리 영역을 통해 사용하는 주요 데이터를 대부분 캐싱하여 디스크에 접근하는 것을 최소화합니다.&lt;/p>
&lt;p>또한 쓰기 작업을 버퍼링하여 하드웨어 자원의 여유가 있을 때 백그라운드에서 실행하는 방식들을 통해 데이터베이스의 성능을 크게 끌어올리고 있습니다.&lt;/p>
&lt;p>이를 반영하기 위해서 데이터를 저장하고 관리하는 기본 단위인 &lt;strong>페이지&lt;/strong>를 구현하야할 필요가 있었습니다만&amp;hellip;.&lt;/p>
&lt;p>페이지를 직접 구현하고 이를 이용해서 데이터 저장이나 캐싱등을 구현해야한다고 생각하니 현기증이 나는 것 같다라구요😅&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2.png"
width="632"
height="523"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2_huaf81590ee5a0b6795972f97e2fb827b9_593519_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2_huaf81590ee5a0b6795972f97e2fb827b9_593519_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>그래서 MySQL 인덱스의 기본 단위인 PK만을 이용해서 저장된 파일에서의 레코드 위치만을 가지게 구현하는 방식으로 접근했습니다.&lt;/p>
&lt;p>&lt;strong>B+ Tree&lt;/strong> 같은 자료 구조를 통해서 &lt;code>Index Range Scan&lt;/code> 같은 방식도 적용해보려고 했었는데, 마찬가지로 어려워서 &lt;code>PK&lt;/code> 단일 조건 처리에 관한 부분만 적용할 수 있었습니다.&lt;/p>
&lt;h3 id="짝-개선">짝 개선&lt;/h3>
&lt;p>짝 개선은 이전과 마찬가지로 새로운 기능을 추가하는 것 보다는 기존 코드를 개선하는 방향으로 지침이 주어졌습니다.&lt;/p>
&lt;p>저 같은 경우는 &lt;strong>HTTP 요청/응답 분리&lt;/strong>를, 짝은 &lt;strong>DBMS 아키텍처 반영&lt;/strong>을 통한 &lt;strong>코드 구조&lt;/strong>를 개선하는 것을 목표로 함께 개선을 진행하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>예외 처리&lt;/strong>&lt;/p>
&lt;p>저의 개선 목표였던 &lt;strong>HTTP 요청/응답 분리&lt;/strong> 부분 작업을 수행하면서 자연스럽게 &lt;strong>응답 코드&lt;/strong>에 관한 내용들이 개선되어야 했고, 응답을 만들기위해 &lt;strong>예외 처리&lt;/strong>를 추가하는 부분에서 짝과 의견을 나눌 수 있는 기회가 생겼습니다.&lt;/p>
&lt;p>저 같은 경우는 서비스 로직에서 에러 또는 예외를 발생시켜 해당 에러를 최상위 지점에서 한번에 핸들링하는 것을 선호하는데(&lt;a class="link" href="https://codemario318.github.io/post/clean-code/7/" >클린코드 - 에러 처리&lt;/a>) 어떠한 장점이 있는지에 대해서 물어봐 주셨습니다.&lt;/p>
&lt;p>코드를 보면서 확인해보면 아래와 같습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>개선 전&lt;/strong>&lt;/p>
&lt;p>이전 처리를 복기해보면 아래와 같은 방식으로 처리가 구현되어 있었습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">어떤_서비스_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">값_검증&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;입력 값을 확인해주세요.&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">서비스로직을_사용하는_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">어떤_기능&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">어떤_서비스_객체&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;OK&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이러한 방식에는 몇 가지 문제가 있습니다.&lt;/p>
&lt;ul>
&lt;li>예외를 발생 시킬 때 사용자가 직접 사유를 기억해서 매직넘버(상수가 아닌 직접 입력해야하는 값, 하드코딩)를 사용해야합니다.&lt;/li>
&lt;li>응답도 같은 문제를 가지고 있습니다.&lt;/li>
&lt;/ul>
&lt;p>이러한 방식은 개발자가 실수를 쉽게 할 수 있는 여지가 많아지게됩니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>개선 후&lt;/strong>&lt;/p>
&lt;p>이러한 부분을 아래와 같이 개선하게 되었습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">BadRequestException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">UnauthorizedException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">ForbiddenException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">NotFoundException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">NotAcceptableException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">freeze&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">OK&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">BAD_REQUEST&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">UNAUTHORIZED&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">401&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FORBIDDEN&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">403&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">NOT_FOUND&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">NOT_ACCEPTABLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">406&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">INTERNAL_SERVER_ERROR&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>각 예외 상황에 맞는 예외 클래스를 구현하였습니다.
&lt;ul>
&lt;li>Nest.js 표준 에러 참조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Http 응답 코드에 대해 Enum을 선언하였습니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">어떤_서비스_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">값_검증&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BadRequestException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;입력 값을 확인해주세요.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">서비스로직을_사용하는_최상위_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">어떤_기능&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">어떤_서비스_객체&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">BadRequestException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BAD_REQUEST&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">NotFoundException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NOT_FOUND&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">INTERNAL_SERVER_ERROR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>발생한 예외 클래스를 확인하여 Enum으로 선언된 응답 코드를 상황에 맞게 반환할 수 있도록 변경&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>이러한 형식으로 개선되어 아래와 같은 장점을 취할 수 있었습니다.&lt;/p>
&lt;ul>
&lt;li>예외 클래스를 직접 확인하므로 어떤 에러가 발생했는지 쉽게 파악할 수 있다.&lt;/li>
&lt;li>에외 코드가 어떤 의미인지 확실히 구분할 수 있다. 등&lt;/li>
&lt;/ul>
&lt;p>발생하는 예외가 HTTP 응답에 대해 직접적인 연관성이 있어 또 하나의 세부사항인 HTTP와 관계가 생겨버린다는 것이 아쉬운 점이지만 충분히 개선되었다고 생각합니다.&lt;/p>
&lt;p>제가 생각하는 장점을 코드를 함께 개선해가는 과정을 통해서 설명해 드렸고, 많은 도움이 되었다는 이야기를 들을 수 있었습니다😁&lt;/p>
&lt;h2 id="day18--19-네트워크">Day18 ~ 19: 네트워크&lt;/h2>
&lt;p>네트워크 관련 미션은 &lt;strong>페어 프로그래밍&lt;/strong>을 통해 함께 결과물을 만들고, 이후 &lt;strong>각자 개선&lt;/strong>을 수행하는 미션이었습니다.&lt;/p>
&lt;p>&lt;strong>웹 소켓&lt;/strong> 서버를 직접 구현하는 것이 전제되어있는 미션이었는데, &lt;strong>레이어드 아키텍처&lt;/strong>를 쉽게 적용할 수 있는 요구사항이어서 짝에게 설계를 적극적으로 제안하여 적용하게 되었습니다.&lt;/p>
&lt;p>이전과 달랐던 점은 짝이 이전부터 &lt;strong>TDD&lt;/strong>를 적용해오셨던 분이셔서, 자연스럽게 &lt;strong>TDD&lt;/strong>로 진행되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3.png"
width="816"
height="454"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3_hu05ec6f48f861dd6127467224c3c8452c_617786_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3_hu05ec6f48f861dd6127467224c3c8452c_617786_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>기능 요구사항을 돌아가며 &lt;strong>드라이버&lt;/strong>, &lt;strong>네비게이터&lt;/strong> 역할을 수행하는 방식으로 진행되었는데, 원할하게 &lt;strong>TDD&lt;/strong>가 진행되어서 참 즐거운 경험이었습니다😁&lt;/p>
&lt;p>그리고 짝 캠퍼분이 이전부터 FE 개발을 해오셨던 경험이 있으셔서 JS에 매우 능숙하셨기 때문에 아주 원할하게 진행될 수 있었던 것 같네요&lt;/p>
&lt;p>&lt;strong>레이어드 아키텍처&lt;/strong> 기반의 설계와, &lt;strong>TDD&lt;/strong>가 합쳐지니 지금까지 결과물 중 가장 만족스러운 결과물을 만들 수 있었습니다. 👍&lt;/p>
&lt;p>&lt;del>그래도 새벽 3시가 넘어서야 마무리 할 수 있었어요🤣&lt;/del>&lt;/p>
&lt;h3 id="레이어드-아키텍처">레이어드 아키텍처&lt;/h3>
&lt;p>&lt;code>Socket&lt;/code>을 이용하여 &lt;strong>CLI 기반 클라이언트&lt;/strong>와 &lt;strong>서버&lt;/strong>를 구현해야했습니다.&lt;/p>
&lt;p>서버와 클라이언트의 연결을 만들고, 클라이언트의 요청마다 HTTP 응답을 처리하는 구조가 필요했기 때문에 짝에게 &lt;strong>레이어드 아키텍처&lt;/strong>를 적극적으로 제안하여 반영하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4.png"
width="1127"
height="843"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="레이어드 아키텍처"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;strong>HTTP 요청 수신 및 응답&lt;/strong>, &lt;strong>비즈니스 로직 처리&lt;/strong>, &lt;strong>데이터 조작&lt;/strong>을 각 레이어로 구현하여 분리하여, 좋은 코드 구조를 만들 수 있었습니다.&lt;/p>
&lt;p>짝과 함께 개발하는 과정에서 뿐만이 아니라, 다음 피어세션에서도 해당 설계를 보고 많은 영감을 얻으셨다는 반응이 많아서 뿌듯했네요 😎&lt;/p>
&lt;h3 id="의존성-주입">의존성 주입&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6.png"
width="271"
height="186"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6_hua164b4f218d2ddb10286229f1ed50614_9292_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6_hua164b4f218d2ddb10286229f1ed50614_9292_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="의존성 주입"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>레이어드 아키텍처를 구성하며 각 의존성이 있는 레이어를 &lt;strong>의존성 주입&lt;/strong>을 통해 &lt;strong>구성&lt;/strong>하였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Model&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getItem&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">collection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">condition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">businessLogic&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getItem&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handler&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">businessLogic&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Service&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이러한 구조를 통해 결합을 낮추고 유연성을 높힐 수 있었으며, 구현 과정에서 훨씬 테스트가 용이하다는 장점을 취할 수 있었습니다.&lt;/p>
&lt;h3 id="단단한-테스트-코드">단단한 테스트 코드&lt;/h3>
&lt;p>&lt;strong>각자 개선하기&lt;/strong>에서 저는 테스트 코드 부분을 개선하였습니다.&lt;/p>
&lt;p>단단한 테스트 코드 즉 깨지지 않는 테스트 코드를 작성하기 위해서 개인적으로 테스트 원칙인 단일 책임 원칙, 독립적 테스트 부분을 개선했습니다.&lt;/p>
&lt;ul>
&lt;li>단일 책임 원칙
&lt;ul>
&lt;li>테스트 코드는 하나의 동작이나 기능만을 테스트 해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>독립적 테스트
&lt;ul>
&lt;li>테스트 간에 의존성이 있으면 한 테스트의 실패가 다른 테스트에도 영양을 줌&lt;/li>
&lt;li>테스트 간 상태 공유를 피하고, 각 테스트 케이스가 독립적으로 실행될 수 있도록 보장해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>단일 책임 원칙&lt;/strong>&lt;/p>
&lt;p>하나의 테스트 코드는 한 가지의 동작과 기능을 테스트해야 이후 변경이 적고 오래사용할 수 있는 테스트 코드를 만들 수 있습니다.&lt;/p>
&lt;p>기존 작성되어있던 테스트를 유사하게 다시 만들어봤습니다.&lt;/p>
&lt;p>어떠한 모델에서 id를 이용해 특정 무언가를 찾는 처리입니다. (어떤 내용인지 추론할 수 있으면 안되기 때문에 추상적으로 쓸 수 밖에 없는 점 양해 부탁드립니다.)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 전&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeIds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">from&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">idx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">padStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ID를 활용하여 무언가를 찾아 배정하고 반환하는 처리 테스트&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">each&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">])(&lt;/span>&lt;span class="s2">&amp;#34;무언가를 찾아 배정하고, 배정된 무언가를 반환&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">prevIds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nextId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expected&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prevIds&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nextCampId&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">expected&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>많은 상황에 대해 정상적인 처리를 테스트하고 있습니다.&lt;/p>
&lt;p>많은 테스트케이스를 확인하고 있었기 때문에 예외가 발생해야하는 상황은 별도로 확인하고 있지 않았습니다.&lt;/p>
&lt;p>개인적인 의견으로는 알아보기 힘들다고 판단했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 후&lt;/strong>&lt;/p>
&lt;p>여러 상황을 나누어 테스트하도록 했으며, 테스트 케이스의 숫자도 줄였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ID를 활용하여 무언가를 찾아 배정하고 반환하는 처리 테스트&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;정상 처리 확인&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assignedId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;특정 조건이 넘으면 다른 값 반환 확인&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">clients&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MAX_ASSIGN_CLIENT&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`J&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">padStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assigned&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;먼저 만들어진 무언가에 빈 자리가 있다면 해당 무언가를 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">[]});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">[]});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assignedId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>독립적 테스트&lt;/strong>&lt;/p>
&lt;p>일부 테스트가 스스로의 다른 기능을 호출하는 부분들이 있었습니다. 이는 기능의 변경에 취약한 테스트가 될 수 있다고 판단하여 수정하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 전&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;횟수 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">increaseCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>service.count&lt;/code> 메소드를 통해 현재 &lt;code>count&lt;/code>을 확인하기 위해 &lt;code>service.increaseCount&lt;/code>메소드를 통해 &lt;code>count&lt;/code>를 증가시키고 있습니다.&lt;/p>
&lt;p>이는 자기 자신의 메소드를 재 호출하는 구조로 인해 &lt;code>service.increaseCount&lt;/code>에 미쳐 검증하지 못한 케이스가 있거나, 요구사항 변경으로 인해 검증해야 할 내용이 바뀐다면, &lt;code>service.count&lt;/code>의 테스트 코드도 변경이 불가피한 상황입니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 후&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;횟수 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">clap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>service&lt;/code>의 데이터 보관을 위해 주입받은 &lt;code>Map&lt;/code>에 직접 데이터를 저장, 조작하여 자기 자신의 메소드를 활용하는 테스트 처리의 의존성을 제거하였습니다.&lt;/p>
&lt;h2 id="day20-3차-문제해결력-테스트">Day20: 3차 문제해결력 테스트&lt;/h2>
&lt;p>기존 모집 정보에 3차 문제해결력 테스트가 8월 10일 토요일로 예정되어 있었는데, 마지막 날인 20일차 릴레이 프로젝트를 수행해야하는 시간에 테스트가 진행되었습니다.&lt;/p>
&lt;p>대략적으로 말씀드리면, 부캠에서 제공했던 모든 과정들이 단시간에 종합되어있는 테스트였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7.png"
width="491"
height="340"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7_hu5fb8e3cf3fed11573f93053e9937564e_404795_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7_hu5fb8e3cf3fed11573f93053e9937564e_404795_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="부캠 종합 선물세트"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;p>부캠에 성실히 참여했다면 방식 자체는 생소하지는 않았겠지만, 역시나 시간은 많이 부족했네요🥲&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>마지막 주차에는 같이 학습을 진행한 캠퍼분들에게 영감을 줄 수 있었던것 같아 1주차 이후로 가장 뿌듯했던 한 주 였던 것 같습니다.&lt;/p>
&lt;p>마지막 주차여서 챌린지 과정 전체에대한 회고를 포함해야하나 고민했는데, 따로 작성하기로 결정하여 4주차 회고만 남기게 되었네요&lt;/p>
&lt;p>다음 글은 챌린지 과정 전체에 대한 회고를 올릴 예정이니 기대해주세요😁&lt;/p>
&lt;p>이번에는 3주차 그룹 회고에 남겼던 글로 마무리하겠습니다.&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다☺️ 모두 정말 고생 많으셨어요🔥🔥🔥&lt;/p>
&lt;blockquote>
&lt;p>소프트웨어 장인 책 부분에 성장을 위한 자세에 관해 읽었는데요, 이 부분에서 &amp;ldquo;훈련&amp;quot;을 어떻게 해야 좋은지에 대한 언급이 있습니다.&lt;/p>
&lt;p>훈련을 할 때는 시간이 아무리 많이 걸린다고 하더라도 본인이 할 수 있는 최선의 결과를 만들지 않는다면 성장에는 큰 의미가 없기 때문에 최선을 다하는 것이 중요하다고해요!&lt;/p>
&lt;p>우리 모두 지금까지 열심히 해오고있지만, 앞으로도 최선을 다해서 함께 성장했으면 좋겠어요&lt;/p>
&lt;p>한 주간 정말 고생 많으셨습니다! 맴버쉽에서 꼭 뵈어요 :D&lt;/p>
&lt;/blockquote></description></item><item><title>챌린지 과정 3주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/</link><pubDate>Sat, 03 Aug 2024 11:22:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/cover.png" alt="Featured image of post 챌린지 과정 3주차 회고" />&lt;p>챌린지 3주차가 마무리되었습니다🥳&lt;/p>
&lt;p>이번주 역시 저번주와 마찬가지로, 저번주보다 훨씬 더 빠르게 지나간 것 같네요.&lt;/p>
&lt;p>미션도 어려웠지만 이번주는 날씨가 역대급으로 더웠는데, 에어컨 고장 이슈가 발생하는 바람에 육체적, 정신적으로 정말 힘들었던 한 주 였습니다🥵&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img.png"
width="772"
height="512"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_hu49700197eb00dd7c6958db7079e6d44f_504814_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_hu49700197eb00dd7c6958db7079e6d44f_504814_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;h2 id="짝-활동">짝 활동&lt;/h2>
&lt;p>이번주는 저번주에 예고되었던대로 &lt;strong>짝 활동&lt;/strong>으로 한 주가 진행되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1.png"
width="506"
height="245"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1_hue18cc63406e6b0e55de22018cf95147c_73580_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1_hue18cc63406e6b0e55de22018cf95147c_73580_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;p>각자 개발하고 짝과 함께 서로의 결과물을 개선해보는 &lt;strong>짝 개선&lt;/strong>이 11~12일 이틀에 걸쳐 진행되었고, 같이 개발하고 각자 개선해보는 &lt;strong>짝 개발&lt;/strong>이 13~14일 이틀에 걸쳐 진행되었습니다.&lt;/p>
&lt;p>미션을 함께하며 문제 해결을 위해 많은 소통을 하였습니다.&lt;/p>
&lt;p>의사 결정 과정에서 공통으로 중요하다고 생각하는 부분, 공통으로 중요하지 않다고 생각하는 부분 등을 토론하며 훨씬 더 빠르게 최선의 선택을 할 수 있었던 것 같아 좋았습니다.&lt;/p>
&lt;hr>
&lt;p>이번주도 저번주에 이어서 &lt;strong>애자일스러운 개발&lt;/strong>과 &lt;strong>TDD&lt;/strong>를 시도했습니다. 이번에는 짝과 함께 했다는 것이 조금 다를 것 같네요&lt;/p>
&lt;p>&lt;strong>애자일스러운 개발&lt;/strong>은 개인 미션일 때는 어느정도 달성할 수 있었으나, 짝 개발에서는 짝이 지금까지 해오던 스타일과 많이 달라 완전히 적용하지는 못했고,&lt;/p>
&lt;p>&lt;strong>TDD&lt;/strong>역시 미션의 접근 방법에 맞춘 테스트를 작성하는 것에 어려움을 느껴 일부만 적용하여 조금 아쉬웠습니다.&lt;/p>
&lt;h2 id="미션">미션&lt;/h2>
&lt;p>이번주 미션도 역시 어려운 주제들을 다뤘습니다.&lt;/p>
&lt;p>저번주는 패러다임 등과 같은 내용들로 생각의 전환이 필요하여 어려웠다면, 이번주는 저번주의 개념에 복잡한 요구사항이 추가된 모습이었습니다.&lt;/p>
&lt;p>아마도 2일씩 이루어질 짝 활동을 반영하여 더 어려운 문제로 선정했던것이 아닐까 예상해봅니다.&lt;/p>
&lt;h3 id="11일차-이벤트-주도-개발과-스레드-풀">11일차: 이벤트 주도 개발과 스레드 풀&lt;/h3>
&lt;p>11일차 미션은 짝 개선을 하기 위한 개인 결과를 만드는 과정이었습니다.&lt;/p>
&lt;p>미션의 요구사항을 나름대로 해석해보면, &lt;strong>이벤트 주도 설계&lt;/strong>를 통해 이벤트 발생시 작업을 &lt;strong>비동기&lt;/strong>로 실행하고, 해당 작업을 &lt;strong>스레드&lt;/strong>를 이용해 동시에 처리할 수 있도록 해야하는 문제였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>이벤트 주도 설계&lt;/strong>&lt;/p>
&lt;p>저번주 미션을 통해 &lt;strong>이벤트 주도 설계&lt;/strong>에 어느정도 감을 잡았다고 생각했었는데, 요구사항이 훨씬 복잡해지니 정신을 못차리게 되더군요 &lt;del>안 좋은 컨디션 때문인지 더 그랬던 것 같아요&lt;/del> 🥲&lt;/p>
&lt;p>하지만 과제를 마무리할 때 쯤에는 이벤트와 더욱 친해졌다는 느낌을 받을 수 있었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>테스트 코드&lt;/strong>&lt;/p>
&lt;p>제 설계는 작업들이 이벤트를 연쇄적으로 발생시켜 실행되는 구조였는데, 연쇄적으로 실행되는 동안 작업의 상태들을 추적하는 테스트를 적용해야한다고 판단하였습니다.&lt;/p>
&lt;p>하지만 연쇄적으로 처리되는 일부 작업이 &lt;code>Private&lt;/code> 메소드로 실행되는터라 모든 처리 흐름에서의 상태 변화 추적할 수 있는 테스트 코드를 작성할 방법이 떠오르지 않더군요&amp;hellip;&lt;/p>
&lt;p>이에 따라, 이벤트로 처리되는 흐름에서의 &lt;strong>모든 상태 변화&lt;/strong>를 검증하지는 못했습니다.&lt;/p>
&lt;p>(개선 방법은 아래에 나옵니다! 끝까지 봐주세요😁)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>스레드&lt;/strong>&lt;/p>
&lt;p>이벤트 흐름으로 실행 될 마지막 작업을 JS의 &lt;strong>worker-thread&lt;/strong>(이하 WT)를 통해 처리할 수 있다고 판단되었지만, WT를 무한정 생성할수는 없다고 판단했기 때문에 &lt;strong>WT Pool&lt;/strong>을 구현할 필요성을 느꼈습니다.&lt;/p>
&lt;p>&lt;del>시간이 부족했던 이유도 있지만&lt;/del> 워커를 적절히 만들고 배분할 좋은 방법이 떠오르지 않아, 결과적으로 스레드를 이용한 처리는 &lt;strong>비동기 처리&lt;/strong>로 대체하여 구현했습니다.&lt;/p>
&lt;h3 id="12일차-짝-개선---같이-개선하기">12일차: 짝 개선 - 같이 개선하기&lt;/h3>
&lt;p>&lt;strong>짝 개선&lt;/strong>은 11일차에 만든 자신의 결과물 중 개선할 부분을 찾아 선정하고, 짝과 함께 선정한 부분을 개선하는 과정이었습니다.&lt;/p>
&lt;p>기존 결과에서 새로운 것을 추가하지 않고 개선하는 방향으로 진행하라는 지침이 있어, 저는 &lt;strong>테스트를 위한 코드 구조 일부 개선과 테스트 추가&lt;/strong>, 짝은 &lt;strong>관심사 분리를 위한 구조 개선&lt;/strong>을 개선 목표로 선정했습니다.&lt;/p>
&lt;p>저희 페어는 아래와 같은 방식으로 개선 과정을 진행하였습니다.&lt;/p>
&lt;ol>
&lt;li>짝에게 왜 이러한 부분을 개선하려고 하는 지 설명&lt;/li>
&lt;li>그 이유에 맞춰 각자의 관점에서 문제를 해석&lt;/li>
&lt;li>의견 교환을 통해 문제 재구조화&lt;/li>
&lt;li>세부 구현을 보며 의견 교환 및 수정&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>나의 개선: 테스트를 위한 구조 개선&lt;/strong>&lt;/p>
&lt;p>11일차 미션에서 어려웠던 점으로 언급했던 부분인 &lt;strong>이벤트가 연쇄적으로 발생하는 구조로 인한 상태 변화 추적 테스트&lt;/strong>의 개선을 위해 호출 구조를 약간 변경하였습니다.&lt;/p>
&lt;p>그리고 &lt;code>Jest&lt;/code>의 &lt;code>SpyOn&lt;/code>을 활용하여 이벤트 발생시 특정 함수가 호출되는지 확인하고, 호출되는 함수가 상태를 적절히 변경하는지 테스트 하는 방향으로 개선되었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>짝의 개선: 관심사 분리를 위한 구조 개선&lt;/strong>&lt;/p>
&lt;p>피어 세션에서 다른 분들에 작업 결과를 보며 특정 클래스가 &lt;strong>너무 많은 책임&lt;/strong>을 가지고있다고 판단하셨고, 이를 함께 개선하였습니다.&lt;/p>
&lt;p>클래스의 특정 관심사를 묶어 다른 클래스로 분리하고, 기존 클래스의 메서드를 호출해야하는 부분을 이벤트로 처리하게 변경하였습니다.&lt;/p>
&lt;p>이 과정에서 연쇄적으로 처리해야하는 부분이 이전 클래스와 &lt;strong>강한 결합&lt;/strong>이 남아있어 같이 고민하게 되었는데, 제가 &lt;strong>콜백 함수를 넘기는 메서드&lt;/strong>를 제안하였고 이를 반영하였습니다.&lt;/p>
&lt;p>저의 의견으로 고민되었던 부분을 개선할 수 있어 뿌듯했네요😁&lt;/p>
&lt;h3 id="13일차-짝-구현---페어-프로그래밍">13일차: 짝 구현 - 페어 프로그래밍&lt;/h3>
&lt;p>13일차에는 &lt;strong>분산 버전 관리 시스템&lt;/strong>인 &lt;strong>Git&lt;/strong>을 완벽하게 이해해야 해결할 수 있는 미션이 주어졌습니다.&lt;/p>
&lt;p>또한 &lt;strong>페어 프로그래밍&lt;/strong>을 통해 주어진 미션을 해결해야하는 조건이 있었습니다.&lt;/p>
&lt;p>새롭게 배정된 짝과 어떻게 미션을 수행할지 협의했고, 결과적으로 아래와 같은 흐름으로 미션을 수행했습니다.&lt;/p>
&lt;ol>
&lt;li>각자 미션 해결을 위해 필요한 내용들 학습&lt;/li>
&lt;li>함께 요구사항 분석&lt;/li>
&lt;li>함께 설계&lt;/li>
&lt;li>함께 구현&lt;/li>
&lt;/ol>
&lt;p>바로 만나서 학습부터 같이 수행하는 것이 아니라 각자 관련 내용에 대해 충분히 학습한 후 미션 수행을 시작하였습니다.&lt;/p>
&lt;hr>
&lt;p>지난주에 했던 방법과 유사하게 &lt;code>VSCode&lt;/code>의 &lt;code>Live share&lt;/code>를 통해 페어 프로그래밍을 진행하였고, 개발 전 충분한 분석과 설계를 위해 &lt;code>mermaid&lt;/code> 를 적극적으로 활용하였습니다.&lt;/p>
&lt;p>이전까지는 주로 &lt;strong>객체 지향 프로그래밍&lt;/strong>을 주로 활용했었는데, 짝이 선호하는 &lt;strong>함수형 프로그래밍&lt;/strong>을 시도한 것도 새로운 시도였네요😊&lt;/p>
&lt;p>이에 따라 요구하는 기능들을 모듈로 묶어 설계하고 구현하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>TDD와 애자일스러운 개발&lt;/strong>&lt;/p>
&lt;p>짝에게 &lt;strong>애자일스러운 개발&lt;/strong>과 &lt;strong>TDD&lt;/strong>를 제안하여 시도했습니다.&lt;/p>
&lt;p>아쉽게도 저도 이러한 방식에 완전히 적응된 상태는 아니었고, 짝도 불편함을 느끼고 있다는 것이 작업 효율이 떨어지는 것으로 느낄 수 있었습니다.&lt;/p>
&lt;p>이러한 이유로 짝이 편해하는 방식으로 자연스럽게 전환되었던 것 같습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>파일 시스템 테스트&lt;/strong>&lt;/p>
&lt;p>파일과 디렉터리를 처리해야하는 요구사항이 있었습니다.&lt;/p>
&lt;p>테스트 과정에서 실제 파일과 디렉터리를 생성하여 작업하는 것이 적절치 않다고 판단하여 이를 대체할 수 있는 방법을 찾게 되었고,&lt;code>mock-fs&lt;/code>를 찾아 적용하였습니다.&lt;/p>
&lt;p>하지만&amp;hellip; &lt;code>Node v20&lt;/code> 환경에서 &lt;code>fs&lt;/code>의 모든 &lt;strong>파일 쓰기&lt;/strong> 가 모킹한 가상 디렉터리에 생성되는 것이 아닌 실제 디렉터리에 생성하는 문제가 발생하였습니다.&lt;/p>
&lt;p>파일을 처리해야하는 부분이 미션에서 굉장히 중요한 부분이었기 때문에 어떻게든 해결해보려했지만 시간이 많지 않았기 때문에, 이때 부터 테스트 코드를 작성하지 않고 개발을 진행하게 되었네요🥲&lt;/p>
&lt;hr>
&lt;p>전주와 다르게 짝에게 테스트에 대한 긍정적인 인식을 심어주지 못한 것 같아 많이 아쉬웠지만 다음에 이러한 상황이 발생한다면 빠르게 결정을 내려 &lt;strong>TDD&lt;/strong>를 끝까지 이어나가야겠다고 다짐 하게되었습니다👊&lt;/p>
&lt;h3 id="14일차-각자-개선하기">14일차: 각자 개선하기&lt;/h3>
&lt;p>13일차에 짝과 만든 결과물을 각자의 방식으로 개선하는 과정이었습니다.&lt;/p>
&lt;p>이러한 단계를 만든 이유를 예상해보자면&amp;hellip; 같이 고민하여 만든 결과물이지만, 각자의 방법으로 개선된 결과를 보며 어떠한 생각의 차이를 가지고있는지 확인해볼라는 의도 같았습니다.&lt;/p>
&lt;p>12일차 &lt;strong>같이 개선하기&lt;/strong>와 마찬가지로 새로운 것을 추가하는 것 보다는 기존 구현에서 개선해보라는 지침이 있어 기존 결과에서 문제점이라고 생각했던 부분을 개선하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>나의 개선: 코드 구조 개선&lt;/strong>&lt;/p>
&lt;p>13일차의 미션을 수행할 때 요구하는 기능을 각각 나누어 개발하는 방식으로 진행되었습니다.&lt;/p>
&lt;p>구현 과정에서 &lt;strong>TDD&lt;/strong>로 시작했지만 결국 테스트 코드를 작성하지 않게 되었었는데, 이유 중 하나가 모든 기능에서 공통적으로 사용되었던 &lt;strong>파일 시스템과의 결합을 적절히 분리하지 못했기 때문&lt;/strong>이라는 생각을 하게되었습니다.&lt;/p>
&lt;p>&lt;strong>파일시스템&lt;/strong>을 통해 파일과 디렉터리를 다루는 부분을 완벽히 분리한다면, 다른 주요 로직들은 파일 시스템을 이용해야하는 데이터를 &lt;strong>엔티티&lt;/strong>로 취급하여 처리할 수 있게 됩니다.&lt;/p>
&lt;p>그렇다면 &lt;strong>파일시스템 관련 테스트만 배제&lt;/strong>할 수 있기 때문에 다른 처리에서는 &lt;strong>TDD&lt;/strong>를 지속할 수 있었지 않았을까? 하고 말이죠&lt;/p>
&lt;p>그래서 &lt;code>FileSystem&lt;/code>이라는 클래스를 별도로 구현하여 파일에 관한 모든 책임을 담당하게 하였습니다.&lt;/p>
&lt;p>또한 파일로 핸들링 해야하는 &lt;strong>데이터를 정의&lt;/strong>하여 엔티티처럼 활용할 수 있도록 하였습니다.&lt;/p>
&lt;p>추가적으로 주요 처리 흐름을 클래스로 분리해 &lt;code>FileSystem&lt;/code>을 주입하여 데이터의 처리 흐름에 집중할 수 있도록 구조를 변경하였습니다.&lt;/p>
&lt;p>이러한 변경을 통해 가독성을 높히는 것은 물론, 기존 기능을 구현한 코드의 크기를 획기적으로 줄일 수 있었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>&lt;code>mock-fs&lt;/code>&lt;/strong>&lt;/p>
&lt;p>쓰기 작업에서의 이슈로 인해 제대로 활용하지 못했던 &lt;code>mock-fs&lt;/code>가 신경쓰여 잠이 안오더라구요😂&lt;/p>
&lt;p>이에 다양한 방법들을 시도했지만 결국 해결할 수 없었습니다.&lt;/p>
&lt;p>그래서 다른 언어에서도 파일 시스템을 활용한 기능들을 테스트 해야할텐데 어떤 방법들을 활용하고있을까 찾아보게 되었습니다.&lt;/p>
&lt;p>해결 방법은 단순했더라구요..🥲&lt;/p>
&lt;p>그냥 파일 처리를 테스트할 디렉터리를 따로 만들고, 그 디렉터리에서만 확인하는 것 이었습니다.&lt;/p>
&lt;p>테스트 디렉터리를 구성한 후 &lt;code>.gitignore&lt;/code>로 해당 디렉터리를 안 올라가게 만들면 되었던건데&amp;hellip; &lt;code>mock-fs&lt;/code>에 너무 집착한 탓에 충분히 생각해볼 수 있는 단순한 방법도 고려하지 못했던 것 같습니다.&lt;/p>
&lt;p>이 일을 계기로 조금 더 여유를 가지고 문제를 바라봐야겠다는 다짐을 해봅니다.🔥&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>이번주는 개인적으로 컨디션이 많이 안좋았어서 그만큼 결과물도 좋지 않았던 것 같습니다.&lt;/p>
&lt;p>첫주의 각오처럼 결과물을 통해서 인사이트를 드리고 싶었는데 조금 아쉬웠어요. &lt;del>그래도 다음주에는 에어컨이 수리됩니다.&lt;/del>&lt;/p>
&lt;p>하지만 그랬기 때문에 개선하기에 더욱 많은 변화를 보여드릴 수 있었을지도 모르겠습니다.&lt;/p>
&lt;p>한 주간 모두 고생 많으셨습니다. 부캠 챌린지도 1주밖에 남지 않았네요! 마지막까지 화이팅해봐요🔥🔥🔥&lt;/p></description></item><item><title>챌린지 과정 2주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/</link><pubDate>Sat, 27 Jul 2024 21:23:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/cover.png" alt="Featured image of post 챌린지 과정 2주차 회고" />&lt;p>부스트캠프 챌린지 과정 2주차가 마무리되었습니다 🥳&lt;/p>
&lt;p>저번주에는 중요한 CS 내용들을 직접 구현해보는 미션들이 주어졌다면, 이번주는 개발 방법론, 디자인 패턴, 아키텍처와 같은 것들을 종합적으로 활용하여 특정 기능을 구현하는 내용들로 미션들이 구성되었습니다.&lt;/p>
&lt;p>또한, 첫 회고에 남겼던 &lt;strong>건방진 생각&lt;/strong>을 깨버리듯🥲 한명도 빠짐없이 역량이 출중하신 캠퍼들과 스터디그룹을 이루어 진행하게 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img.png"
width="800"
height="316"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_hu131439b1cfdaa317552cdf91e94ff142_702376_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_hu131439b1cfdaa317552cdf91e94ff142_702376_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="호크아이 슨배님 ㅜ"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="607px"
>&lt;/p>
&lt;p>요구사항 자체는 저번주보다 여렵지는 않았지만, &lt;strong>생각의 전환&lt;/strong>을 필요로하는 미션들이 많았기 때문에 다른 의미로 어려웠던 것 같습니다.&lt;/p>
&lt;p>저번주보다는 시간을 덜 쓰긴 했지만 학습부터 분석, 설계, 구현까지 평균적으로 10시간 정도는 필요했던 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1.png"
width="743"
height="475"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1_hudb4f3b36d5d6c17e98a88d51baa0bc39_194558_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1_hudb4f3b36d5d6c17e98a88d51baa0bc39_194558_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="페어 프로그래밍"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>그리고 지난주의 &lt;strong>짝 설계&lt;/strong>에 더해서 &lt;strong>짝 구현&lt;/strong> 미션이 있어 다른 캠퍼 한 분과 분석 부터 구현까지 진행해볼 수 있었습니다.&lt;/p>
&lt;p>같이 개발할 수 있다면 어떠한 방법을 활용해도 괜찮았지만, 저희 조는 VSCode의 &lt;strong>Live Share&lt;/strong>를 이용하여 &lt;strong>페어 프로그래밍&lt;/strong>으로 진행하였습니다.&lt;/p>
&lt;h2 id="피어-세션">피어 세션&lt;/h2>
&lt;p>저번 주와는 다르게 자신의 코드를 설명하는 시간을 갖지 않았습니다.&lt;/p>
&lt;p>이렇게 진행한 이유는 모든 팀원분들이 역량이 좋으셨기 때문인데, 코드를 굳이 설명하지 않아도 이해하는데 어려움이 없는데다, 인사이트까지 충분히 가져갈 수 있었습니다.&lt;/p>
&lt;p>이에 따라 피어 세션 전 과정인 &lt;strong>피어 컴파일링&lt;/strong>과정에서 코드를 분석하고 &lt;strong>질문&lt;/strong>, &lt;strong>좋았던 부분&lt;/strong>, &lt;strong>개선이 필요한 부분&lt;/strong>을 정리 한 후 피어 세션에 참여했습니다.&lt;/p>
&lt;p>&lt;strong>인당 5분&lt;/strong> 정도의 시간으로 빨리 마무리 하고, &lt;strong>같이 고민해볼 내용&lt;/strong>이나 미션 관련 기술 등에 대해서 토론하는 시간을 가졌습니다.&lt;/p>
&lt;p>다 같이 &lt;strong>토론하는 과정&lt;/strong>에서 많은 것들을 알아갈 수 있었기 때문에 구성원들 모두 &lt;strong>만족&lt;/strong>스러워 했습니다.&lt;/p>
&lt;h2 id="미션-해결-및-학습">미션 해결 및 학습&lt;/h2>
&lt;p>이번 주는 미션만 잘 수행하는 것을 넘어서 새로운 것을 시도해봤습니다.&lt;/p>
&lt;p>마스터인 &lt;strong>JK&lt;/strong>님이 올려주신 해설 영상에 &lt;strong>애자일하게 개발하는 법&lt;/strong>에 대한 부분을 언급하셨는데, 이부분에서 공감이 되어 바로 적용했습니다.&lt;/p>
&lt;p>이와 더불어 모든 미션에 &lt;strong>TDD&lt;/strong>를 시도하여 진행하였습니다.&lt;/p>
&lt;h3 id="agile-하게-개발하는-법">Agile 하게 개발하는 법&lt;/h3>
&lt;p>애자일의 핵심은 &amp;ldquo;&lt;strong>빠르고 짧은 피드백 루프&lt;/strong>&amp;ldquo;를 통해 변화에 민첩하게 대응하는 것 입니다.&lt;/p>
&lt;p>사실 애자일은 조직 전체에 대상으로 배포 가능한 단위에 대해 민첩한 대응을 의미하지만, 이러한 방식을 개발에만 적용해보려고했습니다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
분석 --> 설계 --> 구현 --> 완료
&lt;/pre>
&lt;p>이전까지는 위와 같이 &amp;ldquo;&lt;strong>분석 - 설계 구현&lt;/strong>&amp;ldquo;과정으로 진행하였다면,&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a[분석] --> b[작업 분해]
subgraph sa [반복]
c[설계] --> d[구현]
end
b --> c
d --> e[완료]
&lt;/pre>
&lt;p>이번 주 부터는 작업을 작은 단위로 작업을 분해하고, 설계에서 개발까지 반복적으로 수행하는 방식으로 변경하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3.png"
width="1024"
height="505"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3_hu6efaf883042006ad369b55af72bffa5b_178457_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3_hu6efaf883042006ad369b55af72bffa5b_178457_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="애자일 개발 방법론"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>미션들을 수행하면서 나름 완벽히 설계해도 조금씩 바뀌게되어 &lt;strong>곤란했던 경험&lt;/strong>이 있었는데, &lt;strong>변화를 가정하고 진행&lt;/strong>되는 이러한 방식으로 &lt;strong>수월하게&lt;/strong> 구조 등을 변경할 수 있었던 것 같습니다.&lt;/p>
&lt;h3 id="tdd">TDD&lt;/h3>
&lt;p>사실 이전 직장에서부터 테스트 코드의 부재로 인한 고통을 뼈져리게 느꼈었기 때문에 테스트의 중요성은 너무나 잘 알고 있습니다.&lt;/p>
&lt;p>꼭 필요하다고 생각하고 있지만 습관화가 안되어 잘 활용하지 못하고 있었는데, 테스트에 익숙해지기 이번 기회를 시작하기로 마음먹었습니다.&lt;/p>
&lt;p>덤으로 위에서 언급한 &lt;strong>Agile 하게 개발하기&lt;/strong>에서 빠른 피드백을 받는 데 도움이 될 것이라 생각해 적용했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4.png"
width="1024"
height="680"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4_hu34b341a957e0c9749c8004b23f93334d_19212_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4_hu34b341a957e0c9749c8004b23f93334d_19212_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TDD"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>다들 아시는 것 처럼 구현 과정에 들어가기 전, 미션의 요구사항들을 모두 테스트 코드로 작성한 후, 테스트를 통과시키는 방식으로 진행하였습니다.&lt;/p>
&lt;p>가장 어려움을 느꼈던 테스트 코드 작성은 &lt;code>GPT&lt;/code>의 도움을 받으며 진행하였는데, 설계를 잘 수행한 덕에 테스트를 정확히 잘 만들어줘서 매우 편리했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1.gif"
width="350"
height="240"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1_hu47953aa9c0ae4dc86946ac79a368a34c_398794_480x0_resize_box_1.gif 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1_hu47953aa9c0ae4dc86946ac79a368a34c_398794_1024x0_resize_box_1.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="350px"
>&lt;/p>
&lt;p>터미널을 한쪽에 상시로 띄워놓고 &lt;code>jest --watch&lt;/code>를 통해 실시간으로 통과되는 것을 확인하며 구현했는데, 마치 &lt;strong>게임&lt;/strong>을 하는 것 같다는 느낌을 받을 수 있어서 미션을 더 재미있게 수행했던 것 같습니다. 🎮&lt;/p>
&lt;h2 id="학습-정리">학습 정리&lt;/h2>
&lt;p>일부 내용에 대해서는 학습했던 내용을 당일에 정리하여 올릴 수 있었으나, 짝 설계나 짝 구현 등의 미션들로 인해 따로 학습 정리가 어려웠습니다.&lt;/p>
&lt;p>이러한 부분은 주말을 활용해 추가적으로 진행하기로 결정했습니다.&lt;/p>
&lt;p>이를 위해 어떤 내용을 어떻게 정리할 것인지만 따로 메모했고, 이 회고를 마무리하고 진행할 예정이에요🥲&lt;/p>
&lt;h2 id="나의-변화">나의 변화&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2.png"
width="278"
height="181"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2_hubca6b70351de21cb18efa000fe370bd6_35435_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2_hubca6b70351de21cb18efa000fe370bd6_35435_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="틀깨기"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>이번 주 미션들은 풀스택 개발자로 일했던 경험과 다양한 방식으로 개발했던 경험 덕분에 접근 방법을 결정하는데는 큰 어려움이 없었습니다만&amp;hellip;&lt;/p>
&lt;p>다른 분들의 작업물들을 보며 개발자라면 고민해봤을 내용인 &lt;strong>얼마나 깊게 이해하고 있는가&lt;/strong>에 대해서 한번 더 생각해볼 수 있는 계기였습니다.&lt;/p>
&lt;p>특히 &lt;strong>함수형 프로그래밍&lt;/strong>을 활용해야하는 미션에서는 &lt;strong>상태&lt;/strong>를 아예 만들지않고 구현하셨던 캠퍼도 있어서 충격적으로 다가왔던 것 같습니다.&lt;/p>
&lt;p>다행히도 &lt;strong>이벤트 주도 아키텍처&lt;/strong>가 필요했던 미션은 모든 캠퍼분들이 어려움을 느끼셨었는데, 저의 결과물로 인사이트를 드릴 수 있었습니다.😁&lt;/p>
&lt;h3 id="나-좀-성장해-있었을지도">나 좀 성장해 있었을지도?&lt;/h3>
&lt;p>부스트캠프 5기에 참여했던 예전에 저였다면 뛰어난 동료들을 봤을 때 스스로 자책했었겠죠?&lt;/p>
&lt;p>이번에는 오히려 뛰어난 동료들을 보며 다른 분들은 어떻게 생각했을까? 어떻게 구현했을까? 라는 기대감에 다음날 피어세션이 더욱더 기다려졌어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5.png"
width="640"
height="427"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5_hu84b39fe339821112912a9fed69654c15_768651_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5_hu84b39fe339821112912a9fed69654c15_768651_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="10시 50분의 내 모습"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>문득 이런 저의 모습을 보며 &lt;strong>나 좀 성장해 있었을지도?&lt;/strong> 라는 생각이 들면서 몰래 뿌듯했었네요😋&lt;/p>
&lt;h3 id="좋은-동료들">좋은 동료들&lt;/h3>
&lt;p>사실 저는 &lt;strong>집단 지성&lt;/strong>을 믿지 않았습니다.&lt;/p>
&lt;p>지금까지 살아오면서 여러 활동을 했었지만, 대부분 잘 하는 일부가 &lt;strong>캐리&lt;/strong>하는 방식으로 진행되었었기 때문이에요.&lt;/p>
&lt;p>그런데 각각의 개성이있는 잘 하는 사람들끼리 모여 내는 &lt;strong>학습 시너지&lt;/strong>는 저의 생각을 바꾸기 충분했습니다.&lt;/p>
&lt;p>큰 기업들에서 자신들의 최고의 장점 &lt;strong>좋은 동료들&lt;/strong>이라고 강조하는 모습을 쉽게 볼 수 있었는데, 이 부분을 확실히 이해할 수 있었습니다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>지난주보다 더 빠르게 한 주가 지나갔습니다. 다음주는 짝 활동이 더 많아진다고 하는데 벌써 기대가 되네요.&lt;/p>
&lt;p>하루 하루를 정해진 일과에 맞춰 충실히 살아가는게 중요하다는 걸 새삼 다시 느끼는 것 같습니다. 조금(많이) 피곤하긴 하지만 살아온 어느때보다 활력이 넘치는 것 같아요🔥🔥🔥&lt;/p>
&lt;p>마지막으로 그룹원들에게 코멘트 할 때 공통으로 넣으려고 준비한 문구로 마무리하겠습니다. 끝까지 읽어주셔서 감사합니다.😁&lt;/p>
&lt;blockquote>
&lt;p>소프트웨어 장인이라는 책에서 나온 내용인데 소프트웨어 장인은 경지라기 보다는 이념이나 마음가짐으로 소프트웨어 장인정신을 잘 지키고 있는가를 의미한다고 해요&lt;/p>
&lt;p>프로페셔널하게 행동하기,&lt;br>
다른 개발자들에게 배우기,&lt;br>
자신의 지식을 나누기 등이 이에 해당한다고 합니다.&lt;/p>
&lt;p>저자는 이런 것들은 잘 하고 있다면 스스로를 소프트웨어 장인이라고 칭해도 괜찮다고 생각한데요&lt;/p>
&lt;p>그런 의미에서 조금 부끄럽지만 저희 그룹원들 모두 소프트웨어 장인이라고 불러도 괜찮지 않을까요? ㅎㅎ&lt;/p>
&lt;p>한 주 동안 많이 배워갑니다. 멤버쉽에서 다시 뵈어요 :D&lt;/p>
&lt;/blockquote></description></item><item><title>챌린지 과정 1주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/</link><pubDate>Sun, 21 Jul 2024 20:49:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/cover.png" alt="Featured image of post 챌린지 과정 1주차 회고" />&lt;p>부스트캠프 챌린지 과정에 입과한 후 첫 일주일이 흘렀습니다.&lt;/p>
&lt;p>챌린지 과정은 총 6명이 스터티 그룹을 구성하여 일주일간 정해진 일과에 참여하게됩니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>(10:00 ~ 11:00)&lt;/strong> 체크인 및 피어리뷰&lt;/li>
&lt;li>&lt;strong>(11:00 ~ 12:00)&lt;/strong> 피어세션&lt;/li>
&lt;li>&lt;strong>(13:00 ~ 18:00)&lt;/strong> 미션 해결 및 학습&lt;/li>
&lt;li>&lt;strong>(18:00 ~ 19:00)&lt;/strong> 미션 결과 제출&lt;/li>
&lt;li>&lt;strong>(19:00 ~ 09:00)&lt;/strong> 체크아웃 및 학습 정리&lt;/li>
&lt;/ul>
&lt;p>매일 개발자가 꼭 알아야 할 CS 중 핵심 내용들을 직접 구현하는 미션을 하나씩 수행하게 되는데, 생각보다 훨씬 도전적인 미션들이 나와서 정신없이 한 주가 지나갔습니다.&lt;/p>
&lt;p>어떤 내용들을 공부했는지는 공개할 수 없지만, 대략적으로 어떻게 진행되었는지 설명드리겠습니다.&lt;/p>
&lt;h2 id="피어세션">피어세션&lt;/h2>
&lt;p>제가 가장 기대했던 일과인 피어세션은 오전 9시에 공개되는 스터디 그룹원의 결과물을 확인하고, 10시부터 요구사항들을 잘 구현했는지 기록하는 피어리뷰를 진행합니다.&lt;/p>
&lt;p>저는 피어리뷰가 열리기 전인 오전 9시부터 스터디 그룹의 모든 분들의 코드를 꼼꼼히 읽고, 어떤 방향으로 문제를 &lt;strong>해석&lt;/strong>했는지, &lt;strong>접근법&lt;/strong>, &lt;strong>잘한 부분&lt;/strong>, &lt;strong>개선이 필요한 부분&lt;/strong>을 파악하는데 최대한 많은 시간을 쓰려고 노력하였습니다.&lt;/p>
&lt;hr>
&lt;p>피어리뷰가 끝난 오전 11시부터 본격적인 피어세션이 시작됩니다.&lt;/p>
&lt;p>저희 스터디그룹은 각자의 결과물을 리뷰하고 다른 캠퍼들이 결과물에 대해서 &lt;strong>질문&lt;/strong>과 &lt;strong>칭찬&lt;/strong>, &lt;strong>개선점&lt;/strong>에 대해 이야기하며 의문점이 생기는 부분은 토론하는 방식으로 진행되었습니다.&lt;/p>
&lt;ul>
&lt;li>요구사항 분석 과정 설명&lt;/li>
&lt;li>설계 결과 설명&lt;/li>
&lt;li>코드 설명&lt;/li>
&lt;li>어려웠던 점, 고생한 점, 고민되었던 점 공유&lt;/li>
&lt;/ul>
&lt;h2 id="미션-해결-및-학습">미션 해결 및 학습&lt;/h2>
&lt;p>개발자라면 꼭 알아야 할 CS 핵심 내용중 한 가지의 결과물을 만드는 미션이 주어졌습니다.&lt;/p>
&lt;p>워낙 중요한 내용들이 나와서 이미 알고 있다고 생각했는데, 막상 구현하려고하니 손이 잘 안 움직이더군요&amp;hellip;😅&lt;/p>
&lt;p>학습한지 시간이 많이 흐르기도 했고, 처음 공부할 때 부터 면접에 잘 대답할 수 있는 정도만 학습했던 과거의 저에게 실망?했던 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/img.png"
width="720"
height="720"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/img_hu84daaf8610ac0bf327b79ddb8c96d514_187579_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/img_hu84daaf8610ac0bf327b79ddb8c96d514_187579_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="중대장은 너희에게 실망했다."
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>저 같은 경우 이미 &lt;strong>웹・모바일 5기 챌린지&lt;/strong> 과정을 수료했음에도 불구하고 첫날을 제외한 모든 미션에 많은 시간을 할애해야 할 정도로 어려운 미션들이 주어졌습니다.&lt;/p>
&lt;p>2~4일차 같은 경우 평균적으로 오전 3시까지 미션을 수행했고, 슬랙에는 새벽까지 활동하시는 캠퍼분들도 꽤 많았습니다.&lt;/p>
&lt;p>늦은 시간까지 미션을 수행했음에도 불구하고 미션을 완전히 수행하지 못한 캠퍼들도 속출했고, 5기 활동과 비교해봤을때도 2, 3주차에 나와야 할 미션들이 나왔던 것 같아 앞으로 나올 미션들이 걱정이 되면서도 기대가 되었던 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/gif.gif"
width="350"
height="204"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/gif_hu8c154d05ce659bc202b5c95353ff2aa6_665878_480x0_resize_box_1.gif 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/gif_hu8c154d05ce659bc202b5c95353ff2aa6_665878_1024x0_resize_box_1.gif 1024w"
loading="lazy"
alt="올라와봐"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>또한 이렇게 도전적인 미션들로 인해 5기 챌린지 과정의 저가 회상되며, 다른 캠퍼분들의 &lt;strong>멘탈 관리&lt;/strong>가 걱정되기도 했던 것 같습니다.&lt;/p>
&lt;p>이러한 이유로 피어세션에서 스터디그룹원들에게 용기를 복돋아주기위해 많은 힘을 썼습니다.&lt;/p>
&lt;hr>
&lt;p>챌린지 이전에 진행되었던 베이직 과정 중간부터, 저의 결과물을 확인하시는 캠퍼분들이 더욱 잘 이해할 수 있도록 &lt;strong>README&lt;/strong>에서 &lt;code>mermaid&lt;/code>를 이용한 다이어그램을 활용하기 시작했습니다.&lt;/p>
&lt;ul>
&lt;li>요구사항 분석 과정에서 &lt;strong>플로우 차트&lt;/strong>를 이용해 데이터 및 작업들의 흐름을 잘 표현할 수 있도록 했습니다.&lt;/li>
&lt;li>설계 과정에서 &lt;strong>클래스 다이어그램&lt;/strong>을 활용하여 사용될 자료구조와 클래스, 함수 등을 예측할 수 있도록 했습니다.&lt;/li>
&lt;/ul>
&lt;p>또한 주요 기능들의 구현 과정을 설명할 때 해당 기능을을 구현한 &lt;strong>실제 코드&lt;/strong>를 활용하여 코드를 뜯어보지 않고도 이해할 수 있도록 시도했습니다.&lt;/p>
&lt;p>이러한 부분들이 스터디그룹원들이 저의 결과물을 이해하는데 큰 도움이 되었다고 말씀하셔서 뿌듯했네요😊&lt;/p>
&lt;h2 id="학습-정리">학습 정리&lt;/h2>
&lt;p>늦은 시간까지 미션을 수행하다보니, 학습 내용을 정리 할 시간이 부족했습니다. &lt;del>핑계1&lt;/del>&lt;/p>
&lt;p>&lt;del>사실 학습 정리를 할 만큼 학습한 내용은 없었습니다.&lt;/del>&lt;/p>
&lt;p>일과의 마지막인 금요일에 마지막 일과로 수료생들과의 밋업 시간을 가졌는데 매일 새벽 5시에 주무시면서도 어떻게든 정리를 끝내셨다는 말씀을 듣고 조금(많이) 반성하게 되었던 것 같습니다.&lt;/p>
&lt;p>다음 일과때부터는 정말로 학습이 필요한 미션이 나올지는 모르겠지만, 학습이 필요하지 않더라고 다른 분들이 참고할 수 있도록 노하우를 담는 방식으로 시도해봐야겠습니다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>부스트캠프 웹모바일 과정 9기에 참여하기 전, 5기 챌린지 과정에서 뛰어난 역량의 다른 캠퍼분들을 보고 의지를 불태우며 학습하던 저의 모습이 떠올랐습니다.&lt;/p>
&lt;p>그런 이유로 이번엔 제가 다른 캠퍼분들의 교보재, 이정표가 될 수 있지 않을까? 라는 건방진 생각을 하게 되었어요😂&lt;/p>
&lt;p>제가 뛰어난 다른 캠퍼들을 보며 동기부여하고 따라해보며 성장했던 것 처럼, 이번에는 제가 그 역할을 해보려고합니다.&lt;/p>
&lt;p>다른 캠퍼님들 그리고 이 글을 보게 될 많은 분들 포기하지 마시고 같이 끝까지 열심히 해봐요🔥🔥🔥🔥&lt;/p>
&lt;p>마지막으로 조금 부끄럽지만 그룹 회고에 남긴 응원 메시지를 올려봅니다. 다른 분들도 꼭 힘이 되셨으면 좋겠어요. 화이팅~~👊👊👊&lt;/p>
&lt;blockquote>
&lt;p>안녕하세요 :D&lt;br>
마지막에 팀회고에서 말씀드렸지만, 사실 저는 5기 챌린지 수료생이었어요 ㅎㅎ&lt;/p>
&lt;p>여러분과 같이 피어세션 수행하면서 처음 부캠 했던 모습이 생각나서 뭔가 좋기도하고 싫기도 하고 복잡한 기분이 들었었네요.&lt;/p>
&lt;p>제가 5기 챌린지 참여할 때도 잘하시는 분들이 많았었는데, 이번 피어세션을 진행하면서 참여하신 모두 저를 잘한다고, 많이 배워간다고 말씀해주셔서 감사했습니다.&lt;/p>
&lt;p>그러면서도 제가 다른 뛰어난 분들을 보면서 느꼈던 안좋은 감정들을 느끼고 계신 것 같아서 뭔가 안타깝기도 했습니다.&lt;/p>
&lt;p>그래서 챌린지를 먼저 수료한 입장으로 꼭 해드리고 싶은 말이 있어요!&lt;/p>
&lt;p>잘 하는 사람을 보면서 동기부여가 되고, 실제로 좋은 부분을 따라해보면서 배우는게 정말로 좋은 성장 방법 중 하나이죠.&lt;/p>
&lt;p>이때 그 사람만큼 혹은 보다 더 잘하는 것을 목표로 하는 것이 아닌, 부캠에서 계속해서 강조하는 것 처럼 스스로의 성장에 집중하셔야해요.&lt;/p>
&lt;p>처음에는 동기부여에 많은 도움이 되고, 실력이 빠르게 좋아지는 경험을 하실 수 있지만, 잘 하는 분들과의 비교가 반복되면 자책하게되더라구요.&lt;/p>
&lt;p>앞으로 강도 높은 미션들을 계속 수행하시면서 체력적, 정신적으로 한계를 느끼게 되실거에요.&lt;br>
이런 상황에서 비교가 반복되면 자책이 점점 더 심해지고, 이로 인해 마음이 꺾기게 되면, 꽤 오랜 기간동안 빠져나올수 없더라구요&amp;hellip;ㅎㅎ&lt;/p>
&lt;p>그렇기 때문에 잘 하시는 분들의 결과물들은 학습 재료로만 사용하시고, 스스로가 얼만큼 더 잘해졌는지, 그리고 잘한게 있다면 스스로 칭찬해 주는 건 어떨까요?&lt;/p>
&lt;p>지금 잘하시는 다른 분들도 여러분들과 같은 단계를 밟아오셨어요!&lt;/p>
&lt;p>항상 말씀드린것 처럼 저는 조금 더 공부하고, 경험한 것 뿐이구요! 앞으로 꾸준히 노력하신다면 저보다 훨씬 잘하실수 있으실거에요!!(저도 엄청 어려웠어요 ㅋㅋ)&lt;/p>
&lt;p>금요일 릴프에서 &amp;ldquo;개발자 원칙&amp;quot;이라는 책의 &amp;ldquo;탁월한 팀의 특징&amp;quot;에 대한 이야기가 나왔는데, 구글에서 조사한 탁월한 팀의 공통점은 &amp;ldquo;심리적 안정감&amp;quot;이였구요,&lt;/p>
&lt;p>&amp;ldquo;안정감&amp;quot;은 &amp;ldquo;실수가 드러났을 때에도 처벌받거나 놀림 받지 않을 것 이라는 믿음&amp;quot;이라고 합니다.&lt;/p>
&lt;p>이 이야기를 다른 관점에서 해석해보면, 탁월한 역량을 가진 인원들의 특징은 &amp;ldquo;실수가 드러났을 때도 부끄러워하거나, 두려워하지 않는다.&amp;rdquo; 아닐까요?&lt;/p>
&lt;p>그렇다면 탁월한 역량을 가진 개발자가 되기 위해서는 &amp;ldquo;실수나 부족한 부분들을 부끄럽게 생각하지 않고, 두려워하지 않아야 하는게 아닐까?&amp;rdquo; 라는 생각이 들었습니다.&lt;/p>
&lt;p>걱정하지마세요!!!&lt;/p>
&lt;p>당장 스스로가 부족하다고 느끼실지 모르겠지만, 모두 이번 부캠을 통해 분명히 이전보다 성장하시게 될 거구요! 앞으로 계속 성장하실거잖아요?&lt;/p>
&lt;p>1주간 즐거웠습니다! 모두 챌린지 끝까지 치열하게 참여하고, 맴버쉽에서 다시 뵈어요 :)&lt;/p>
&lt;/blockquote></description></item></channel></rss>