<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CleanCode on Mario Blog</title><link>https://codemario318.github.io/tags/cleancode/</link><description>Recent content in CleanCode on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Thu, 20 Apr 2023 15:48:13 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/tags/cleancode/index.xml" rel="self" type="application/rss+xml"/><item><title>클린코드: 3. 함수 잘 만드는 법</title><link>https://codemario318.github.io/post/clean_code_3/</link><pubDate>Thu, 20 Apr 2023 15:48:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean_code_3/</guid><description>&lt;img src="https://codemario318.github.io/post/clean_code_3/clean_code_cover.jpeg" alt="Featured image of post 클린코드: 3. 함수 잘 만드는 법" />&lt;p>어떤 프로그램이든 가장 기본적인 단위는 함수다&lt;/p>
&lt;ul>
&lt;li>어떻게 해야 읽기 쉽고 이해하기 쉬운 함수를 만들 수 있을까&lt;/li>
&lt;li>의도를 분명히 표현하는 함수를 어떻게 구현할수 있을까&lt;/li>
&lt;li>함수에 어떤 속성을 부여해야 처음 읽는 사람이 프로그램 내부를 직관적으로 파악할 수 있을까&lt;/li>
&lt;/ul>
&lt;h2 id="작게-만들어라">작게 만들어라&lt;/h2>
&lt;blockquote>
&lt;p>함수를 만드는 첫번째 규칙은 ‘작게!’, 두번째 규칙은 ‘더 작게!’ 다.&lt;/p>
&lt;/blockquote>
&lt;p>이 규칙은 증명하긴 어렵지만 작가의 경험으로 작은 함수가 좋다고 확신한다.&lt;/p>
&lt;p>함수가 작을수록 한가지 일만 처리하게 만들기 용이하고 명백해진다.&lt;/p>
&lt;h3 id="블록과-들여쓰기">블록과 들여쓰기&lt;/h3>
&lt;p>조건문을 통해 처리될 블록은 한줄로 표현해야한다. 즉 코드를 함수로 만들어야 한다.&lt;/p>
&lt;p>블록에 들어가게 되는 함수 이름을 적절하게 사용한다면 코드를 이해하기 쉬워진다.&lt;/p>
&lt;blockquote>
&lt;p>이 말은 중첩 구조가 생길만큼 함수가 커져서는 안 된다는 뜻으로 함수의 들여쓰기 깊이는 2단을 넘지 않게 만드는 것이 좋다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="한가지만-해라">한가지만 해라&lt;/h2>
&lt;blockquote>
&lt;p>함수는 한 가지 일을 해야야한다. 그 한가지를 잘 해야한다. 그 한 가지만을 해야한다.&lt;/p>
&lt;/blockquote>
&lt;p>추상화 수준이 하나인 단위로 함수를 만들면 한가지 일을 하는 함수를 만들 수 있다.&lt;/p>
&lt;p>함수를 만드는 이유는 큰 개념(기능)을 다음 추상화 수준에서 여러 단계로 나눠 수행하기 위해서다. 의미를 유지하면서 더 쪼갤 수 없는 수준까지 줄여야한다.&lt;/p>
&lt;p>단순히 다른 표현이 아니라 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.&lt;/p>
&lt;h3 id="함수-내-섹션">함수 내 섹션&lt;/h3>
&lt;p>섹션이 여러개 만들어진다면 함수가 여러개의 일을 한다는 뜻이다. 한가지 일 만 하는 함수는 자연스럽게 섹션으로 나누기 어렵다.&lt;/p>
&lt;h2 id="함수-내-추상화-수준은-하나로">함수 내 추상화 수준은 하나로&lt;/h2>
&lt;p>함수가 확실히 한 가지 작업만 하려면 함수 내 모든 문장의 추상화 수준이 동일해야 한다.&lt;/p>
&lt;p>한 함수 내에 추상화 수준을 섞으면 특정 표현이 근본 개념인지 세부사항인지 구분하기 어려워, 코드를 읽는 사람이 헷갈린다.&lt;/p>
&lt;p>또한 근본 개념과 세부사항을 뒤섞기 시작하면, 깨진 유리창처럼 사람들이 함수에 세부사항을 점점 더 추가한다.&lt;/p>
&lt;h3 id="위에서-아래로-코드-읽기-내려가기-규칙">위에서 아래로 코드 읽기: 내려가기 규칙&lt;/h3>
&lt;p>코드는 위에서 아래로 이야기처럼 읽혀야 좋다. 한 함수 다음에는 추상화 수준이 한 단계 낮은 함수가 온다.&lt;/p>
&lt;p>즉 위에서 아래로 읽히려면 함수 추상화 수준이 한번에 한 단계씩 낮아진다.&lt;/p>
&lt;blockquote>
&lt;p>💡 내려간다는건 단순히 위에서 아래로 읽힌다는 의미보다, 깊이가 깊어질수록 조금 더 낮은 수준으로 표현되야 한다는 뜻같다.&lt;/p>
&lt;/blockquote>
&lt;p>추상화 수준이 하나인 함수를 구현하는것은 어렵다. 핵심은 짧으면서도 한가지 일만 수행하는 함수이다. &lt;strong>한 단계씩 깊어지는 코드를 구현하면 추상화 수준을 일관되게 유지하기 쉬워진다.&lt;/strong>&lt;/p>
&lt;h2 id="switch-문">Switch 문&lt;/h2>
&lt;p>Switch문은 본질적으로 switch 문은 N 가지를 처리하기 때문에 작게, 한 가지 작업만 수행하게 만들기 어렵다.&lt;/p>
&lt;blockquote>
&lt;p>완전히 사용하지 않을 방법은 없기 때문에 다형성을 사용하여 저차원 클래스에 숨기고 반복하지 않게 만들어야 한다.&lt;/p>
&lt;/blockquote></description></item><item><title>클린코드: 1. 깨끗한 코드</title><link>https://codemario318.github.io/post/clean_code_1/</link><pubDate>Thu, 20 Apr 2023 15:42:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean_code_1/</guid><description>&lt;img src="https://codemario318.github.io/post/clean_code_1/clean_code_cover.jpeg" alt="Featured image of post 클린코드: 1. 깨끗한 코드" />&lt;ul>
&lt;li>코드는 요구사항을 표현하는 도구이다.
&lt;ul>
&lt;li>고도로 추상화된 언어나 특정 응용 분야 언어로 기술하는 명세 역시 코드이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>제대로 명시한 요구사항은 코드만큼 정형적이며 테스트 케이스로 사용해도 좋다!&lt;/li>
&lt;/ul>
&lt;h2 id="나쁜-코드">나쁜 코드&lt;/h2>
&lt;blockquote>
&lt;p>잘나가던 회사를 망하게한 원인은 나쁜코드였다.
그들은 출시에 바빠 코드를 마구 짰다. 기능을 추가할수록 코드는 엉망이 되어갔고, 결국은 감당이 불가능한 수준에 이르렀다.&lt;/p>
&lt;/blockquote>
&lt;p>언급 되었던 회사는 20년 후 망했다. 장기적으로 살피지 않아도, 빠르게 진행되던 프로젝트가 1~2년 만에 정체되는 경우가 꽤 많이 일어난다.&lt;/p>
&lt;p>이렇게 만들어진 나쁜 코드들은 생산성 악순환을 만든다.&lt;/p>
&lt;p>나쁜 (더러운) 코드를 지속적으로 개선하지 않는다면 장기적으로 부정적인 결과를 가져오게 된다.&lt;/p>
&lt;h3 id="나중은-절대-오지-않는다---later--never--later-equals-never">&lt;strong>나중은 절대 오지 않는다 - Later == Never ( later equals never!)&lt;/strong>&lt;/h3>
&lt;p>나중은 절대 오지 않는다. 따라서 시간을 들여 깨끗한 코드를 만드는 노력이 비용을 절감하는 방법일 뿐만 아니라 전문가로서 꼭 필요하다.&lt;/p>
&lt;h3 id="좋은-코드가-나쁜-코드가-되는-이유">좋은 코드가 나쁜 코드가 되는 이유&lt;/h3>
&lt;ol>
&lt;li>요구사항 변경&lt;/li>
&lt;li>짧은 일정&lt;/li>
&lt;li>등등 외적인 요인들&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>💡 모두 변명임. 잘못은 사실 개발자 자신에게 있다.&lt;/p>
&lt;/blockquote>
&lt;p>기획, 사업 등 에게 적극적으로 정보를 제공하여 사전에 방지해야 한다.&lt;/p>
&lt;ul>
&lt;li>커뮤니케이션을 통해 이러한 요인들을 예방하는 것도 개발자의 역량&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>나쁜 코드의 위험을 이해하지 못하는 관리자 말을 그대로 따르는 행동은 전문가답지 못하다.&lt;/p>
&lt;/blockquote>
&lt;h4 id="원초적-난제">원초적 난제&lt;/h4>
&lt;p>개발자는 근본적인 가치에서 난제에 봉착한다.&lt;/p>
&lt;p>기한을 맞추려면 나쁜 코드를 양산할 수 밖에 없다고 느끼지만, 오히려 엉망진창인 상태로 인해 속도가 늦어지고 기한을 놓치게 된다.&lt;/p>
&lt;blockquote>
&lt;p>💡 기한을 맞추는 유일한 방법은, 즉 빨리 가는 유일한 방법은, 언제나 코드를 최대한 깨끗하게 유지하는 습관이다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="깨끗한-코드는-어떻게-작성할까">깨끗한 코드는 어떻게 작성할까?&lt;/h2>
&lt;h3 id="코드감각">코드감각&lt;/h3>
&lt;p>깨끗한 코드를 작성하려면 청결이라는 힘겹게 습득한 감각을 활용해 자잘한 기법들을 적용하는 절제와 규율이 필요하다.&lt;/p>
&lt;h3 id="깨끗한-코드란">깨끗한 코드란?&lt;/h3>
&lt;ol>
&lt;li>비야네 스트롭스트룹 - Bjarne Stroustrup (C++ 창시자)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>간단한 논리&lt;/p>
&lt;/li>
&lt;li>
&lt;p>낮은 의존성&lt;/p>
&lt;/li>
&lt;li>
&lt;p>성능을 최적화&lt;/p>
&lt;/li>
&lt;li>
&lt;p>깨끗한 코드는 한 가지 일을 제대로 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>나쁜 코드는 나쁜 코드를 유혹한다.&lt;/p>
&lt;ul>
&lt;li>나쁜 코드를 고치면서 오히려 더 나쁜 코드를 만든다.&lt;/li>
&lt;li>깨진 창문&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="link" href="https://ko.wikipedia.org/wiki/%EA%B9%A8%EC%A7%84_%EC%9C%A0%EB%A6%AC%EC%B0%BD_%EC%9D%B4%EB%A1%A0" target="_blank" rel="noopener"
>깨진 유리창 이론 - 위키백과, 우리 모두의 백과사전&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>그래디 부치 - Grady Booch : UML 창시자&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>깨끗한 코드는 단순하고 직접적이다.&lt;/li>
&lt;li>잘 쓴 문장처럼 읽힌다.&lt;/li>
&lt;li>결코 설계자의 의도를 숨기지 않는다.&lt;/li>
&lt;li>명쾌한 추상화와 단순한 제어문으로 가득하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>가독성을 강조하고 있다.&lt;/strong>&lt;/p></description></item></channel></rss>