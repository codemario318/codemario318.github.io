<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>부스트캠프 on Mario Blog</title><link>https://codemario318.github.io/categories/boostcamp/</link><description>Recent content in 부스트캠프 on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Sun, 27 Oct 2024 09:29:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/categories/boostcamp/index.xml" rel="self" type="application/rss+xml"/><item><title>멤버십 2차 학습 스프린트 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/5/</link><pubDate>Sun, 27 Oct 2024 09:29:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/5/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/5/cover.png" alt="Featured image of post 멤버십 2차 학습 스프린트 회고" />&lt;p>4주간의 두 번째 학습 스프린트도 마무리 되었습니다 🥳&lt;/p>
&lt;p>2차 학습 스프린트는 세부 트랙을 선택하고 그에 따라 1차 학습 스프린트보다 더 자유도가 높은 미션이 주어졌어요(저는 백엔드로 선택했어요!)&lt;/p>
&lt;p>그리고 오프라인 활동과 온라인 활동이 병행되어 스터디 그룹원과 만나 학습하기도 했습니다.&lt;del>맛있는 것도 많이 먹었어요😂&lt;/del>&lt;/p>
&lt;p>학습 과정에서 생각보다 많은 변화가 있었네요! 이전과 달랐던 부분들을 중점적으로 살펴보겠습니다.&lt;/p>
&lt;h2 id="오프라인-활동">오프라인 활동&lt;/h2>
&lt;p>처음으로 오프라인 활동에 대해서 말씀드리고 싶어요&lt;/p>
&lt;p>오프라인 활동은 부스트캠프에서 교육을 담당하는 &lt;strong>코드 스쿼드&lt;/strong>(양재)와 운영을 담당하는 &lt;strong>커넥트 재단&lt;/strong>(수내)에서 진행되었습니다.&lt;/p>
&lt;p>각각 매주 &lt;strong>월요일 ~ 화요일&lt;/strong>, &lt;strong>수요일 ~ 목요일&lt;/strong> 두 유형으로 주에 2일 오프라인 활동이 진행되었어요(코어 타임은 이전과 동일했습니다.)&lt;/p>
&lt;p>가능한 위치와 기간을 선택하여 신청하면 운영진이 배정해주는 방식이었는데, 모든 위치와 기간을 선택한 경우에는 양재, 수내 섞여서 배정되신 분들도 계셨습니다.&lt;/p>
&lt;p>저 같은 경우 양재가 1시간, 수내가 1시간 20분 정도 걸려서 고민하다가 모든 선택지에 체크했는데, 첫 2주는 &lt;strong>양재 수~목&lt;/strong> 두번 째 2주는 &lt;strong>양재 월~화&lt;/strong>에 배정된 것으로보아 거리도 어느정도는 고려해주시는 것 같았어요&lt;/p>
&lt;h3 id="내가-노력한-부분">내가 노력한 부분&lt;/h3>
&lt;p>오프라인 활동이 사작되면서 그룹원들과 자연스럽게 &lt;strong>같이 소통할 수 있는 시간&lt;/strong>이 많아질 것이 당연했습니다.&lt;/p>
&lt;p>아무래도 온라인으로 진행했을 때보다 &lt;strong>적극적으로 의사소통 할 수 있는 환경&lt;/strong>이었어요&lt;/p>
&lt;p>이러한 장점을 더욱 끌어올리기 위해 그룹원들과 &lt;strong>친밀감&lt;/strong>을 높히려 노력했습니다.&lt;/p>
&lt;p>서로 친해지면 더 편하게 질문할 수 있고, 조금 더 직접적인 피드백을 드려도 비교적 기분나쁘지 않게 받아들일 수 있다고 생각했기 때문이에요&lt;/p>
&lt;p>그래서 제가 취미로 하고 있는 핸드드립 커피를 같이 나눠 마시기도 하고, 식사 시간, 쉬는 시간에 서로 개인적인 이야기와 농담들을 많이 하기도 했고, 오프라인 활동이 끝나고도 같이 저녁을 먹거나 간단하게 맥주 한잔 하면서 많이 친해질 수 있었습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;del>코드 스쿼드 옆에 있던 피자집이 정말 맛있었어요 🤣&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>이외에도 다른 그룹원이 혼자서 고민하는 모습이 보일 때 &lt;strong>먼저 어려운 점을 물어보고&lt;/strong>, 일반적으로 좋게 여겨지는 방법들이나 저의 개인적인 의견을 드리며 최대한 &lt;strong>도움이 되려고 노력&lt;/strong>했습니다.&lt;/p>
&lt;h3 id="장점">장점&lt;/h3>
&lt;p>확실히 온라인으로 진행할 때 보다 훨씬 많은 도움을 드릴 수 있었습니다.&lt;/p>
&lt;p>친밀감을 높히려 했던 노력 덕뿐인지 오프라인이라는 특성 때문인지 미션을 수행할 때 온라인으로 진행될 때 보다 &lt;strong>훨씬 많은 질문&lt;/strong>들을 받을 수 있었어요&lt;/p>
&lt;p>그리고 혼자 고민하시는 모습이 보일 때 먼저 어떤 문제가 있었는지 물어보고 의견을 말씀 드리는 과정이 반복되며 자연스럽게 &lt;strong>그룹원들간의 의견을 나누는 시간이 마련&lt;/strong>되었습니다.&lt;/p>
&lt;p>이러한 환경으로 인해 혼자 고민하는 시간을 많이 쓰기 보다는 &lt;strong>서로의 의견을 물어보는 환경이 자연스럽게 조성&lt;/strong>되어서 뭔가 뿌듯했습니다😊&lt;/p>
&lt;h3 id="단점">단점&lt;/h3>
&lt;p>온라인으로 진행될 때보다는 시간이 부족했던 문제가 가장 큰 단점이었어요&lt;/p>
&lt;p>아무래도 저 같은 경우는 코드 스쿼드까지 1시간 정도 소요되다보니, &lt;strong>피로도&lt;/strong>가 확실히 있었습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;del>운동을 많이 빼먹었네요😭&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>원래 일과 시작 전 1시간 정도를 다른 그룹원들의 코드를 리뷰하는 루틴을 지키기 위해 더 빠르게 움직여야 했어요&lt;/p>
&lt;p>교육장이 9시 20분 ~ 9시 30분 사이에 열리다보니 아무래도 코드 리뷰에 시간을 조금 덜 쓸수밖에 없었던 부분이 조금 아쉬웠습니다.&lt;/p>
&lt;h2 id="미션">미션&lt;/h2>
&lt;p>미션은 위에서 살짝 언급했던 것 처럼 이전과 유사하지만 조금 더 &lt;strong>저수준&lt;/strong> 까지 직접 구현해야 했습니다.&lt;/p>
&lt;p>&lt;code>http&lt;/code>, &lt;code>express&lt;/code> 같은 모듈 대신 &lt;code>net&lt;/code> 모듈로 직접 &lt;strong>소켓 프로그래밍&lt;/strong>을 해야했고, &lt;code>HTTP&lt;/code> 요청에 대한 처리, 정적 리소스 제공 등을 위한 &lt;strong>웹서버&lt;/strong>(Tomcat 같은), &lt;strong>WAS&lt;/strong>를 직접 구현해야 했어요&lt;/p>
&lt;p>이를 위해 HTTP 요청에 대한 파싱과 여러 미디어 타입 정적 리소스 제공, 리다이렉트와 같은 처리, WAS의 처리 결과(동적 HTML)를 통해 응답을 만들기 위해서 HTTP 문서에 대한 깊이있는 학습과 이를 활용하는 브라우저 동작과 관련된 학습도 필수적이었습니다.&lt;/p>
&lt;p>저도 기억이 가물가물한 내용들이 꽤 있어서 그룹원들과 같이 학습하며 기억을 복기하는데 큰 도움이 되었던 것 같네요&lt;/p>
&lt;h2 id="마스터-클래스">마스터 클래스&lt;/h2>
&lt;p>마스터 클래스도 선택한 &lt;strong>세부 트랙&lt;/strong>에 따라 진행되었습니다.&lt;/p>
&lt;p>&lt;strong>백엔드&lt;/strong>를 선택한 저는 백엔드 마스터이신 호눅스님의 마스터 클래스에 참여하였어요&lt;/p>
&lt;p>마스터 클래스는 미션 구현에 도움이 되는 내용 일부와 데이터베이스에 대한 내용들을 학습할 수 있었습니다.&lt;/p>
&lt;h3 id="데이터베이스">데이터베이스&lt;/h3>
&lt;p>데이터베이스는 이전 직장에서 실무를 할 때는 ORM이나 쿼리 빌더를 이용하지 않았었기 때문에 직접 쿼리를 짜야 했고, 배치 등을 직접 구현하면서 복잡한 쿼리를 많이 만들어야 했기 때문에 개인적인 학습도 꽤 한 편이라고 생각해서 어느정도 자신이 있었는데요&lt;/p>
&lt;p>MySQL에서 데이터의 물리적 저장 구조, 논리적 조인과 물리적 조인, 실행 계획 등 여러 내용을 들으며 개념만 알고 있던 내용들이 머리속에서 정리되는 느낌을 받을 수 있어서 정말 좋았습니다.&lt;/p>
&lt;p>데이터베이스 전문가이신 호눅스님의 이해하기 쉬우면서도 전문적인 강의가 정말 큰 도움이 되었어요!&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>4주 동안의 2차 학습 스프린트도 마무리 되었습니다.&lt;/p>
&lt;p>오프라인이 병행되었다보니 시간이 더 빠르게 지나가는 느낌이었네요&lt;/p>
&lt;p>1주의 인터미션이 지나면 6주간의 팀 프로젝트가 시작됩니다.&lt;/p>
&lt;p>이전 기수들과 달리 이번에는 특정 주제를 순위별로 선택하고 이를 바탕으로 팀원들이 분야별 랜덤 매칭으로 진행된다고해요&lt;/p>
&lt;p>참고로 저는 &lt;strong>실시간 서비스&lt;/strong>를 선택했습니다.&lt;/p>
&lt;p>같이 프로젝트를 진행할 팀원 분들이 벌써 기대가 되네요. 글은 여기서 마치겠습니다.&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다. ☺️&lt;/p></description></item><item><title>멤버십 1차 학습스프린트 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/4/</link><pubDate>Fri, 20 Sep 2024 11:29:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/4/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/4/cover.png" alt="Featured image of post 멤버십 1차 학습스프린트 회고" />&lt;p>추석을 앞두고 4주간의 1차 학습스프린트가 마무리되었습니다🥳&lt;/p>
&lt;p>학습스프린트가 끝나고 1주간 인터미션 기간이 주어졌는데 이 또한 끝나가네요&lt;/p>
&lt;p>인터미션이 끝나기 전에 1차 학습스프린트를 돌아보려합니다.&lt;/p>
&lt;h2 id="데일리-스크럼">데일리 스크럼&lt;/h2>
&lt;p>이전 회고에서 언급했듯 학습스프린트는 2주간 유지되는 &lt;strong>스터디 그룹&lt;/strong>원들과 매일 아침 &lt;strong>데일리 스크럼&lt;/strong>을 진행하게됩니다.&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에서는 개인당 &lt;strong>5분&lt;/strong>정도의 시간이 주어져, 자신이 &lt;strong>어제 작업한 내용&lt;/strong>과 &lt;strong>오늘 작업할 내용&lt;/strong> 같은 미션 진행 상황을 공유하는 시간이었어요&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에 시간이 많이 주어지지 않기 때문에 원활한 진행을 위해 매일 만들어야하는 &lt;strong>PR&lt;/strong>에 &lt;strong>어떤 고민을 통해 어떤 결과물&lt;/strong>을 만들었는지 간략하지만 잘 이해할 수 있도록 작성해야했습니다.&lt;/p>
&lt;p>다양한 분들의 PR을 보면서 흥미로운 부분이 꽤 있었어요&lt;/p>
&lt;p>저는 PR을 간략하게 적는 편 이었는데, 몇몇 분 께서는 자신이 어떤 고민을 했는지, 그 고민을 하기위해 어떤 내용들을 공부했는지, 그리고 그것을 어떻게 적용했는지 너무나 꼼꼼하게 적어주시는 분들도 계셔서 보는 재미도 있었습니다.&lt;/p>
&lt;p>이를 보고 저도 PR을 정말 꼼꼼히 남겨야겠다고 반성하게 되었네요🤣&lt;/p>
&lt;h2 id="그룹-리뷰">그룹 리뷰&lt;/h2>
&lt;p>매일 진행되는 &lt;strong>데일리 스크럼&lt;/strong>에 더해 매주 화요일과 목요일은 &lt;strong>그룹 리뷰&lt;/strong>가 진행되었습니다.&lt;/p>
&lt;p>&lt;strong>데일리 스크럼&lt;/strong>에서는 개인당 &lt;strong>5분&lt;/strong>정도의 시간이 주어져, 자신이 &lt;strong>어제 작업한 내용&lt;/strong>과 &lt;strong>오늘 작업할 내용&lt;/strong> 그리고 &lt;strong>방향성에 대한 약간의 고민&lt;/strong> 정도를 이야기하는 시간이었다면, &lt;strong>그룹 리뷰&lt;/strong>는 서로의 중간 결과물과 학습 내용에 대하여 리뷰하고, 진행 상황에 대한 피드백을 주고받는 시간으로 꽤 많은 시간이 주어졌어요&lt;/p>
&lt;p>저 같은 경우는 매일 아침 다른 그룹원들의 코드를 읽고 PR에 코드리뷰를 남기는 활동을 지속적으로 하고 있었는데, 이 때 다른 그룹원들의 &lt;strong>잘한 점&lt;/strong>, &lt;strong>아쉬운 점&lt;/strong>, &lt;strong>다양한 접근 방법이 나올수 있는 내용&lt;/strong> 등 토론하고 싶은 주제를 기억하고 있다가 그룹 리뷰에서 언급하여 같이 이야기해 보는 시간을 가지려고 했습니다.&lt;/p>
&lt;p>그리고 뒤에서 언급할 &lt;strong>멘토님의 코드리뷰&lt;/strong>에서 그룹원들이 각각 받은 &lt;strong>피드백에 대한 자신의 해석&lt;/strong>이나, 애매하다고 느껴지는 &lt;strong>피드백에 대해 다른 그룹원들의 의견도 나눠보는 시간&lt;/strong>도 참 의미있었네요 😊&lt;/p>
&lt;h2 id="피어세션">피어세션&lt;/h2>
&lt;p>&lt;strong>피어세션&lt;/strong>은 매일 아침에 진행했었던 챌린지 과정의 피어세션과 달리 매주 금요일 오전에 진행된 활동으로, 기존 스터디 그룹원들이 아닌 &lt;strong>새로 배정된 다른 캠퍼님들의 한 주간의 과정을 살펴보고 결과물에 대해 리뷰&lt;/strong>하는 시간이었습니다.&lt;/p>
&lt;p>같은 주제로 미션을 수행하기는 하지만 캠퍼분들 각각 &lt;strong>다른 접근 방법을 시도&lt;/strong>한다는 점과 &lt;strong>지금까지 수행한 작업들을 모두 확인&lt;/strong>해야한다는 점 등 여러 이유로 피어세션을 준비하는 시간이 1시간 정도 별도로 주어졌어요&lt;/p>
&lt;p>피어세션에 참여하시는 캠퍼님들은 그룹원들과 달리 &lt;strong>제 코드를 처음 확인&lt;/strong>하기 때문에 &lt;strong>작업 내용&lt;/strong>과 &lt;strong>과정&lt;/strong>, &lt;strong>흐름&lt;/strong> 등을 쉽게 파악하실 수 있도록 &lt;code>README&lt;/code>에 &lt;strong>한 주간의 작업 내용을 잘 정리&lt;/strong>하고, 매일 남기는 PR에 &lt;strong>어떤 작업을 수행하고 왜 그런 선택을 했는지 잘 드러나도록&lt;/strong> 남기려고 노력했습니다.&lt;/p>
&lt;hr>
&lt;p>피어세션에서 만났던 캠퍼분들 중에는 미션을 착실히 수행하고계신 분들이 많았지만, 일부는 &lt;code>Nest&lt;/code>, &lt;code>React&lt;/code> 같은 것들을 직접 구현해보는 등 자신히 하고싶었던 것을 위해 노력하셨던 분들도 있었어요&lt;/p>
&lt;p>특히 기억에 남는 피어세션은, 한 분은 &lt;code>Nest&lt;/code>를 구현하셨고, 한 분은 &lt;code>express&lt;/code>의 기본적인 기능들을 활용하여 미션을 수행하신 분이 모였던 피어세션이었습니다.&lt;/p>
&lt;p>&lt;code>Nest&lt;/code>를 구현하신 분은 &lt;code>@Controller&lt;/code>, &lt;code>@Service&lt;/code>와 같은 어노테이션 등을 비롯한 여러 편의 기능을 제공하기 위해 굉장히 복잡한 로직들을 구현하신 반면, &lt;code>express&lt;/code>의 기본 기능으로만 미션을 수행하셨던 분은 매우 간결한 로직으로 누구나 쉽게 이해할 수 있는 코드를 만드셨는데, 이 양극단의 코드를 비교하는게 굉장히 흥미로웠네요 😁&lt;/p>
&lt;p>&lt;code>Nest&lt;/code>를 구현하신 분의 작업물에서 복잡한 로직을 통해 만든 편의성으로, 개발자가 &lt;strong>실제로 작성하게 될 영역들이 매우 깔끔해지는 것&lt;/strong>을 보며 감탄했었고,&lt;/p>
&lt;p>&lt;code>express&lt;/code>의 기본 기능으로만 구현하신 분들의 작업물을 보며, &lt;strong>내가 좀 겉멋이 들었나?&lt;/strong>, &lt;strong>내가 작성한 코드는 정말로 필요했던 것일까?&lt;/strong>, &lt;strong>더 간결하게 풀어낼 수는 없었던 것 일까?&lt;/strong> 같은 생각이 들면서 제 자신을 돌아보는 계기가 되었습니다 😌&lt;/p>
&lt;h2 id="그룹-회고">그룹 회고&lt;/h2>
&lt;p>&lt;strong>그룹 회고&lt;/strong>는 매 주 금요일 피어세션이 끝나고 진행된 활동으로 &lt;strong>그룹원들과 한 주간의 그룹 활동에 대해 돌아보는 시간&lt;/strong>이었습니다.&lt;/p>
&lt;p>주로 직전 피어세션에서 &lt;strong>인상깊었던 내용들에 대해 공유하여 그룹원들 끼리도 고민해보는 시간&lt;/strong>과 더 나은 그룹 활동을 위해 각자 그룹 활동간에 &lt;strong>좋았던 점&lt;/strong>, &lt;strong>아쉬웠던 점&lt;/strong>, &lt;strong>느낀 점&lt;/strong> 등에 대해 이야기해보고 그라운드 룰을 다시 조정해보는 시간을 가졌고, 자연스럽게 &lt;strong>새롭게 알게된 내용들에 대해서 공유&lt;/strong>하기도 했어요&lt;/p>
&lt;p>&lt;strong>새롭게 알게된 내용들을 공유하는 시간&lt;/strong>에서 학습했던 내용인 &lt;strong>&amp;ldquo;MySQL에서 UUID를 PK로 사용했을때 성능&amp;rdquo;&lt;/strong> 에 대한 아티클과 &lt;strong>&amp;ldquo;유일한 ID 생성하는 방법&amp;rdquo;&lt;/strong> 에 대한 아티클을 공유하기도 했습니다.&lt;/p>
&lt;hr>
&lt;p>그룹 활동에 대한 &lt;strong>느낀점을 공유하는 시간&lt;/strong>에는 사실 그룹 활동보다는 자신이 부족해서 아쉬웠던 내용들이 주로 언급되었어요&lt;/p>
&lt;p>그래서 저는 다른 그룹원들이 자신감을 가지실 수 있도록 열심히 응원하려고 노력해봤습니다 👊&lt;/p>
&lt;p>그 중 하나는 &lt;strong>&amp;ldquo;미션 관련 이야기를 할 때 자신의 기술적인 부족함 때문에 적극적으로 참여하는게 망설여진다.&amp;rdquo;&lt;/strong> 와 같은 고민을 토로해주신 분이 계셨는데, &lt;strong>&amp;ldquo;정답도 중요하지만 그보다 어떤 생각을 가지고 문제를 접근하는지가 더 중요하고, 이를 통해 더 큰 영감을 얻을 수 있다&amp;rdquo;&lt;/strong> 와 같은 답변을 드렸었는데, 도움이 되었다고 말씀하셔서 뿌듯했었네요 😁&lt;/p>
&lt;h2 id="코드리뷰">코드리뷰&lt;/h2>
&lt;p>챌린지 과정에서는 매일 진행되는 피어세션에서 Gist를 통해 공유된 각자의 결과물을 리뷰했었기 때문에, 매일 아침에 다른 분들의 결과물을 확인했었는데요&lt;/p>
&lt;p>맴버십 과정에서는 매일 수행한 작업에 대해 PR을 남겨야 했고, 남기 PR을 기반으로 코드 리뷰를 진행할 수 있었습니다.&lt;/p>
&lt;p>그래서 각자의 결과물을 리뷰할 시간이 할당되지는 않았았고, &lt;strong>비동기&lt;/strong>적으로 코드리뷰를 각자 진행할 것이 권장되기도 했습니다.&lt;/p>
&lt;p>그래서 저는 챌린지와 마찬가지로 매일 아침 데일리 스크럼 전 다른 그룹원들의 코드를 리뷰하는 시간을 루틴으로 유지하여 PR을 통해 &lt;strong>개선점&lt;/strong>, &lt;strong>잘한점&lt;/strong>, &lt;strong>궁금한점&lt;/strong> 등을 남겼어요&lt;/p>
&lt;h2 id="멘토님의-코드리뷰">멘토님의 코드리뷰&lt;/h2>
&lt;p>스프린트 3주차 부터 멘토님의 코드리뷰가 시작되었습니다.&lt;/p>
&lt;p>멘토님의 코드리뷰는 &lt;strong>정답을 알려주기보다는 정답을 찾아갈 수 있는 코멘트&lt;/strong>들 남겨주셔서 &lt;strong>몰랐던 내용&lt;/strong>을 알아가기도 하고, &lt;strong>깊게 고민하지 않았던 내용들을 조금 더 깊게 고민해보는 계기&lt;/strong>가 되어 개인적으로는 너무 좋았어요&lt;/p>
&lt;p>저희 그룹을 담당해주셨던 멘토님은 현업에서 바닐라 타입스크립트로 프론트엔드 개발을 하고계셨는데, 그래서인지 &lt;strong>타입스크립트를 타입스크립트처럼 활용하는 방법에 대해서 많이 고민해볼 수 있는 코멘트&lt;/strong>를 남겨 주셨습니다.&lt;/p>
&lt;p>일례로 &lt;strong>타입을 추론이 가능하게하는 타입스크립트 코드&lt;/strong>를 작성하는 법, &lt;strong>Narrowing, Assertion을 최소화 하는 법&lt;/strong> 등에 대한 코멘트를 남겨주셔서 개인적으로 학습과 고민을 해볼 수 있었고, 다른 그룹원들과도 같이 이야기 해보기도 했어요 &lt;del>아직 모르는 부분이 많지만&lt;/del>&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>4주간 미션을 수행하면서 시간이 굉장히 빨리 가더라구요! 한게 많이 없다고 생각했는데 돌아보니 생각보다 많은 배움이 있었던 것 같네요 🤣&lt;/p>
&lt;p>다음 주 부터는 이전에 선택했던 더 집중해서 경험하고 싶은 분야에 대한 미션이 주어집니다. (저는 백엔드를 선택했어요)&lt;/p>
&lt;p>미션은 그대로 풀스택으로 진행되지만 선택 분야의 비중을 7:3 정도로 조절된다고해요&lt;/p>
&lt;p>그리고 신청자에 한해서 오프라인으로 활동이 진행되는데, 저는 양재에 있는 &lt;strong>코드 스쿼드&lt;/strong>에서 참여하게 되었습니다. 많이 기대되는군요 ㅎㅎ&lt;/p>
&lt;p>이제 남은 인터미션을 즐기러 가보겠습니다. 끝까지 읽어주셔서 감사합니다 😁&lt;/p></description></item><item><title>멤버십 과정 3주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/3/</link><pubDate>Sun, 08 Sep 2024 17:34:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/3/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/cover.png" alt="Featured image of post 멤버십 과정 3주차 회고" />&lt;p>멤버십 과정 세 번째 주가 마무리 되었습니다. 🥳&lt;/p>
&lt;p>저번주에 언급했던 것 처럼 이번주 부터는 멘토님의 코드리뷰가 시작되었는데, 저희 그룹을 담당해주신 멘토님이 타입스크립트에 대한 경험이 많으셨습니다.&lt;/p>
&lt;p>코드리뷰에서 제가 활용하던 타입스크립트에서 몇 가지 주의할 점을 짚어주셨고 덕분에 큰 도움이 되었어요!&lt;/p>
&lt;p>이러한 부분들을 같이 확인해보면 좋을 것 같습니다.&lt;/p>
&lt;h2 id="타입스크립트에서의-인터페이스">타입스크립트에서의 인터페이스&lt;/h2>
&lt;p>저 같은 경우는 백엔드를 설계할 때 여러 프레임워크들의 장점들을 뽑아 구성해보려고 했었습니다.&lt;/p>
&lt;p>그 중 실제 데이터에 접근이 필요한 부분을 &lt;code>Spring data&lt;/code>를 참고하여 &lt;strong>저장소 패턴(Repository Pattern)&lt;/strong> 을 적용하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img.png"
width="543"
height="190"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_hue156cc0d8f93bfe7bfbcecea2be046a0_11819_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_hue156cc0d8f93bfe7bfbcecea2be046a0_11819_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="저장소 패턴"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="685px"
>&lt;/p>
&lt;p>저장소 패턴은 객체지향 설계에서 &lt;strong>도메인 모델(핵심 비즈니스 로직)&lt;/strong> 과 &lt;strong>데이터 소스&lt;/strong> 사이의 추상화를 통해 &lt;strong>비즈니스 로직과 실제 데이터 저장 처리의 관심사를 분리&lt;/strong>하는 패턴입니다.&lt;/p>
&lt;p>사실 이 자체는 문제가 없었지만 이를 활용하기 위한 코드에 약간의 문제가 있었습니다.&lt;/p>
&lt;p>인터페이스를 구현하도록 하여 서비스 로직에서 활용하도록 했는데, 제가 작성한 코드를 게시글을 의미하는 &lt;code>Post&lt;/code>로 바꾸어 확인해보면 아래와 같습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Post&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">content&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createdAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">updatedAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">PostRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Post&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">PostDummyRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">data&lt;/span>: &lt;span class="kt">Post&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Post&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">??&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">PostService&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">postRepository&lt;/span>: &lt;span class="kt">PostRepository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findPost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">post&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">에 해당하는 글이 없습니다.`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">post&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>언뜻 보면 나쁘지 않아 보이죠? 멘토님은 아래와 같은 코멘트를 남겨주셨어요.&lt;/p>
&lt;blockquote>
&lt;p>이 인터페이스가 타입스크립트 개발 느낌보다는 자바로 개발을 하는거 같다는 느낌을 많이 주네요&lt;br>
타입스크립트에서 이런 인터페이스는 어떤 의미를 가지게 될까요?&lt;/p>
&lt;/blockquote>
&lt;p>그래서 왜 이런 코멘트를 남기셨을까 고민해본결과는 바로 &lt;strong>덕 타이핑&lt;/strong>이었습니다.&lt;/p>
&lt;h3 id="덕-타이핑">덕 타이핑&lt;/h3>
&lt;p>덕 타이핑(duck typing)은 동적 타이핑의 한 종류로, &lt;strong>객체의 변수 및 메소드의 집합이 객체의 타입을 결정&lt;/strong>하는 것을 의미합니다. 아래와 같은 문구는 한번 쯤 들어보셨을거에요&lt;/p>
&lt;blockquote>
&lt;p>만약 어떤 새가 오리처럼 걷고, 헤엄치고, 꽥꽥거리는 소리를 낸다면 나는 그 새를 오리라고 부를 것이다.&lt;/p>
&lt;/blockquote>
&lt;p>타입스크립트도 타입을 덕 타이핑으로 타입을 처리합니다. 그렇다면 제가 작성한 코드는 어떠한 문제가 있었던걸까요? 새로운 예시를 한번 보겠습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Comment&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">postId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">content&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createdAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">updatedAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">CommentRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findByPostId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">postId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span>&lt;span class="err">[]&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">CommentDummyRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">data&lt;/span>: &lt;span class="kt">Post&lt;/span>&lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">comment&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">comment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">??&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">async&lt;/span> &lt;span class="nx">findByPostId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">postId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span>&lt;span class="err">[]&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">comment&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">comment&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">postId&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">postId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위처럼 &lt;code>Comment&lt;/code>라는 도메인 모델이 있다고 가정해보면 아래와 같은 코드는 오류를 발생시키지 않습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span>: &lt;span class="kt">Comment&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">repository&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">CommentDummyRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">PostService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">repository&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이게 바로 덕 타이핑 덕뿐인데요, &lt;code>PostRepository&lt;/code>가 요구하는 구성 요소들을 &lt;code>CommentDummyRepository&lt;/code>가 모두 포함하고 있고, 반환값으로 사용되는 &lt;code>Comment&lt;/code>도 &lt;code>Post&lt;/code>가 요구하는 구성 요소들을 모두 포함하고 있기 때문에 &lt;code>CommentDummyRepository&lt;/code>를 &lt;code>PostRepository&lt;/code>로 보는것이죠&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_1.png"
width="350"
height="350"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_1_hud55745bf13d67a9be94260657be56e3a_36113_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/3/img_1_hud55745bf13d67a9be94260657be56e3a_36113_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="덕 타이핑"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>멘토님이 &lt;strong>자바&lt;/strong>같다고 하신 이유도, 자바였다면 전혀 문제가 없을 코드였기 때문이었겠죠?&lt;/p>
&lt;p>그래서 제가 생각한 근본적인 문제는 &lt;strong>인터페이스에 선언된 메소드가 충분히 서술적이지 않은 것&lt;/strong>이 문제였던 것이었습니다.&lt;/p>
&lt;p>엔티티는 어쩔수없다고 하더라도 리포지토리 인터페이스는 아래와 같이 만든다면 문제를 충분히 예방할 수 있을 것으로 보입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">PostRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findPostById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Post&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">CommentRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findCommentById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="na">null&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">findCommentsByPostId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">postId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Comment&lt;/span>&lt;span class="err">[]&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="no-return-await">no-return-await&lt;/h2>
&lt;p>ESLint에서 제공하는 규칙 중 하나인 &lt;code>no-return-await&lt;/code>는 코드에서 &lt;code>return await&lt;/code>을 사용하는 것을 금지하는 규칙입니다. 저는 사실 아래 예시처럼 &lt;code>await&lt;/code>를 쓰고 있었어요&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">example() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">someAsyncFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>저렇게 &lt;code>return await&lt;/code>를 하지 않으면 &lt;code>Promise&amp;lt;Promise&amp;lt;??&amp;gt;&amp;gt;&lt;/code> 형식으로 반환될 것이라고 생각했었기 때문인데요..😅&lt;/p>
&lt;p>&lt;code>async&lt;/code> 함수는 자동으로 &lt;code>Promise&lt;/code>를 반환하므로, &lt;code>await&lt;/code> 없이도 &lt;code>Promise&lt;/code>가 제대로 처리되는걸 이제야 알았습니다. 그래서 아래와 같은 코드도 동일하게 처리됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">example() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">someAsyncFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>return await&lt;/code>는 일반적으로 추가적인 &lt;code>Promise&lt;/code> 처리 단계를 유발하기 때문에 사용하지 않는 걸 권하고 있었습니다.&lt;/p>
&lt;p>아래와 같은 경우는 &lt;code>return await&lt;/code>가 필요한 경우입니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">example() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">await&lt;/span> &lt;span class="nx">someAsyncFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Error occurred:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="nx">error&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위와 같은 경우는 &lt;code>await return&lt;/code>을 하지 않으면, 로직 실행이 비동기로 처리되기때문에 &lt;code>try...catch&lt;/code> 블록 내에서 에러가 발생할 때 의도대로 처리되지 않습니다.&lt;/p>
&lt;h2 id="타입-추론">타입 추론&lt;/h2>
&lt;p>타입 추론(Type Inference)은 개발자가 명시적으로 타입을 지정하지 않아도 타입스크립트 컴파일러가 변수나 표현식의 타입을 자동으로 추론하는 것을 의미합니다.&lt;/p>
&lt;p>사실 타입스크립트 뿐만 아니라 Go, Kotlin 같은 언어에서도 제공합니다.&lt;/p>
&lt;p>매주 금요일 진행되는 마스터 세션에서는 지원자의 코드를 마스터님이 직접 리뷰해주시는데, 그때 나왔던 주제 중 하나였어요&lt;/p>
&lt;p>결론은 &lt;strong>타입을 적게 쓸수록 좋다.&lt;/strong> 였습니다.&lt;/p>
&lt;p>개인적으로 찾아보니 타입 추론을 잘 활용하면 아래와 같은 장점이 있다고 합니다.&lt;/p>
&lt;ul>
&lt;li>코드 간결성&lt;/li>
&lt;li>개발 생산성 향상
&lt;ul>
&lt;li>개발자가 타입을 일일이 지정하는 수고를 덜 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>조금 더 생각해보니 &lt;strong>타입 추론이 잘 이루어지는 코드&lt;/strong>들은 처리해야할 작업의 시작, 끝 정도만 타입을 명시적으로 지정해도 잘 동작하는 코드이더군요&lt;/p>
&lt;p>그래서 사실 본체는 &lt;strong>타입 추론이 잘 되는 코드를 작성하는 것이 세부사항에 대한 설계, 관심사 분리나 기능 분리가 잘 된 코드&lt;/strong>였던게 아닐까 싶습니다.&lt;/p>
&lt;p>아직 확신은 없지만 타입 추론을 최대한 활용하는 방식으로 구현을 해봐야할 것 같아요 🤣&lt;/p>
&lt;h2 id="의견과-모르는-것">의견과 모르는 것&lt;/h2>
&lt;p>이번 주 그룹 회고에서 한 캠퍼분이 본인의 아쉬운 점으로 아래와 같은 이야기를 하셨습니다.&lt;/p>
&lt;blockquote>
&lt;p>다른 분들의 질문에 대해 잘 몰라서 많은 답변을 해드릴 수 없었던 부분이 아쉬웠어요&lt;/p>
&lt;/blockquote>
&lt;p>그래서 저는 아래와 같은 답변을 드렸어요&lt;/p>
&lt;blockquote>
&lt;p>꼭 알아야만 답변을 할 수 있는걸까요?&lt;br>
답변이 맞고 틀리고는 상관 없이 의견 자체를 공유하는 것이 중요한 것 아닐까요?&lt;/p>
&lt;/blockquote>
&lt;p>돌이켜보면 저도 이런 고민들을 많이 했던 것 같고, 지금도 조금은 하고 있는 것 같아요.&lt;/p>
&lt;p>뭔가 나의 의견이 정답이 아니었으면 큰 잘못을 한 것 같고, 내 답변이 하찮아서 도움이 안되면 창피하기도 하고, 등등 이런 생각들을 주로 했던 것 같습니다.&lt;/p>
&lt;p>그런데 시간이 지나면서 이런 생각들을 많이 하지 않게된 것 같아요&lt;/p>
&lt;hr>
&lt;p>그러한 &lt;strong>첫 번째&lt;/strong> 이유로 실제 일을 해보면서 이미 널리 알려진 방법들이 내가 풀어야하는 문제에 딱 들어맞는 경우는 많이 없었던 것 같습니다.(그래서 어려운 것 이겠지만요 ㅎㅎ)&lt;/p>
&lt;p>그래서 정답에 대한 의견은 거의 들을 수 없었을 뿐더러, 방향성이나 문제에 대한 의견을 많이 들었을 때 그 상황에서 할 수 있는 &lt;strong>최선의 선택&lt;/strong>을 찾을 수 있었던 것 같아요&lt;/p>
&lt;hr>
&lt;p>두 번째 이유로는 개발자는 결국 &lt;strong>문제를 해결하는 사람&lt;/strong>이라는 점 인 것 같습니다.&lt;/p>
&lt;p>어떠한 문제를 해결하려고 할 때 다른 사람들이 같은 문제를 어떻게 해석하는지, 어떤 부분들을 중요하게 생각하는지 와 같은 생각들을 들었을 때 실제로 저의 문제를 바라보는 시야라던가, 문제를 해석하는 근본적인 역량이 향상된다고 느껴졌었기 때문이에요&lt;/p>
&lt;hr>
&lt;p>그래서 저는 다른 사람들이 어떠한 문제에 대해 질문 했을 때, 제가 생각할 수 있는 모든 것을 다 동원해서 같이 고민해주고 있는 것 같아요, 그 사람이 저의 관점을 어떻게 해석하는지도 너무 궁금하거든요&lt;/p>
&lt;p>그래서 결론은 &lt;strong>개인의 의견은 너무나도 소중하고 값진 것 이니까 서로 많이 공유해요&lt;/strong> 였네요😄&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>아직 멘토님의 피드백을 모두 반영하지 못했는데 다음주는 더욱 더 바쁠 것 같습니다.&lt;/p>
&lt;p>다음주까지 끝나면 첫번째 개인 프로젝트가 끝나고 &lt;strong>인터미션&lt;/strong>기간이 주어진다고해요&lt;/p>
&lt;p>이번 주는 할일이 많이 남은 만큼 열심히 불태우고 인터미션 기간에 푹 쉬어야겠습니다.&lt;/p>
&lt;p>한 주 모두 고생 많으셨습니다🔥&lt;/p></description></item><item><title>멤버십 과정 2주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/2/</link><pubDate>Sun, 01 Sep 2024 21:00:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/2/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/cover.png" alt="Featured image of post 멤버십 과정 2주차 회고" />&lt;p>멤버십 과정 두 번째 주가 마무리 되었습니다. 🥳&lt;/p>
&lt;p>이번주는 예상대로 1주차에 만든 결과물에 새로운 기술들을 이용하여 개선하는 미션이 주어졌습니다.&lt;/p>
&lt;p>&lt;strong>프론트엔드&lt;/strong>는 &lt;code>DOM API&lt;/code>, &lt;code>Event&lt;/code>, &lt;code>Fetch API&lt;/code>를 활용하여 클라이언트 영역에서의 동적인 UI로 개선하는 내용이 주어졌고, &lt;strong>백엔드&lt;/strong>는 가상환경에 데이터베이스를 설치하고, 서버에서 연동하는 미션이 주어졌습니다.&lt;/p>
&lt;p>사실 프론트엔드 영역은 처음부터 CSR로 아예 분리해서 진행하고 있었기 때문에 큰 변경은 없었어요, 그래서 리펙토링을 위주로 진행했던 것 같습니다.&lt;/p>
&lt;p>백엔드도 리포지토리를 인터페이스를 통해 잘 분리했었기 때문에 큰 이슈 없이 진행되었어요&lt;/p>
&lt;p>그럼에도 불구하고 새롭게 배운 내용들은 제법 있었는데, 그 내용들을 언급해보면 좋을 것 같아요😁&lt;/p>
&lt;h2 id="프론트엔드">프론트엔드&lt;/h2>
&lt;p>프론트엔드 영역은 이미 언급했던 것 처럼 큰 변경사항은 없었습니다. HTML, CSS 구조를 조금 개선하고, TS 코드들을 조금 개선하였어요&lt;/p>
&lt;p>그 중 가장 큰 개선을 꼽으라면 &lt;strong>이벤트 위임&lt;/strong>(Event Delegation)을 통해 TS 코드를 개선했던 것을 꼽을 수 있을 것 같습니다.&lt;/p>
&lt;h3 id="이벤트-위임">이벤트 위임&lt;/h3>
&lt;p>저는 현업에서 &lt;strong>Vue3&lt;/strong>로 프론트엔드를 개발했었는데요, 그렇기 때문에 &lt;code>v-on&lt;/code>을 이용하여 DOM 요소에 이벤트를 직접 바인딩 하는 방식에 적응되어있었습니다.&lt;/p>
&lt;p>그리고 혼자 사용해봤던 &lt;strong>React&lt;/strong>에서도 &lt;code>onClick&lt;/code> 같은 방식으로 직접 바인딩해줬었어요.&lt;/p>
&lt;p>그래서 이번 &lt;strong>Vanilla TypeScript&lt;/strong>로 개발을 진행하면서도 별 생각없이 &lt;code>&amp;lt;li&amp;gt;&lt;/code> 처럼 반복적으로 들어가는 요소의 &lt;strong>이벤트 등록&lt;/strong>을 각각 바인딩 해주는 방식을 사용했습니다. 아래처럼요!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">renderItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLUListElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$ul&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ul.item-list&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">makeItemElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceChildren&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeItemElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLLIElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;li&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">li&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>그런데 문제는 &lt;strong>Vue&lt;/strong>에서는 동적으로 생성된 DOM 이라고 하더라도 언마운트될 때 자동으로 바인딩 된 이벤트 리스너들이 정리되어 신경 쓸 필요가 없고, &lt;strong>React&lt;/strong>같은 경우는 &lt;strong>Synthetic Event System&lt;/strong>을 통해 최상위 루트 노드에서 모든 이벤트들을 위임받아 각 컴포넌트로 전달하는 방식으로 처리하여 성능상의 이점을 제공한다는 것을 알게 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img.png"
width="840"
height="650"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_hu06827f719d27f9740548ce869145ec8d_92734_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_hu06827f719d27f9740548ce869145ec8d_92734_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Synthetic Event System"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>위 예시처럼 이벤트 위임을 사용하지 않을 경우 몇 가지 문제가 발생할 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>성능 문제&lt;/strong>&lt;/p>
&lt;p>동적으로 생성된 여러 개의 요소에 이벤트 리스너를 개별적으로 추가하면, DOM에 많은 수의 이벤트 리스너가 바인딩됩니다.&lt;/p>
&lt;p>이로 인해 매우 많은 요소가 있을 경우 각각의 리스너가 메모리에 로드되면서 렌더링 속도가 느려지거나 메모리 사용량이 급격히 증가할 수 있습니다.&lt;/p>
&lt;p>또한 이벤트가 발생할 때마다 모든 이벤트 핸들러가 독립적으로동작하므로 성능 저하가 발생할 수도 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>유지보수성 문제&lt;/strong>&lt;/p>
&lt;p>동일한 유형의 이벤트를 처리하기 위해 여러 요소에 유사한 이벤트 핸들러가 중복으로 작성되어 수정이 필요할 때 실수를 유발할 수 있습니다.&lt;/p>
&lt;p>또한 코드의 복잡성을 높히게 될 수 있습니다. 특히 동적으로 요소가 추가, 삭제되는 경우, 각각의 이벤트 핸들러를 적절하게 관리하는 것이 어려워 질 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>그래서 저는 아래와 같은 형식으로 코드들을 개선하였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">renderItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$ul&lt;/span>: &lt;span class="kt">HTMLUListElement&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">items&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">makeItemElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceChildren&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">$items&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// ...items 대신 ...$items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">bindItemListElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">$ul&lt;/span>: &lt;span class="kt">HTMLUListElement&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">HTMLElement&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleClickItemButton&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeItemElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>: &lt;span class="kt">Item&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HTMLLIElement&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;li&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$button&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">classList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;item-btn&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$button&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">$li&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handleClickItemButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="백엔드">백엔드&lt;/h2>
&lt;p>백엔드 미션에서는 위에서 언급했던대로 데이터베이스를 연동해야하는 미션이 주어졌습니다.&lt;/p>
&lt;p>처음 가상 환경으로 리눅스 서버를 구성하고 데이터베이스 서버를 만들었어야 했는데, 마스터이신 &lt;strong>호눅스&lt;/strong>님이 &lt;strong>AWS EC2&lt;/strong>로 해보는 것도 허용하셔서 &lt;strong>EC2&lt;/strong>를 띄워 데이터베이스 서버를 구성하였어요&lt;/p>
&lt;p>이번 미션에서 데이터베이스에 관련하여 새롭게 알게된 점을 공유해보려고합니다.&lt;/p>
&lt;h3 id="외래키-제약조건-설정-문제">외래키 제약조건 설정 문제&lt;/h3>
&lt;p>저는 지금까지 데이터베이스를 설계할 때는 외래키 제약 조건을 표시하지만 실제 데이터베이스에서는 외래키를 설정하지 않는 것이 일반적인 것으로 알고 있었습니다.&lt;/p>
&lt;p>사실 틀린 말은 아닌 것 같아요. 이전 직장에서 제가 활용했던 대부분의 테이블에는 외래키 제약 조건이 설정되어있지 않았고, 몇몇 강의에서도 관련 내용들을 언급합니다.&lt;/p>
&lt;p>이전 직장에서 꽤 큰 개편 프로젝트를 수행하며 기존 테이블을 마이그레이션 했었는데, 이때 DBA 에게 물어봤을 때는 &lt;strong>성능 문제&lt;/strong>와 &lt;strong>작업 편의성&lt;/strong> 등을 이유로 말씀해주셨었습니다.&lt;/p>
&lt;p>그리고 제가 학습했던 책인 &lt;strong>Real MySQL 8.0&lt;/strong>에서도 &lt;code>InnoDB&lt;/code> 스토리지 엔진을 설명하는 부분에서 &lt;strong>&lt;code>외래 키는 데이터베이스 서버 운영의 불편함 때문에 서비스용 데이터베이스에서는 생성하지 않는 경우도 자주 있다.&lt;/code>&lt;/strong> 라는 내용을 언급하고 있습니다.&lt;/p>
&lt;p>그런데 이번 마스터 세션에서 관련 이야기가 나왔고, 조금 다른 의견을 들을 수 있었어요&lt;/p>
&lt;p>&lt;strong>일단 외래키를 사용하지 않아야 한다고 주장하는 이유&lt;/strong>를 조금 더 자세히 살펴보겠습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>성능 문제&lt;/strong>&lt;/p>
&lt;p>외래키 제약조건은 데이터베이스가 데이터 무결성을 유지하기 위해 참조 무결성을 확인해야하므로, 데이터 삽입, 수정, 삭제 시 추가적인 연산(잠금)이 발생하고, 이러한 처리가 성능의 저하를(데드락 등) 발생시킨다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>데이터 마이그레이션&lt;/strong>&lt;/p>
&lt;p>데이터 마이그레이션 작업 중 외래키 제약 조건이 있는 경우, 데이터 삽입 순서에 따라 제약조건 위반이 발생할 수 있기 때문에, 이러한 문제를 피하기 위해 외래키 제약조건을 사용하지 않거나, 일시적으로 비활성화한 후 작업을 수행해야한다.&lt;/p>
&lt;hr>
&lt;p>대표적으로 언급된 두 가지 문제로 인해 어플리케이션단에서의 처리를 통해 외래키 제약 조건 문제를 해소하려고 하는 시도가 많은 것 같습니다.&lt;/p>
&lt;p>두 가지 이유 모두 타당하지만 외래키 제약 조건으로 인해 발생하는 &lt;strong>성능 저하&lt;/strong>는 대부분의 서비스에서는 의미있는 수준은 아니라고 해요&lt;/p>
&lt;p>다만 데이터가 꽤 많이 적재되어있는 상태에서 복잡한 외래키 제약조건이 설정되어있는 컬럼을 수정하는 작업은 위험하고, 비용이 많이 발생하는 작업이기 때문에, 변경이 많이 필요할 수 있는 테이블에는 외래키 제약 조건을 설정하지 않는 것이 타당할 수 있다고 합니다.&lt;/p>
&lt;p>그렇기 때문에 프로젝트가 충분히 안정화되었다면, 이후 제약 조건을 추가하는 것이 좋다는 것이 좋다는 의견이었습니다.&lt;/p>
&lt;hr>
&lt;p>그래서 결론적으로 이야기하면 &lt;strong>&lt;code>외래키 제약조건을 사용하지 않는 것은 국룰은 아니다.&lt;/code>&lt;/strong> &lt;strong>&lt;code>외래키 제약조건을 무분별하게 사용하는 것은 지양하자&lt;/code>&lt;/strong> 정도로 요약할 수 있을 것 같습니다. &lt;del>사실 개인 취향인가 싶어요&lt;/del>&lt;/p>
&lt;h3 id="uuid-성능-문제">UUID 성능 문제&lt;/h3>
&lt;p>이번 데이터 모델을 설계하면서 모든 ID 컬럼은 &lt;strong>UUID&lt;/strong>로 설정했습니다.&lt;/p>
&lt;p>사실 UUID는 생성되는 특징으로 인해 전역적으로 충돌 가능성이 매우 낮은 고유한 ID를 만들 수 있어, 분산 환경에서 많이 사용하게됩니다.&lt;/p>
&lt;p>이번 미션은 RDBMS를 사용하는 것 이었고, RDBMS는 동기화의 어려움으로 인해 마스터 DB를 여러대 두는 방식을 적극적으로 고려하지는 않습니다.&lt;/p>
&lt;p>그래서인지 스터디 그룹원 중 한분이 &lt;code>AUTO_INCREMENT&lt;/code>를 사용하지 않고 UUID를 사용한 이유를 질문해주셨어요. 그래서 저는 아래와같이 답변을 했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>키 생성 처리를 데이터베이스와 분리&lt;/strong>&lt;/p>
&lt;p>일단 저는 키값을 데이터베이스에서 생성한다는 것 자체가 비즈니스 로직과 데이터베이스에 의존의 생긴다고 생각했어요! 이는 추후 데이터베이스를 NoSQL로 변경한다던가 분산 데이터베이스로 전환한다던가 하는 문제에서 비교적 자유로울 수 있습니다.&lt;/p>
&lt;p>&lt;code>AUTO_INCREMENT&lt;/code>가 충돌없는 키 값을 만들어야하는 규칙에서도 자유로울 수 있다고 생각했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>키 생성을 서버가 담당&lt;/strong>&lt;/p>
&lt;p>RDBMS의 &lt;code>AUTO_INCREMENT&lt;/code>를 사용한다는 것은 결국 관련 처리를 위한 자원이 필요하다는 것을 의미해요&lt;/p>
&lt;p>대부분 웹 서버는 HTTP를 활용한 무상태성을 유지하도록 구현되기 때문에 수평 확장이 비교적 쉬운 반면, RDBMS는 동기화의 어려움으로 인해 읽기 작업 외의 기능은 결국 마스터 데이터베이스 1대가 처리하게 됩니다.&lt;/p>
&lt;p>말씀해주신것처럼 &lt;code>AUTO_INCREMENT&lt;/code>를 사용한다면 웹 서버가 관련 처리를 하지 않기 때문에 부하가 덜 발생하는 것 처럼 보이지만, 결과적으로 성능의 병목이되기 쉬운 RDBMS의 부하를 증가 시키게 되는 것이죠&lt;/p>
&lt;p>UUID 생성에는 많은 부하가 발생하지 않고, 웹 서버는 수평적 확장이 쉽기 때문에 많은 처리가 필요하다면 데이터베이스에서 발생하는 부하를 조금이나마 줄일 수 있을 것이라고 생각했어요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>코드 품질&lt;/strong>&lt;/p>
&lt;p>첫 번째와 많이 겹치는 부분이긴한데, 제 백엔드 처리를 보시면 서비스 로직에서 사용자의 요청으로 받은 입력으로 엔티티를 만들어 사용하는 것을 보실 수 있을거에요&lt;/p>
&lt;p>이 때 최초 생성하는 엔티티에 대해서는 UUID를 직접 만들어주고 있는데, &lt;code>AUTO_INCREMENT&lt;/code>를 사용하게되면 RDBMS에서 값을 생성해주기 전 까지는 id 값을 알 수 없기 때문에 해당 값에 null을 허용해야한다는 문제? 도 있다고 생각했어요&lt;/p>
&lt;p>&lt;code>null&lt;/code> 허용하게 되었을 때 발생할 수 있는 문제들과 &lt;code>null&lt;/code>을 처리해야함으로 인해 만들어지는 비즈니스 로직, 그리고 &lt;code>null&lt;/code>로 인한 코드 오염을 예방하기 위해 조금 더 엄격한 타입을 사용하려는 의도도 있었습니다.&lt;/p>
&lt;hr>
&lt;p>이러한 이유를 들어서 설명했는데 작업하다보니 두 번째 이유인 &lt;strong>키 생성을 서버가 담당하여 RDBMS의 부하를 조금이나마 덜겠다.&lt;/strong> 는 이유는 틀릴수도 있지 않을까라는 생각을 하게 되었습니다.&lt;/p>
&lt;h4 id="mysql의-pk">MySQL의 PK&lt;/h4>
&lt;p>MySQL의 InnoDB 스토리지 엔진을 사용하게되면, 모든 테이블은 기본적으로 &lt;strong>프라이머리 키&lt;/strong>를 기준으로 &lt;strong>클러스터링&lt;/strong>되어 저장됩니다.&lt;/p>
&lt;p>&lt;strong>PK&lt;/strong>를 B-Tree 계열 자료 구조를 통해 값의 순서대로 디스크에 저장하게되고, 모든 세컨더리 인덱스는 레코드의 주소 대신 프라이머리의 키 값을 논리적은 주소로 사용하게되어요&lt;/p>
&lt;p>이러한 특성 때문에 충돌 가능성이 지극히 낮은 랜덤한 값을 만들어내는 &lt;code>UUID v4&lt;/code>로 PK로 설정하면, 성능의 저하가 발생할 수 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2.png"
width="926"
height="657"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2_hu4c15cba2b4aacfb7cc2a03a3c364cd6f_50081_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_2_hu4c15cba2b4aacfb7cc2a03a3c364cd6f_50081_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="v4 - Random 포함"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;br>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1.png"
width="926"
height="657"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1_hu9678aa1d8eaa8f3bbabd1ff9874b8021_56627_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_1_hu9678aa1d8eaa8f3bbabd1ff9874b8021_56627_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="v4 - Random 제외"
class="gallery-image"
data-flex-grow="140"
data-flex-basis="338px"
>&lt;/p>
&lt;p>위 그래프는 배치당 100,000건의 데이터를 &lt;code>INSERT&lt;/code>하는 쿼리에서 성능 차이를 보여줍니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3.png"
width="885"
height="588"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3_hu7772b5810b6ad334b763624da5431ad0_25600_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/2/img_3_hu7772b5810b6ad334b763624da5431ad0_25600_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="테스트가 실행되는 데 걸린 시간"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>극단적인 상황이긴 하지만, 히스토그램을 살펴보면 &lt;code>AUTO_INCREMENT&lt;/code>에 비해서 &lt;code>UUID v4&lt;/code>가 성능이 크게 떨어지는 것을 볼 수 있습니다.&lt;/p>
&lt;p>그래서 &lt;strong>데이터베이스의 부하를 줄인다.&lt;/strong> 는 말은 틀렸다고 볼 수 있을 것 같습니다.&lt;/p>
&lt;p>물론 이 그래프의 출처에서는 &lt;code>Sequential UUID v4&lt;/code>를 사용했을 경우 성능이 의미있는 수준의 차이는 아니기 때문에 사용할 것을 권하고는 있습니다.🤣&lt;/p>
&lt;h4 id="mysql의-uuid-처리-방식">MySQL의 UUID 처리 방식&lt;/h4>
&lt;p>MySQL은 컬럼 타입으로 UUID를 제공하고 있지는 않습니다. 그래서 사용하려면 몇가지 절차가 필요합니다.&lt;/p>
&lt;p>아래는 테이블을 생성하는 예시입니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>UUID를 &lt;code>CHAR(36)&lt;/code> 형식으로 사용&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">CHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">36&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID&lt;/span>&lt;span class="p">()),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TIMESTAMP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CURRENT_TIMESTAMP&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UUID를 생성하는 함수는 존재하지만 컬럼 타입으로는 존재하지 않기 때문에, &lt;code>CHAR(36)&lt;/code>으로 지정한 모습입니다.&lt;/p>
&lt;p>여기에서 컬럼의 크기를 작게 만드는 방법도 적용 가능해요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>UUID를 &lt;code>BINARY(16)&lt;/code> 형식으로 사용&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">BINARY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID_TO_BIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UUID&lt;/span>&lt;span class="p">())),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">VARCHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NULL&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TIMESTAMP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">DEFAULT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CURRENT_TIMESTAMP&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UUID를 &lt;code>BINARY(16)&lt;/code>으로 선언하고, 저장할 떼 UUID를 &lt;code>BINARY&lt;/code>로 변환하여 저장하는 방법입니다.&lt;/p>
&lt;p>성능을 테스트하지는 않았지만, 함수로 인한 처리가 필요하다는 부분이 조금 꺼림직하더라구요😅&lt;/p>
&lt;hr>
&lt;p>위와 같이 &lt;code>BINARY(16)&lt;/code>으로 선언했다면, 읽어올때도 변환이 필요하게됩니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">BIN_TO_UUID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">email&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">created_at&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>UUID_TO_BIN&lt;/code>과 반대로 &lt;code>BIN_TO_UUID&lt;/code>를 써서 변환해줘야해요&lt;/p>
&lt;hr>
&lt;p>물론 UUID를 애플리케이션 단에서 생성하고있고, 애플리케이션 단에서 변환하는 처리가 들어가면 문제가 작아질 것 같지만 그래도 뭔가&amp;hellip; 좀 불편한 느낌은 지울 수 없는 것 같아요🥲&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>이번주는 생각보다 많은 내용들을 배워가는 것 같아요.&lt;/p>
&lt;p>책들로 학습했던 내용들을 저의 코드에 반영해보려고하니 여러 다른 것들도 알 수 있게 되어 뜻 깊은 것 같습니다.&lt;/p>
&lt;p>다음주 부터는 멘토님이 붙어 직접 코드리뷰를 해주신다고 하는군요! 그리고 어떤 미션들이 나올까 정말 기대됩니다.&lt;/p>
&lt;p>또 2주간 함께했던 스터디 그룹원들과도 헤어지고 새로운 스터디 그룹원들을 만나는데 어떤 분들일지 기대되네요&lt;/p>
&lt;p>한 주간 모두 고생 많으셨습니다. 다음주도 최선을 다해봐요🔥&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다.😊&lt;/p></description></item><item><title>멤버십 과정 1주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/membership/1/</link><pubDate>Sun, 25 Aug 2024 21:00:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/membership/1/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/cover.png" alt="Featured image of post 멤버십 과정 1주차 회고" />&lt;p>멤버십 과정 첫 주가 마무리 되었습니다. 🥳&lt;/p>
&lt;p>멤버십 과정은 실무형 프로젝트를 반복 수행하며 &lt;strong>도메인 지식&lt;/strong>과 &lt;strong>기술&lt;/strong>을 학습하는 &lt;strong>학습 스프린트&lt;/strong> 8주, &lt;strong>팀&lt;/strong>을 이뤄 기술적으로 완성도 있는 &lt;strong>서비스&lt;/strong>를 만드는 &lt;strong>그룹프로젝트&lt;/strong> 6주로 구성되어 있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img.png"
width="660"
height="1043"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_hu1befaeec4069fafd4d6776d0ba2f8324_93826_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_hu1befaeec4069fafd4d6776d0ba2f8324_93826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="멤버십 과정"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;p>첫 4주는 &lt;strong>기본적으로 알아야하는 도메인 지식과 기술을 모두 활용&lt;/strong>하여 서비스를 만들며 학습하고, 이후 4주는 조금 더 알고 싶은 도메인을 선택하여 더 깊게 학습해보는 과정이 기다리고 있습니다.&lt;/p>
&lt;p>그래서 첫 주는 가장 기본적인 형태의 웹 서비스를 바닐라로 만들어 보는 미션이 주어졌어요&lt;/p>
&lt;p>아마 기능들이 추가되고, 기존 기능을 개선해보는 미션이 주어지며 점점 더 완성도 높은 서비스로 바꿔가는 흐름으로 진행될 것 같습니다.&lt;/p>
&lt;h2 id="챌린지와-다른점">챌린지와 다른점&lt;/h2>
&lt;p>멤버십 과정은 챌린지 과정과는 추구하는 방향은 같지만 진행되는 방식이 조금 달랐습니다.&lt;/p>
&lt;p>훨씬 현업과 같은 환경으로 프로젝트를 수행하며 개발에 필요한 내용들을 스스로 학습 방식으로 진행되었어요&lt;/p>
&lt;h3 id="데일리-스크럼과-피어세션">데일리 스크럼과 피어세션&lt;/h3>
&lt;p>&lt;strong>학습 스프린트&lt;/strong>라는 단어를 보고 눈치 채셨을수도 있을 것 같은데요!&lt;/p>
&lt;p>챌린지 과정에서는 매일 동료들의 피드백을 받고, 서로의 생각을 공유해보는 피어세션을 가졌다면, 멤버십 과정의 &lt;strong>학습 스프린트&lt;/strong>에서는 애자일 방법론 중 하나인 스크럼을 진행하듯 &lt;strong>데일리 스크럼&lt;/strong>을 진행합니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1.png"
width="720"
height="416"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1_hu81dea2dde4003a9de1affb998ffda14f_161826_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_1_hu81dea2dde4003a9de1affb998ffda14f_161826_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="스크럼"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="415px"
>&lt;/p>
&lt;p>챌린지 과정의 피어세션과는 달리 스터디 그룹의 구성원이 2주간 같이 학습한다는 점도 다른 부분이네요&lt;/p>
&lt;p>&lt;strong>멤버십 과정의 피어세션&lt;/strong>은 &lt;strong>매주 금요일 아침 3시간&lt;/strong> 동안 &lt;strong>1번만&lt;/strong> 진행하게됩니다.&lt;/p>
&lt;p>데일리 스크럼은 30분 정도 짧은 시간동안 &lt;strong>어제 수행한 작업 내용&lt;/strong>과 &lt;strong>오늘 수행할 작업내용&lt;/strong> 그리고 하면서 발생했던 문제들을 공유하는 시간이었어요&lt;/p>
&lt;p>데일리 스크럼에서 그룹원들의 애로사항에 대해 방향성을 제시해주려고 노력했는데, 도움이 많이 되셨다고 말씀해주셔서 뿌듯했습니다 🤩&lt;/p>
&lt;h3 id="pr과-코드리뷰">PR과 코드리뷰&lt;/h3>
&lt;p>챌린지 과정에서는 당일 오전 9시까지 제출한 결과물을 바탕으로 어느정도 구현했는지, 잘한점, 개선할 점 등을 찾아 피어세션에 공유하였다면, 멤버십 과정에서는 1일 1PR을 만들고 자정에 자동으로 머지되는 방식이었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2.png"
width="1200"
height="662"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2_hu2d7aa351f7187e8bceef60dfdec2312c_42601_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_2_hu2d7aa351f7187e8bceef60dfdec2312c_42601_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Pull Request"
class="gallery-image"
data-flex-grow="181"
data-flex-basis="435px"
>&lt;/p>
&lt;p>PR을 남길 때 어떤 부분을 작업했는지, 어떤 부분들을 학습했는지, 어떤 부분에서 고민이 있었고 어떻게 해결하였는지 꼭 남겨야 했습니다.&lt;/p>
&lt;p>그리고 이 PR을 기반으로 시간이 날 때마다 각자 알아서 비동기적으로 코드 리뷰를 진행하는 방향으로 가이드 되었어요&lt;/p>
&lt;p>저는 평균적으로 &lt;strong>매일 아침 9시부터 데일리 스크럼 전 까지&lt;/strong> 그룹원들의 코드를 확인하고 코멘트를 남기려 노력했습니다.&lt;/p>
&lt;blockquote>
&lt;p>퇴사 전에는 출근하고 오전 동안에는 VOC를 확인 후에 코드리뷰하는 것이 루틴이었는데, 오랜만에 출근해서 일하는 느낌이었네요😂&lt;/p>
&lt;/blockquote>
&lt;h3 id="미션">미션&lt;/h3>
&lt;p>위에서 언급한 것 처럼 조금 더 실무에 가까운 미션들이 주어졌습니다.&lt;/p>
&lt;p>Figma 산출물을 직접 분석하고 프로젝트를 설계해야 했었네요&lt;/p>
&lt;blockquote>
&lt;p>풀스택 개발자로 일 할때는 퍼블리셔 분들이 계셔서 Figma를 볼 일이 잘 없었는데 반가웠습니다😄&lt;/p>
&lt;/blockquote>
&lt;p>매주 월요일에 미션이 공개되는데, 월요일 PR에는 &lt;strong>나만의 주간 계획서&lt;/strong>를 꼭 포함시켜야 한다는 가이드가 있었어요&lt;/p>
&lt;p>현업에서는 WBS를 작성했겠지만 조금 과한 것 같아 &lt;code>mermaid&lt;/code>를 이용해 &lt;code>gantt&lt;/code> 차트를 일 별 작업에 맞추어 그려 주간 계획서를 만들어 봤습니다.&lt;/p>
&lt;blockquote>
&lt;p>이러한 부분도 협업과 매우 유사하다고 느껴졌어요 ㅎㅎ&lt;/p>
&lt;/blockquote>
&lt;p>이렇게 세운 계획에 맞추어 자신만의 속도로 미션을 수행하면 되었습니다.&lt;/p>
&lt;h2 id="학습-내용">학습 내용&lt;/h2>
&lt;p>첫 4주는 풀스택 과정인 만큼 프론트엔드와 백엔드 모두 구현해야 했습니다.&lt;/p>
&lt;p>어떤 내용인지는 비밀이지만🤫 &lt;strong>express&lt;/strong>와 &lt;strong>템플릿 엔진&lt;/strong>, &lt;strong>Vanilla JS&lt;/strong>를 이용하는 고전적인 방식의 &lt;strong>SSR&lt;/strong>로 만들어 보는 것이 목표였습니다.&lt;del>저는 목표대로 안했네요&lt;/del>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3.png"
width="435"
height="157"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3_hudb88119dd717241f9061b504e1bd0d00_24570_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_3_hudb88119dd717241f9061b504e1bd0d00_24570_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="express"
class="gallery-image"
data-flex-grow="277"
data-flex-basis="664px"
>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8.png"
width="299"
height="168"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8_huf83071bd05fabec43e8d5e1101b604b5_4861_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_8_huf83071bd05fabec43e8d5e1101b604b5_4861_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TypeScript"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="427px"
>&lt;/p>
&lt;p>Figma와 언어 정도를 제외하면 큰 제약이 없어 굉장한 자유도가 주어졌어요&lt;/p>
&lt;p>저는 &lt;strong>PHP&lt;/strong> 백엔드에 &lt;strong>jQuery&lt;/strong>를 이용하는 레거시를 운영했었기 때문에 고전적인 방식의 SSR을 구현하는 데 익숙해서 색다르게 &lt;strong>Vanilla TS&lt;/strong>를 활용한 &lt;strong>SPA&lt;/strong>를 시도했습니다.&lt;/p>
&lt;h3 id="프론트엔드">프론트엔드&lt;/h3>
&lt;p>&lt;strong>HTML/CSS&lt;/strong>&lt;/p>
&lt;p>일단 직접 HTML, CSS를 이용하여 UI를 구현해야 했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5.png"
width="792"
height="612"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5_hud1b24fd2279ceb30e07ec48a1e0b1e8b_31306_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_5_hud1b24fd2279ceb30e07ec48a1e0b1e8b_31306_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="HTML, CSS"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;p>사실 저는 &lt;strong>UI 개발 인턴&lt;/strong>을 경험했기 때문에 마크업이 익숙한 편 이었는데&amp;hellip;&lt;/p>
&lt;p>풀스택 개발자로 일할 때는 마크업을 직접 구현하지 않아서 그런지 오랜만에 하려니 처음엔 조금 어색하더라구요🥲&lt;del>하지만 금방 익숙해졌어요&lt;/del>&lt;/p>
&lt;p>적응하는 데 시간이 조금 더 필요했던 부분은 &lt;strong>Floxbox&lt;/strong> 레이아웃이었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6.png"
width="325"
height="200"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6_hu095e62d0763cda11e453936824cdf63c_5283_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_6_hu095e62d0763cda11e453936824cdf63c_5283_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="CSS FLEXBOX"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="390px"
>&lt;/p>
&lt;p>이전 &lt;strong>UI 개발 인턴&lt;/strong>에서는 &lt;strong>IE 8&lt;/strong> 대응을 기본으로 학습했기 때문에 &lt;code>float&lt;/code>에 더 익숙했기 때문인데요&lt;/p>
&lt;p>Figma도 박스 모델을 기준이 아닌 Flexbox을 기준으로 만들어져 있었습니다.&lt;/p>
&lt;p>Flexbox에 익숙해지고 나서야 Figma를 제대로 이해할 수 있었네요&amp;hellip;&lt;/p>
&lt;p>IE8 대응할 때 사용하지 않던 CSS 변수, 함수등이 적극적으로 사용되어 있어서 처음엔 많이 혼란스러웠습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Vanilla TS&lt;/strong>&lt;/p>
&lt;p>바닐라 타입스크립트로 SPA 방식을 활용하기 위해 &lt;strong>Vite&lt;/strong>를 이용해 개발 환경을 구성하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7.png"
width="1200"
height="589"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7_hub81d93aaf499e50c31d82ce55491e085_214787_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_7_hub81d93aaf499e50c31d82ce55491e085_214787_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Vite"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>Vite 같은 경우 현업에서 &lt;strong>Vue3&lt;/strong>를 이용하여 프론트엔드 개발할 때 좋았던 경험이 있었고, &lt;strong>Vanilla TS&lt;/strong> 환경을 쉽게 만들 수 있도록 제공해줘서 활용해봤습니다.&lt;/p>
&lt;h3 id="백엔드">백엔드&lt;/h3>
&lt;p>express를 활용하여 서버를 구성해야했습니다.&lt;del>마스터인 호눅스님이 처음에는 node http로 구현하는 것을 고려하셨다고 하네요&lt;/del>&lt;/p>
&lt;p>저는 &lt;strong>타입스크립트&lt;/strong>를 활용하여 프로젝트를 구성했는데, 자바스크립트의 &lt;strong>자유로움을 제한&lt;/strong>하고, &lt;strong>타입의 장점&lt;/strong>을 취하기 위해서였어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9.png"
width="1127"
height="843"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_9_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="레이어드 아키텍처"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>이를 최대한 활용하기 위해 &lt;strong>레이어드 아키텍처&lt;/strong>와 &lt;strong>DI&lt;/strong>를 적극적으로 활용하여 서버를 구성하였습니다.&lt;/p>
&lt;p>express에서 라우터를 사용하는 구조가 &lt;code>Laravel&lt;/code>, &lt;code>Ruby on Rails&lt;/code>와 비슷하다고 느껴서 이를 참고하여 아키텍처를 구성해봤어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10.png"
width="2200"
height="1100"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10_huf6da5d764d39438817b888350c776b1d_196442_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_10_huf6da5d764d39438817b888350c776b1d_196442_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Laravel"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>
&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11.png"
width="366"
height="138"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11_hud750c3d05a262006ab0b0b0a5c7abbcf_6176_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/membership/1/img_11_hud750c3d05a262006ab0b0b0a5c7abbcf_6176_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Ruby on Rails"
class="gallery-image"
data-flex-grow="265"
data-flex-basis="636px"
>&lt;/p>
&lt;p>처음에는 &lt;strong>데이터베이스&lt;/strong>를 절대 활용하지 말고 &lt;strong>목업 데이터&lt;/strong>를 활용해서 개발하라는 제약 사항이 있었습니다.&lt;/p>
&lt;p>그래서 저는 &lt;code>Spring Data&lt;/code>를 참고하여 Repository(Model)을 &lt;strong>인터페이스&lt;/strong>로 구현하고, 더미 데이터를 주입받은 &lt;code>Repository&lt;/code>를 구현하여 이후 데이터베이스 연결을 쉽게 적용할 수 있도록 대응해봤습니다.&lt;/p>
&lt;h2 id="아쉬웠던-점">아쉬웠던 점&lt;/h2>
&lt;h3 id="테스트-코드">테스트 코드&lt;/h3>
&lt;p>챌린지 과정에서는 TDD 활용하여 미션들을 수행하려했었는데, 이번주 미션에서는 TDD는 커녕 테스트 코드도 작성하지 않았습니다 😅&lt;/p>
&lt;p>백엔드 코드는 더미 데이터를 활용하는 단순한 처리였기 때문에 굳이 붙여야 하나? 라는 생각이 들었던 것 같고, 프론트엔드 코드는 처음 고전적인 방식의 SSR에서 SPA로 넘어가는 과정에서 구조 변경이 잦아 마지막 날에야 설계가 확정이 되었습니다.&lt;/p>
&lt;p>그리고 FE쪽은 어떻게 테스트를 해야할 지 감이 안오더군요 🥲&lt;/p>
&lt;p>이번주에 설계가 확정된 만큼 다음주에는 TDD를 시도해 볼 수는 있을 것 같습니다. TTD 까지는 아니더라도 테스트 코드를 어떻게 붙여야할 지 고민을 많이 해보게될 것 같아요 🙃&lt;/p>
&lt;h3 id="커뮤니티-활동">커뮤니티 활동&lt;/h3>
&lt;p>챌린지 과정에서는 &lt;code>Slack&lt;/code>에 올라오는 질문이나 의견에 답변을 많이 하려고 노력했었는데, 프론트 개발이 들어가서 그런지 모니터를 Slack에 할당할 수 없어 관심을 많이 못 줬던 것 같습니다.&lt;del>변명&lt;/del>&lt;/p>
&lt;p>다음주에는 &lt;code>Slack&lt;/code>에 조금 더 주의를 기울이려고 의식적으로 노력해봐야겠어요🔥&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>데일리 스크럼, 그룹 리뷰, 피어 세션, 코드리뷰에서 제가 아는 모든 것을 공유하려고 열심히 노력했는데 다른 분들에게 도움이 되었을지 궁금하네요&lt;/p>
&lt;p>그룹끼리 하는 활동을 넘어 다른 분들에게도 긍정적인 영향을 주고 영감을 주기 위해 더 많은 노력이 필요할 것 같습니다.&lt;/p>
&lt;p>남은 기간도 끝까지 모두 화이팅~~~🔥🔥🔥&lt;/p></description></item><item><title>부스트캠프 웹・모바일 9기 챌린지까지 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/reason/</link><pubDate>Tue, 13 Aug 2024 13:45:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/reason/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/cover.png" alt="Featured image of post 부스트캠프 웹・모바일 9기 챌린지까지 회고" />&lt;p>부스트캠프 웹·모바일 9기 &lt;strong>챌린지&lt;/strong>과정이 8월 9일로써 마무리 되었습니다👏👏👏&lt;/p>
&lt;p>6월 24일 시작된 &lt;strong>베이직&lt;/strong>부터 참여했으니 거의 2개월 정도의 시간이 정신없이 흘러갔네요&lt;/p>
&lt;p>&lt;a class="link" href="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/" >&lt;strong>챌린지 1주차 회고&lt;/strong>&lt;/a>를 보시면 아시겠지만 저는 &lt;strong>부스트캠프 웹·모바일 5기 챌린지 과정&lt;/strong>을 수료했습니다. 그리고 이름 들으면 대부분 아실만한 중견 서비스 기업에서 2년 조금 안되는 경력도 있어요&lt;/p>
&lt;p>그래서인지 주변 사람들에게 말했을 때는 &amp;ldquo;&lt;strong>너 이미 꽤 하잖아? 부트캠프에 다시 갈 필요가 있어?&lt;/strong>&amp;rdquo; 라는 반응이 주 였던 것 같고, 1주차 그룹회고에서 수료생임을 밝혔을 때는 &amp;ldquo;&lt;strong>혹시.. 굳이 다시 하신 이유를 물어봐도 괜찮을까요?&lt;/strong>&amp;rdquo; 라는 반응이 있었어요.&lt;/p>
&lt;p>그래서 이번 회고에서 &lt;strong>어떤 부분이 좋았었는지&lt;/strong>, &lt;strong>왜 부스트캠프를 다시 선택했는지&lt;/strong>, &lt;strong>다시 참여했어도 성장했는지&lt;/strong> 등을 함께 남기면, 다음 참여하실 분들에게 큰 도움이 될 것 같아 글을 남깁니다.&lt;/p>
&lt;h2 id="부캠를-통해-얻을-수-있었던-것들">부캠를 통해 얻을 수 있었던 것들&lt;/h2>
&lt;p>부스트캠프를 통해 단기간에 빠른 &lt;strong>역량 향상&lt;/strong>을 할 수 있었어요, 하지만 개발 역량 향상은 부캠에서 얻을 수 있는 것들 중에 &lt;strong>가장 사소한 부분&lt;/strong>입니다.&lt;/p>
&lt;p>저 같은 경우는 부스트캠프 웹·모바일 5기 &lt;strong>챌린지&lt;/strong>과정을 수료한 직후 보다, 현업에서 업무를 수행하며 좋은 경험이었다는 것을 실감할 수 있었던 것 같아요!&lt;/p>
&lt;p>챌린지 과정에서의 어떤 부분들이 저에게 큰 자산이 되었는지 말씀드려보면 좋을 것 같습니다😀&lt;/p>
&lt;h3 id="인식의-부재와-우매함의-봉우리">인식의 부재와 우매함의 봉우리&lt;/h3>
&lt;p>필립 G.아모어가 집필한 &lt;strong>The Laws Of Software Process&lt;/strong>라는 책에서 무지의 다섯 가지 단계에 대해서 언급하는데&lt;/p>
&lt;p>소프트웨어 전문가들이 자신이 알고 있는 것과 알지 못하는 것을 이해하는 지표로 사용할 것을 권하고 있습니다.&lt;/p>
&lt;ul>
&lt;li>0 단계: &lt;strong>무지의 부재&lt;/strong>
&lt;ul>
&lt;li>어떤 것을 알고 있음을 증명할 수 있는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1 단계: &lt;strong>지식의 부재&lt;/strong>
&lt;ul>
&lt;li>어떤 것을 알지 못하는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>2 단계: &lt;strong>인식의 부재&lt;/strong>
&lt;ul>
&lt;li>어떤 것을 알지 못한다는 그 자체를 모르는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>3 단계: &lt;strong>효율적인 프로세스의 결여&lt;/strong>
&lt;ul>
&lt;li>무언가를 모든다는 사실을 알지 못한다는 것을 밝혀낼 적절하고 효과적인 방법이 없는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>4 단계: &lt;strong>메타무지&lt;/strong>
&lt;ul>
&lt;li>무지의 5단계에 관해 알지 못하는 상태&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>저는 이런 무지의 단계를 보며 &lt;strong>더닝 크루거 효과&lt;/strong>(인지 편향 그래프)가 같이 떠올랐어요&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_2.png"
width="1024"
height="852"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_2_hu61037d9faac5eab647ba6b332936daa8_265432_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_2_hu61037d9faac5eab647ba6b332936daa8_265432_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="더닝 크루거 효과"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>자신이 가능 능력에 비해 자신의 능력을 과대평가&lt;/li>
&lt;li>다른 사람의 능력을 알아보지 못함&lt;/li>
&lt;li>자신의 능력부족으로 직면하는 어려움에 대한 인식저하&lt;/li>
&lt;li>깨달음과 지식의 증가를 통해 능력이 증가한 후 자신의 능력부족을 인지, 인정&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>더닝 크루거 효과는 &lt;strong>우매함의 봉우리&lt;/strong>(mount stupid)로 유명한데요, &lt;strong>기존에 알고 있는 것이 사실과 다르거나 틀리다는 것을 인지하게 되면서 겸손한 자세로 배우려는 태도를 갖게 된다는 것&lt;/strong>을 설명합니다.&lt;/p>
&lt;hr>
&lt;p>부캠에 입과하는 대부분 캠퍼분들은 &lt;strong>학교에서 꽤 잘하는&lt;/strong>, &lt;strong>동아리 에이스&lt;/strong> 등 각자 본인 역량에 &lt;strong>자부심&lt;/strong>이 있으셨을거에요&lt;/p>
&lt;p>저 같은 경우 이러한 자부심은 5단계 무지 중 2단계인 &lt;strong>인식의 부재&lt;/strong>가 바탕이 되었었는데요&lt;/p>
&lt;p>그러한 이유로 각자 &lt;del>한따까리&lt;/del> 잘 하시던 분들이 만들어낸 &lt;strong>각자 다르게 잘한 결과물&lt;/strong>들을 통해 &lt;strong>문제를 한번에 많이 인식&lt;/strong>하게되고, &lt;strong>절망의 계곡&lt;/strong>으로 빠르게 떨어지게됩니다🎢&lt;/p>
&lt;blockquote>
&lt;p>아는만큼 보인다는 말의 뜻을 알게됩니다😂&lt;/p>
&lt;/blockquote>
&lt;p>이러한 부분은 주니어라면 언젠간 꼭 느끼게 되는 경험인데, 이후 생각해보니 &lt;strong>빨리 경험해서 오히려 좋아&lt;/strong>!라는 생각이 들더라구요&lt;/p>
&lt;p>남들보다 빠르게 &lt;strong>깨달음의 오르막&lt;/strong>을 오르게되며, &lt;strong>겸손&lt;/strong>해지는 것은 물론이고 &lt;strong>다른 사람들의 의견을 존중할 수 밖에 없게 되어버립니다&lt;/strong>.&lt;/p>
&lt;h3 id="좋은-결과물에-대한-기준">좋은 결과물에 대한 기준&lt;/h3>
&lt;p>부스트캠프 챌린지에서의 경험이 없었다면, 아마도&amp;hellip; 개발자로 업무를 수행하면서 길을 잃고 해맸을 것 같다는 생각을 많이 했었어요&lt;/p>
&lt;p>이러한 생각을 하게 되었던 이유는 &lt;strong>개발자가 만들어내는 결과물의 품질은 중요하지 않다&lt;/strong>고 생각하는 환경이 훨씬 더 많다고 느껴졌기 때문입니다.&lt;/p>
&lt;p>이로 인해 조직에서 정의하는 좋은 개발자의 기준도 &lt;strong>이상적인 개발자의 기준&lt;/strong>과는 생각보다 많은 차이가 있었어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_3.png"
width="2560"
height="1920"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_3_hu6aaef46727c3eb7bf840a170de427f50_13972357_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_3_hu6aaef46727c3eb7bf840a170de427f50_13972357_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="나침반"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>정말 아쉽게도 &lt;strong>기술을 중요하게 생각하지 않는(말로만 중요하다고 하는, 기준이 낮은)&lt;/strong> 회사들이 정말 많습니다.&lt;/p>
&lt;p>&lt;strong>클린코드&lt;/strong>와 같은 여러 책 들에서도 언급되는 내용이지만, 이러한 회사들은 대부분 무리한 일정으로 결과물을 만들어내길 원하고 이러한 과정이 반복되며 악순환이 발생합니다.&lt;/p>
&lt;ul>
&lt;li>사실 서류상으로 책임을 회피을 하기 위해 그러는 것 같다고 느껴지기도 했어요&lt;/li>
&lt;/ul>
&lt;p>이런 환경이 고착화되면 굉장히 많은 문제가 발생하지만, 그 중에서도 &lt;strong>품질에 대한 기준이 없어지거나 왜곡되는 현상&lt;/strong>이 신입 개발자에게 가장 치명적이라고 생각합니다.&lt;/p>
&lt;p>경험이 적은 &lt;strong>신입 개발자&lt;/strong>가 이러한 환경에 노출되면, &lt;strong>왜곡된 품질 기준이 옳은 방향이라고 믿게 되어버리는 문제&lt;/strong>까지 발생할 수 있고, 안타깝게도 실제로 많이 보이는 사례입니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>&amp;ldquo;이러한 환경에서 부스트캠프는 저에게 좋은 결과물에 대한 기준을 잡아줬습니다.&amp;rdquo;&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>신입 혹은 예비 개발자들은 위에서 언급한 &lt;strong>인식의 부재&lt;/strong> 즉, 좋은 결과물에 대한 기준이 없거나, 많이 낮기 때문에 위과 같은 문제가 발생하게 된다고 생각합니다.&lt;/p>
&lt;p>&lt;strong>좋은 결과물에 대한 기준&lt;/strong>을 잡기 위해서는 당연하게도 좋은 결과물을 많이 접해봐야하지만 현실적으로 너무 어려운 일이죠&amp;hellip;&lt;/p>
&lt;p>하지만! 부스트캠프에서 다양한 강점을 가진 분들이 모여 각기 만들어낸 &lt;strong>좋은 결과물들을 많이 접할 수 있었습니다&lt;/strong>.&lt;/p>
&lt;p>그래서 저는 &lt;strong>왜곡된 품질 기준이 옳은 방향이라고 믿게 되어버리는 문제&lt;/strong>에서 비교적 자유로울 수 있었습니다.&lt;/p>
&lt;h3 id="효진적-사고">효진적 사고&lt;/h3>
&lt;p>최근 마무리된 올림픽 사격 여자 공기소총 10m 국가대표인 방효진 선수님은 &amp;ldquo;&lt;strong>나도 부족하지만 남도 별거 아니다.&lt;/strong>&amp;ldquo;라며 불안을 인정하는 &lt;strong>효진적 사고&lt;/strong>로 그 부담감을 극복하고 금매달을 따 내실 수 있었다는 인터뷰를 봤습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img.png"
width="1000"
height="666"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_hu3d22d5200bf24b9d7a6120cb6d3cc0ea_320545_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_hu3d22d5200bf24b9d7a6120cb6d3cc0ea_320545_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="효진적 사고"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>저도 5기 챌린지가 끝나고 멤버쉽에 가지 못했고, 잘 하시는분들을 직접 많이 접하다보니 저의 역량에 대해서 자신감이 많이 떨어져 있었어요&lt;/p>
&lt;p>하지만 시간이 흐를수록 제 자신이 성장했다는 것을 확인할 수 있었던 계기들이 있었고, 결과적으로 이러한 &lt;strong>효진적 사고&lt;/strong>를 탑재하게 되었습니다.&lt;/p>
&lt;blockquote>
&lt;p>응. 맞아 나 지금은 잘 못해.&lt;br>
근데 내가 평생 못 할 것 같아?&lt;br>
나는 계속 노력할 거고 조금씩 성장해왔어&lt;br>
언젠간 잘 하게 될 거야!&lt;/p>
&lt;/blockquote>
&lt;p>운영진 &lt;code>제이&lt;/code>님이 공유해주셨던 명언도 다시 생각나네요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_1.png"
width="1280"
height="719"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_1_huae20d1c975a995814f6297f664d9bf86_1082311_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_1_huae20d1c975a995814f6297f664d9bf86_1082311_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="427px"
>&lt;/p>
&lt;p>&lt;del>억까에도 강해집니다.&lt;/del>&lt;/p>
&lt;hr>
&lt;p>글을 쓰고보니 모두 동료 캠퍼들 덕분에 생기는 긍정적인 영항이었군요!&lt;/p>
&lt;h2 id="부캠에-다시-지원한-이유">부캠에 다시 지원한 이유&lt;/h2>
&lt;p>그래서 왜 다시 지원했느냐라고 물어보신다면..! 아래와 같은 이유들이 있습니다.&lt;/p>
&lt;h3 id="동기부여">동기부여&lt;/h3>
&lt;p>퇴사 후 푹 쉬고 다시 준비를 시작하는데&amp;hellip; 너무 재미가 없었어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_4.png"
width="202"
height="250"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_4_huef1e4428669a0019381cbc587f881aa4_9852_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_4_huef1e4428669a0019381cbc587f881aa4_9852_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="193px"
>&lt;/p>
&lt;p>퇴사 전 1년간 팀에서 가장 많은 티켓을 끊은 &lt;strong>티켓머신&lt;/strong>이었던 저는 빡빡한 개발 일정으로부터 나오는 도파민에 뇌가 절여저 있었기 때문에, 저의 의지만으로는 동기부여를 하기 턱없이 부족했습니다.&lt;/p>
&lt;p>그래서 저를 부추길 강한 프레셔가 필요했어요🤣&lt;/p>
&lt;p>부캠의 어려운 미션과 빡센 일정이라면 저를 움직이게 만들 것 이라고 생각했고, 이러한 환경에 저를 던져야했습니다.&lt;/p>
&lt;h3 id="내-수준-파악하기">내 수준 파악하기&lt;/h3>
&lt;p>부캠은 경력 2년 이하의 주니어까지 참여 가능한 만큼 &lt;strong>왜 오셨을까&lt;/strong> 생각이 들 만큼 잘 하시는 분들도 많이 계셨습니다.&lt;/p>
&lt;p>그리고 &lt;strong>경력이 없는데 이렇게까지 잘해질 수 있나&lt;/strong> 싶을 정도로 잘 하시는 분들도 많이 계셨었죠&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_5.png"
width="900"
height="510"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_5_hu3968b287ed5d44b9ba3c6f0d96d1204e_616267_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_5_hu3968b287ed5d44b9ba3c6f0d96d1204e_616267_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="176"
data-flex-basis="423px"
>&lt;/p>
&lt;p>그래서 이 분들과 저를 비교하면 저의 수준을 어느정도 파악할 수 있다고 생각했습니다.&lt;/p>
&lt;h3 id="도움을-드리고-싶어요">도움을 드리고 싶어요&lt;/h3>
&lt;p>개발자로 얼마 안되는 기간 일 하면서 학교 후배, 동료 개발자 등 여러 주니어 개발자들과 자연스럽게 대화할 기회들이 있었는데, 같이 고민에 대해 이야기하다보면 개인적으로 안타까운 상황들이 있었습니다.&lt;/p>
&lt;p>대부분의 경우는 위에서 언급했던 더닝-크루거 효과의 &lt;strong>우매함의 봉우리&lt;/strong>와 &lt;strong>절망의 계곡&lt;/strong>에서 발생하는 문제들이었어요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>우매함의 봉우리&lt;/strong>&lt;/p>
&lt;p>개발자 채용 설명회에 참여해본 분들은 &lt;strong>신입 개발자는 역량으로 뽑지 않는다.&lt;/strong> 던가 &lt;strong>잠재력이 중요하다.&lt;/strong> 이런 말씀을 많이 들어보셨을겁니다.&lt;/p>
&lt;p>이런 내용을 들으면 &lt;strong>듣기 좋으라고 하는 소리&lt;/strong>다. &lt;strong>스펙이 잠재력 아니냐&lt;/strong>라고 생각하시는 분들이 많은 것 같아요(아예 틀린 말은 아니라고 생각합니다.)&lt;/p>
&lt;p>그래서 결국 &lt;strong>실력으로 증명해야한다&lt;/strong> 라고 결론을 낸 분들을 많이 접할 수 있었던 것 같습니다.&lt;/p>
&lt;p>그런데 일해보니까 정말 그렇지 않아요 정말 &lt;strong>역량으로만 뽑지 않고&lt;/strong>, 성과를 중요하게 생각하는 회사들은 스펙은 크게 고려하지 않는 것 같습니다.&lt;/p>
&lt;ul>
&lt;li>정확히 말하면 역량을 기준으로 잡으면 뽑을 사람이 없어요. 그럴거면 신입 말고 경력을 뽑는게 더 좋겠죠(저 포함 신입들 다 왠만큼 합니다.)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>이렇게 &lt;strong>실력으로 증명한다&lt;/strong>라고 결론을 내리신 분들은 대부분 본인이 &lt;strong>뽑힐만한 역량&lt;/strong>이라고 믿는 분들이 많습니다. 사실 우매함의 봉우리 쯤에 있는 상태로 &lt;strong>본인의 부족함을 인지하지 못하는 경우&lt;/strong>가 많아요&lt;/p>
&lt;p>전 직장에 한 기수 먼저 들어온 주니어 개발자의 사례를 말씀드릴 수 있을 것 같아요, 취업 준비 기간을 오래 갖지 않으시고 거의 현역으로 입사했던 개발자였습니다.&lt;/p>
&lt;p>이 분은 전환형 인턴 과정에서 적극적인 의사 표현과 태도, 열정을 높게 평가받아 높은 성적으로 전환되었지만, 본인은 &lt;strong>개발자로서의 역량&lt;/strong>을 높게 평가받아 전환되었다고 믿고 있었습니다.&lt;/p>
&lt;p>전환 이후에도 열정적으로 업무를 수행하셨죠, 하지만 시간이 지날수록 연차가 낮을 때는 용인할 수 있는 실수나 낮은 품질의 코드가 개선되지않아 평가가 나빠졌어요&lt;/p>
&lt;p>그럼에도 불구하고 본인이 역량이 괜찮은 개발자라는 믿음을 버리지 못하셨고, 결국엔 성장을 포기하시게 되었습니다.&lt;/p>
&lt;hr>
&lt;p>이 문제가 앞서 언급했던 절망의 계곡에 빠르게 진입하지 못했고, 좋은 결과물에 대한 기준이 없었기 때문에 발생한 문제로 생각하고 있습니다.&lt;/p>
&lt;p>조금 극단적인 예시이지만 이러한 문제를 경험하지 않기 위해서, 극복하기 위해서는 &lt;strong>조금이라도 빨리 좋은 결과물들을 많이 보는 것&lt;/strong>이 중요하다고 생각했어요&lt;/p>
&lt;p>그래서 저도 이러한 &lt;strong>좋은 결과물에 조금이라도 도움&lt;/strong>이 될 수 있지 않을까라는 생각했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>절망의 계곡&lt;/strong>&lt;/p>
&lt;p>&lt;strong>우매함의 봉우리&lt;/strong>에서 내려왔다면 다음 문제인 &lt;strong>절망의 계곡&lt;/strong>을 만나게 됩니다.&lt;/p>
&lt;p>&lt;strong>절망의 계곡&lt;/strong>에서 큰 타격을 입으시는 분들은 본인에 역량에 자부심이 강하던 분들이시죠&lt;/p>
&lt;p>위 사례로 언급했던 주니어 개발자는 &lt;strong>절망의 계곡&lt;/strong>에 들어서는 과정에서 본인이 &lt;strong>역량이 떨어지는 개발자&lt;/strong>라는 것을 인정하기 어려웠고, 결과적으로 최악이라고 생각되는 회피를 선택하셨습니다.&lt;/p>
&lt;p>저도 학교나 동아리, 대외 활동에서 주로 &lt;strong>버스 기사&lt;/strong> 역할을 했었고 나름 제 역량에 대한 자부심도 있었기 때문에, 부캠을 끝내고 &lt;strong>절망의 계곡&lt;/strong>에서 벗어나지 못하고 한동안 힘들었던 경험이 있었어요&lt;/p>
&lt;p>&lt;strong>절망의 계곡&lt;/strong>에서 느끼는 감정들은 성장을 위해 꼭 필요하다고 생각합니다.&lt;/p>
&lt;p>그렇지만 오래 느낄 필요는 없다고 생각해요&lt;/p>
&lt;p>자칫 저와 같이 극복하는 데 오랜 시간이 필요한 분들이 있을 수 있고(&lt;del>사실 많을 것 같다고 생각했어요&lt;/del>) 그런 분들에게 &lt;strong>포기하지 않도록, 금방 회복할 수 있도록 힘을 드리고 싶었습니다&lt;/strong>.&lt;/p>
&lt;h2 id="이전과-달라진-점">이전과 달라진 점&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_7.png"
width="706"
height="185"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_7_hu9911f82412a204b00daa00a53b2b0ae1_34300_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_7_hu9911f82412a204b00daa00a53b2b0ae1_34300_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="381"
data-flex-basis="915px"
>&lt;/p>
&lt;p>부스트캠프 웹・모바일 9기는 이전과 같이 &lt;strong>기본기&lt;/strong>와 &lt;strong>문제 해결력&lt;/strong>에 대한 내용들을 깊게 체험해볼 수 있다는 점은 같았지만, 5기와 비교했을 때 많은 것이 달라져 있었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_6.png"
width="706"
height="258"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_6_hud2cb05f4035abd3ffd1dc423dcf5c4e4_48487_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_6_hud2cb05f4035abd3ffd1dc423dcf5c4e4_48487_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="부스트캠프 웹・모바일 9기 "
class="gallery-image"
data-flex-grow="273"
data-flex-basis="656px"
>&lt;/p>
&lt;p>이러한 이유로 어떠한 부분이 달랐는지 살펴보고, 제가 어떤 부분에서 신경을 썻는지 살펴보면 좋을 것 같아요&lt;/p>
&lt;h3 id="베이직-과정">베이직 과정&lt;/h3>
&lt;p>처음으로 베이직 과정이 신설되었습니다.&lt;/p>
&lt;p>베이직 과정은 1차 문제해결력 &lt;strong>테스트 결과&lt;/strong>에 따라 &lt;strong>선택적&lt;/strong>으로 참여하는 과정이었는데, 저 같은 경우 2차 문제해결력 테스트 직행이었지만 참여했어요&lt;/p>
&lt;p>제 기억에는 대략 &lt;strong>1,000명&lt;/strong> 이상이 베이직 과정에 참여하셨던 것으로 알고있습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_8.png"
width="659"
height="856"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_8_hu267a7ae569560af840a84029d440e5d8_66515_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_8_hu267a7ae569560af840a84029d440e5d8_66515_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="베이직 과정"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="184px"
>&lt;/p>
&lt;p>5기 챌린지 과정과 마찬가지로 &lt;strong>다른 사람들의 결과물을 확인&lt;/strong>할 수도 있었고, &lt;strong>팀 활동&lt;/strong>도 있다는 점이 특별했던 것 같습니다.&lt;/p>
&lt;p>결과물에는 자신이 문제를 해결해나간 과정을 &lt;strong>README&lt;/strong>를 통해 꼭 남겨야 했기 때문에 다른 사람의 접근 방식들도 잘 파악할 수 있었습니다.&lt;/p>
&lt;p>아마 개발 관련 학습을 오래 하시지 않았다면, 베이직 과정을 성실하게 참여하고 다른 분들의 결과물들은 볼 수 있는 것 만으로도 많은 도움이 되셨을 것 같다는 생각이 들었어요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>미션&lt;/strong>&lt;/p>
&lt;p>베이직 과정은 &lt;strong>요구 사항은 조금 복잡하지만 구현 자체는 어렵지 않은 미션&lt;/strong>들을 해결해야했습니다.&lt;/p>
&lt;p>5기 챌린지 과정 미션에 비교한다면, 베이직의 미션은 &lt;strong>챌린지 미션에서 구현해야 할 전체 기능 중 일부 기능을 구현&lt;/strong>하는 정도로 느껴졌던 것 같습니다.&lt;/p>
&lt;p>다만 &lt;strong>깔끔한 설계&lt;/strong>가 반영되었을 때 완전히 다른 결과물을 만들 수 있어서, 평소 &lt;strong>알고리즘 테스트&lt;/strong>같이 &lt;strong>구현&lt;/strong>만을 위한 코딩을 해오신 분들 이라면, 다른 잘한 결과물을 봤을 때 &lt;strong>내 결과물이 뭔가 잘못됐다는 것&lt;/strong>을 느꼈을 것 같았어요&lt;/p>
&lt;p>저 같은 경우 구현 자체에는 시간이 많이 필요하지 않았습니다. 그래서 많은 시간을 &lt;strong>좋은 설계&lt;/strong>를 위해 활용했던 것 같습니다.&lt;/p>
&lt;p>거기에 더해서 &lt;strong>읽기 쉬운 코드&lt;/strong>를 만들고, 저의 생각과 코드를 더 쉽게 이해할 수 있도록 분석 부터 구현까지의 모든 과정을 상세히 &lt;code>README&lt;/code>에 기록하려고 노력하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>팀 활동&lt;/strong>&lt;/p>
&lt;p>팀 활동에서 특별했던 점은 &lt;strong>구현&lt;/strong>뿐만이 아니라 &lt;strong>설계&lt;/strong>미션이 주어졌다는 점 인데요&lt;/p>
&lt;p>개발을 할수록 느끼는 점은 설계가 참 중요하다는 것 입니다.&lt;/p>
&lt;p>저는 설계를 완성하는 과정에서 소프트웨어가 완성된다고 생각해요, 구현은 그 설계를 코드로 조금 더 상세하게 옮겨 적는 것 뿐이라고 생각하죠&lt;/p>
&lt;p>그래서 저는 항상 프로그래밍에서 구현 자체는 &lt;strong>사소한 부분&lt;/strong>이라고 말 합니다.&lt;/p>
&lt;p>설계의 중요한 역할 중 하나는 &lt;strong>머리속에 떠다니는 내용&lt;/strong>들을 글이나 그림을 통해 &lt;strong>현실 세계로 가져와 규격화&lt;/strong>하는 것이라고 생각합니다.&lt;/p>
&lt;p>그렇기 때문에 &lt;strong>설계에 대한 개념&lt;/strong> 자체가 없으셨던 분들, &lt;strong>중요성을 체감하지 못하셨던&lt;/strong> 분들은 팀 활동을 통해 설계를 하며 다른 사람들의 생각을 더 깊게 이해해보고 정리하는 과정이 성장에 큰 도움이 될 것 같다고 느꼈어요&lt;/p>
&lt;p>교육을 설계하실 때 굉장히 많은 고민이 있었다는 것이 느껴졌습니다.&lt;/p>
&lt;p>저는 팀 활동에서 다른분들과 함께 의견들을 &lt;strong>글과 그림&lt;/strong>으로 표현해보며 &lt;strong>생각을 공유&lt;/strong>하기 위해 노력했고, &lt;strong>설계가 필요한 이유&lt;/strong>들을 최대한 느낄 수 있도록 노력했습니다.&lt;/p>
&lt;h3 id="챌린지-과정">챌린지 과정&lt;/h3>
&lt;p>챌린지 과정에서의 학습 내용들은 5기때와 차이가 없었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_9.png"
width="659"
height="796"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_9_hu780288bc0f995229df3b04df16b12514_75590_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_9_hu780288bc0f995229df3b04df16b12514_75590_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="챌린지 과정"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="198px"
>&lt;/p>
&lt;p>하지만&amp;hellip; 3년간 무슨 일들이 있었을까요? 난이도는 꽤 많이 상승되었다고 느껴졌습니다.&lt;/p>
&lt;p>&lt;strong>Chat-GPT&lt;/strong>와 같이 개발을 도와줄 도구가 등장했다는 것도 난이도 상승에 영향을 줬을 수도 있을 것 같고, &lt;strong>베이직 과정&lt;/strong>에서 잘 하시는 분들이 많아 난이도를 올렸을까? 라는 생각도 들었어요&lt;/p>
&lt;p>아니면 &lt;strong>아는 만큼 보인다&lt;/strong>는 말 처럼 제가 더 성장해서 문제의 본질을 더 잘 알게되었을까? 라는 생각도 들었던 것 같습니다.&lt;/p>
&lt;p>무슨 이유던 이전보다는 많이 어렵게 느껴졌어요. 5기때는 요구사항을 모두 만족하지 못했던 미션이 마지막 2개쯤 뿐이었고, 대부분 &lt;strong>오후 12시&lt;/strong> 이전에 마무리 했었다면&amp;hellip;&lt;/p>
&lt;p>9기 챌린지 과정에서는 요구사항을 모두 만족시키지 못한 과제가 꽤 있었고, 적어도 &lt;strong>오전 2시&lt;/strong>까지는 문제해결을 위해 시간을 보냈습니다.&lt;/p>
&lt;p>사실 문제해결을 통한 역량이 향상되는 것은 큰 기대를 하고 있지 않았었는데, 관련 내용들을 다시 복기하고 결과물을 만들어가는 과정에서 기대보다 더 많은 성장을 할 수 있었습니다.&lt;/p>
&lt;h3 id="짝-미션">짝 미션&lt;/h3>
&lt;p>5기때와 가장 큰 차이점은 &lt;strong>짝 미션&lt;/strong>이었습니다.&lt;/p>
&lt;p>짝 미션은 챌린지 과정 4주 중 마자막 2주는 짝 미션을 중심으로 진행될 만큼 큰 비중을 차지했어요&lt;/p>
&lt;p>짝과 함께 설계 후 각자 결과물을 만들어보는 &lt;strong>짝 설계&lt;/strong>, 짝과 설계와 구현을 함께하는 &lt;strong>짝 구현&lt;/strong>, 단순히 같이 개발하는 &lt;strong>짝 구현&lt;/strong>을 넘어 &lt;strong>페어 프로그래밍&lt;/strong>을 해야하는 미션도 있었고, 같이 만든 결과물을 각자 개선해보는 &lt;strong>각자 개선하기&lt;/strong>, 각자 만든 결과물을 같이 개선해보는 &lt;strong>짝 개선&lt;/strong>이 있었습니다.&lt;/p>
&lt;p>현업에서도 관련 경험이 없었기 때문에 굉장히 흥미로웠는데 이 중 &lt;strong>짝 설계&lt;/strong>와 &lt;strong>페이 프로그래밍&lt;/strong>이 가장 인상적이었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>짝 설계&lt;/strong>&lt;/p>
&lt;p>혼자 미션을 수행할 때는 요구사항 분석 과정에서 애매한 부분에 대해 의사 결정에 시간이 많이 필요했었습니다.&lt;/p>
&lt;p>하지만 짝과 함께 설계를 진행하며 짝과 함께 미션 요구사항을 분석하며 서로 중요하다고 생각되는 것들, 불필요하다고 생각하는 것들을 공유하고 토론하며 훨신 더 빠른 의사결정을 했던 경험이 아주 긍정적이었어요😀&lt;/p>
&lt;p>서로 다르게 이해한 부분을 줄이기 위해 필요한 기능들을 &lt;code>mermaid&lt;/code>를 활용하여 &lt;strong>클래스 다이어그램&lt;/strong>을 이용해 시각화하기도 했습니다.&lt;/p>
&lt;p>같은 설계를 통해 구현했음에도 불구하고, 큰 틀을 제외한 세부 사항들이 완전히 달랐다는 것은 정말 흥미로웠네요&lt;/p>
&lt;hr>
&lt;p>&lt;strong>페어 프로그래밍&lt;/strong>&lt;/p>
&lt;p>여러번의 페어 프로그래밍이 있었지만 마지막 미션이 가장 기억에 남습니다.&lt;/p>
&lt;p>짝이 저와 마찬가지로 &lt;strong>TDD&lt;/strong>를 계속해서 시도하고 계셨던 분이셔서 자연스럽게 &lt;strong>TDD&lt;/strong>를 활용해서 페이 프로그래밍을 수행하였습니다.&lt;/p>
&lt;p>기능 단위를 기준으로 같이 테스트 케이스를 만들고 네비게이터와 드라이버 역할은 바꿔가며 진행하였는데, 실시간으로 피드백을 주고받으며 점진적으로 더욱 좋은 결과물을 만들어가는 과정이 굉장히 유익하다고 느껴졌어요&lt;/p>
&lt;p>애자일 방법론에서 반복적이고 점진적인 개선과 협업 정신을 위해 &lt;strong>TDD&lt;/strong>와 페어 프로그래밍을 강조하는 지 이유를 조금이나마 느낄 수 있었던 것 같습니다.&lt;/p>
&lt;h2 id="내가-시도한-것들">내가 시도한 것들&lt;/h2>
&lt;p>협업에서 풀스택 개발자로서 일하는 과정에서 저에게 부족한 부분이라고 생각되었던 &lt;strong>문서화&lt;/strong>와 &lt;strong>TDD&lt;/strong>를 적극적으로 시도하려했습니다.&lt;/p>
&lt;h3 id="문서화">문서화&lt;/h3>
&lt;p>개발자로 일하는 과정에서 문서화를 하지 않았던 것은 아닙니다.&lt;/p>
&lt;p>복잡한 업무라던가 새롭게 추가되는 기능 같은 경우에는 꽤나 꼼꼼히 문서를 작성하기도 했었어요&lt;/p>
&lt;p>하지만 이 외에는 단순히 업무 기록을 위해(이후 발생할 시시비비를 가리기 위해) 문서를 작성하는 느낌이 강했습니다.&lt;/p>
&lt;ul>
&lt;li>물론 전 회사에서도 업무 기록 수준의 문서화를 요구했습니다. (사실 저는 개발 문서라고 생각하지 않았어요)&lt;/li>
&lt;/ul>
&lt;p>개발 문서는 정책을 협의하는 과정에서 왜 이렇게 선택할 수 밖에 없었는지, 구조를 왜 이렇게 해야했는지와 같은 히스토리와 앞으로 어떤 식으로 수정되길 바라는지와 같은 내용들을 통해 이후 유지 보수를 더 잘 할수 있도록 만들어주는 것이 목표라고 생각했습니다.&lt;/p>
&lt;p>이후 해당 영역을 담당할 개발자들이 관련 내용을 보며 다른 접근 방식을 알고 있어 개선한다던가 하는 긍정적인 효과를 기대했던것이죠&lt;/p>
&lt;p>하지만 업무 기록 수준의 문서화를 요구받다보니 시간을 많이 부족했고, 다른 문서들도 업무 기록 수준이었기 때문에 참고할만한 자료도 없었습니다. 그래서 점점 공을 많이 안들이게 되더라구요&lt;/p>
&lt;p>미션을 수행하면서 만들어지는 요구사항 분석 내용, 설계 등과 같은 내용들은 유지보수와는 관계가 없겠지만, 다른사람들이 보고 내 결과물을 쉽게 파악할 수 있다는 부분에서는 공통점이 있다고 생각했습니다.&lt;/p>
&lt;p>그래서 &lt;strong>더 좋은 피드백을 받기 위해&lt;/strong>서, 다른 분들이 &lt;strong>더 쉽게 영감을 받게 만들기 위해&lt;/strong> 분석 내용과 설계 등을 최대한 상세하면서도 잘 읽히도록 만들기 위해 노력했던 것 같습니다.&lt;/p>
&lt;h3 id="tdd">TDD&lt;/h3>
&lt;p>이전 직장은 &lt;strong>저품질 레거시 코드&lt;/strong>로 인해 &lt;strong>악순환&lt;/strong>이 발생하고 있는 상황이었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/reason/img_10.png"
width="549"
height="511"
srcset="https://codemario318.github.io/post/boostcamp-9th/reason/img_10_hu6cdd1210a5ec7711f022e0a0c59659a4_16478_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/reason/img_10_hu6cdd1210a5ec7711f022e0a0c59659a4_16478_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="레거시의 악순환"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="257px"
>&lt;/p>
&lt;p>주요 원인 중 하나는 테스트 코드를 전혀 작성하지 않고 QA에 의존하는 개발이 원인이라고 생각했어요&lt;/p>
&lt;ul>
&lt;li>테스트 코드가 없으니 변경 자체가 굉장히 도전적인 일이 되어버립니다.&lt;/li>
&lt;li>그러다 보니 최소한의 변경을 위해 작은 코드들이 붙여져 나갔고 코드 품질은 더 나빠지게 되어버렸습니다.&lt;/li>
&lt;li>코드의 결합이 높고, 중복되는 로직이 많다보니 테스트 코드 자체를 시도하는 것이 어려웠습니다.&lt;/li>
&lt;li>같은 이유로 이미 구현되어있는 비즈니스 로직 분석이 굉장히 어려웠습니다.&lt;/li>
&lt;/ul>
&lt;p>이러한 환경에서 개발을 수행하다보니 테스트 코드의 중요성을 크게 느꼈지만, 어떻게 접근해야할지 감을 잡을 수 없어 적용하지 못했습니다.&lt;/p>
&lt;hr>
&lt;p>퇴사 이후 &lt;strong>TDD&lt;/strong>를 적극적으로 활용하는 회사의 과제 테스트를 수행해볼 기회가 있었습니다.&lt;/p>
&lt;p>이를 위해 테스트 코드 관련 자료들을 찾아가며 나름대로 테스트들을 만들었고, 이후 면접에서 어떤 식으로 테스트 코드를 작성하는지 물어본 후 대략적인 방향성을 배울 수 있었어요.&lt;/p>
&lt;p>이 때 들었던 내용 중 가장 인상깊었던 내용은&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>&amp;ldquo;저희는 요구사항과 정책이 완성되면 그 내용들을 전부 테스트 코드로 작성해요&amp;rdquo;&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>였습니다. 나중에 찾아보니 &lt;strong>BDD&lt;/strong>가 요런 맥락으로 진행되더라구요&lt;/p>
&lt;p>그래서 저도 이러한 방식들을 적용해보려 시도했고 어느정도 &lt;strong>TDD&lt;/strong> 적응할 수 있었던 것 같습니다.&lt;/p>
&lt;h3 id="애자일스러운-개발">애자일스러운 개발&lt;/h3>
&lt;p>&lt;strong>TDD&lt;/strong>와 더불어 변경을 가정하고 전체 기능의 일부만 설계하고 구현해나가는 &lt;strong>애자일스러운 개발&lt;/strong>을 시도했습니다.&lt;/p>
&lt;p>처음에는 전체를 설계하고 기능을 나누어 구현하는 방식으로 진행했었는데, 구현 과정에서 요구사항을 잘못 분석했거나, 설계가 잘못된 것을 확인하게 되는 경우가 종종 있었습니다.&lt;/p>
&lt;p>이 중 일부는 큰 변경이 따라와서 설계 전체가 흔들리게되는 경우가 종종 발생했었어요&lt;/p>
&lt;p>이 때문에 고민하고 있었는데, 부스트캠프 마스터인 &lt;strong>JK&lt;/strong>님이 애자일스러운 개발에 대해 언급해주셨고, 이를 즉시 반영하였습니다.&lt;/p>
&lt;p>필요하다고 생각되는 기능들을 대략적으로 분리한 후 그 중 일부만 설계하고 개발했는데 당연하게도 변경은 발생했지만, 영향 범위는 극히 제한적이었어요.&lt;/p>
&lt;p>&lt;strong>TDD&lt;/strong>와 결합하니 마치 게임을 하는 것 같은 느낌마저 받을 수 있었습니다 🎮🎮&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>13일부터 글을 작성하기 시작했는데 16일에 마무리하게 되었습니다. 간만에 많은 시간을 들여 글을 써본 것 같네요&lt;/p>
&lt;p>글을 작성하는 도중에 3차 문제해결력 테스트 결과가 나왔어요. 이번에는 멤버쉽을 경험할 수 있게 되었습니다.👊&lt;/p>
&lt;p>멤버쉽에 가지 못하시는 분들도 계실 것 같아요! 하지만 낙담하지 않으셨으면 좋겠습니다.&lt;/p>
&lt;p>저도 5기에는 챌린지 과정까지만 참여할 수 있었지만, 챌린지에서의 경험만으로도 큰 성장을 이뤘다고 생각해요&lt;/p>
&lt;p>실제로 취업 후 팀 막내였음에도 불구하고 구현에서만큼은 상위권이었습니다. 마찬가지로 어디 가서 꿀리지 않으실거에요🔥&lt;/p>
&lt;p>앞으로 시작할 개발자 커리어에서 부스트캠프는 하나의 마일 스톤일 뿐입니다. 중요한 체크 포인트 하나를 달성했으니 다른 체크포인트를 달성해야겠죠?&lt;/p>
&lt;p>앞으로 달성해야할 체크포인트를 위해 포기하지말고 함께 끝까지 나아가봐요 🏁&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다😄&lt;/p></description></item><item><title>챌린지 과정 4주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/</link><pubDate>Mon, 12 Aug 2024 10:44:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/cover.png" alt="Featured image of post 챌린지 과정 4주차 회고" />&lt;p>부스트캠프 챌린지 과정이 4주차로 마무리되었습니다🥳&lt;/p>
&lt;p>주말을 이용하여 미뤄왔던 대청소와 약속들 덕분에 월요일이 되어서야 회고를 쓰게 되네요&lt;/p>
&lt;p>이번주는 미션들을 수행하지는 않겠지만, 그동안 바빠서 마무리하지 못했던 학습 정리로 바쁠 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img.png"
width="900"
height="752"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_huc5e3bd9d0538c93e5f494cd205f8c424_816479_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_huc5e3bd9d0538c93e5f494cd205f8c424_816479_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="아직 한발 남았다."
class="gallery-image"
data-flex-grow="119"
data-flex-basis="287px"
>&lt;/p>
&lt;p>이번 주는 저번주와 마찬가지로 &lt;strong>짝 활동&lt;/strong>을 기본으로 한 주가 구성되었습니다.&lt;/p>
&lt;p>&lt;strong>각자 개발&lt;/strong>후 &lt;strong>짝 개선&lt;/strong>하기, &lt;strong>짝 개발&lt;/strong>후 &lt;strong>각자 개선&lt;/strong>하기로 &lt;strong>데이터베이스&lt;/strong>와 &lt;strong>네트워크&lt;/strong>를 깊게 이해해야만 해결할 수 있는 미션들이 주어졌습니다.&lt;/p>
&lt;p>그리고 마지막 테스트를 위한 &lt;strong>히든 미션&lt;/strong>을 금요일에 수행하였습니다.&lt;/p>
&lt;p>개인적으로 데이터베이스 관련 미션은 많이 어려웠네요 🙃&lt;/p>
&lt;p>이번 회고에는 미션들에 대한 접근 방법에 더해 짝 활동이 어떻게, 무엇을 중심으로 진행되었는지 설명해보겠습니다.&lt;/p>
&lt;h2 id="day16--17-데이터베이스">Day16 ~ 17: 데이터베이스&lt;/h2>
&lt;p>데이터베이스 관련 미션은 &lt;strong>각자 구현&lt;/strong> 후 &lt;strong>짝 개선&lt;/strong>을 수행해야하는 미션이었습니다.&lt;/p>
&lt;p>파일 기반 데이터베이스를 직접 구현해야하는 미션이었는데, 위에서 말씀드렸던 것처럼 개인적으로 많이 어려웠습니다.&lt;/p>
&lt;h3 id="mysql">MySQL&lt;/h3>
&lt;p>이전 직장에서 풀스택 개발자로 업무를 수행해오며 오랜기간 유지되어온 PHP 백엔드 레거시를 운영하는 것이 주 업무였는데요&lt;/p>
&lt;p>그렇다보니 예전 방식으로 그대로 개발을 수행할 수 밖에 없었고, &lt;a class="link" href="https://www.php.net/manual/en/book.pdo.php" target="_blank" rel="noopener"
>PDO&lt;/a>(PHP Data Object)를 사용하고 있었기 때문에 직접 쿼리를 작성해야하는 것은 필수적이었습니다.&lt;/p>
&lt;p>예전 개발 환경과 싱글 스레드 기반으로 순차적인 처리에 중점을 두는 PHP의 특성으로 인해 지금처럼 ORM을 이용하여 작은 쿼리를 여러개 보내는 것 보다는, 굉장히 많은 테이블들을 조인하는 큰 쿼리 하나를 작성해야하는 일도 매우 빈번했습니다.&lt;/p>
&lt;p>그렇다보니 쿼리 튜닝은 저에게 필수적인 역량이었고, 학습에 꽤 많은 공을 들였었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5.png"
width="371"
height="136"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5_hu6fb17a4b1ba75a00ca79acad9d84d206_8737_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_5_hu6fb17a4b1ba75a00ca79acad9d84d206_8737_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="MySQL"
class="gallery-image"
data-flex-grow="272"
data-flex-basis="654px"
>&lt;/p>
&lt;p>이러한 이유로 MySQL 내부 동작을 꽤 잘 알고 있다고 생각하여 이번 미션은 MySQL을 모방하는 방식으로 접근했었습니다.&lt;/p>
&lt;h3 id="스토리지-엔진">스토리지 엔진&lt;/h3>
&lt;p>기존 요구사항만을 만족하기 위해서는 단순하게 전체 읽기, 전체 쓰기 방식으로 접근해도 괜찮았지만, 이러한 경우 데이터가 많아지면 급격한 성능 저하가 발생하게됩니다.&lt;/p>
&lt;p>이러한 문제를 해결해보고 싶어 많은 고민을 했는데 이 부분이 정말 어려웠습니다🥲&lt;/p>
&lt;hr>
&lt;p>&lt;strong>InnoDB&lt;/strong>&lt;/p>
&lt;p>데이터베이스의 성능을 나쁘게 만드는 원인은 &lt;strong>디스크 I/O&lt;/strong>에서 발생하는 &lt;strong>병목 현상&lt;/strong>입니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1.png"
width="904"
height="456"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1_hu5128e5d7946208d35600b2a8a7d0222a_52925_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_1_hu5128e5d7946208d35600b2a8a7d0222a_52925_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="MySQL 구조"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>MySQL은 크게 &lt;strong>MySQL 엔진&lt;/strong>, &lt;strong>스토리지 엔진&lt;/strong>으로 영역을 구분할 수 있는데, 디스크 I/O에 접근하는 역할은 &lt;strong>스토리지 엔진&lt;/strong>이 전담하여 수행하게 됩니다.&lt;/p>
&lt;p>여러 스토리지 엔진이 있지만 주로 사용되는 &lt;code>InnoDB&lt;/code> 스토리지 엔진은 &lt;strong>버퍼풀&lt;/strong>이라는 메모리 영역을 통해 사용하는 주요 데이터를 대부분 캐싱하여 디스크에 접근하는 것을 최소화합니다.&lt;/p>
&lt;p>또한 쓰기 작업을 버퍼링하여 하드웨어 자원의 여유가 있을 때 백그라운드에서 실행하는 방식들을 통해 데이터베이스의 성능을 크게 끌어올리고 있습니다.&lt;/p>
&lt;p>이를 반영하기 위해서 데이터를 저장하고 관리하는 기본 단위인 &lt;strong>페이지&lt;/strong>를 구현하야할 필요가 있었습니다만&amp;hellip;.&lt;/p>
&lt;p>페이지를 직접 구현하고 이를 이용해서 데이터 저장이나 캐싱등을 구현해야한다고 생각하니 현기증이 나는 것 같다라구요😅&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2.png"
width="632"
height="523"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2_huaf81590ee5a0b6795972f97e2fb827b9_593519_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_2_huaf81590ee5a0b6795972f97e2fb827b9_593519_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;p>그래서 MySQL 인덱스의 기본 단위인 PK만을 이용해서 저장된 파일에서의 레코드 위치만을 가지게 구현하는 방식으로 접근했습니다.&lt;/p>
&lt;p>&lt;strong>B+ Tree&lt;/strong> 같은 자료 구조를 통해서 &lt;code>Index Range Scan&lt;/code> 같은 방식도 적용해보려고 했었는데, 마찬가지로 어려워서 &lt;code>PK&lt;/code> 단일 조건 처리에 관한 부분만 적용할 수 있었습니다.&lt;/p>
&lt;h3 id="짝-개선">짝 개선&lt;/h3>
&lt;p>짝 개선은 이전과 마찬가지로 새로운 기능을 추가하는 것 보다는 기존 코드를 개선하는 방향으로 지침이 주어졌습니다.&lt;/p>
&lt;p>저 같은 경우는 &lt;strong>HTTP 요청/응답 분리&lt;/strong>를, 짝은 &lt;strong>DBMS 아키텍처 반영&lt;/strong>을 통한 &lt;strong>코드 구조&lt;/strong>를 개선하는 것을 목표로 함께 개선을 진행하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>예외 처리&lt;/strong>&lt;/p>
&lt;p>저의 개선 목표였던 &lt;strong>HTTP 요청/응답 분리&lt;/strong> 부분 작업을 수행하면서 자연스럽게 &lt;strong>응답 코드&lt;/strong>에 관한 내용들이 개선되어야 했고, 응답을 만들기위해 &lt;strong>예외 처리&lt;/strong>를 추가하는 부분에서 짝과 의견을 나눌 수 있는 기회가 생겼습니다.&lt;/p>
&lt;p>저 같은 경우는 서비스 로직에서 에러 또는 예외를 발생시켜 해당 에러를 최상위 지점에서 한번에 핸들링하는 것을 선호하는데(&lt;a class="link" href="https://codemario318.github.io/post/clean-code/7/" >클린코드 - 에러 처리&lt;/a>) 어떠한 장점이 있는지에 대해서 물어봐 주셨습니다.&lt;/p>
&lt;p>코드를 보면서 확인해보면 아래와 같습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>개선 전&lt;/strong>&lt;/p>
&lt;p>이전 처리를 복기해보면 아래와 같은 방식으로 처리가 구현되어 있었습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">어떤_서비스_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">값_검증&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;입력 값을 확인해주세요.&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">서비스로직을_사용하는_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">어떤_기능&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">어떤_서비스_객체&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;OK&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s1">&amp;#39;value&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이러한 방식에는 몇 가지 문제가 있습니다.&lt;/p>
&lt;ul>
&lt;li>예외를 발생 시킬 때 사용자가 직접 사유를 기억해서 매직넘버(상수가 아닌 직접 입력해야하는 값, 하드코딩)를 사용해야합니다.&lt;/li>
&lt;li>응답도 같은 문제를 가지고 있습니다.&lt;/li>
&lt;/ul>
&lt;p>이러한 방식은 개발자가 실수를 쉽게 할 수 있는 여지가 많아지게됩니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>개선 후&lt;/strong>&lt;/p>
&lt;p>이러한 부분을 아래와 같이 개선하게 되었습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">BadRequestException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">UnauthorizedException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">ForbiddenException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">NotFoundException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="nx">NotAcceptableException&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nb">Error&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">freeze&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">OK&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">BAD_REQUEST&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">UNAUTHORIZED&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">401&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">FORBIDDEN&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">403&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">NOT_FOUND&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">NOT_ACCEPTABLE&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">406&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">INTERNAL_SERVER_ERROR&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>각 예외 상황에 맞는 예외 클래스를 구현하였습니다.
&lt;ul>
&lt;li>Nest.js 표준 에러 참조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Http 응답 코드에 대해 Enum을 선언하였습니다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">어떤_서비스_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">값_검증&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BadRequestException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;입력 값을 확인해주세요.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">서비스로직을_사용하는_최상위_클래스&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">어떤_기능&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">어떤_서비스_객체&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">원하는_동작&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">결과&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">BadRequestException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">BAD_REQUEST&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">NotFoundException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">NOT_FOUND&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">INTERNAL_SERVER_ERROR&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>발생한 예외 클래스를 확인하여 Enum으로 선언된 응답 코드를 상황에 맞게 반환할 수 있도록 변경&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>이러한 형식으로 개선되어 아래와 같은 장점을 취할 수 있었습니다.&lt;/p>
&lt;ul>
&lt;li>예외 클래스를 직접 확인하므로 어떤 에러가 발생했는지 쉽게 파악할 수 있다.&lt;/li>
&lt;li>에외 코드가 어떤 의미인지 확실히 구분할 수 있다. 등&lt;/li>
&lt;/ul>
&lt;p>발생하는 예외가 HTTP 응답에 대해 직접적인 연관성이 있어 또 하나의 세부사항인 HTTP와 관계가 생겨버린다는 것이 아쉬운 점이지만 충분히 개선되었다고 생각합니다.&lt;/p>
&lt;p>제가 생각하는 장점을 코드를 함께 개선해가는 과정을 통해서 설명해 드렸고, 많은 도움이 되었다는 이야기를 들을 수 있었습니다😁&lt;/p>
&lt;h2 id="day18--19-네트워크">Day18 ~ 19: 네트워크&lt;/h2>
&lt;p>네트워크 관련 미션은 &lt;strong>페어 프로그래밍&lt;/strong>을 통해 함께 결과물을 만들고, 이후 &lt;strong>각자 개선&lt;/strong>을 수행하는 미션이었습니다.&lt;/p>
&lt;p>&lt;strong>웹 소켓&lt;/strong> 서버를 직접 구현하는 것이 전제되어있는 미션이었는데, &lt;strong>레이어드 아키텍처&lt;/strong>를 쉽게 적용할 수 있는 요구사항이어서 짝에게 설계를 적극적으로 제안하여 적용하게 되었습니다.&lt;/p>
&lt;p>이전과 달랐던 점은 짝이 이전부터 &lt;strong>TDD&lt;/strong>를 적용해오셨던 분이셔서, 자연스럽게 &lt;strong>TDD&lt;/strong>로 진행되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3.png"
width="816"
height="454"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3_hu05ec6f48f861dd6127467224c3c8452c_617786_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_3_hu05ec6f48f861dd6127467224c3c8452c_617786_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="431px"
>&lt;/p>
&lt;p>기능 요구사항을 돌아가며 &lt;strong>드라이버&lt;/strong>, &lt;strong>네비게이터&lt;/strong> 역할을 수행하는 방식으로 진행되었는데, 원할하게 &lt;strong>TDD&lt;/strong>가 진행되어서 참 즐거운 경험이었습니다😁&lt;/p>
&lt;p>그리고 짝 캠퍼분이 이전부터 FE 개발을 해오셨던 경험이 있으셔서 JS에 매우 능숙하셨기 때문에 아주 원할하게 진행될 수 있었던 것 같네요&lt;/p>
&lt;p>&lt;strong>레이어드 아키텍처&lt;/strong> 기반의 설계와, &lt;strong>TDD&lt;/strong>가 합쳐지니 지금까지 결과물 중 가장 만족스러운 결과물을 만들 수 있었습니다. 👍&lt;/p>
&lt;p>&lt;del>그래도 새벽 3시가 넘어서야 마무리 할 수 있었어요🤣&lt;/del>&lt;/p>
&lt;h3 id="레이어드-아키텍처">레이어드 아키텍처&lt;/h3>
&lt;p>&lt;code>Socket&lt;/code>을 이용하여 &lt;strong>CLI 기반 클라이언트&lt;/strong>와 &lt;strong>서버&lt;/strong>를 구현해야했습니다.&lt;/p>
&lt;p>서버와 클라이언트의 연결을 만들고, 클라이언트의 요청마다 HTTP 응답을 처리하는 구조가 필요했기 때문에 짝에게 &lt;strong>레이어드 아키텍처&lt;/strong>를 적극적으로 제안하여 반영하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4.png"
width="1127"
height="843"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_4_hu4e52c0ad343a0efa02fd57875f5ec4d4_47956_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="레이어드 아키텍처"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>&lt;strong>HTTP 요청 수신 및 응답&lt;/strong>, &lt;strong>비즈니스 로직 처리&lt;/strong>, &lt;strong>데이터 조작&lt;/strong>을 각 레이어로 구현하여 분리하여, 좋은 코드 구조를 만들 수 있었습니다.&lt;/p>
&lt;p>짝과 함께 개발하는 과정에서 뿐만이 아니라, 다음 피어세션에서도 해당 설계를 보고 많은 영감을 얻으셨다는 반응이 많아서 뿌듯했네요 😎&lt;/p>
&lt;h3 id="의존성-주입">의존성 주입&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6.png"
width="271"
height="186"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6_hua164b4f218d2ddb10286229f1ed50614_9292_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_6_hua164b4f218d2ddb10286229f1ed50614_9292_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="의존성 주입"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>레이어드 아키텍처를 구성하며 각 의존성이 있는 레이어를 &lt;strong>의존성 주입&lt;/strong>을 통해 &lt;strong>구성&lt;/strong>하였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Model&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getItem&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">collection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">condition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Service&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">businessLogic&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getItem&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Handler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">service&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handler&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">code&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">HttpStatusCode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OK&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">body&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="err">#&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">businessLogic&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Model&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">service&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Service&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이러한 구조를 통해 결합을 낮추고 유연성을 높힐 수 있었으며, 구현 과정에서 훨씬 테스트가 용이하다는 장점을 취할 수 있었습니다.&lt;/p>
&lt;h3 id="단단한-테스트-코드">단단한 테스트 코드&lt;/h3>
&lt;p>&lt;strong>각자 개선하기&lt;/strong>에서 저는 테스트 코드 부분을 개선하였습니다.&lt;/p>
&lt;p>단단한 테스트 코드 즉 깨지지 않는 테스트 코드를 작성하기 위해서 개인적으로 테스트 원칙인 단일 책임 원칙, 독립적 테스트 부분을 개선했습니다.&lt;/p>
&lt;ul>
&lt;li>단일 책임 원칙
&lt;ul>
&lt;li>테스트 코드는 하나의 동작이나 기능만을 테스트 해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>독립적 테스트
&lt;ul>
&lt;li>테스트 간에 의존성이 있으면 한 테스트의 실패가 다른 테스트에도 영양을 줌&lt;/li>
&lt;li>테스트 간 상태 공유를 피하고, 각 테스트 케이스가 독립적으로 실행될 수 있도록 보장해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>단일 책임 원칙&lt;/strong>&lt;/p>
&lt;p>하나의 테스트 코드는 한 가지의 동작과 기능을 테스트해야 이후 변경이 적고 오래사용할 수 있는 테스트 코드를 만들 수 있습니다.&lt;/p>
&lt;p>기존 작성되어있던 테스트를 유사하게 다시 만들어봤습니다.&lt;/p>
&lt;p>어떠한 모델에서 id를 이용해 특정 무언가를 찾는 처리입니다. (어떤 내용인지 추론할 수 있으면 안되기 때문에 추상적으로 쓸 수 밖에 없는 점 양해 부탁드립니다.)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 전&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">makeIds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">from&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">length&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">idx&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">idx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">padStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ID를 활용하여 무언가를 찾아 배정하고 반환하는 처리 테스트&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">each&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">12&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">makeIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nx">id5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">])(&lt;/span>&lt;span class="s2">&amp;#34;무언가를 찾아 배정하고, 배정된 무언가를 반환&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">prevIds&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nextId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">expected&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">prevIds&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nextCampId&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">expected&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>많은 상황에 대해 정상적인 처리를 테스트하고 있습니다.&lt;/p>
&lt;p>많은 테스트케이스를 확인하고 있었기 때문에 예외가 발생해야하는 상황은 별도로 확인하고 있지 않았습니다.&lt;/p>
&lt;p>개인적인 의견으로는 알아보기 힘들다고 판단했습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 후&lt;/strong>&lt;/p>
&lt;p>여러 상황을 나누어 테스트하도록 했으며, 테스트 케이스의 숫자도 줄였습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ID를 활용하여 무언가를 찾아 배정하고 반환하는 처리 테스트&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;정상 처리 확인&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assignedId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;특정 조건이 넘으면 다른 값 반환 확인&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">clients&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MAX_ASSIGN_CLIENT&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`J&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">padStart&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assigned&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;먼저 만들어진 무언가에 빈 자리가 있다면 해당 무언가를 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">[]});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">arr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">clients&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">[]});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">assignedId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">model&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assignById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">assignedId&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>&lt;strong>독립적 테스트&lt;/strong>&lt;/p>
&lt;p>일부 테스트가 스스로의 다른 기능을 호출하는 부분들이 있었습니다. 이는 기능의 변경에 취약한 테스트가 될 수 있다고 판단하여 수정하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 전&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;횟수 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">increaseCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>service.count&lt;/code> 메소드를 통해 현재 &lt;code>count&lt;/code>을 확인하기 위해 &lt;code>service.increaseCount&lt;/code>메소드를 통해 &lt;code>count&lt;/code>를 증가시키고 있습니다.&lt;/p>
&lt;p>이는 자기 자신의 메소드를 재 호출하는 구조로 인해 &lt;code>service.increaseCount&lt;/code>에 미쳐 검증하지 못한 케이스가 있거나, 요구사항 변경으로 인해 검증해야 할 내용이 바뀐다면, &lt;code>service.count&lt;/code>의 테스트 코드도 변경이 불가피한 상황입니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>변경 후&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;count&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;횟수 반환&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">map&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">clap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">expect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">service&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">toBe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>service&lt;/code>의 데이터 보관을 위해 주입받은 &lt;code>Map&lt;/code>에 직접 데이터를 저장, 조작하여 자기 자신의 메소드를 활용하는 테스트 처리의 의존성을 제거하였습니다.&lt;/p>
&lt;h2 id="day20-3차-문제해결력-테스트">Day20: 3차 문제해결력 테스트&lt;/h2>
&lt;p>기존 모집 정보에 3차 문제해결력 테스트가 8월 10일 토요일로 예정되어 있었는데, 마지막 날인 20일차 릴레이 프로젝트를 수행해야하는 시간에 테스트가 진행되었습니다.&lt;/p>
&lt;p>대략적으로 말씀드리면, 부캠에서 제공했던 모든 과정들이 단시간에 종합되어있는 테스트였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7.png"
width="491"
height="340"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7_hu5fb8e3cf3fed11573f93053e9937564e_404795_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/4/img_7_hu5fb8e3cf3fed11573f93053e9937564e_404795_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="부캠 종합 선물세트"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;p>부캠에 성실히 참여했다면 방식 자체는 생소하지는 않았겠지만, 역시나 시간은 많이 부족했네요🥲&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>마지막 주차에는 같이 학습을 진행한 캠퍼분들에게 영감을 줄 수 있었던것 같아 1주차 이후로 가장 뿌듯했던 한 주 였던 것 같습니다.&lt;/p>
&lt;p>마지막 주차여서 챌린지 과정 전체에대한 회고를 포함해야하나 고민했는데, 따로 작성하기로 결정하여 4주차 회고만 남기게 되었네요&lt;/p>
&lt;p>다음 글은 챌린지 과정 전체에 대한 회고를 올릴 예정이니 기대해주세요😁&lt;/p>
&lt;p>이번에는 3주차 그룹 회고에 남겼던 글로 마무리하겠습니다.&lt;/p>
&lt;p>끝까지 읽어주셔서 감사합니다☺️ 모두 정말 고생 많으셨어요🔥🔥🔥&lt;/p>
&lt;blockquote>
&lt;p>소프트웨어 장인 책 부분에 성장을 위한 자세에 관해 읽었는데요, 이 부분에서 &amp;ldquo;훈련&amp;quot;을 어떻게 해야 좋은지에 대한 언급이 있습니다.&lt;/p>
&lt;p>훈련을 할 때는 시간이 아무리 많이 걸린다고 하더라도 본인이 할 수 있는 최선의 결과를 만들지 않는다면 성장에는 큰 의미가 없기 때문에 최선을 다하는 것이 중요하다고해요!&lt;/p>
&lt;p>우리 모두 지금까지 열심히 해오고있지만, 앞으로도 최선을 다해서 함께 성장했으면 좋겠어요&lt;/p>
&lt;p>한 주간 정말 고생 많으셨습니다! 맴버쉽에서 꼭 뵈어요 :D&lt;/p>
&lt;/blockquote></description></item><item><title>챌린지 과정 3주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/</link><pubDate>Sat, 03 Aug 2024 11:22:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/cover.png" alt="Featured image of post 챌린지 과정 3주차 회고" />&lt;p>챌린지 3주차가 마무리되었습니다🥳&lt;/p>
&lt;p>이번주 역시 저번주와 마찬가지로, 저번주보다 훨씬 더 빠르게 지나간 것 같네요.&lt;/p>
&lt;p>미션도 어려웠지만 이번주는 날씨가 역대급으로 더웠는데, 에어컨 고장 이슈가 발생하는 바람에 육체적, 정신적으로 정말 힘들었던 한 주 였습니다🥵&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img.png"
width="772"
height="512"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_hu49700197eb00dd7c6958db7079e6d44f_504814_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_hu49700197eb00dd7c6958db7079e6d44f_504814_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;h2 id="짝-활동">짝 활동&lt;/h2>
&lt;p>이번주는 저번주에 예고되었던대로 &lt;strong>짝 활동&lt;/strong>으로 한 주가 진행되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1.png"
width="506"
height="245"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1_hue18cc63406e6b0e55de22018cf95147c_73580_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/3/img_1_hue18cc63406e6b0e55de22018cf95147c_73580_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;p>각자 개발하고 짝과 함께 서로의 결과물을 개선해보는 &lt;strong>짝 개선&lt;/strong>이 11~12일 이틀에 걸쳐 진행되었고, 같이 개발하고 각자 개선해보는 &lt;strong>짝 개발&lt;/strong>이 13~14일 이틀에 걸쳐 진행되었습니다.&lt;/p>
&lt;p>미션을 함께하며 문제 해결을 위해 많은 소통을 하였습니다.&lt;/p>
&lt;p>의사 결정 과정에서 공통으로 중요하다고 생각하는 부분, 공통으로 중요하지 않다고 생각하는 부분 등을 토론하며 훨씬 더 빠르게 최선의 선택을 할 수 있었던 것 같아 좋았습니다.&lt;/p>
&lt;hr>
&lt;p>이번주도 저번주에 이어서 &lt;strong>애자일스러운 개발&lt;/strong>과 &lt;strong>TDD&lt;/strong>를 시도했습니다. 이번에는 짝과 함께 했다는 것이 조금 다를 것 같네요&lt;/p>
&lt;p>&lt;strong>애자일스러운 개발&lt;/strong>은 개인 미션일 때는 어느정도 달성할 수 있었으나, 짝 개발에서는 짝이 지금까지 해오던 스타일과 많이 달라 완전히 적용하지는 못했고,&lt;/p>
&lt;p>&lt;strong>TDD&lt;/strong>역시 미션의 접근 방법에 맞춘 테스트를 작성하는 것에 어려움을 느껴 일부만 적용하여 조금 아쉬웠습니다.&lt;/p>
&lt;h2 id="미션">미션&lt;/h2>
&lt;p>이번주 미션도 역시 어려운 주제들을 다뤘습니다.&lt;/p>
&lt;p>저번주는 패러다임 등과 같은 내용들로 생각의 전환이 필요하여 어려웠다면, 이번주는 저번주의 개념에 복잡한 요구사항이 추가된 모습이었습니다.&lt;/p>
&lt;p>아마도 2일씩 이루어질 짝 활동을 반영하여 더 어려운 문제로 선정했던것이 아닐까 예상해봅니다.&lt;/p>
&lt;h3 id="11일차-이벤트-주도-개발과-스레드-풀">11일차: 이벤트 주도 개발과 스레드 풀&lt;/h3>
&lt;p>11일차 미션은 짝 개선을 하기 위한 개인 결과를 만드는 과정이었습니다.&lt;/p>
&lt;p>미션의 요구사항을 나름대로 해석해보면, &lt;strong>이벤트 주도 설계&lt;/strong>를 통해 이벤트 발생시 작업을 &lt;strong>비동기&lt;/strong>로 실행하고, 해당 작업을 &lt;strong>스레드&lt;/strong>를 이용해 동시에 처리할 수 있도록 해야하는 문제였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>이벤트 주도 설계&lt;/strong>&lt;/p>
&lt;p>저번주 미션을 통해 &lt;strong>이벤트 주도 설계&lt;/strong>에 어느정도 감을 잡았다고 생각했었는데, 요구사항이 훨씬 복잡해지니 정신을 못차리게 되더군요 &lt;del>안 좋은 컨디션 때문인지 더 그랬던 것 같아요&lt;/del> 🥲&lt;/p>
&lt;p>하지만 과제를 마무리할 때 쯤에는 이벤트와 더욱 친해졌다는 느낌을 받을 수 있었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>테스트 코드&lt;/strong>&lt;/p>
&lt;p>제 설계는 작업들이 이벤트를 연쇄적으로 발생시켜 실행되는 구조였는데, 연쇄적으로 실행되는 동안 작업의 상태들을 추적하는 테스트를 적용해야한다고 판단하였습니다.&lt;/p>
&lt;p>하지만 연쇄적으로 처리되는 일부 작업이 &lt;code>Private&lt;/code> 메소드로 실행되는터라 모든 처리 흐름에서의 상태 변화 추적할 수 있는 테스트 코드를 작성할 방법이 떠오르지 않더군요&amp;hellip;&lt;/p>
&lt;p>이에 따라, 이벤트로 처리되는 흐름에서의 &lt;strong>모든 상태 변화&lt;/strong>를 검증하지는 못했습니다.&lt;/p>
&lt;p>(개선 방법은 아래에 나옵니다! 끝까지 봐주세요😁)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>스레드&lt;/strong>&lt;/p>
&lt;p>이벤트 흐름으로 실행 될 마지막 작업을 JS의 &lt;strong>worker-thread&lt;/strong>(이하 WT)를 통해 처리할 수 있다고 판단되었지만, WT를 무한정 생성할수는 없다고 판단했기 때문에 &lt;strong>WT Pool&lt;/strong>을 구현할 필요성을 느꼈습니다.&lt;/p>
&lt;p>&lt;del>시간이 부족했던 이유도 있지만&lt;/del> 워커를 적절히 만들고 배분할 좋은 방법이 떠오르지 않아, 결과적으로 스레드를 이용한 처리는 &lt;strong>비동기 처리&lt;/strong>로 대체하여 구현했습니다.&lt;/p>
&lt;h3 id="12일차-짝-개선---같이-개선하기">12일차: 짝 개선 - 같이 개선하기&lt;/h3>
&lt;p>&lt;strong>짝 개선&lt;/strong>은 11일차에 만든 자신의 결과물 중 개선할 부분을 찾아 선정하고, 짝과 함께 선정한 부분을 개선하는 과정이었습니다.&lt;/p>
&lt;p>기존 결과에서 새로운 것을 추가하지 않고 개선하는 방향으로 진행하라는 지침이 있어, 저는 &lt;strong>테스트를 위한 코드 구조 일부 개선과 테스트 추가&lt;/strong>, 짝은 &lt;strong>관심사 분리를 위한 구조 개선&lt;/strong>을 개선 목표로 선정했습니다.&lt;/p>
&lt;p>저희 페어는 아래와 같은 방식으로 개선 과정을 진행하였습니다.&lt;/p>
&lt;ol>
&lt;li>짝에게 왜 이러한 부분을 개선하려고 하는 지 설명&lt;/li>
&lt;li>그 이유에 맞춰 각자의 관점에서 문제를 해석&lt;/li>
&lt;li>의견 교환을 통해 문제 재구조화&lt;/li>
&lt;li>세부 구현을 보며 의견 교환 및 수정&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>나의 개선: 테스트를 위한 구조 개선&lt;/strong>&lt;/p>
&lt;p>11일차 미션에서 어려웠던 점으로 언급했던 부분인 &lt;strong>이벤트가 연쇄적으로 발생하는 구조로 인한 상태 변화 추적 테스트&lt;/strong>의 개선을 위해 호출 구조를 약간 변경하였습니다.&lt;/p>
&lt;p>그리고 &lt;code>Jest&lt;/code>의 &lt;code>SpyOn&lt;/code>을 활용하여 이벤트 발생시 특정 함수가 호출되는지 확인하고, 호출되는 함수가 상태를 적절히 변경하는지 테스트 하는 방향으로 개선되었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>짝의 개선: 관심사 분리를 위한 구조 개선&lt;/strong>&lt;/p>
&lt;p>피어 세션에서 다른 분들에 작업 결과를 보며 특정 클래스가 &lt;strong>너무 많은 책임&lt;/strong>을 가지고있다고 판단하셨고, 이를 함께 개선하였습니다.&lt;/p>
&lt;p>클래스의 특정 관심사를 묶어 다른 클래스로 분리하고, 기존 클래스의 메서드를 호출해야하는 부분을 이벤트로 처리하게 변경하였습니다.&lt;/p>
&lt;p>이 과정에서 연쇄적으로 처리해야하는 부분이 이전 클래스와 &lt;strong>강한 결합&lt;/strong>이 남아있어 같이 고민하게 되었는데, 제가 &lt;strong>콜백 함수를 넘기는 메서드&lt;/strong>를 제안하였고 이를 반영하였습니다.&lt;/p>
&lt;p>저의 의견으로 고민되었던 부분을 개선할 수 있어 뿌듯했네요😁&lt;/p>
&lt;h3 id="13일차-짝-구현---페어-프로그래밍">13일차: 짝 구현 - 페어 프로그래밍&lt;/h3>
&lt;p>13일차에는 &lt;strong>분산 버전 관리 시스템&lt;/strong>인 &lt;strong>Git&lt;/strong>을 완벽하게 이해해야 해결할 수 있는 미션이 주어졌습니다.&lt;/p>
&lt;p>또한 &lt;strong>페어 프로그래밍&lt;/strong>을 통해 주어진 미션을 해결해야하는 조건이 있었습니다.&lt;/p>
&lt;p>새롭게 배정된 짝과 어떻게 미션을 수행할지 협의했고, 결과적으로 아래와 같은 흐름으로 미션을 수행했습니다.&lt;/p>
&lt;ol>
&lt;li>각자 미션 해결을 위해 필요한 내용들 학습&lt;/li>
&lt;li>함께 요구사항 분석&lt;/li>
&lt;li>함께 설계&lt;/li>
&lt;li>함께 구현&lt;/li>
&lt;/ol>
&lt;p>바로 만나서 학습부터 같이 수행하는 것이 아니라 각자 관련 내용에 대해 충분히 학습한 후 미션 수행을 시작하였습니다.&lt;/p>
&lt;hr>
&lt;p>지난주에 했던 방법과 유사하게 &lt;code>VSCode&lt;/code>의 &lt;code>Live share&lt;/code>를 통해 페어 프로그래밍을 진행하였고, 개발 전 충분한 분석과 설계를 위해 &lt;code>mermaid&lt;/code> 를 적극적으로 활용하였습니다.&lt;/p>
&lt;p>이전까지는 주로 &lt;strong>객체 지향 프로그래밍&lt;/strong>을 주로 활용했었는데, 짝이 선호하는 &lt;strong>함수형 프로그래밍&lt;/strong>을 시도한 것도 새로운 시도였네요😊&lt;/p>
&lt;p>이에 따라 요구하는 기능들을 모듈로 묶어 설계하고 구현하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>TDD와 애자일스러운 개발&lt;/strong>&lt;/p>
&lt;p>짝에게 &lt;strong>애자일스러운 개발&lt;/strong>과 &lt;strong>TDD&lt;/strong>를 제안하여 시도했습니다.&lt;/p>
&lt;p>아쉽게도 저도 이러한 방식에 완전히 적응된 상태는 아니었고, 짝도 불편함을 느끼고 있다는 것이 작업 효율이 떨어지는 것으로 느낄 수 있었습니다.&lt;/p>
&lt;p>이러한 이유로 짝이 편해하는 방식으로 자연스럽게 전환되었던 것 같습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>파일 시스템 테스트&lt;/strong>&lt;/p>
&lt;p>파일과 디렉터리를 처리해야하는 요구사항이 있었습니다.&lt;/p>
&lt;p>테스트 과정에서 실제 파일과 디렉터리를 생성하여 작업하는 것이 적절치 않다고 판단하여 이를 대체할 수 있는 방법을 찾게 되었고,&lt;code>mock-fs&lt;/code>를 찾아 적용하였습니다.&lt;/p>
&lt;p>하지만&amp;hellip; &lt;code>Node v20&lt;/code> 환경에서 &lt;code>fs&lt;/code>의 모든 &lt;strong>파일 쓰기&lt;/strong> 가 모킹한 가상 디렉터리에 생성되는 것이 아닌 실제 디렉터리에 생성하는 문제가 발생하였습니다.&lt;/p>
&lt;p>파일을 처리해야하는 부분이 미션에서 굉장히 중요한 부분이었기 때문에 어떻게든 해결해보려했지만 시간이 많지 않았기 때문에, 이때 부터 테스트 코드를 작성하지 않고 개발을 진행하게 되었네요🥲&lt;/p>
&lt;hr>
&lt;p>전주와 다르게 짝에게 테스트에 대한 긍정적인 인식을 심어주지 못한 것 같아 많이 아쉬웠지만 다음에 이러한 상황이 발생한다면 빠르게 결정을 내려 &lt;strong>TDD&lt;/strong>를 끝까지 이어나가야겠다고 다짐 하게되었습니다👊&lt;/p>
&lt;h3 id="14일차-각자-개선하기">14일차: 각자 개선하기&lt;/h3>
&lt;p>13일차에 짝과 만든 결과물을 각자의 방식으로 개선하는 과정이었습니다.&lt;/p>
&lt;p>이러한 단계를 만든 이유를 예상해보자면&amp;hellip; 같이 고민하여 만든 결과물이지만, 각자의 방법으로 개선된 결과를 보며 어떠한 생각의 차이를 가지고있는지 확인해볼라는 의도 같았습니다.&lt;/p>
&lt;p>12일차 &lt;strong>같이 개선하기&lt;/strong>와 마찬가지로 새로운 것을 추가하는 것 보다는 기존 구현에서 개선해보라는 지침이 있어 기존 결과에서 문제점이라고 생각했던 부분을 개선하였습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>나의 개선: 코드 구조 개선&lt;/strong>&lt;/p>
&lt;p>13일차의 미션을 수행할 때 요구하는 기능을 각각 나누어 개발하는 방식으로 진행되었습니다.&lt;/p>
&lt;p>구현 과정에서 &lt;strong>TDD&lt;/strong>로 시작했지만 결국 테스트 코드를 작성하지 않게 되었었는데, 이유 중 하나가 모든 기능에서 공통적으로 사용되었던 &lt;strong>파일 시스템과의 결합을 적절히 분리하지 못했기 때문&lt;/strong>이라는 생각을 하게되었습니다.&lt;/p>
&lt;p>&lt;strong>파일시스템&lt;/strong>을 통해 파일과 디렉터리를 다루는 부분을 완벽히 분리한다면, 다른 주요 로직들은 파일 시스템을 이용해야하는 데이터를 &lt;strong>엔티티&lt;/strong>로 취급하여 처리할 수 있게 됩니다.&lt;/p>
&lt;p>그렇다면 &lt;strong>파일시스템 관련 테스트만 배제&lt;/strong>할 수 있기 때문에 다른 처리에서는 &lt;strong>TDD&lt;/strong>를 지속할 수 있었지 않았을까? 하고 말이죠&lt;/p>
&lt;p>그래서 &lt;code>FileSystem&lt;/code>이라는 클래스를 별도로 구현하여 파일에 관한 모든 책임을 담당하게 하였습니다.&lt;/p>
&lt;p>또한 파일로 핸들링 해야하는 &lt;strong>데이터를 정의&lt;/strong>하여 엔티티처럼 활용할 수 있도록 하였습니다.&lt;/p>
&lt;p>추가적으로 주요 처리 흐름을 클래스로 분리해 &lt;code>FileSystem&lt;/code>을 주입하여 데이터의 처리 흐름에 집중할 수 있도록 구조를 변경하였습니다.&lt;/p>
&lt;p>이러한 변경을 통해 가독성을 높히는 것은 물론, 기존 기능을 구현한 코드의 크기를 획기적으로 줄일 수 있었습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>&lt;code>mock-fs&lt;/code>&lt;/strong>&lt;/p>
&lt;p>쓰기 작업에서의 이슈로 인해 제대로 활용하지 못했던 &lt;code>mock-fs&lt;/code>가 신경쓰여 잠이 안오더라구요😂&lt;/p>
&lt;p>이에 다양한 방법들을 시도했지만 결국 해결할 수 없었습니다.&lt;/p>
&lt;p>그래서 다른 언어에서도 파일 시스템을 활용한 기능들을 테스트 해야할텐데 어떤 방법들을 활용하고있을까 찾아보게 되었습니다.&lt;/p>
&lt;p>해결 방법은 단순했더라구요..🥲&lt;/p>
&lt;p>그냥 파일 처리를 테스트할 디렉터리를 따로 만들고, 그 디렉터리에서만 확인하는 것 이었습니다.&lt;/p>
&lt;p>테스트 디렉터리를 구성한 후 &lt;code>.gitignore&lt;/code>로 해당 디렉터리를 안 올라가게 만들면 되었던건데&amp;hellip; &lt;code>mock-fs&lt;/code>에 너무 집착한 탓에 충분히 생각해볼 수 있는 단순한 방법도 고려하지 못했던 것 같습니다.&lt;/p>
&lt;p>이 일을 계기로 조금 더 여유를 가지고 문제를 바라봐야겠다는 다짐을 해봅니다.🔥&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>이번주는 개인적으로 컨디션이 많이 안좋았어서 그만큼 결과물도 좋지 않았던 것 같습니다.&lt;/p>
&lt;p>첫주의 각오처럼 결과물을 통해서 인사이트를 드리고 싶었는데 조금 아쉬웠어요. &lt;del>그래도 다음주에는 에어컨이 수리됩니다.&lt;/del>&lt;/p>
&lt;p>하지만 그랬기 때문에 개선하기에 더욱 많은 변화를 보여드릴 수 있었을지도 모르겠습니다.&lt;/p>
&lt;p>한 주간 모두 고생 많으셨습니다. 부캠 챌린지도 1주밖에 남지 않았네요! 마지막까지 화이팅해봐요🔥🔥🔥&lt;/p></description></item><item><title>챌린지 과정 2주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/</link><pubDate>Sat, 27 Jul 2024 21:23:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/cover.png" alt="Featured image of post 챌린지 과정 2주차 회고" />&lt;p>부스트캠프 챌린지 과정 2주차가 마무리되었습니다 🥳&lt;/p>
&lt;p>저번주에는 중요한 CS 내용들을 직접 구현해보는 미션들이 주어졌다면, 이번주는 개발 방법론, 디자인 패턴, 아키텍처와 같은 것들을 종합적으로 활용하여 특정 기능을 구현하는 내용들로 미션들이 구성되었습니다.&lt;/p>
&lt;p>또한, 첫 회고에 남겼던 &lt;strong>건방진 생각&lt;/strong>을 깨버리듯🥲 한명도 빠짐없이 역량이 출중하신 캠퍼들과 스터디그룹을 이루어 진행하게 되었습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img.png"
width="800"
height="316"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_hu131439b1cfdaa317552cdf91e94ff142_702376_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_hu131439b1cfdaa317552cdf91e94ff142_702376_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="호크아이 슨배님 ㅜ"
class="gallery-image"
data-flex-grow="253"
data-flex-basis="607px"
>&lt;/p>
&lt;p>요구사항 자체는 저번주보다 여렵지는 않았지만, &lt;strong>생각의 전환&lt;/strong>을 필요로하는 미션들이 많았기 때문에 다른 의미로 어려웠던 것 같습니다.&lt;/p>
&lt;p>저번주보다는 시간을 덜 쓰긴 했지만 학습부터 분석, 설계, 구현까지 평균적으로 10시간 정도는 필요했던 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1.png"
width="743"
height="475"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1_hudb4f3b36d5d6c17e98a88d51baa0bc39_194558_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_1_hudb4f3b36d5d6c17e98a88d51baa0bc39_194558_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="페어 프로그래밍"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="375px"
>&lt;/p>
&lt;p>그리고 지난주의 &lt;strong>짝 설계&lt;/strong>에 더해서 &lt;strong>짝 구현&lt;/strong> 미션이 있어 다른 캠퍼 한 분과 분석 부터 구현까지 진행해볼 수 있었습니다.&lt;/p>
&lt;p>같이 개발할 수 있다면 어떠한 방법을 활용해도 괜찮았지만, 저희 조는 VSCode의 &lt;strong>Live Share&lt;/strong>를 이용하여 &lt;strong>페어 프로그래밍&lt;/strong>으로 진행하였습니다.&lt;/p>
&lt;h2 id="피어-세션">피어 세션&lt;/h2>
&lt;p>저번 주와는 다르게 자신의 코드를 설명하는 시간을 갖지 않았습니다.&lt;/p>
&lt;p>이렇게 진행한 이유는 모든 팀원분들이 역량이 좋으셨기 때문인데, 코드를 굳이 설명하지 않아도 이해하는데 어려움이 없는데다, 인사이트까지 충분히 가져갈 수 있었습니다.&lt;/p>
&lt;p>이에 따라 피어 세션 전 과정인 &lt;strong>피어 컴파일링&lt;/strong>과정에서 코드를 분석하고 &lt;strong>질문&lt;/strong>, &lt;strong>좋았던 부분&lt;/strong>, &lt;strong>개선이 필요한 부분&lt;/strong>을 정리 한 후 피어 세션에 참여했습니다.&lt;/p>
&lt;p>&lt;strong>인당 5분&lt;/strong> 정도의 시간으로 빨리 마무리 하고, &lt;strong>같이 고민해볼 내용&lt;/strong>이나 미션 관련 기술 등에 대해서 토론하는 시간을 가졌습니다.&lt;/p>
&lt;p>다 같이 &lt;strong>토론하는 과정&lt;/strong>에서 많은 것들을 알아갈 수 있었기 때문에 구성원들 모두 &lt;strong>만족&lt;/strong>스러워 했습니다.&lt;/p>
&lt;h2 id="미션-해결-및-학습">미션 해결 및 학습&lt;/h2>
&lt;p>이번 주는 미션만 잘 수행하는 것을 넘어서 새로운 것을 시도해봤습니다.&lt;/p>
&lt;p>마스터인 &lt;strong>JK&lt;/strong>님이 올려주신 해설 영상에 &lt;strong>애자일하게 개발하는 법&lt;/strong>에 대한 부분을 언급하셨는데, 이부분에서 공감이 되어 바로 적용했습니다.&lt;/p>
&lt;p>이와 더불어 모든 미션에 &lt;strong>TDD&lt;/strong>를 시도하여 진행하였습니다.&lt;/p>
&lt;h3 id="agile-하게-개발하는-법">Agile 하게 개발하는 법&lt;/h3>
&lt;p>애자일의 핵심은 &amp;ldquo;&lt;strong>빠르고 짧은 피드백 루프&lt;/strong>&amp;ldquo;를 통해 변화에 민첩하게 대응하는 것 입니다.&lt;/p>
&lt;p>사실 애자일은 조직 전체에 대상으로 배포 가능한 단위에 대해 민첩한 대응을 의미하지만, 이러한 방식을 개발에만 적용해보려고했습니다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
분석 --> 설계 --> 구현 --> 완료
&lt;/pre>
&lt;p>이전까지는 위와 같이 &amp;ldquo;&lt;strong>분석 - 설계 구현&lt;/strong>&amp;ldquo;과정으로 진행하였다면,&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a[분석] --> b[작업 분해]
subgraph sa [반복]
c[설계] --> d[구현]
end
b --> c
d --> e[완료]
&lt;/pre>
&lt;p>이번 주 부터는 작업을 작은 단위로 작업을 분해하고, 설계에서 개발까지 반복적으로 수행하는 방식으로 변경하였습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3.png"
width="1024"
height="505"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3_hu6efaf883042006ad369b55af72bffa5b_178457_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_3_hu6efaf883042006ad369b55af72bffa5b_178457_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="애자일 개발 방법론"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>미션들을 수행하면서 나름 완벽히 설계해도 조금씩 바뀌게되어 &lt;strong>곤란했던 경험&lt;/strong>이 있었는데, &lt;strong>변화를 가정하고 진행&lt;/strong>되는 이러한 방식으로 &lt;strong>수월하게&lt;/strong> 구조 등을 변경할 수 있었던 것 같습니다.&lt;/p>
&lt;h3 id="tdd">TDD&lt;/h3>
&lt;p>사실 이전 직장에서부터 테스트 코드의 부재로 인한 고통을 뼈져리게 느꼈었기 때문에 테스트의 중요성은 너무나 잘 알고 있습니다.&lt;/p>
&lt;p>꼭 필요하다고 생각하고 있지만 습관화가 안되어 잘 활용하지 못하고 있었는데, 테스트에 익숙해지기 이번 기회를 시작하기로 마음먹었습니다.&lt;/p>
&lt;p>덤으로 위에서 언급한 &lt;strong>Agile 하게 개발하기&lt;/strong>에서 빠른 피드백을 받는 데 도움이 될 것이라 생각해 적용했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4.png"
width="1024"
height="680"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4_hu34b341a957e0c9749c8004b23f93334d_19212_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_4_hu34b341a957e0c9749c8004b23f93334d_19212_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="TDD"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="361px"
>&lt;/p>
&lt;p>다들 아시는 것 처럼 구현 과정에 들어가기 전, 미션의 요구사항들을 모두 테스트 코드로 작성한 후, 테스트를 통과시키는 방식으로 진행하였습니다.&lt;/p>
&lt;p>가장 어려움을 느꼈던 테스트 코드 작성은 &lt;code>GPT&lt;/code>의 도움을 받으며 진행하였는데, 설계를 잘 수행한 덕에 테스트를 정확히 잘 만들어줘서 매우 편리했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1.gif"
width="350"
height="240"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1_hu47953aa9c0ae4dc86946ac79a368a34c_398794_480x0_resize_box_1.gif 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/gif1_hu47953aa9c0ae4dc86946ac79a368a34c_398794_1024x0_resize_box_1.gif 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="350px"
>&lt;/p>
&lt;p>터미널을 한쪽에 상시로 띄워놓고 &lt;code>jest --watch&lt;/code>를 통해 실시간으로 통과되는 것을 확인하며 구현했는데, 마치 &lt;strong>게임&lt;/strong>을 하는 것 같다는 느낌을 받을 수 있어서 미션을 더 재미있게 수행했던 것 같습니다. 🎮&lt;/p>
&lt;h2 id="학습-정리">학습 정리&lt;/h2>
&lt;p>일부 내용에 대해서는 학습했던 내용을 당일에 정리하여 올릴 수 있었으나, 짝 설계나 짝 구현 등의 미션들로 인해 따로 학습 정리가 어려웠습니다.&lt;/p>
&lt;p>이러한 부분은 주말을 활용해 추가적으로 진행하기로 결정했습니다.&lt;/p>
&lt;p>이를 위해 어떤 내용을 어떻게 정리할 것인지만 따로 메모했고, 이 회고를 마무리하고 진행할 예정이에요🥲&lt;/p>
&lt;h2 id="나의-변화">나의 변화&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2.png"
width="278"
height="181"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2_hubca6b70351de21cb18efa000fe370bd6_35435_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_2_hubca6b70351de21cb18efa000fe370bd6_35435_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="틀깨기"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="368px"
>&lt;/p>
&lt;p>이번 주 미션들은 풀스택 개발자로 일했던 경험과 다양한 방식으로 개발했던 경험 덕분에 접근 방법을 결정하는데는 큰 어려움이 없었습니다만&amp;hellip;&lt;/p>
&lt;p>다른 분들의 작업물들을 보며 개발자라면 고민해봤을 내용인 &lt;strong>얼마나 깊게 이해하고 있는가&lt;/strong>에 대해서 한번 더 생각해볼 수 있는 계기였습니다.&lt;/p>
&lt;p>특히 &lt;strong>함수형 프로그래밍&lt;/strong>을 활용해야하는 미션에서는 &lt;strong>상태&lt;/strong>를 아예 만들지않고 구현하셨던 캠퍼도 있어서 충격적으로 다가왔던 것 같습니다.&lt;/p>
&lt;p>다행히도 &lt;strong>이벤트 주도 아키텍처&lt;/strong>가 필요했던 미션은 모든 캠퍼분들이 어려움을 느끼셨었는데, 저의 결과물로 인사이트를 드릴 수 있었습니다.😁&lt;/p>
&lt;h3 id="나-좀-성장해-있었을지도">나 좀 성장해 있었을지도?&lt;/h3>
&lt;p>부스트캠프 5기에 참여했던 예전에 저였다면 뛰어난 동료들을 봤을 때 스스로 자책했었겠죠?&lt;/p>
&lt;p>이번에는 오히려 뛰어난 동료들을 보며 다른 분들은 어떻게 생각했을까? 어떻게 구현했을까? 라는 기대감에 다음날 피어세션이 더욱더 기다려졌어요&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5.png"
width="640"
height="427"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5_hu84b39fe339821112912a9fed69654c15_768651_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/2/img_5_hu84b39fe339821112912a9fed69654c15_768651_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="10시 50분의 내 모습"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/p>
&lt;p>문득 이런 저의 모습을 보며 &lt;strong>나 좀 성장해 있었을지도?&lt;/strong> 라는 생각이 들면서 몰래 뿌듯했었네요😋&lt;/p>
&lt;h3 id="좋은-동료들">좋은 동료들&lt;/h3>
&lt;p>사실 저는 &lt;strong>집단 지성&lt;/strong>을 믿지 않았습니다.&lt;/p>
&lt;p>지금까지 살아오면서 여러 활동을 했었지만, 대부분 잘 하는 일부가 &lt;strong>캐리&lt;/strong>하는 방식으로 진행되었었기 때문이에요.&lt;/p>
&lt;p>그런데 각각의 개성이있는 잘 하는 사람들끼리 모여 내는 &lt;strong>학습 시너지&lt;/strong>는 저의 생각을 바꾸기 충분했습니다.&lt;/p>
&lt;p>큰 기업들에서 자신들의 최고의 장점 &lt;strong>좋은 동료들&lt;/strong>이라고 강조하는 모습을 쉽게 볼 수 있었는데, 이 부분을 확실히 이해할 수 있었습니다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>지난주보다 더 빠르게 한 주가 지나갔습니다. 다음주는 짝 활동이 더 많아진다고 하는데 벌써 기대가 되네요.&lt;/p>
&lt;p>하루 하루를 정해진 일과에 맞춰 충실히 살아가는게 중요하다는 걸 새삼 다시 느끼는 것 같습니다. 조금(많이) 피곤하긴 하지만 살아온 어느때보다 활력이 넘치는 것 같아요🔥🔥🔥&lt;/p>
&lt;p>마지막으로 그룹원들에게 코멘트 할 때 공통으로 넣으려고 준비한 문구로 마무리하겠습니다. 끝까지 읽어주셔서 감사합니다.😁&lt;/p>
&lt;blockquote>
&lt;p>소프트웨어 장인이라는 책에서 나온 내용인데 소프트웨어 장인은 경지라기 보다는 이념이나 마음가짐으로 소프트웨어 장인정신을 잘 지키고 있는가를 의미한다고 해요&lt;/p>
&lt;p>프로페셔널하게 행동하기,&lt;br>
다른 개발자들에게 배우기,&lt;br>
자신의 지식을 나누기 등이 이에 해당한다고 합니다.&lt;/p>
&lt;p>저자는 이런 것들은 잘 하고 있다면 스스로를 소프트웨어 장인이라고 칭해도 괜찮다고 생각한데요&lt;/p>
&lt;p>그런 의미에서 조금 부끄럽지만 저희 그룹원들 모두 소프트웨어 장인이라고 불러도 괜찮지 않을까요? ㅎㅎ&lt;/p>
&lt;p>한 주 동안 많이 배워갑니다. 멤버쉽에서 다시 뵈어요 :D&lt;/p>
&lt;/blockquote></description></item><item><title>챌린지 과정 1주차 회고</title><link>https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/</link><pubDate>Sun, 21 Jul 2024 20:49:49 +0900</pubDate><guid>https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/</guid><description>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/cover.png" alt="Featured image of post 챌린지 과정 1주차 회고" />&lt;p>부스트캠프 챌린지 과정에 입과한 후 첫 일주일이 흘렀습니다.&lt;/p>
&lt;p>챌린지 과정은 총 6명이 스터티 그룹을 구성하여 일주일간 정해진 일과에 참여하게됩니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>(10:00 ~ 11:00)&lt;/strong> 체크인 및 피어리뷰&lt;/li>
&lt;li>&lt;strong>(11:00 ~ 12:00)&lt;/strong> 피어세션&lt;/li>
&lt;li>&lt;strong>(13:00 ~ 18:00)&lt;/strong> 미션 해결 및 학습&lt;/li>
&lt;li>&lt;strong>(18:00 ~ 19:00)&lt;/strong> 미션 결과 제출&lt;/li>
&lt;li>&lt;strong>(19:00 ~ 09:00)&lt;/strong> 체크아웃 및 학습 정리&lt;/li>
&lt;/ul>
&lt;p>매일 개발자가 꼭 알아야 할 CS 중 핵심 내용들을 직접 구현하는 미션을 하나씩 수행하게 되는데, 생각보다 훨씬 도전적인 미션들이 나와서 정신없이 한 주가 지나갔습니다.&lt;/p>
&lt;p>어떤 내용들을 공부했는지는 공개할 수 없지만, 대략적으로 어떻게 진행되었는지 설명드리겠습니다.&lt;/p>
&lt;h2 id="피어세션">피어세션&lt;/h2>
&lt;p>제가 가장 기대했던 일과인 피어세션은 오전 9시에 공개되는 스터디 그룹원의 결과물을 확인하고, 10시부터 요구사항들을 잘 구현했는지 기록하는 피어리뷰를 진행합니다.&lt;/p>
&lt;p>저는 피어리뷰가 열리기 전인 오전 9시부터 스터디 그룹의 모든 분들의 코드를 꼼꼼히 읽고, 어떤 방향으로 문제를 &lt;strong>해석&lt;/strong>했는지, &lt;strong>접근법&lt;/strong>, &lt;strong>잘한 부분&lt;/strong>, &lt;strong>개선이 필요한 부분&lt;/strong>을 파악하는데 최대한 많은 시간을 쓰려고 노력하였습니다.&lt;/p>
&lt;hr>
&lt;p>피어리뷰가 끝난 오전 11시부터 본격적인 피어세션이 시작됩니다.&lt;/p>
&lt;p>저희 스터디그룹은 각자의 결과물을 리뷰하고 다른 캠퍼들이 결과물에 대해서 &lt;strong>질문&lt;/strong>과 &lt;strong>칭찬&lt;/strong>, &lt;strong>개선점&lt;/strong>에 대해 이야기하며 의문점이 생기는 부분은 토론하는 방식으로 진행되었습니다.&lt;/p>
&lt;ul>
&lt;li>요구사항 분석 과정 설명&lt;/li>
&lt;li>설계 결과 설명&lt;/li>
&lt;li>코드 설명&lt;/li>
&lt;li>어려웠던 점, 고생한 점, 고민되었던 점 공유&lt;/li>
&lt;/ul>
&lt;h2 id="미션-해결-및-학습">미션 해결 및 학습&lt;/h2>
&lt;p>개발자라면 꼭 알아야 할 CS 핵심 내용중 한 가지의 결과물을 만드는 미션이 주어졌습니다.&lt;/p>
&lt;p>워낙 중요한 내용들이 나와서 이미 알고 있다고 생각했는데, 막상 구현하려고하니 손이 잘 안 움직이더군요&amp;hellip;😅&lt;/p>
&lt;p>학습한지 시간이 많이 흐르기도 했고, 처음 공부할 때 부터 면접에 잘 대답할 수 있는 정도만 학습했던 과거의 저에게 실망?했던 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/img.png"
width="720"
height="720"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/img_hu84daaf8610ac0bf327b79ddb8c96d514_187579_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/img_hu84daaf8610ac0bf327b79ddb8c96d514_187579_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="중대장은 너희에게 실망했다."
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>저 같은 경우 이미 &lt;strong>웹・모바일 5기 챌린지&lt;/strong> 과정을 수료했음에도 불구하고 첫날을 제외한 모든 미션에 많은 시간을 할애해야 할 정도로 어려운 미션들이 주어졌습니다.&lt;/p>
&lt;p>2~4일차 같은 경우 평균적으로 오전 3시까지 미션을 수행했고, 슬랙에는 새벽까지 활동하시는 캠퍼분들도 꽤 많았습니다.&lt;/p>
&lt;p>늦은 시간까지 미션을 수행했음에도 불구하고 미션을 완전히 수행하지 못한 캠퍼들도 속출했고, 5기 활동과 비교해봤을때도 2, 3주차에 나와야 할 미션들이 나왔던 것 같아 앞으로 나올 미션들이 걱정이 되면서도 기대가 되었던 것 같습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/gif.gif"
width="350"
height="204"
srcset="https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/gif_hu8c154d05ce659bc202b5c95353ff2aa6_665878_480x0_resize_box_1.gif 480w, https://codemario318.github.io/post/boostcamp-9th/review/challenge/1/gif_hu8c154d05ce659bc202b5c95353ff2aa6_665878_1024x0_resize_box_1.gif 1024w"
loading="lazy"
alt="올라와봐"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="411px"
>&lt;/p>
&lt;p>또한 이렇게 도전적인 미션들로 인해 5기 챌린지 과정의 저가 회상되며, 다른 캠퍼분들의 &lt;strong>멘탈 관리&lt;/strong>가 걱정되기도 했던 것 같습니다.&lt;/p>
&lt;p>이러한 이유로 피어세션에서 스터디그룹원들에게 용기를 복돋아주기위해 많은 힘을 썼습니다.&lt;/p>
&lt;hr>
&lt;p>챌린지 이전에 진행되었던 베이직 과정 중간부터, 저의 결과물을 확인하시는 캠퍼분들이 더욱 잘 이해할 수 있도록 &lt;strong>README&lt;/strong>에서 &lt;code>mermaid&lt;/code>를 이용한 다이어그램을 활용하기 시작했습니다.&lt;/p>
&lt;ul>
&lt;li>요구사항 분석 과정에서 &lt;strong>플로우 차트&lt;/strong>를 이용해 데이터 및 작업들의 흐름을 잘 표현할 수 있도록 했습니다.&lt;/li>
&lt;li>설계 과정에서 &lt;strong>클래스 다이어그램&lt;/strong>을 활용하여 사용될 자료구조와 클래스, 함수 등을 예측할 수 있도록 했습니다.&lt;/li>
&lt;/ul>
&lt;p>또한 주요 기능들의 구현 과정을 설명할 때 해당 기능을을 구현한 &lt;strong>실제 코드&lt;/strong>를 활용하여 코드를 뜯어보지 않고도 이해할 수 있도록 시도했습니다.&lt;/p>
&lt;p>이러한 부분들이 스터디그룹원들이 저의 결과물을 이해하는데 큰 도움이 되었다고 말씀하셔서 뿌듯했네요😊&lt;/p>
&lt;h2 id="학습-정리">학습 정리&lt;/h2>
&lt;p>늦은 시간까지 미션을 수행하다보니, 학습 내용을 정리 할 시간이 부족했습니다. &lt;del>핑계1&lt;/del>&lt;/p>
&lt;p>&lt;del>사실 학습 정리를 할 만큼 학습한 내용은 없었습니다.&lt;/del>&lt;/p>
&lt;p>일과의 마지막인 금요일에 마지막 일과로 수료생들과의 밋업 시간을 가졌는데 매일 새벽 5시에 주무시면서도 어떻게든 정리를 끝내셨다는 말씀을 듣고 조금(많이) 반성하게 되었던 것 같습니다.&lt;/p>
&lt;p>다음 일과때부터는 정말로 학습이 필요한 미션이 나올지는 모르겠지만, 학습이 필요하지 않더라고 다른 분들이 참고할 수 있도록 노하우를 담는 방식으로 시도해봐야겠습니다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>부스트캠프 웹모바일 과정 9기에 참여하기 전, 5기 챌린지 과정에서 뛰어난 역량의 다른 캠퍼분들을 보고 의지를 불태우며 학습하던 저의 모습이 떠올랐습니다.&lt;/p>
&lt;p>그런 이유로 이번엔 제가 다른 캠퍼분들의 교보재, 이정표가 될 수 있지 않을까? 라는 건방진 생각을 하게 되었어요😂&lt;/p>
&lt;p>제가 뛰어난 다른 캠퍼들을 보며 동기부여하고 따라해보며 성장했던 것 처럼, 이번에는 제가 그 역할을 해보려고합니다.&lt;/p>
&lt;p>다른 캠퍼님들 그리고 이 글을 보게 될 많은 분들 포기하지 마시고 같이 끝까지 열심히 해봐요🔥🔥🔥🔥&lt;/p>
&lt;p>마지막으로 조금 부끄럽지만 그룹 회고에 남긴 응원 메시지를 올려봅니다. 다른 분들도 꼭 힘이 되셨으면 좋겠어요. 화이팅~~👊👊👊&lt;/p>
&lt;blockquote>
&lt;p>안녕하세요 :D&lt;br>
마지막에 팀회고에서 말씀드렸지만, 사실 저는 5기 챌린지 수료생이었어요 ㅎㅎ&lt;/p>
&lt;p>여러분과 같이 피어세션 수행하면서 처음 부캠 했던 모습이 생각나서 뭔가 좋기도하고 싫기도 하고 복잡한 기분이 들었었네요.&lt;/p>
&lt;p>제가 5기 챌린지 참여할 때도 잘하시는 분들이 많았었는데, 이번 피어세션을 진행하면서 참여하신 모두 저를 잘한다고, 많이 배워간다고 말씀해주셔서 감사했습니다.&lt;/p>
&lt;p>그러면서도 제가 다른 뛰어난 분들을 보면서 느꼈던 안좋은 감정들을 느끼고 계신 것 같아서 뭔가 안타깝기도 했습니다.&lt;/p>
&lt;p>그래서 챌린지를 먼저 수료한 입장으로 꼭 해드리고 싶은 말이 있어요!&lt;/p>
&lt;p>잘 하는 사람을 보면서 동기부여가 되고, 실제로 좋은 부분을 따라해보면서 배우는게 정말로 좋은 성장 방법 중 하나이죠.&lt;/p>
&lt;p>이때 그 사람만큼 혹은 보다 더 잘하는 것을 목표로 하는 것이 아닌, 부캠에서 계속해서 강조하는 것 처럼 스스로의 성장에 집중하셔야해요.&lt;/p>
&lt;p>처음에는 동기부여에 많은 도움이 되고, 실력이 빠르게 좋아지는 경험을 하실 수 있지만, 잘 하는 분들과의 비교가 반복되면 자책하게되더라구요.&lt;/p>
&lt;p>앞으로 강도 높은 미션들을 계속 수행하시면서 체력적, 정신적으로 한계를 느끼게 되실거에요.&lt;br>
이런 상황에서 비교가 반복되면 자책이 점점 더 심해지고, 이로 인해 마음이 꺾기게 되면, 꽤 오랜 기간동안 빠져나올수 없더라구요&amp;hellip;ㅎㅎ&lt;/p>
&lt;p>그렇기 때문에 잘 하시는 분들의 결과물들은 학습 재료로만 사용하시고, 스스로가 얼만큼 더 잘해졌는지, 그리고 잘한게 있다면 스스로 칭찬해 주는 건 어떨까요?&lt;/p>
&lt;p>지금 잘하시는 다른 분들도 여러분들과 같은 단계를 밟아오셨어요!&lt;/p>
&lt;p>항상 말씀드린것 처럼 저는 조금 더 공부하고, 경험한 것 뿐이구요! 앞으로 꾸준히 노력하신다면 저보다 훨씬 잘하실수 있으실거에요!!(저도 엄청 어려웠어요 ㅋㅋ)&lt;/p>
&lt;p>금요일 릴프에서 &amp;ldquo;개발자 원칙&amp;quot;이라는 책의 &amp;ldquo;탁월한 팀의 특징&amp;quot;에 대한 이야기가 나왔는데, 구글에서 조사한 탁월한 팀의 공통점은 &amp;ldquo;심리적 안정감&amp;quot;이였구요,&lt;/p>
&lt;p>&amp;ldquo;안정감&amp;quot;은 &amp;ldquo;실수가 드러났을 때에도 처벌받거나 놀림 받지 않을 것 이라는 믿음&amp;quot;이라고 합니다.&lt;/p>
&lt;p>이 이야기를 다른 관점에서 해석해보면, 탁월한 역량을 가진 인원들의 특징은 &amp;ldquo;실수가 드러났을 때도 부끄러워하거나, 두려워하지 않는다.&amp;rdquo; 아닐까요?&lt;/p>
&lt;p>그렇다면 탁월한 역량을 가진 개발자가 되기 위해서는 &amp;ldquo;실수나 부족한 부분들을 부끄럽게 생각하지 않고, 두려워하지 않아야 하는게 아닐까?&amp;rdquo; 라는 생각이 들었습니다.&lt;/p>
&lt;p>걱정하지마세요!!!&lt;/p>
&lt;p>당장 스스로가 부족하다고 느끼실지 모르겠지만, 모두 이번 부캠을 통해 분명히 이전보다 성장하시게 될 거구요! 앞으로 계속 성장하실거잖아요?&lt;/p>
&lt;p>1주간 즐거웠습니다! 모두 챌린지 끝까지 치열하게 참여하고, 맴버쉽에서 다시 뵈어요 :)&lt;/p>
&lt;/blockquote></description></item></channel></rss>