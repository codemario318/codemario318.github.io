<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Common on Mario Blog</title><link>https://codemario318.github.io/categories/common/</link><description>Recent content in Common on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Fri, 05 Jul 2024 10:02:50 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/categories/common/index.xml" rel="self" type="application/rss+xml"/><item><title>12. 채팅 시스템 설계</title><link>https://codemario318.github.io/post/system-design-interview/12/</link><pubDate>Fri, 05 Jul 2024 10:02:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/12/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/cover.png" alt="Featured image of post 12. 채팅 시스템 설계" />&lt;p>이번 장에서는 채팅 시스템을 설계해본다.&lt;/p>
&lt;p>채팅 앱은 중점적으로 다뤄야하는 문제에 따라 방향성이 달라질 수 있으므로, 요구사항을 확실히 파악하는것이 매우 중요하기 때문에, 어떤 채팅 앱을 설계하려는지 확실히 해 두는것이 중요하다.&lt;/p>
&lt;ul>
&lt;li>1:1 채팅 중점
&lt;ul>
&lt;li>페이스북 메신저, 위챗, 왓츠앱 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>그룹 채팅 중점
&lt;ul>
&lt;li>슬랙 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>대규모 그룹의 소통과 음성 채팅
&lt;ul>
&lt;li>디스코드 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;p>질문을 통해 의도를 파악한다.&lt;/p>
&lt;ul>
&lt;li>Q. 1:1 채팅, 그룹 채팅?
&lt;ul>
&lt;li>A. 둘 다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 모바일? 웹?
&lt;ul>
&lt;li>A. 둘 다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 트래픽 규모는?
&lt;ul>
&lt;li>A. DAU 5천만&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 그룹 채팅의 인원 제한?
&lt;ul>
&lt;li>A. 최대 100명&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 중요 기능으로는?
&lt;ul>
&lt;li>A. 1:1 채팅, 그룹 채팅, 사용자 접속 상태 표시, 텍스트 메시지만 허용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 메시지 길이 제한은?
&lt;ul>
&lt;li>A. 100,000자 이하&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 종단 간 암호화(end-to-end encryption) 지원?
&lt;ul>
&lt;li>A. 현재로서는 불필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 채팅 이력은 얼마나 보관?
&lt;ul>
&lt;li>A. 영원히.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위와 같은 질의응답을 통해 아래와 같은 요구사항을 찾을 수 있다.&lt;/p>
&lt;ul>
&lt;li>응답지연이 낮은 일대일 채팅기능(DAU)&lt;/li>
&lt;li>최대 100명까지 참여할 수 있는 그룹 채팅 기능&lt;/li>
&lt;li>사용자의 접속상태 표시 기능&lt;/li>
&lt;li>다양한 단말 지원, 하나의 계정으로 여러 단말에 동시 접속 지원(웹, 앱 둘다 고려)&lt;/li>
&lt;li>푸시 알림&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;p>채팅 시스템의 경우 클라이언트는 모바일 앱이거나 웹 애필리케이션이다.&lt;/p>
&lt;p>클라이언트는 서로 직접 통신하지 않는 대신, 각 클라이언트는 위에 나열한 모든 기능을 지우너하는 채팅 서비스와 통신한다.&lt;/p>
&lt;p>따라서 채팅 서비스는 아래 기능을 제공해야 한다.&lt;/p>
&lt;ul>
&lt;li>클라이언트들로부터 메시지 수진&lt;/li>
&lt;li>메시지 수신자(recipient) 결정 및 전달&lt;/li>
&lt;li>수신자가 접속 상태가 아닌 경우 접속할 때까지 해당 메시지 보관&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img.png"
width="831"
height="141"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_hu846a4193e09f6599f67011f5f29692cb_42945_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_hu846a4193e09f6599f67011f5f29692cb_42945_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="클라이언트와 채팅 서비스 관계"
class="gallery-image"
data-flex-grow="589"
data-flex-basis="1414px"
>&lt;/p>
&lt;p>채팅을 시작하려는 클라이언트는 네트워크 통신 프로토콜을 사용하여 서비스에 접속하므로, 어떤 통신 프로토콜을 사용할 것인가도 중요한 문제다.&lt;/p>
&lt;p>대부분의 클라이언트/서버 애플리케이션에서 요청을 보내는 것은 클라이언트이며, 채팅 시스템도 마찬가지다.&lt;/p>
&lt;p>위 예시에서는 송신 클라이언트가 수신 클라이언트에게 전달 할 메시지를 보낼 때, 오랜 세월 검증된 &lt;strong>HTTP 프로토콜&lt;/strong>을 사용한다.&lt;/p>
&lt;p>HTTP를 사용한다면, 채팅 서비스에서는 클라이언트가 지속적으로 메시지를 보낸다는 특성을 고려하여, &lt;code>keep-alive&lt;/code> 헤더를 사용해 서버와 클라이언트가 연결을 끊지 않고 유지하는 것이 좋다.&lt;/p>
&lt;p>하지만 메시지 발신에 비해 수신 시나리오는 이것보다 복잡하기 때문에 HTTP가 적절치 않을 수 있다.&lt;/p>
&lt;ul>
&lt;li>서버가 채팅 발신 요청을 받게 되면, 서버가 수신자에게 메시지를 전달해야한다.&lt;/li>
&lt;li>HTTP는 클라이언트가 연결을 만드는 특성으로, 서버에서 클라이언트로 임의 시점에 메시지를 보내는 데 쉽게 쓰일 수 없다.&lt;/li>
&lt;/ul>
&lt;p>이러한 문제를 개선하기위해 서버가 연결을 만드는 것처럼 동작하는 많은 기법이 제안되었다.&lt;/p>
&lt;ul>
&lt;li>폴링, 롱폴링, 웹소켓&lt;/li>
&lt;/ul>
&lt;h3 id="폴링">폴링&lt;/h3>
&lt;p>폴링은 클라이언트가 주기적으로 서버에게 새 메시지가 있는냐고 물어보는 방법이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_1.png"
width="831"
height="879"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_1_huaa79ccbd5858bc013d0c473ceded0490_112044_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_1_huaa79ccbd5858bc013d0c473ceded0490_112044_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="폴링"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;p>폴링 비용은 폴링을 자주하면 할수록 올라가므로, 답해줄 메시지가 없는 경우에는 서버 자원이 불필요하게 낭비된다.&lt;/p>
&lt;h3 id="롱-폴링">롱 폴링&lt;/h3>
&lt;p>폴링의 비효율성을 개선하기위해 롱 폴링이 제안되었다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_2.png"
width="831"
height="746"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_2_hu9446a286a0026c1d57706962c9f7b24e_79065_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_2_hu9446a286a0026c1d57706962c9f7b24e_79065_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="롱 폴링"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;ul>
&lt;li>클라이언트는 새 메시지가 반환되거나 타임아웃 될 때가지 연결을 유지한다.&lt;/li>
&lt;li>새 메시지를 받으면 기존 연결을 종료하고 서버에 새로운 요청을 보내 모든 절차를 다시 시작한다.&lt;/li>
&lt;/ul>
&lt;p>이 방법은 다음과 같은 약점이 있다.&lt;/p>
&lt;ul>
&lt;li>메시지를 보내는 클라이언트가 수신하는 클라이언트가 같은 채팅 서버에 접속하지 않을 수 있다.
&lt;ul>
&lt;li>HTTP 서버들은 보통 무상태이다. 즉 로드 밸런싱을 위해 라운드 로빈 알고리즘을 사용하는 경우(요청을 무작위로 분산하는 경우), 메시지를 받은 서버는 해당 메시지를 수신할 클라이언트와의 롱 폴링 연결을 가지고 있지 않은 서버일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서버는 클라이언트가 연결을 해제했는지 알 수 있는 좋은 방법이 없다.&lt;/li>
&lt;li>여전히 비효율적이다.
&lt;ul>
&lt;li>메시지를 많이 받지 않는 클라이언트도 타임아웃이 일어날 때마다 주기적으로 서버에 다시 접속한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="웹소켓">웹소켓&lt;/h3>
&lt;p>웹소켓은 서버가 클라이언트에게 비동기 메시지를 보낼 때 가장 널리 사용하는 기술이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_3.png"
width="821"
height="498"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_3_huebfcb5cdfaf26f40aef3085b89b61c7b_77060_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_3_huebfcb5cdfaf26f40aef3085b89b61c7b_77060_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="웹소켓"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="395px"
>&lt;/p>
&lt;ul>
&lt;li>웹소켓 연결은 클라이언트가 시작하며, 한번 맺어진 연결은 항구적이며(변하지않고 오래가며) 양방향이다.&lt;/li>
&lt;li>처음에는 HTTP 연결이지만 특정 핸드셰이크 절차를 거져 웹소켓 연결로 업그레이드된다.
&lt;ul>
&lt;li>일반적으로 방화벽이 있는 환경에서도 잘 동작한다.&lt;/li>
&lt;li>HTTP, HTTPS 가 쓰는 포트를 그대로 활용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>연결이 만들어지고 나면, 서버는 클라이언트에게 비동기적으로 메시지를 전송할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>웹소켓은 메시지를 보내려는 클라이언트에게 준수한 HTTP 프로토콜의 특징에 더해 양방향 메시지 전송까지 가능하게 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_4.png"
width="607"
height="355"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_4_huc6205357ded82087fb2f30ab5b292d46_55256_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_4_huc6205357ded82087fb2f30ab5b292d46_55256_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="웹소켓 활용 예시"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="410px"
>&lt;/p>
&lt;ul>
&lt;li>웹소켓을 이용하면 메시지를 보낼 때나 받을 때 동일한 프로토콜을 사용할 수 있으므로, 설계와 구현이 단순하고 직관적이다.&lt;/li>
&lt;li>단, 웹소켓 연결은 항구적으로 유지되어야 하기 때문에 서버 측에서 연결 관리를 효율적으로 해야한다.&lt;/li>
&lt;/ul>
&lt;h3 id="개략적-설계안">개략적 설계안&lt;/h3>
&lt;p>클라이언트와 서버 사이의 주 통신 프로토콜로 웹소켓을 사용하지만, 다른 부분에서는 굳이 웹소켓을 쓸 필요는 없다.&lt;/p>
&lt;p>대부분의 기능인 회원가입, 로그인, 사용자 프로파일 등은 기존 HTTP상에서 구현하는 것이 더 좋다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_5.png"
width="644"
height="853"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_5_hu3b37951fbb1bf15ccce6fcd26ff957e5_234991_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_5_hu3b37951fbb1bf15ccce6fcd26ff957e5_234991_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="개략적 설계안"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="181px"
>&lt;/p>
&lt;p>채팅 시스템은 세 부분으로 나눠볼 수 있다.&lt;/p>
&lt;h4 id="무상태-서비스">무상태 서비스&lt;/h4>
&lt;p>이 설계안에서 무상태 서비스는 로그인, 회원가입, 사용자 프로파일 표시 등을 처리하는 &lt;strong>전통적인 요청/응답&lt;/strong> 서비스다.&lt;/p>
&lt;ul>
&lt;li>일반적인 웹과 앱이 제공하는 기능들&lt;/li>
&lt;/ul>
&lt;p>무상태 서비스는 로드밸런서 뒤에 위치한다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>서비스 탐색(sevice discovery) 서비스&lt;/strong>
&lt;ul>
&lt;li>클라이언트가 접속할 채팅 서버의 DNS 호스트명을 클라이언트에게 알려주는 역할을 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="상태-유지-서비스">상태 유지 서비스&lt;/h4>
&lt;p>채팅 서비스는 각 클라이언트는 채팅 서버와 독립적인 네트워크를 유지해야한다.&lt;/p>
&lt;ul>
&lt;li>클라이언트는 보통 다른 서버로 연결을 변경하지 않는다.&lt;/li>
&lt;li>서비스 탐색 서비스가 채팅 서버스와 긴밀히 협력하여 특정 서버에 부하가 몰리지 않도록 한다.&lt;/li>
&lt;/ul>
&lt;h4 id="써드파티-서비스-연동">써드파티 서비스 연동&lt;/h4>
&lt;p>채팅 앱에서 가장 중요한 써드파티 서비스는 푸시 알림이다.&lt;/p>
&lt;ul>
&lt;li>새 메시지 수신시 앱이 실행중이지 않더라도 알림을 받아야한다.&lt;/li>
&lt;/ul>
&lt;p>따라서 푸시 알림 서비스와의 통합은 아주 중요하다.&lt;/p>
&lt;h4 id="규모-확장성">규모 확장성&lt;/h4>
&lt;p>이번 장에서 다루는 시스템은 동시 접속자가 1M 이라고 가정하는데, 접속당 10K 서버 메모리가 필요하다면, 10GB 메모리만으로도 처리 가능하다.&lt;/p>
&lt;p>하지만 이정도 규모의 트래픽을 서버 한대로 처리하는 것은 &lt;strong>SPOF&lt;/strong> 등의 이유로 적절치 않다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_6.png"
width="797"
height="872"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_6_hu2f66c0a05c004fc0f4d257e106c12a84_230686_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_6_hu2f66c0a05c004fc0f4d257e106c12a84_230686_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="개략적 설계안 최종"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="219px"
>&lt;/p>
&lt;p>유의할 것은 실시간으로 메시지를 주고받기 위해 클라이언트는 채팅 서버와 웹소켓 연결을 끊지 않고 유지한다는 것이다.&lt;/p>
&lt;ul>
&lt;li>채팅 서버
&lt;ul>
&lt;li>클라이언트 사이에 메시지를 중계하는 역할 담당&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>접속 상태 서버(Presence server)
&lt;ul>
&lt;li>사용자의 접속 여부 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>API 서버
&lt;ul>
&lt;li>로그인, 회원가입, 프로파일 변경 등 그 외 나머지를 전부 처리(무상태)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>알림 서버
&lt;ul>
&lt;li>푸시 알림을 보냄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>키-값 저장소
&lt;ul>
&lt;li>채팅 이력을 보관&lt;/li>
&lt;li>시스템에 접속한 사용자는 이전 채팅 이력을 전부 보게된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="저장소">저장소&lt;/h4>
&lt;p>채팅 시스템의 기술 스택중 가장 중요한 부분 중 하나는 데이터 계층으로, 이 계층을 올바르게 만드는 데는 노력이 필요하다.&lt;/p>
&lt;p>중요한 선택 중 하나는 어떤 데이터베이스를 쓰는가(관계형, NoSQL 등)이며, 고려해야 할 핵심 요인은 &lt;strong>데이터의 유형&lt;/strong>과 &lt;strong>읽기/쓰기 연산의 패턴&lt;/strong> 이다.&lt;/p>
&lt;p>채팅 시스템에서는 보통 두 가지다.&lt;/p>
&lt;p>&lt;strong>사용자 프로파일, 설정, 친구 목록과 같은 일반적인 데이터&lt;/strong>&lt;br>
안정성을 보장하는 관계형 데이터베이스가 적절하다.&lt;/p>
&lt;ul>
&lt;li>다중화(replication)와 샤딩(sharding)으로 이러한 데이터의 가용성과 규모확장성을 보증할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>채팅 시스템에 고유한 데이터(채팅 이력)&lt;/strong>&lt;br>
이러한 유형의 데이터를 어떻게 보관할 지 결정하려면 읽기/쓰기 연산 패턴을 이해해야한다.&lt;/p>
&lt;ul>
&lt;li>채팅 이력 데이터 양은 엄청나다.
&lt;ul>
&lt;li>페이스북 메신저나 왓츠앱은 매일 600억개 메시지를 처리함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>빈번하게 사용되는 것은 주로 최근에 주고받은 메시지이다.
&lt;ul>
&lt;li>대부분 사용자는 오래된 메시지는 확인하지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>검색 기능, 언급(mention)된 메시지, 특정 메시지로 점프 하는 등 무작위적인 데이터 접근을 하는 경우도 있다.&lt;/li>
&lt;li>1:1 채팅 앱의 경우 읽기:쓰기 비율은 대략 1:1&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>키-값 저장소&lt;/strong>가 이러한 패턴을 지원할 수 있는 데이터베이스이다.&lt;/p>
&lt;ul>
&lt;li>수평적 규모 확장이 쉽다.&lt;/li>
&lt;li>데이터 접근 지연시간이 낮다.&lt;/li>
&lt;li>관계형 데이터베이스는 롱 테일에 해당하는(넓고 적게 분포하는) 데이터를 잘 처리하지 못하는 경향이 있다.
&lt;ul>
&lt;li>인덱스가 커지면 무작위 접근을 처리하는 비용이 늘어난다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이미 많은 안정적인 채팅 시스템이 키-값 저장소를 채택하고있다.
&lt;ul>
&lt;li>페이스북: Hbase, 디스코드: 카산드라 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>롱테일 효과란?&lt;br>
&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_7.png"
width="487"
height="360"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_7_hub3d79bb345ad1bef179816c28fd060f6_45686_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_7_hub3d79bb345ad1bef179816c28fd060f6_45686_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="롱테일 효과"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;br>
파레토 법칙에 의한 80:20 집중 현상을 그래프에 나타냈을 때 꼬리처림 긴 부분을 형성하는 80%의 부분&lt;/p>
&lt;/blockquote>
&lt;h3 id="데이터-모델">데이터 모델&lt;/h3>
&lt;h4 id="11-채팅을-위한-메시지-테이블">1:1 채팅을 위한 메시지 테이블&lt;/h4>
&lt;pre class="mermaid" style="text-align: center;">erDiagram
Message {
message_id bigint
message_from bigint
message_to bigint
content text
created_at timestamp
}
&lt;/pre>
&lt;p>&lt;code>Message&lt;/code> 테이블의 기본키는 &lt;code>message_id&lt;/code>로, 메시지 순서를 쉽게 정할 수 있도록 하는 역할도 담당한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>created_at&lt;/code>은 메시지가 동시에 만들어 질 수 있으므로 순서를 정할 수 없다.&lt;/li>
&lt;/ul>
&lt;h4 id="그룹-채팅을-위한-메시지-테이블">그룹 채팅을 위한 메시지 테이블&lt;/h4>
&lt;pre class="mermaid" style="text-align: center;">erDiagram
GroupMessage {
channel_id bigint
message_id bigint
message_to bigint
content text
created_at timestamp
}
&lt;/pre>
&lt;p>&lt;code>(channel_id, message_id)&lt;/code> 복합키를 기본 키로 사용한다.&lt;/p>
&lt;ul>
&lt;li>채널은 채팅 그룹과 같은 뜻&lt;/li>
&lt;li>그룹 채팅에 적용될 모든 질의는 특정 채널을 대상으로 하기 때문에 &lt;code>channel_id&lt;/code>는 파티션 키로 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="메시지-id">메시지 ID&lt;/h4>
&lt;p>위에서 언급한 것 처럼 메시지 ID는 메시지들의 순서도 표현할 수 있어야한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>messege_id&lt;/code>는 고유해야한다.&lt;/li>
&lt;li>ID는 정렬 가능해하하며, 시간 순서와 일치해야한다.
&lt;ul>
&lt;li>새로운 ID는 이전 ID 보다 큰 값이어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>RDMBS라면 &lt;code>auto_increment&lt;/code>가 대안이 될 수 있지만 NoSQL은 보통 해당 기능을 제공하지 않는다.&lt;/p>
&lt;ul>
&lt;li>스노 플레이크 같은 전역적 순서 번호 생성기를 이용한다.&lt;/li>
&lt;li>지역적 순서 번호 생성기를 이용한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>지역적 순서 번호 생성기(Local sequence number generator)&lt;/strong>
유일성은 같은 그룹 안에서만 보증하면 충분하다는 의미이다.&lt;/p>
&lt;ul>
&lt;li>채팅 서비스의 특징에 따라 메시지의 순서는 같은 채널, 혹은 1:1 채팅 세션 안에서만 유지되면 충분하다.&lt;/li>
&lt;li>전역적 ID 생성기에 비해 구현이 쉽다.&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;p>채팅 시스템의 &lt;strong>서비스 탐색&lt;/strong>(service discovery), 메시지 전달 흐름, 사용자 접속 상태 표시하는 법 정도가 세부적으로 살펴보기 적절하다.&lt;/p>
&lt;h3 id="서비스-탐색">서비스 탐색&lt;/h3>
&lt;p>서비스 탐색 기능의 주된 역할은 &lt;strong>클라이언트에게 가장 적합한 채팅 서버를 추천&lt;/strong>하는 것으로 아래의 기준을 활용하여 추천하게된다.&lt;/p>
&lt;ul>
&lt;li>클라이언트의 위치(Geographical location)&lt;/li>
&lt;li>서버의 용량 등&lt;/li>
&lt;/ul>
&lt;p>서비스 탐색 기능을 구현하는 데 널리 쓰이는 오픈 소스 솔루션으로 &lt;strong>아파치 주키퍼&lt;/strong>같은 것이 있다.&lt;/p>
&lt;ul>
&lt;li>사용 가능한 모든 채팅 서버를 등록시켜 두고, 클라이언트가 접속을 시도하면 사전에 정한 기준에 따라 최적의 채팅 서버를 골라준다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_8.png"
width="718"
height="698"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_8_hu68029a52e7e091c75ea09add17c7232a_109024_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_8_hu68029a52e7e091c75ea09add17c7232a_109024_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="주키퍼로 구현한 서비스 탐색 흐름"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="246px"
>&lt;/p>
&lt;ol>
&lt;li>사용자 A가 시스템에 로그인 시도&lt;/li>
&lt;li>로드밸런서가 로그인 요청을 API 서버들 가운데 하나로 보냄&lt;/li>
&lt;li>API 서버가 사용자 인증을 처리하고 나면 서비스 탐색 기능이 동작하여 최적의 채팅 서버를 찾음&lt;/li>
&lt;li>찾은 서버와 웹소켓 연결&lt;/li>
&lt;/ol>
&lt;h3 id="메시지-흐름">메시지 흐름&lt;/h3>
&lt;p>채팅 시스템에 있어서 종단 간 메시지 흐름을 이해하는 것은 흥미로운 주제이다.&lt;/p>
&lt;p>1:1 채팅 메시지의 처리 흐름과 여러 단말 간 메시지 동기화 과정을 살펴본 후, 그룹 채팅 메시지의 처리 흐름을 살펴본다.&lt;/p>
&lt;h4 id="11-채팅-메시지-처리-흐름">1:1 채팅 메시지 처리 흐름&lt;/h4>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_9.png"
width="675"
height="721"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_9_hu69fa1b06e4a527bf42d264a7bc16f467_126368_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_9_hu69fa1b06e4a527bf42d264a7bc16f467_126368_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="1:1 채팅 메시지 처리 흐름"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;ol>
&lt;li>사용자 A가 채팅 서버 1로 메시지 전송&lt;/li>
&lt;li>채팅 서버 1은 ID 생성기를 사용해 해당 메시지의 ID 결정&lt;/li>
&lt;li>채팅 서버 1은 해당 메시지를 메시지 동기화 큐로 전송&lt;/li>
&lt;li>메시지가 키-값 저장소에 보관됨&lt;/li>
&lt;li>
&lt;ol>
&lt;li>사용자 B가 접속 중인 경우 메시지는 접속 중인 채팅 서버로 전송&lt;/li>
&lt;li>사용자가 B가 접속 중이 아닌 경우 푸시 알림 메시지를 푸시 알림 서버로 보냄&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>채팅 서버는 웹소켓 연결을 통해 메시지를 사용자 B에게 전송.&lt;/li>
&lt;/ol>
&lt;h4 id="여러-단말-사이의-메시지-동기화">여러 단말 사이의 메시지 동기화&lt;/h4>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_10.png"
width="827"
height="601"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_10_hu237dc5988b99c0258bbc96b3a092c068_95136_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_10_hu237dc5988b99c0258bbc96b3a092c068_95136_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="메시지 동기화"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="330px"
>&lt;/p>
&lt;p>각 단말은 관측된 가장 최신 메시지의 ID를 추적하기 위한 &lt;code>cur_max_message_id&lt;/code> 라는 변수를 유지한다.&lt;/p>
&lt;ul>
&lt;li>수신자 ID가 현재 로그인한 사용자 ID와 같다.&lt;/li>
&lt;li>키-값 저장소에 보관된 메시지로서, 그 ID가 &lt;code>cur_max_message_id&lt;/code>보다 크다.&lt;/li>
&lt;/ul>
&lt;p>위 조건을 만족하는 메시지는 새 메시지로 간주된다.&lt;/p>
&lt;p>&lt;code>cur_max_message_id&lt;/code>는 단말마다 별도로 유지 관리하면 되는 값이라 키-값 저장소에서 새 메시지를 가져오는 동기화 작업도 쉽게 구현할 수 있다.&lt;/p>
&lt;h4 id="소규모-그룹-채팅에서의-메시지-흐름">소규모 그룹 채팅에서의 메시지 흐름&lt;/h4>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_11.png"
width="747"
height="649"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_11_hu3912c41ccdd5c95c734f65d055df6d26_117861_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_11_hu3912c41ccdd5c95c734f65d055df6d26_117861_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="소규모 그룹 채팅 메시지 흐름"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="276px"
>&lt;/p>
&lt;p>1:1 채팅에 비해 조금 더 복잡하다.&lt;/p>
&lt;p>사용자 A가 그룹 채팅방에서 메시지를 보내면, 사용자 B, C의 &lt;strong>메시지 동기화 큐&lt;/strong>에 복사된다.&lt;/p>
&lt;p>이러한 설계는 소규모 그룹 채팅에 적합하다.&lt;/p>
&lt;ul>
&lt;li>새로운 메시지가 왔는지 확인하려면 자기 큐만 보면 되므로 메시지 동기화 플로가 단순하다.&lt;/li>
&lt;li>그룹이 크지 않으면 메시지를 수신자별로 복사해서 큐에 넣는 작업 미용이 문제되지 않는다.&lt;/li>
&lt;/ul>
&lt;p>많은 사용자를 지원해야 하는 경우라면 똑같은 메시지를 모든 사용자의 큐에 복사하는 게 바람직하지 않다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_12.png"
width="716"
height="620"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_12_hub1a8d58b86737e6dabf10d70f993bb1d_101204_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_12_hub1a8d58b86737e6dabf10d70f993bb1d_101204_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="수신자 관점 메시지 흐름"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="277px"
>&lt;/p>
&lt;p>위와 같은 흐름을 &lt;strong>메시지 수신자&lt;/strong> 관점에서 살펴보면, 한 수신자는 여러 사용자로부터 오는 메시지를 수신할 수 있어야 한다.&lt;/p>
&lt;h3 id="접속-상태-표시">접속 상태 표시&lt;/h3>
&lt;p>사용자 접속 상태를 표시하는 것은 상당수 채팅 애플리케이션의 핵심 기능이다.&lt;/p>
&lt;p>개략적 설계안의 &lt;strong>접속 상태 서버&lt;/strong>(presense server)를 통해 사용자의 상태를 관리하는데, 접속상태 서버는 클라이언트와 웹소켓으로 통신하는 실시간 서비스의 일부라는 점에 유의해야한다.&lt;/p>
&lt;p>&lt;strong>사용자 로그인&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_13.png"
width="766"
height="206"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_13_hub37db33c8b8c4205291185c196c0ce06_57084_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_13_hub37db33c8b8c4205291185c196c0ce06_57084_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="로그인"
class="gallery-image"
data-flex-grow="371"
data-flex-basis="892px"
>&lt;/p>
&lt;p>클라이언트와 실시간 서비스 사이에 웹소켓 연결이 맺어지고 나면 접속상태 서버는 A의 상태와 &lt;code>last_active_at&lt;/code> 타임스탬프 값을 키-값 저장소에 보관한다.&lt;/p>
&lt;p>이 절차가 끝나면 해당 사용자는 접속 중인 것으로 표시될 것이다.&lt;/p>
&lt;p>&lt;strong>로그아웃&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_14.png"
width="830"
height="167"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_14_huc82ec414ab58d2aa81718a978ef2720f_65884_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_14_huc82ec414ab58d2aa81718a978ef2720f_65884_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="로그아웃"
class="gallery-image"
data-flex-grow="497"
data-flex-basis="1192px"
>&lt;/p>
&lt;p>키-값 저장소에 보관된 사용자 상태가 &lt;code>online&lt;/code>에서 &lt;code>offline&lt;/code>으로 바뀐다.&lt;/p>
&lt;p>&lt;strong>접속 장애&lt;/strong>&lt;/p>
&lt;p>인터넷 연결이 끊어지는 상황에 대응할 수 있는 설계를 준비해야한다.&lt;/p>
&lt;p>사용자의 인터넷 연결이 끊어지면 클라이언트와 서버 사이에 맺어진 웹소켓 같은 지속성 연결도 끊어진다.&lt;/p>
&lt;p>이러한 경우 &lt;strong>사용자를 오프라인 상태로 표시하고 연결이 복구되면 온라인 상태로 변경&lt;/strong>하는 방법을 고려할 수 있지만, 짧은 시간 동안 인터넷 연결이 끊어졌다 복귀되는 현상이 흔하기 때문에 적절하지 않다.&lt;/p>
&lt;ul>
&lt;li>이런 현상마다 사용자의 접속 상태를 변경하는 것은 지나치며, 사용자 경험 측면에서도 바람직하지 않다.&lt;/li>
&lt;/ul>
&lt;p>이에 따라 &lt;strong>박동(heartbeat) 검사&lt;/strong>를 통해 이 문제를 해결한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_15.png"
width="753"
height="620"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_15_hu870405f6db98088b77813163c0a21c89_78387_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_15_hu870405f6db98088b77813163c0a21c89_78387_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="박동 검사"
class="gallery-image"
data-flex-grow="121"
data-flex-basis="291px"
>&lt;/p>
&lt;ol>
&lt;li>온라인 상태의 클라이언트로 하여금 주기적으로 박동 이벤트를 접속상태 서버로 보낸다.&lt;/li>
&lt;li>마지막 이벤트를 받은 지 x초 이내에 또 다른 박동 이벤트 메시지를 받으면 해당 사용자의 접속 상태를 계속 온라인으로 유지한다.&lt;/li>
&lt;/ol>
&lt;h3 id="상태-정보의-전송">상태 정보의 전송&lt;/h3>
&lt;p>상태정보 서버는 각각의 친구관게마다 채널을 하나씩 두는 발행-구독 모델을 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/12/img_16.png"
width="844"
height="399"
srcset="https://codemario318.github.io/post/system-design-interview/12/img_16_huda3d97a35351d5c19e5533f1c287c481_139268_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/12/img_16_huda3d97a35351d5c19e5533f1c287c481_139268_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="상태 정보 전송"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="507px"
>&lt;/p>
&lt;p>이러한 구조를 통해 친구 관계에 있는 사용자가 상태정보 변화를 쉽게 통지 받을 수 있게 된다(웹소켓 사용).&lt;/p>
&lt;p>이러한 방안은 그룹의 크기가 커지면 비용이나 시간이 많이 들게되므로 좋지 않다.&lt;/p>
&lt;ul>
&lt;li>그룹 하나의 100,000명이 있다면, 상태변화 1건당 100,000개의 이벤트 메시지가 발생한다.&lt;/li>
&lt;/ul>
&lt;p>이런 성능 문제를 해소하는 방법은&lt;/p>
&lt;ul>
&lt;li>사용자가 그룹 채팅에 입장하는 순간에만 상태 정보를 읽어가게 만든다.&lt;/li>
&lt;li>친구 리스트에 있는 사용자의 접속상태를 갱신하고 싶으면 수동으로 하도록 유도한다.&lt;/li>
&lt;/ul>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>1:1 채팅과 그룹 채팅을 전부 지원하는 채팅 시스템의 아키텍처를 살펴보았다.&lt;/p>
&lt;ul>
&lt;li>클라이언트와 서버 사이의 통신을 가능하도록 하기 위해 웹소켓을 사용했다.&lt;/li>
&lt;li>주요 컴포넌트
&lt;ul>
&lt;li>실시간 메시징을 지원하는 채팅 서버&lt;/li>
&lt;li>접속 상태 서버&lt;/li>
&lt;li>푸시 알림 서버&lt;/li>
&lt;li>채팅 이력을 보관할 키-값 저장소&lt;/li>
&lt;li>이를 제외한 나머지 기을을 구현하는 데 쓰을 API 서버 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>시간이 남는다면 다음과 같은 내용을 논의해도 좋다.&lt;/p>
&lt;ul>
&lt;li>사진이나 비디오 등의 미디어를 지원하도록 하는 방법
&lt;ul>
&lt;li>압축 방식, 클라우드 저장소, 섬네일 생성 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>종단 간 암호화&lt;/li>
&lt;li>캐시
&lt;ul>
&lt;li>이미 읽은 메시지를 캐시해 두면 서버와 주고받는 데이터 양을 줄일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>로딩 속도 개선
&lt;ul>
&lt;li>슬랙은 사용자의 데이터, 채널 등을 지역적으로 분산하는 네트워크를 구축하여 앱 로딩 속도를 개선하였다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오류 처리
&lt;ul>
&lt;li>채팅 서버 오류
&lt;ul>
&lt;li>서버 하나가 죽으면 서비스 탐색 기능이 동작하여 클라이언트에게 새로운 서버를 배정하고 다시 접속할 수 있도록 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메시지 재전송
&lt;ul>
&lt;li>재시도나 큐는 메시지의 안정적 전송을 보장하기 위해 흔히 사용되는 기법이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>11. 뉴스 피드 시스템 설계</title><link>https://codemario318.github.io/post/system-design-interview/11/</link><pubDate>Thu, 04 Jul 2024 22:51:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/11/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/cover.png" alt="Featured image of post 11. 뉴스 피드 시스템 설계" />&lt;h2 id="뉴스-피드란">뉴스 피드란?&lt;/h2>
&lt;p>페이스북의 도움말 페이지에서는 아래와 같이 뉴스 피드를 설명하고 있다.&lt;/p>
&lt;blockquote>
&lt;p>홈 페이지 중앙에 지속적으로 업데이트되는 스토리와 사용자 상태 정보 업데이트, 사진, 비디오, 링크, 앱 활동 팔로우하는 사람들, 페이지, 그룹으로부터 나오는 좋아요 등을 포함한다.&lt;/p>
&lt;/blockquote>
&lt;p>뉴스 피드 시스템 설계는 아주 유명한 면접 문제이다.&lt;/p>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;ul>
&lt;li>Q. 모바일 앱, 웹 어떤걸 지원해야하는가?
&lt;ul>
&lt;li>A. 둘다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 주요 기능은?
&lt;ul>
&lt;li>A. 사용자는 뉴스 피드 페이지에 새로운 스토리를 올릴 수 있어야함
&lt;ul>
&lt;li>친구들이 올리는 스토리를 볼 수도 있어야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 어떤 순서로 스토리가 표시되는가? 최신 포스트? 토픽 점수 기반?
&lt;ul>
&lt;li>A. 시간 흐름 역순으로 표시(Reverse chronological order)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 한 명의 사용자는 최대 몇 명의 친구를 가질 수 있는가?
&lt;ul>
&lt;li>A. 5,000명&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 트래픽 규모는?
&lt;ul>
&lt;li>A. 매일 천만 명 방문한다고 가정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 피드에 이미지나 비디오 스토리도 올라올 수 있는가?
&lt;ul>
&lt;li>A. 이미지나 비디오 등 미디어 파일이 포함될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="개략적-설계안-제시-및-동의-구하기">개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;p>뉴스 피드 시스템 설계는 &lt;strong>피드 발행&lt;/strong>(Feed publishing)과 &lt;strong>뉴스 피드 생성&lt;/strong>(News feed building) 두 가지 구분으로 나눌 수 있다.&lt;/p>
&lt;ul>
&lt;li>피드 발행
&lt;ul>
&lt;li>사용자가 스토리를 포스팅하면 해당 데이터를 캐시와 데이터베이스에 기록한다.&lt;/li>
&lt;li>새 포스팅은 친구의 뉴스 피드에도 전송된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>뉴스 피드 생성
&lt;ul>
&lt;li>뉴스 피드는 모든 친구의 포스팅을 시간 흐름 역순으로 모아서 만든다고 가정한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="뉴스-피드-api">뉴스 피드 API&lt;/h3>
&lt;p>뉴스 피드 API는 HTTP 프로토콜 기반으로 클라이언트가 서버와 통신하기 위해 사용하는 수단이다.&lt;/p>
&lt;ul>
&lt;li>상태 정보를 업데이트 할 때&lt;/li>
&lt;li>뉴스 피드를 가져올 때&lt;/li>
&lt;li>친구를 추가하는 등 다양한 작업 수행&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>피드 발행 API&lt;/strong>&lt;/p>
&lt;p>새 스토리를 포스팅하기 위한 API다.&lt;/p>
&lt;p>HTTP POST 형태로 요청을 보낸다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">POST /v1/me/feed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>인자
&lt;ul>
&lt;li>body: 포스트 내용&lt;/li>
&lt;li>Authorization 헤더: API 호출을 인증하기 위해 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>피드 읽기 API&lt;/strong>&lt;/p>
&lt;p>뉴스 피드를 가져오는 API다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">GET /v1/me/feed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>인자
&lt;ul>
&lt;li>Authorization 헤더: API 호출을 인증하기 위해 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="피드-발행">피드 발행&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img.png"
width="537"
height="818"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_hu891d2a45b04e66955eabc83b2e6d7650_139382_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_hu891d2a45b04e66955eabc83b2e6d7650_139382_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 발행 구조"
class="gallery-image"
data-flex-grow="65"
data-flex-basis="157px"
>&lt;/p>
&lt;ul>
&lt;li>사용자
&lt;ul>
&lt;li>모바일 앱이나 브라우저에서 새 포스팅을 올리는 주체&lt;/li>
&lt;li>&lt;code>POST /v1/me/feed&lt;/code> API를 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>로드밸런서(load balancer)
&lt;ul>
&lt;li>트래픽을 웹 서버들로 분산&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 서버
&lt;ul>
&lt;li>HTTP 요청을 내부 서비스로 중계하는 역할을 담당&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>포스팅 저장 서비스(Post service)
&lt;ul>
&lt;li>새 포스팅을 데이터베이스와 캐시에 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>포스팅 전송 서비스(Fanout service)
&lt;ul>
&lt;li>새 포스팅을 친구의 뉴스피드에 푸시(push)&lt;/li>
&lt;li>뉴스 피드 데이터는 캐시에 보관하여 빠르게 읽어갈 수 있도록 해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>알림 서비스(notification service)
&lt;ul>
&lt;li>친구들에게 새 포스팅이 올라왔음을 알림&lt;/li>
&lt;li>푸시 알림을 보냄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="뉴스-피드-생성">뉴스 피드 생성&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_1.png"
width="425"
height="634"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_1_hu69fcfbc2dbdf50bdcc685e78596b2bbb_88291_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_1_hu69fcfbc2dbdf50bdcc685e78596b2bbb_88291_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="뉴스 피드 생성 구조"
class="gallery-image"
data-flex-grow="67"
data-flex-basis="160px"
>&lt;/p>
&lt;ul>
&lt;li>사용자
&lt;ul>
&lt;li>뉴스 피드를 읽는 주체&lt;/li>
&lt;li>&lt;code>GET /v1/me/feed&lt;/code>를 이용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>로드 밸런서
&lt;ul>
&lt;li>트래픽을 웹 서버들로 분산&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 서버
&lt;ul>
&lt;li>트래픽을 뉴스 피드 서비스로 보냄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>뉴스 피드 서비스(news feed service)
&lt;ul>
&lt;li>캐시에서 뉴스 피드를 가져오는 서비스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>뉴스 피드 캐시(news feed cache)
&lt;ul>
&lt;li>랜더링할 때 필요한 피드ID를 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;h3 id="피드-발행-흐름-상세-설계">피드 발행 흐름 상세 설계&lt;/h3>
&lt;p>웹 서버와 포스팅 전송 서비스에 초점을 두고 확인한다.&lt;/p>
&lt;p>&lt;strong>웹 서버&lt;/strong>&lt;/p>
&lt;p>클라이언트와 통신할 뿐 아니라 인증이나 처리율 제한 기능도 수행한다.&lt;/p>
&lt;ul>
&lt;li>올바른 인증 토큰을 Authorization 헤더에 넣고 API를 호출하는 사용자만 포스팅 할 수 있어야 한다.&lt;/li>
&lt;li>스팸을 막고 유해한 콘텐츠가 자주 올라오는 것을 방지하기 위해 사용자가 올리 수 있는 포스팅 수를 제한을 둬야한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>포스팅 전송(팬아웃) 서비스&lt;/strong>&lt;/p>
&lt;p>포스팅 전송, 즉 팬아웃(fanout)은 어떤 사용자의 새 포스팅을 그 사용자와 친구 관계에 있는 모든 사용자에게 전달하는 과정이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_2.png"
width="863"
height="952"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_2_huda53be8af4aa5fdd5c6f7a22043667e4_267454_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_2_huda53be8af4aa5fdd5c6f7a22043667e4_267454_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="포스팅 전송 서비스"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;p>두 가지 유형이 존재하며 각기 장단점을 가진다.&lt;/p>
&lt;p>&lt;strong>푸시 모델(push model)&lt;/strong>&lt;/p>
&lt;p>새로운 포스팅을 기록하는 시점(쓰기 시점)에 뉴스피드를 갱신하게 된다.&lt;/p>
&lt;p>다시 말해, 포스팅이 완료되면 바로 해당 사용자의 캐시에 해당 포스팅을 기록한다.&lt;/p>
&lt;ul>
&lt;li>장점
&lt;ul>
&lt;li>뉴스피드가 실시간으로 갱신되며 친구 목록에 있는 사용자에게 &lt;strong>즉시 전송&lt;/strong>&lt;/li>
&lt;li>새 포스팅이 기록되는 순간에 뉴스 피드가 이미 갱신되므로(pre-computed) 뉴스 피드를 읽는 데 드는 시간이 짧아짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점
&lt;ul>
&lt;li>친구가 많은 사용자의 경우 뉴스 피드를 갱신하는 데 많은 시간이 소요될 수도 있음
&lt;ul>
&lt;li>핫키(Hotkey) 문제&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서비스를 자주 이용하지 않는 사용자의 피드까지 갱신해야 하므로 자원 낭비&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>풀 모델(pull model)&lt;/strong>&lt;/p>
&lt;p>피드를 읽어야 하는 시점에 뉴스 피드를 갱신한다.&lt;/p>
&lt;p>따라서 &lt;strong>요청 기반&lt;/strong>(on-demand) 모델이며, 사용자가 본인 홈페이지나 타임 라인을 로딩하는 시점에 새로운 포스트를 가져오게 된다.&lt;/p>
&lt;ul>
&lt;li>장점
&lt;ul>
&lt;li>로그인하기까지는 어떤 컴퓨팅 자원도 소모하지 않으므로 비활성화된 사용자는 이 모델이 유리하다.&lt;/li>
&lt;li>데이터를 친구 각각에 푸시하는 작업이 필요 없으므로 핫키 문제도 생기지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점
&lt;ul>
&lt;li>뉴스 피드를 읽는 데 많은 시간이 소요될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>이번 설계안은 두 가지 방법을 결합하여 장점은 취하고 단점은 버린다.&lt;/p>
&lt;ul>
&lt;li>뉴스피드를 빠르게 가져올 수 있도록 하는 것은 아주 중요하므로 대부분의 사용자에 대해서 푸시 모델 사용&lt;/li>
&lt;li>친구, 팔로워가 아주 많은 사용자의 경우는 해당 사용자의 포스팅을 필요할 때 가져가도록 하는 풀 모델을 사용&lt;/li>
&lt;li>안정 해시(consistent hashing)을 통해 요청과 데이터를 고르게 분산하여 핫 키 문제를 완화&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_3.png"
width="643"
height="597"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_3_hua09b20c3092217fe155cb7d5889b4e53_145261_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_3_hua09b20c3092217fe155cb7d5889b4e53_145261_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>그래프 데이터베이스&lt;/strong>에서 친구 ID 목록을 가져온다.
&lt;ul>
&lt;li>그래프 데이터베이스는 친구 관계나 친구 추천을 관리하기 적합하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용자 정보 캐시에서 친구들의 정보를 가져온후, 설정에 따라 일부 걸러낸다.
&lt;ul>
&lt;li>차단 등 이유로&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>친구 목록과 새 스토리의 포스팅 ID를 메시키 큐에 넣는다.&lt;/li>
&lt;li>팬아웃 작업 서버가 메시지 큐에서 데이터를 꺼내 뉴스 피드 데이터를 뉴스 피드 캐시에 넣는다.
&lt;ul>
&lt;li>뉴스 피드 캐시: &lt;code>&amp;lt;포스팅 ID, 사용자 ID&amp;gt;&lt;/code>&lt;/li>
&lt;li>모든 데이터를 포함하면 메모리 요구량이 지나치게 늘어날 수 있다.&lt;/li>
&lt;li>어떤 사용자가 뉴스 피드에 올라온 수천 개의 스토리를 볼 확률은 지극히 낮다.(캐시 미스 확률이 낮다.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="피드-읽기-흐름-상세-설계">피드 읽기 흐름 상세 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_4.png"
width="724"
height="728"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_4_hufb1b28fc20f324cce39c94a4369c34ac_210247_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_4_hufb1b28fc20f324cce39c94a4369c34ac_210247_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 읽기 흐름"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>이미지나 비디오와 같은 미디어 콘텐츠는 CDN에 저장하여 빨리 읽어갈 수 있도록 한다.&lt;/p>
&lt;ol>
&lt;li>사용자가 뉴스 피드 읽기 요청을 보냄&lt;/li>
&lt;li>로드밸런서가 요청을 웹 서버 가운데 하나로 보냄&lt;/li>
&lt;li>피드를 가져오기 위해 뉴스 피드 서비스 호출&lt;/li>
&lt;li>뉴스 피드 캐시에서 포스팅 ID 목록을 조회&lt;/li>
&lt;li>사용자 이름, 사용자 사진 등을 사용자 캐시와 포스팅 캐시에서 가져와 완전한 뉴스 피드 생성&lt;/li>
&lt;li>JSON 형태로 응답&lt;/li>
&lt;/ol>
&lt;h3 id="캐시-구조">캐시 구조&lt;/h3>
&lt;p>캐시는 &lt;strong>뉴스 피드 시스템의 핵심 컴포넌트&lt;/strong>이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/11/img_5.png"
width="831"
height="461"
srcset="https://codemario318.github.io/post/system-design-interview/11/img_5_hu7a050117f609eaff8b50eedec13da585_109520_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/11/img_5_hu7a050117f609eaff8b50eedec13da585_109520_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="5계층 캐시 구조"
class="gallery-image"
data-flex-grow="180"
data-flex-basis="432px"
>&lt;/p>
&lt;ul>
&lt;li>뉴스피드
&lt;ul>
&lt;li>뉴스 피드의 ID 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>콘텐츠
&lt;ul>
&lt;li>포스팅 데이터를 보관&lt;/li>
&lt;li>인기 콘텐츠는 따로 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>소셜 그래프
&lt;ul>
&lt;li>사용자 간 관계 정보를 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>행동(action)
&lt;ul>
&lt;li>포스팅에 대한 사용자의 행위에 관한 정보를 보관&lt;/li>
&lt;li>좋아요, 답글 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>횟수(counter)
&lt;ul>
&lt;li>좋아요 횟수, 응답 수, 팔로워 수, 팔로잉 수 등 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>이번 설계안은 &lt;strong>뉴스 피드 발행&lt;/strong>, &lt;strong>뉴스 피드 생성&lt;/strong> 두 부분으로 구성되어 있다.&lt;/p>
&lt;p>설계를 진행하고 기술을 선택할 때는 그 배경에 어떤 타협적 결정들이 있었는지 잘 이해하고 설명할 수 있어야 한다.&lt;/p>
&lt;p>시간이 남는다면 &lt;strong>규모 확장성 이슈&lt;/strong>를 논의하는 것이 좋을 수 있다.&lt;/p>
&lt;h3 id="데이터베이스-규모-확장">데이터베이스 규모 확장&lt;/h3>
&lt;ul>
&lt;li>수직적 규모 확장 vs 수평적 규모 확장&lt;/li>
&lt;li>SQL vs NoSQL&lt;/li>
&lt;li>master-slave 다중화&lt;/li>
&lt;li>복제본(replica)에 대한 읽기 연산&lt;/li>
&lt;li>일관성 모델(consistency model)&lt;/li>
&lt;li>데이터베이스 샤딩&lt;/li>
&lt;/ul>
&lt;h3 id="그-외">그 외&lt;/h3>
&lt;ul>
&lt;li>웹 계층을 무상태로 운영하기&lt;/li>
&lt;li>가능한 한 많은 데이터를 캐시할 방법&lt;/li>
&lt;li>여러 데이터 센터를 지원할 방법&lt;/li>
&lt;li>메시지 큐를 사용하여 컴포넌트 사이의 결합도 낮추기&lt;/li>
&lt;li>핵심 메트릭에 대한 모니터링
&lt;ul>
&lt;li>트래픽이 몰리는 시간대의 QPS&lt;/li>
&lt;li>사용자가 뉴스 피드를 새로고침 할 때 지연 시간 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>10. 알람 시스템 설계</title><link>https://codemario318.github.io/post/system-design-interview/10/</link><pubDate>Thu, 27 Jun 2024 21:43:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/10/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/cover.png" alt="Featured image of post 10. 알람 시스템 설계" />&lt;p>알림 시스템은 최근 많은 프로그램들이 채택한 인기 있는 기능이다.&lt;/p>
&lt;p>고객에게 중요할 만한 정보를 &lt;strong>비동기적&lt;/strong>으로 제공한다.&lt;/p>
&lt;ul>
&lt;li>모마일 푸시 알림&lt;/li>
&lt;li>SMS 메시지&lt;/li>
&lt;li>이메일&lt;/li>
&lt;/ul>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;p>하루에 백만 건 이상의 알림을 처리하는 확장성 높은 시스템을 구축하는건 쉬운 과제가 아니다.&lt;/p>
&lt;p>알림 시스템이 어떻게 구현되는지에 대한 깊은 이해가 필요하다.&lt;/p>
&lt;ul>
&lt;li>Q. 어떤 종류의 알림을 지원해야하는가?
&lt;ul>
&lt;li>A. 푸시 알림, SMS 메시지, 이메일&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 실시간 시스템?
&lt;ul>
&lt;li>A. 연성 실시간 시스템 &amp;gt; 빨리 전달해야하지만 시스템의 부하가 심할 때 약간의 지연은 무방함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 지원 단말?
&lt;ul>
&lt;li>A. IOS, 안드로이드, 랩톱/데스크톱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 알림은 누가 만들 수 있는가?
&lt;ul>
&lt;li>A. 클라이언트 애플리케이션, 서버측 스케쥴링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 알림 거부 가능?
&lt;ul>
&lt;li>A. 예&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 하루 몇 건의 알림 처리?
&lt;ul>
&lt;li>A. 천만 건 푸시 알림, 백만 건 SMS, 5백만 건 이메일&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;h3 id="알림-유형-별-지원-방안">알림 유형 별 지원 방안&lt;/h3>
&lt;p>유형에 따라 동작하는 알림 메커니즘에 차이가 있다.&lt;/p>
&lt;p>&lt;strong>IOS 푸시 알림&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img.png"
width="575"
height="126"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_hu740000bab3f30bdd0a1a67ae3b5eabd1_20508_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_hu740000bab3f30bdd0a1a67ae3b5eabd1_20508_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="ios 푸시 알림 컴포넌트"
class="gallery-image"
data-flex-grow="456"
data-flex-basis="1095px"
>&lt;/p>
&lt;p>IOS에서 푸시 알림을 보내기 위해서는 3가지 컴포넌트가 필요하다.&lt;/p>
&lt;ul>
&lt;li>일림 제공자(provider)
&lt;ul>
&lt;li>알림 요청을 만들어 &lt;strong>애플 푸시 알림 서비스&lt;/strong>(APNS)로 보내는 주체로 두개의 정보가 필요하다.&lt;/li>
&lt;li>&lt;strong>단말 토큰&lt;/strong>: 알림 요청을 보내는 데 필요한 고유 식별자&lt;/li>
&lt;li>&lt;strong>페이로드&lt;/strong>: 알림 내용을 담은 JSON 딕셔너리&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;aps&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;alert&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Game Request&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Bob wants to play chess&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;action-loc-key&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;PLAY&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;badge&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>APNS
&lt;ul>
&lt;li>애플이 제공하는 원격 서비스&lt;/li>
&lt;li>푸시 알림을 IOS 장치로 보내는 역할을 담당.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IOS 단말
&lt;ul>
&lt;li>푸시 알림을 수신하는 사용자의 단말&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>안드로이드 푸시 알림&lt;/strong>&lt;/p>
&lt;p>APNS를 사용하는 IOS와 달리 FCM(Firebase Cloud Messaging)을 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_1.png"
width="634"
height="142"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_1_hu230abd40214ac2cc9d4d6ae33273b666_22808_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_1_hu230abd40214ac2cc9d4d6ae33273b666_22808_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="AOS 푸시 알림 컴포넌트"
class="gallery-image"
data-flex-grow="446"
data-flex-basis="1071px"
>&lt;/p>
&lt;p>&lt;strong>SMS 메시지&lt;/strong>&lt;/p>
&lt;p>트윌리오(Twilio), 넥스모(Nexmo)같은 제3 사업자의 서비스를 많이 이용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_2.png"
width="645"
height="166"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_2_hua9b34508436b686eb916dc3bc2dce64b_27617_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_2_hua9b34508436b686eb916dc3bc2dce64b_27617_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="SMS 메시지 컴포넌트"
class="gallery-image"
data-flex-grow="388"
data-flex-basis="932px"
>&lt;/p>
&lt;p>&lt;strong>이메일&lt;/strong>&lt;/p>
&lt;p>대부분 고유 이메일 서버를 구축할 역량을 가지고 있지만, 상용 이메일 서비스를 이용한다.&lt;/p>
&lt;ul>
&lt;li>센드그리드, 메일침프&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_3.png"
width="635"
height="137"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_3_hu87f4edfcf86cd64dbb4cab74e62a2243_26432_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_3_hu87f4edfcf86cd64dbb4cab74e62a2243_26432_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="이메일 컴포넌트"
class="gallery-image"
data-flex-grow="463"
data-flex-basis="1112px"
>&lt;/p>
&lt;hr>
&lt;p>지금까지의 언급한 모든 알림 유형을 한 시스템으로 묶어면 아래와 같다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_4.png"
width="405"
height="767"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_4_hu994f53c88cb3013bc3a97423d78ab8b7_76258_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_4_hu994f53c88cb3013bc3a97423d78ab8b7_76258_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="최종"
class="gallery-image"
data-flex-grow="52"
data-flex-basis="126px"
>&lt;/p>
&lt;h3 id="연락처-정보-수집-절차">연락처 정보 수집 절차&lt;/h3>
&lt;p>알림을 보내기 위해 &lt;strong>모바일 단말 토큰&lt;/strong>, &lt;strong>전화번호&lt;/strong>, &lt;strong>이메일 주소&lt;/strong> 등 정보가 필요하다.&lt;/p>
&lt;p>사용자가 앱을 설치하거나 처음으로 계정을 등록할 때 API 서버는 해당 사용자의 정보를 수집하여 데이터베이스에 저장한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_5.png"
width="834"
height="202"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_5_huad049bab1460305989d0ac3f2e4bbf4b_85105_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_5_huad049bab1460305989d0ac3f2e4bbf4b_85105_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="연락처 정보 수집 절차"
class="gallery-image"
data-flex-grow="412"
data-flex-basis="990px"
>&lt;/p>
&lt;p>필수적인 정보만 포함한 스키마는 아래와 같다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">erDiagram
USER {
bigint user_id
varchar email
integer coutry_code
integer phone_number
timestamp created_at
}
DEVICE {
bigint id
varchar device_token
bigint user_id
timestamp last_logged_in_at
}
&lt;/pre>
&lt;ul>
&lt;li>이메일 주소와 전화번호는 &lt;code>USER&lt;/code> 테이블에 저장하고, 단말 토큰은 &lt;code>DEVICE&lt;/code> 테이블에 저장한다.&lt;/li>
&lt;li>한 사용자가 여러 단말을 가질 수 있다.&lt;/li>
&lt;li>알림은 모든 단말에 전송되어야 한다.&lt;/li>
&lt;/ul>
&lt;h3 id="알림-전송-및-수신-절차">알림 전송 및 수신 절차&lt;/h3>
&lt;p>개략적으로 설계하고 점차적으로 최적화한다.&lt;/p>
&lt;p>&lt;strong>개략적 설계안(초안)&lt;/strong>&lt;/p>
&lt;p>서버를 1대만 사용하는 시스템이라 가정한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_6.png"
width="836"
height="624"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_6_hu79685c192455f85017d1b07942a95c3d_90148_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_6_hu79685c192455f85017d1b07942a95c3d_90148_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="개략적 설계안(초안)"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="321px"
>&lt;/p>
&lt;ul>
&lt;li>Service 1 ~ N
&lt;ul>
&lt;li>마이크로서비스, 크론잡, 분산 시스템 컴포넌트 일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>알림 시스템
&lt;ul>
&lt;li>알림 전송/수신 처리의 핵심&lt;/li>
&lt;li>Service 1 ~ N에 알림 전송을 위한 *&lt;em>API 제공&lt;/em>&lt;/li>
&lt;li>제3자 서비스에 전달할 &lt;strong>알림 페이로드 생성&lt;/strong>&lt;/li>
&lt;li>확장성을 유의해야함, 쉽게 새로운 서비스를 통합하거나 기존 서비스를 제거할 수 있어야함&lt;/li>
&lt;li>어떤 서비스는 다른 시장에서는 사용할 수 없을 수도 있다. (FCM은 중국서 사용불가)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단말&lt;/li>
&lt;/ul>
&lt;p>위와 같은 설계에는 몇 가지 문제가 있다.&lt;/p>
&lt;ul>
&lt;li>SPOF
&lt;ul>
&lt;li>알림 서비스에 서버가 하나 뿐이라 서버 장애 발생시 전체 서비스 장애로 이어진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>규모 확장성
&lt;ul>
&lt;li>한 대 서비스로 푸시 알림에 관계된 모든 것을 처리하므로, 데이터베이스나 캐시 등 중요 컴포넌트의 규모를 개별적으로 늘릴 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>성능 병목
&lt;ul>
&lt;li>알림을 처리하고 보내는 것은 자원을 많이 필요로할 수 있어, 트래픽이 몰리면 과부하 상태에 빠질 수 있다.
&lt;ul>
&lt;li>HTML 페이지 생성&lt;/li>
&lt;li>제3자 서비스의 응답 대기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>개략적 설계안(개선)&lt;/strong>&lt;/p>
&lt;p>최초 개략적 설계안에서 다음과 같은 문제를 개선했다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>데이터베이스&lt;/strong>와 &lt;strong>캐시&lt;/strong>를 알림 시스템에서 분리&lt;/li>
&lt;li>&lt;strong>알림 서버 증설&lt;/strong> 및 &lt;strong>자동 수평 규모 확장&lt;/strong> 추가&lt;/li>
&lt;li>&lt;strong>메시지 큐&lt;/strong>를 이용해 시스템 컴포넌트 사이의 강한 결합을 끊는다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_7.png"
width="788"
height="495"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_7_huc5bb10796dc5d83e13d2174837213014_204960_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_7_huc5bb10796dc5d83e13d2174837213014_204960_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="개략적 설계안(개선)"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;ul>
&lt;li>서비스(1~N)
&lt;ul>
&lt;li>알림 시스템 서버의 API를 통해 알림을 보낼 서비스들&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>알림 서버
&lt;ul>
&lt;li>알림 전송 API
&lt;ul>
&lt;li>스팸 방지를 위해 사내 서비스 또는 인증된 클라이언트만 이용 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>알림 검증
&lt;ul>
&lt;li>이메일, 전화번호 등 기본적 검증 수행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터베이스 또는 캐시 질의
&lt;ul>
&lt;li>알림에 포함시킬 데이터를 가져온다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>알림 전송
&lt;ul>
&lt;li>알림 데이터를 메시지 큐에 넣는다.&lt;/li>
&lt;li>하나 이상의 메시지 큐를 이용하면 병렬적으로 처리할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시
&lt;ul>
&lt;li>사용자 정보, 단말 정보, 알림 템플릿 등을 캐시한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DB
&lt;ul>
&lt;li>사용자, 알림, 설정 등 다양한 정보 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메시지 큐
&lt;ul>
&lt;li>시스템 컴포넌트 간 의존성을 제거한다.&lt;/li>
&lt;li>다량의 알림이 전송되어야 하는 경우 버퍼 역할도 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>작업 서버
&lt;ul>
&lt;li>메시지 큐에서 전송할 알림을 꺼내 제3자 서비스로 전달한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;h3 id="안정성">안정성&lt;/h3>
&lt;p>분산 환경에서 운영될 알림 시스템을 설계할 때는 안정성을 확보하기 위한 사앙 몇 가지를 반드시 고려해야한다.&lt;/p>
&lt;p>&lt;strong>데이터 손실 방지&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_8.png"
width="544"
height="319"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_8_hucbd178a7d97384a0a3abf8183f284e96_66785_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_8_hucbd178a7d97384a0a3abf8183f284e96_66785_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="데이터 손실 방지"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;p>알림 전송 시스템의 가장 중요한 요구사항 가운데 하나는 &lt;strong>어떤 상황에서도 알림이 소실되면 안된다&lt;/strong>는 것이다.&lt;/p>
&lt;ul>
&lt;li>지연되거나 순서가 달라도 사라지면 안된다&lt;/li>
&lt;/ul>
&lt;p>이를 위해 알림 데이터를 데이터베이스에 보관하고 재시도하는 메커니즘을 구현해야 한다.&lt;/p>
&lt;p>&lt;strong>알림 중복 전송 방지&lt;/strong>&lt;/p>
&lt;p>같은 알림이 여러 번 반복되는 것을 완전히 막는 것은 불가능하다.&lt;/p>
&lt;p>그 빈도를 줄이기 위해 중복을 탐지하는 매커니즘을 도입하고, 오류를 신중하게 처리해아한다.&lt;/p>
&lt;ul>
&lt;li>보내야 할 알림이 도착하면 그 이벤트 ID를 검사하여 이전에 본 적이 있는 이벤트인지 살핀다.&lt;/li>
&lt;li>중복된 이벤트면 버리고, 그렇지 않으면 알림을 발송한다.&lt;/li>
&lt;/ul>
&lt;h3 id="추가로-필요한-컴포넌트-및-고려사항">추가로 필요한 컴포넌트 및 고려사항&lt;/h3>
&lt;p>&lt;strong>알림 템플릿&lt;/strong>&lt;/p>
&lt;p>알림 메시지 대부분은 형식이 비슷하다.&lt;/p>
&lt;p>알림 템플릿은 이런 유사성을 고려하여, 알림 메시지의 모든 부분을 처음부터 다시 만들 필요 없도록 한다.&lt;/p>
&lt;ul>
&lt;li>사전에 지정한 형식에 맞춰 알람을 만들어 내는 틀이다.&lt;/li>
&lt;li>전송될 알림들의 형식을 일관성 있게 유지할 수 있다.&lt;/li>
&lt;li>오류 가능성뿐 아니라 알림 작성에 드는 시간도 줄일 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>알림 설정&lt;/strong>&lt;/p>
&lt;p>사용자가 알림 설정을 상세히 조정할 수 있도록 한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">erDiagram
OPT {
bigint user_id
varchar channel
boolean opt_in
}
&lt;/pre>
&lt;p>이와 같은 설정을 도입했다면 알람을 보내기 전 반드시 해당 사용자가 알림을 켜 두었는지 확인해야한다.&lt;/p>
&lt;p>&lt;strong>전송률 제한&lt;/strong>&lt;/p>
&lt;p>한 사용자가 받을 수 있는 알림의 빈도를 제한하여 사용자에게 많은 알림을 보내지 않도록 할 수 있다.&lt;/p>
&lt;ul>
&lt;li>알림을 너무 많이 보내기 시작하면 사용자가 알림 기능을 꺼버릴 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>재시도 방법&lt;/strong>&lt;/p>
&lt;p>써드 파티 서비스가 알림 전송에 실패하면, 해당 알림을 재시도 전용 큐에 넣고 같은 문제가 계속해서 발생하면 개발자에게 통지한다.&lt;/p>
&lt;p>&lt;strong>푸시 알림과 보안&lt;/strong>&lt;/p>
&lt;p>IOS와 안드로이드 앱의 경우, 알림 전송 API는 appKey와 appSecret을 사용하여 보안을 유지한다.&lt;/p>
&lt;p>이러한 방식으로 인증된 혹은 승인된 클라이언트만 해당 API를 사용할 수 있다.&lt;/p>
&lt;p>&lt;strong>큐 모니터링&lt;/strong>&lt;/p>
&lt;p>큐에 쌓인 알림의 개수를 보고 작업 서버들의 처리량을 쉽게 모니터링 할 수 있다.&lt;/p>
&lt;ul>
&lt;li>너무 크면 이벤트를 빠르게 처리하지 못하고있다는 뜻&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>이벤트 추적&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_9.png"
width="769"
height="409"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_9_hud2dbc79b7de8b0aa132399e5d3082a08_62119_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_9_hud2dbc79b7de8b0aa132399e5d3082a08_62119_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="이벤트 추적"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>알림 확인율, 클릭율, 실제 앱 사용으로 이어지는 비율 같은 메트릭은 사용자를 이해하는데 중요하다.&lt;/p>
&lt;p>보통 알림 시스템을 만들면 데이터 분석 서비스와도 통합하는 경우가 많다.&lt;/p>
&lt;p>&lt;strong>수정된 설계안&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/10/img_10.png"
width="841"
height="514"
srcset="https://codemario318.github.io/post/system-design-interview/10/img_10_huf8cbea8348c39c7ce30b64e29ad9daf9_149286_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/10/img_10_huf8cbea8348c39c7ce30b64e29ad9daf9_149286_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="수정된 설계안"
class="gallery-image"
data-flex-grow="163"
data-flex-basis="392px"
>&lt;/p>
&lt;p>이전 설계안과의 차이점은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>알림 서버에 인증과 전송률 제한 기능이 추가&lt;/li>
&lt;li>전송 실패에 대응하기 위한 재시도 기능 추가
&lt;ul>
&lt;li>다시 큐에 넣고 지정된 횟수만큼 재시도&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전송 템플릿을 사용하여 알림 생성 과정을 단순화하고 알림 내용의 일관성을 유지&lt;/li>
&lt;li>모니터링과 추적 시스템 추가&lt;/li>
&lt;/ul>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>규모 확장이 쉬울 뿐 아니라 푸시 알림, SMS 메시지, 이메일 등 다양한 정보 전달 방식을 지원하는 알림 시스템을 구축했다.&lt;/p>
&lt;p>시스템 컴포넌트 사이의 결함도를 낮추기 위해 메시지 큐를 적극적으로 사용하였다.&lt;/p>
&lt;ul>
&lt;li>안정성
&lt;ul>
&lt;li>메시지 전송 실패율을 낮추기 위해 안정적인 재시도 메커니즘을 도입&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안
&lt;ul>
&lt;li>인징된 클라이언트만이 알림을 보낼 수 있도록 보안 매커니즘 추가(appKey, appSecret)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이벤트 추적 및 모니터링&lt;/li>
&lt;li>사용자 설정
&lt;ul>
&lt;li>사용자가 알림 수신 설정을 조정할 수 있도록 함&lt;/li>
&lt;li>알람을 보내기 전 해당 설정을 확인하도록 스스템 설계를 변경&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전송률 제한
&lt;ul>
&lt;li>사용자에게 알림을 보내는 빈도를 제한할 수 있도록 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>9. 웹 크롤러 설계</title><link>https://codemario318.github.io/post/system-design-interview/9/</link><pubDate>Tue, 18 Jun 2024 13:54:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/9/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/cover.png" alt="Featured image of post 9. 웹 크롤러 설계" />&lt;h2 id="웹-크롤러">웹 크롤러?&lt;/h2>
&lt;p>웹 크롤러는 로봇(Robot) 또는 스파이더(Spider)라고도 부르는 검색 엔진에서 널리 쓰는 기술로, &lt;strong>웹에 새로 올라오거나 갱신된 콘텐츠를 찾아내는 것이 주된 목적&lt;/strong>이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img.png"
width="690"
height="746"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_hu8939a220c98e9690727ad8216a0decb0_158151_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_hu8939a220c98e9690727ad8216a0decb0_158151_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="웹 크롤링 동작 예시"
class="gallery-image"
data-flex-grow="92"
data-flex-basis="221px"
>&lt;/p>
&lt;p>몇 개 웹 페이지에서 시작하여 그 링크를 따라 나가면서 새로운 콘텐츠를 수집한다.&lt;/p>
&lt;ul>
&lt;li>검색 엔진 인덱싱(Search engine indexing)
&lt;ul>
&lt;li>가장 보편적인 용례로 웹 페이지를 모아 검색 엔진을 위한 로컬 인덱스를 만든다.&lt;/li>
&lt;li>Googlebot&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 아카이빙(Web Archiving)
&lt;ul>
&lt;li>장기보관을 목적으로 웹에서 정보를 모으는 절차를 말한다.&lt;/li>
&lt;li>국립 도서관 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 마이닝(Web mining)
&lt;ul>
&lt;li>인터넷에서 유용한 지식을 도출해 낼 수 있다.&lt;/li>
&lt;li>금융 기업들의 기업 분석용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 모니터링(Web monitoring)
&lt;ul>
&lt;li>인터넷에서 저작권이나 상표권이 침해되는 사례를 모니터링 할 수 있다.&lt;/li>
&lt;li>디지마크(Digimarc)사는 크롤러를 통해 해적판 저작물을 찾아내 보고한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>웹 크롤러의 복잡도는 웹 크롤러가 처리해야 하는 데이터의 규모에 따라 달라지므로 설계할 웹 크롤러가 감당해야 하는 데이터의 규모와 기능들을 알아내야한다.&lt;/p>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;p>웹 크롤러의 기본 알고리즘은 간단하다.&lt;/p>
&lt;ol>
&lt;li>URL 집합이 입력으로 주어지면, 해당 URL들이 가르키는 모든 웹 페이지를 다운로드한다.&lt;/li>
&lt;li>다운받은 웹 페이지에서 URL들을 추출한다.&lt;/li>
&lt;li>추출된 URL들을 다운로드할 URL 목록에 추가하고 위 과정을 처음부터 반복한다.&lt;/li>
&lt;/ol>
&lt;p>하지만 엄청난 규모 확장성을 갖는 웹 크롤러를 설계하는 것은 매우 어려운 작업이다.&lt;/p>
&lt;p>질문을 던져 요구사항을 알아내고 설계 범위를 좁힌다.&lt;/p>
&lt;ul>
&lt;li>Q. 주된 용도는?
&lt;ul>
&lt;li>A. 검색 엔진 인덱싱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 매달 수집해야하는 웹 페이지 수
&lt;ul>
&lt;li>A. 약 10억개&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 새로 만들어진 웹 페이지나 수정된 웹 페이지도 고려해야하는가?
&lt;ul>
&lt;li>A. 예&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 수집한 웹 페이지는 저장해야하는가?
&lt;ul>
&lt;li>A. 5년간 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 중복된 콘텐츠는?
&lt;ul>
&lt;li>A. 무시해도 괜찮음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>질문을 통해 알아낸 요구사항을 명확히 하면서도 좋은 웹 크롤러가 만족시켜야 할 다음과 같은 속성에 주의를 기울여야한다.&lt;/p>
&lt;ul>
&lt;li>규모 확장성
&lt;ul>
&lt;li>웹은 수십억 개의 페이지가 존재하는 것으로 알려진 만큼 매우 거대하므로, &lt;strong>병행성(Parallelism)을 활용&lt;/strong>하면 보다 효과적으로 웹 크롤링을 수행할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>안정성(Robustness)
&lt;ul>
&lt;li>비정상적인 입력이나 황경에 잘 대응할 수 있어야 한다.&lt;/li>
&lt;li>잘못 작성된 HTML, 반응 없는 서버, 장애, 악성 코드가 붙어있는 링크 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>예절(Politeness)
&lt;ul>
&lt;li>짧은 시간 동안 너무 많은 요청을 보내어 서버에 무리를 주면 안된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>확장성(Extensibility)
&lt;ul>
&lt;li>새로운 형태의 콘텐츠를 지원하기 쉬워야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="개략적-규모-추정">개략적 규모 추정&lt;/h3>
&lt;ul>
&lt;li>매달 10억 개의 웹 페이지 다운로드
&lt;ul>
&lt;li>&lt;code>QPS = 10억 / 30일 / 24시간 / 3600초 = 약 400페이지/s&lt;/code>&lt;/li>
&lt;li>&lt;code>최대(peak) QPS = 2 x QPS = 800&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 페이지의 평균 크기는 500k로 가정
&lt;ul>
&lt;li>&lt;code>10억 페이지 * 500k = 500TB/월&lt;/code>&lt;/li>
&lt;li>&lt;code>1개월치 = 500TB * 12개월 * 5년 = 30PB&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="개략적인-설계안-제시-및-동의-구하기">개략적인 설계안 제시 및 동의 구하기&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_1.png"
width="845"
height="607"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_1_huc28c39ee12ec2f7699c2ff04ca5e2694_53266_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_1_huc28c39ee12ec2f7699c2ff04ca5e2694_53266_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="크롤러의 작업 흐름"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="334px"
>&lt;/p>
&lt;p>&lt;strong>시작 URL 집합&lt;/strong>&lt;/p>
&lt;p>시작 URL 집합은 &lt;strong>웹 크롤러가 크롤링을 시작하는 출발점&lt;/strong>이다.&lt;/p>
&lt;p>전체 웹을 크롤링해야 하는 경우 시작 URL을 고를 때 가능한 한 많은 링크를 탐색할 수 있도록 하는 URL을 고르는 것이 바람직하다.&lt;/p>
&lt;ul>
&lt;li>일반적으로 전체 URL 공간을 작은 부분집합으로 나누는 전략을 사용
&lt;ul>
&lt;li>지역적인 특색, 즉 지역별로 인기 있는 웹 사이트가 다르다는 점에 착안&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주제별로 다른 시작 URL을 사용
&lt;ul>
&lt;li>쇼핑, 스포츠, 건강 등의 주제별로 세분화하고 그 각각에 다른 시작 URL 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>시작 URL로 무엇을 쓸 것이냐는 질문에 정담은 없으므로 의도가 무엇인지만 정확히 전달해도 충분하다.&lt;/p>
&lt;p>&lt;strong>미수집 URL 저장소&lt;/strong>&lt;/p>
&lt;p>대부분의 현대적 웹 크롤러는 크롤링 상태를 &lt;strong>다운로드할 URL&lt;/strong>, &lt;strong>다운로드된 URL&lt;/strong> 두 가지로 나눠 관리한다.&lt;/p>
&lt;p>다운로드할 URL을 저장 관리하는 컴포넌트를 미수집 URL 저장소(URL Frontier)라고 부른다.&lt;/p>
&lt;p>&lt;strong>HTML 다운로더&lt;/strong>&lt;/p>
&lt;p>HTML 다운로더는 &lt;strong>인터넷에서 웹 페이지를 다운로드하는 컴포넌트&lt;/strong>이다.&lt;/p>
&lt;p>다운로드할 페이지의 URL은 미수집 URL 저장소가 제공한다.&lt;/p>
&lt;p>&lt;strong>도메인 이름 변환기&lt;/strong>&lt;/p>
&lt;p>웹 페이지를 다운받으려면 URL을 IP로 변환하는 절차가 필요하므로, HTML 다운로더는 도메인 이름 변환기를 이용하여 &lt;strong>URL에 대응되는 IP 주소를 알아낸다.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>콘텐츠 파서&lt;/strong>&lt;/p>
&lt;p>웹 페이지를 다운로드하면 &lt;strong>파싱&lt;/strong>과 &lt;strong>검증&lt;/strong>절차를 거쳐야한다.&lt;/p>
&lt;p>크롤링 서버 안에 콘텐츠 파서를 구현하면 크롤링 과정이 느려지게 될 수 있으므로 독립된 컴포넌트로 만드는 것이 좋다.&lt;/p>
&lt;p>&lt;strong>중복 콘텐츠인가?&lt;/strong>&lt;/p>
&lt;p>연구 결과에 따르면, 29% 가량의 웹 페이지 콘텐츠는 중복이다.&lt;/p>
&lt;p>따라서 &lt;strong>같은 콘텐츠를 여러 번 저장&lt;/strong>하게 될 수 있으므로 중복을 해결하기 위한 자료 구조를 도입하여 &lt;strong>데이터 중복을 줄이고&lt;/strong> 데이터 처리에 소요되는 시간을 줄일 수 있다.&lt;/p>
&lt;p>두 HTML 문서를 비교하는 가장 간단한 방법은 문서를 문자열로 보고 비교하는 방법을 고려할 수 있지만, 문서의 수가 매우 많은 경우 느리고 비효율적이므로, 대부분 웹 페이지의 해시 값을 비교하여 처리한다.&lt;/p>
&lt;p>&lt;strong>콘텐츠 저장소&lt;/strong>&lt;/p>
&lt;p>&lt;strong>HTML 문서를 보관하는 시스템&lt;/strong>이다.&lt;/p>
&lt;p>저장소를 구현하는 데 쓰일 구술을 고를 때는 &lt;strong>저장할 데이터의 유형&lt;/strong>, &lt;strong>크기&lt;/strong>, &lt;strong>저장소 접근 빈도&lt;/strong>, &lt;strong>데이터의 유효 기간&lt;/strong> 등을 종합적으로 고려한다.&lt;/p>
&lt;p>본 설계안은 디스크와 메모리를 동시에 사용하는 저장소를 선택할 것이다.&lt;/p>
&lt;ul>
&lt;li>데이터 양이 너무 많으므로 대부분의 콘텐츠는 디스크에 저장한다.&lt;/li>
&lt;li>인기 있는 콘텐츠는 메모리에 두어 접근 지연시간을 줄인다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>URL 추출기&lt;/strong>&lt;/p>
&lt;p>HTML 페이지를 파싱하여 링크들을 골라내는 역할을 수행한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_2.png"
width="821"
height="430"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_2_hu04f4fd4b9507be952f6ff4565090f5b3_203231_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_2_hu04f4fd4b9507be952f6ff4565090f5b3_203231_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="링크 추출 사례"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="458px"
>&lt;/p>
&lt;ul>
&lt;li>상대 경로를 모두 절대 경로로 변환한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>URL 필터&lt;/strong>&lt;/p>
&lt;p>특정 URL을 크롤링 대상에서 배제한다.&lt;/p>
&lt;ul>
&lt;li>특정한 콘텐츠 타입이나 파일 확장자를 갖는 URL&lt;/li>
&lt;li>접속 시 오류가 발생하는 URL&lt;/li>
&lt;li>접근 제외 목록(deny list)에 포함된 URL 등&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>이미 방문한 URL?&lt;/strong>&lt;/p>
&lt;p>이미 방문한 URL이나 미수집 URL 저장소에 보관된 URL을 추적할 수 있도록 하는 자료 구조를 활용하여 구현한다.&lt;/p>
&lt;ul>
&lt;li>URL 방문 여부를 추적하여 같은 URL을 여러번 처리하는 일을 방지할 수 있다.&lt;/li>
&lt;li>서버 부하를 줄이고 무한 루프에 빠지는 일을 방지할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>해시 테이블이나 블룸 필터가 널리 쓰인다.&lt;/p>
&lt;p>&lt;strong>URL 저장소&lt;/strong>&lt;/p>
&lt;p>이미 방문한 URL을 보관하는 저장소다.&lt;/p>
&lt;h3 id="웹-크롤러-작업-흐름">웹 크롤러 작업 흐름&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_3.png"
width="840"
height="592"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_3_hufd385b60137cff9b9db1e88901bb7b7d_62024_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_3_hufd385b60137cff9b9db1e88901bb7b7d_62024_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="웹 크롤러 작업 흐름"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;ol>
&lt;li>시작 URL들을 미수집 URL 저장소에 저장&lt;/li>
&lt;li>HTML 다운로더는 미수집 URL 저장소에서 URL 목록을 가져옴&lt;/li>
&lt;li>HTML 다운로더는 도메인 이름 변환기를 사용하여 URL의 IP 주소를 알아내고, 웹 페이지를 다운로드&lt;/li>
&lt;li>콘텐츠 파서는 다운된 HTML 페이지를 파싱하여 올바른 형식을 갖춘 페이지인지 검증&lt;/li>
&lt;li>콘텐츠 파싱과 검증이 끝나면 중복 콘텐츠인지 확인 절차 시작&lt;/li>
&lt;li>해당 페이지가 이미 저장소에 있는지 확인
&lt;ul>
&lt;li>이미 저장소에 있는 경우 처리하지 않고 버린다.&lt;/li>
&lt;li>저장소에 없는 콘텐츠인 경우 저장소에 저장한 뒤 URL 추출기로 전달&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>URL 추출기는 해당 HTML 페이지에서 링크를 추출함&lt;/li>
&lt;li>추출한 링크를 URL 필터로 전달&lt;/li>
&lt;li>필터링이 끝나고 남은 URL만 중복 URL 판별 단계로 전달&lt;/li>
&lt;li>URL 저장소에 보관된 URL인지 살피고 이미 있는 URL은 버린다.&lt;/li>
&lt;li>저장소에 없는 URL은 URL 저장소에 저장하고, 미수집 URL 저장소에 전달&lt;/li>
&lt;/ol>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;p>가장 중요한 컴포넌트와 그 구현 기술을 심도있게 살펴본다.&lt;/p>
&lt;h3 id="dfs-vs-bfs">DFS vs BFS&lt;/h3>
&lt;p>웹은 유향 그래프(directed graph)와 같으며, 크롤링 프로세스는 이 유향 그래프를 탐색하는 과정이다.&lt;/p>
&lt;p>그래프 탐색에 널리 사용되는 알고리즘은 DFS, BFS 두 가지 알고리즘인데 그래프의 크기가 얼마나 클지 가늠할 수 없으므로 BFS를 주로 사용한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_4.png"
width="745"
height="599"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_4_hua510aa57a9e56ad00992b50a10e4d6b2_76959_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_4_hua510aa57a9e56ad00992b50a10e4d6b2_76959_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="BFS"
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/p>
&lt;p>&lt;strong>BFS의 문제점&lt;/strong>&lt;/p>
&lt;p>BFS는 FIFO 큐에 탐색할 URL를 추가하는 방식인데, 이러한 구현법에는 두 가지 문제점이 있다.&lt;/p>
&lt;ul>
&lt;li>한 페이지에서 나오는 링크의 상당수는 같은 서버로 되돌아간다.
&lt;ul>
&lt;li>같은 호스트에 속한 많은 링크를 다운받게 되는데, 병렬로 처리하게 된다면 수집 대상 서버는 수많은 요청으로 과부하에 걸린다.&lt;/li>
&lt;li>예의 없는 크롤러로 간주&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>URL에 우선순위를 두지 않는다.
&lt;ul>
&lt;li>모든 웹 페이지가 같은 수준의 품질, 중요성을 갖지는 않는다.&lt;/li>
&lt;li>페이지 순위, 트래픽의 양, 업데이트 빈도 등 여러가지 척도에 따라 우선순위를 구별하는 것이 좋을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="미수집-url-저장소">미수집 URL 저장소&lt;/h3>
&lt;p>미수집 저장소를 잘 구현하면 예의를 갖춘 크롤러, URL 사이의 우선순위와 신선도를 구별하는 크롤러를 구현할 수 있다.&lt;/p>
&lt;p>&lt;strong>예의&lt;/strong>&lt;/p>
&lt;p>웹 크롤러는 &lt;strong>수집 대상 서버로 짧은 시간 안에 너무 많은 요청을 보내는 것을 삼가&lt;/strong>야 한다.&lt;/p>
&lt;ul>
&lt;li>동일 웹 사이트에 대해서는 한 번에 한 페이지만 요청한다.
&lt;ul>
&lt;li>같은 웹 사이트의 페이지를 다운받는 태스크는 시간차를 두고 실행한다.&lt;/li>
&lt;li>호스트명과 다운로드를 수행하는 작업 스레드 사이의 관계를 유지한다.&lt;/li>
&lt;li>각 다운로드 스레드는 별도의 큐를 통해 해당 큐에서 꺼낸 URL만 다운로드한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_5.png"
width="694"
height="684"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_5_hu9b21d490c5125653d38c7ab94cc56cb6_123801_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_5_hu9b21d490c5125653d38c7ab94cc56cb6_123801_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="예의 있는 크롤러 설계 예시"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;ul>
&lt;li>큐 라우터
&lt;ul>
&lt;li>같은 호스트에 속한 URL은 언제나 같은 큐로 가도록 보장한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>매핑 테이블
&lt;ul>
&lt;li>호스트 이름과 큐 사이의 관계를 보관한다.&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>호스트&lt;/th>
&lt;th>큐&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>wikipedia.com&lt;/td>
&lt;td>b1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>apple.com&lt;/td>
&lt;td>b2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nike.com&lt;/td>
&lt;td>bn&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>FIFO 큐
&lt;ul>
&lt;li>같은 호스트에 속한 URL은 언제나 같은 큐에 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>큐 선택기
&lt;ul>
&lt;li>큐들을 순회하면서 큐에서 URL을 꺼내어 해당 큐에서 나온 URL을 다운로드하도록 지정된 작업 스레드에 전달한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>작업 스레드
&lt;ul>
&lt;li>전달된 URL을 다운로드한다.&lt;/li>
&lt;li>순차적으로 처리되며, 작업 사이에 일정한 지연시간을 둘 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>우선순위&lt;/strong>&lt;/p>
&lt;p>유용성에 따라 URL의 우선순위를 나눌 때는 페이지랭크(PageRank), 트래픽 양, 갱신 빈도(Update Frequency) 등 다양한 척도를 사용할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_6.png"
width="679"
height="682"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_6_hu2b81a326b445fb63ed389467d8b1a40b_64739_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_6_hu2b81a326b445fb63ed389467d8b1a40b_64739_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="우선순위를 고려하는 크롤러 설계 예시"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;ul>
&lt;li>순위결정장치
&lt;ul>
&lt;li>URL을 입력으로 받아 우선순위를 계산한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>큐
&lt;ul>
&lt;li>우선순위별로 큐가 하나씩 할당된다.&lt;/li>
&lt;li>우선순위가 높으면 선택될 확률도 올라간다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>큐 선택기
&lt;ul>
&lt;li>임의 큐에서 처리할 URL을 꺼낸다.&lt;/li>
&lt;li>순위가 높은 큐에서 더 자주 꺼낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>전체 설계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_7.png"
width="624"
height="1120"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_7_hua7682a46c4831907399b700105278b58_160845_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_7_hua7682a46c4831907399b700105278b58_160845_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="전체 설계"
class="gallery-image"
data-flex-grow="55"
data-flex-basis="133px"
>&lt;/p>
&lt;ul>
&lt;li>전면 큐(front queue)
&lt;ul>
&lt;li>우선순위 결과 과정을 처리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>후면 큐(back queue)
&lt;ul>
&lt;li>크롤러가 예의 바르게 동작하도록 보증한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>신선도&lt;/strong>&lt;/p>
&lt;p>웹 페이지는 수시로 추가되고, 삭제되고, 변경되므로 &lt;strong>데이터의 신선함을 유지하기 위해 이미 다운로드한 페이지라고 해도 주기적으로 재수집&lt;/strong>할 필요가 있다.&lt;/p>
&lt;p>모든 URL을 재수집하는 것은 많은 시간과 자원이 필요한 작업이므로, 이 작업을 최적화하기 위한 전략으로 다음과 같은 것들이 있다.&lt;/p>
&lt;ul>
&lt;li>웹 페이지의 변경 이력 활용&lt;/li>
&lt;li>우선순위를 활용하여, 중요한 페이지는 좀 더 자주 재수집&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>미수집 URL 저장소를 위한 지속성 저장장치&lt;/strong>&lt;/p>
&lt;p>검색엔진을 위한 크롤러는 처리해야하는 URL이 수억 개에 달한다.&lt;/p>
&lt;p>따라서 모두 메모리에 보관하는 것은 안정성이나 규모 확장성 측면에서 바람직하지 않고, 전부 디스크에 저장하는 것도 성능 병목으로 인해 적절치 않다.&lt;/p>
&lt;p>따라서 절충안을 택하여, &lt;strong>대부분의 URL은 디스크에 두고 IO 비용을 줄이기 위해 메모리 버퍼에 큐를 두는 것&lt;/strong>을 고려한다.&lt;/p>
&lt;p>버퍼에 있는 데이터는 주기적으로 디스크에 기록된다.&lt;/p>
&lt;h3 id="html-다운로더">HTML 다운로더&lt;/h3>
&lt;p>HTML 다운로더는 HTTP 프로토콜을 통해 웹 페이지를 내려받는다.&lt;/p>
&lt;p>&lt;strong>Robots.txt&lt;/strong>&lt;/p>
&lt;p>로봇 제외 프로토콜이라고도 부르는 Robots.txt는 웹사이트가 크롤러와 소통하는 표준적 방법이다.&lt;/p>
&lt;p>Robots.txt 파일에는 크롤러가 수집해되 되는 페이지 목록이 들어있다.&lt;/p>
&lt;p>따라서 웹 사이트를 크롤링 하기 전 해당 파일에 나열된 규칙을 먼저 확인해야 한다.&lt;/p>
&lt;p>Robots.txt 파일을 거푸 다운로드하는 것을 피하기 위해, 이 파일은 주기적으로 다운받아 캐시에 보관한다.&lt;/p>
&lt;p>&lt;strong>성능 최적화&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>분산 크롤링&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_8.png"
width="610"
height="495"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_8_hu4704f60e777f14cba6bfd4009fcd3078_47203_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_8_hu4704f60e777f14cba6bfd4009fcd3078_47203_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="분산 크롤링 예시"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/li>
&lt;li>성능을 높이기 위해 크롤링 작업을 여러 서버에 분산하는 방법이다.&lt;/li>
&lt;li>각 서버는 여러 스레드를 돌려 다운로드 작업을 처리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>도메인 이름 변호나 결과 캐시&lt;/p>
&lt;ul>
&lt;li>도메인 이름 변환기는 DNS 요청을 보내고 결과를 받는 작업의 동기적 틍성으로 인해 크롤러 성능의 변목 중 하나이다.&lt;/li>
&lt;li>DNS 조회 결과로 얻어진 도메인 이름과 IP 주소 사이의 관계를 캐시에 보관해 놓고 크론 잡 등을 돌려 주기적으로 갱신하도록 해놓으면 성능을 효과적으로 높힐 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>지역성&lt;/p>
&lt;ul>
&lt;li>크롤링 작업을 수행하는 서버를 지역별로 분산하는 방법이다.&lt;/li>
&lt;li>크롤링 서버가 대상 서버와 지역적으로 가까우면 페이지 다운로드 시간을 줄일 수 있다.&lt;/li>
&lt;li>이러한 전략은 크롤 서버, 캐시, 큐, 저장소 등 대부분의 컴포넌트에 적용 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>짧은 타임아웃&lt;/p>
&lt;ul>
&lt;li>응답이 느리거나 하지 않는 서버에 대한 요청은 대기시간이 길어지므로, 최대 얼마나 기다릴지를 미리 정해 다운로드를 빨리 중단하여 다음 차례로 넘어간다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>안정성&lt;/strong>&lt;/p>
&lt;p>시스템 안정성을 향상하기 위한 접근법 가운데 중요한 몇가지는 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>안정 해시
&lt;ul>
&lt;li>다운로더 서버들에 부하를 분산할 때 적용 가능&lt;/li>
&lt;li>다운로더 서버를 쉽게 추가하고 삭제할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>크롤링 상태 및 수집 데이터 저장
&lt;ul>
&lt;li>장애가 발생한 경우에도 쉽게 복구할 수 있도록 크롤링 상태와 수집된 데이터를 지속적 저장장치에 기록해 두는 것이 바람직하다.&lt;/li>
&lt;li>크롤링을 쉽게 재시작할 수 있을 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>예외 처리
&lt;ul>
&lt;li>대규모 시스템에서 에러는 불가피할 뿐 아니라 흔하게 벌어진다.&lt;/li>
&lt;li>전체 시스템이 중단되는 일 없이 그 작업을 우아하게 이어나갈 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 검증
&lt;ul>
&lt;li>시스템 오류를 방지하기 위한 종요 수간 가운데 하나이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>확정성&lt;/strong>&lt;/p>
&lt;p>새로운 형태의 콘텐츠를 쉽게 지원할 수 있도록 신경 써야 한다.&lt;/p>
&lt;p>새로운 모듈을 끼워 넣음으로써 새로운 형태의 콘텐츠를 지원할 수 있도록 설계할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/9/img_9.png"
width="844"
height="555"
srcset="https://codemario318.github.io/post/system-design-interview/9/img_9_hu6bd6fe39d4fb6e162d1d6c362b2e20a7_81130_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/9/img_9_hu6bd6fe39d4fb6e162d1d6c362b2e20a7_81130_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="확장 모듈 반영 설계"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="364px"
>&lt;/p>
&lt;ul>
&lt;li>PNG 다운로더
&lt;ul>
&lt;li>PNG 파일을 다운로드하는 플러그인 모듈&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 모니터
&lt;ul>
&lt;li>웹을 모니터링하여 저작권이나 상표권이 침해되는 일을 막는 모듈&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>문제 있는 콘텐츠 감지 및 회피&lt;/strong>&lt;/p>
&lt;p>중복이거나 의미 없는, 또는 유해한 콘텐츠를 감지하고 차단해야한다.&lt;/p>
&lt;ul>
&lt;li>중복 콘텐츠
&lt;ul>
&lt;li>해시나 체크섬을 사용하면 중복 콘텐츠를 쉽게 탐지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>거미 덫
&lt;ul>
&lt;li>크롤러를 무한 루프에 빠드리도록 설계한 웹 페이지다.
&lt;ul>
&lt;li>&lt;code>www.spidertrapexample.com/foo/bar/foo/bar/foo/bar/...&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>만능 해결책은 없지만 몇가지 방법이 있다.
&lt;ul>
&lt;li>URL 최대 길이를 제한&lt;/li>
&lt;li>수작업으로 덫을 확인하고 착아낸 후 탐색 대상에서 제외하거나 필터 목록에 추가한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 노이즈
&lt;ul>
&lt;li>가치가 없는 콘텐츠는 제외한다.&lt;/li>
&lt;li>광고, 스크립트 코드, 스팸 URL 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;p>좋은 크롤러는 &lt;strong>규모 확정성&lt;/strong>, &lt;strong>예의&lt;/strong>, &lt;strong>확장성&lt;/strong>, &lt;strong>안정성&lt;/strong> 등을 고려해야한다.&lt;/p>
&lt;p>웹이 방대하고, 수없이 많은 덫이 도사리고 있기 때문에 규모 확장성이 뛰어난 웹 크롤러 설계는 단순하지 않다.&lt;/p>
&lt;ul>
&lt;li>서버 측 렌더링
&lt;ul>
&lt;li>비동기를 통해 동적으로 생성되는 링크는 페이지를 파싱하기 전에 서버 측 렌더링을 적용하면 해결할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>윈치 않는 페이지 필터링
&lt;ul>
&lt;li>스팸 방지 컴포넌트를 두어 품질이 조악하거나 스팸성인 페이지를 걸러내도록 하면 좋다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터베이스 다중화 및 샤딩
&lt;ul>
&lt;li>다중화나 샤딩 같은 기법을 적용하면 데이터 계층의 가용성, 규모 확장성, 안정성이 향상된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>수평적 규모 확장성
&lt;ul>
&lt;li>대규모 크롤링을 위해 다운로스 서버가 수천 대 필요하게 될 수 있으므로, 수평적 규모 확장을 위해 무상태 서버로 만드는 것이 중요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성, 일관성, 안정성
&lt;ul>
&lt;li>대형 시스템을 만들기 위해 필수적으로 고려해야한다. (1장 복습)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 분석 솔루션
&lt;ul>
&lt;li>데이터르 수집하고 분석하는 것은 어느 시스템에게나 중요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>8. URL 단축기 설계</title><link>https://codemario318.github.io/post/system-design-interview/8/</link><pubDate>Tue, 04 Jun 2024 15:18:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/8/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/cover.png" alt="Featured image of post 8. URL 단축기 설계" />&lt;h2 id="1단계-문제-이해-및-설게-범위-확정">1단계: 문제 이해 및 설게 범위 확정&lt;/h2>
&lt;ul>
&lt;li>Q. URL 단축기 동작 예시
&lt;ul>
&lt;li>A. &lt;code>https://tinyurl.com/y7ke-ocwj&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 트래픽 규모는?
&lt;ul>
&lt;li>A. 매일 1억개의 단축 URL 생성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 단축 URL의 길이는?
&lt;ul>
&lt;li>A. 짧을수록 좋음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 단축 URL에 포함될 문자제한은?
&lt;ul>
&lt;li>A. 숫자(0~9), 영문자(A~z) 사용 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 단축된 URL을 지우거나 갱신 가능?
&lt;ul>
&lt;li>A. 시스템 단순화를 위해 삭제나 갱신은 할 수 없다 가정&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이 시스템의 기본적 기능은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>URL 단축
&lt;ul>
&lt;li>주어진 긴 URL을 훨씬 짧게 줄인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>URL 리디렉션(redirection)
&lt;ul>
&lt;li>축약된 URL로 HTTP 요청이 오면 원래 URL로 안내&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>높은 가용성과 규모 확장성, 장애 감내 요구됨&lt;/li>
&lt;/ul>
&lt;h3 id="개략적-추정">개략적 추정&lt;/h3>
&lt;ul>
&lt;li>쓰기 연산: 매일 1억 개의 단축 URL 생성&lt;/li>
&lt;li>초당 쓰기 연산: &lt;code>1억 / 24 / 3600 = 1160&lt;/code>&lt;/li>
&lt;li>읽기 연산:
&lt;ul>
&lt;li>읽기 연산과 쓰기 연산의 비율은 &lt;strong>10:1&lt;/strong>로 가정&lt;/li>
&lt;li>대략 초당 11,600회 발생&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>URL 단축 서비스를 10년간 운영한다고 가정하면 &lt;code>1억 * 365 * 10 = 3650억&lt;/code>개 레코드 보관&lt;/li>
&lt;li>축약 전 URL의 평균 길이는 100
&lt;ul>
&lt;li>필요한 저장 용량은 &lt;code>3650억 * 100바이트 = 36.5TB&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;h3 id="api-엔드포인트">API 엔드포인트&lt;/h3>
&lt;p>클라이언트는 서버가 제공하는 API 엔드포인트를 통해 서버와 통신한다.&lt;/p>
&lt;p>RESTful API로 설계한다고 가정하면, 기본적으로 두 개의 엔드포인트를 필요로 한다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>URL 단축용 엔드포인트&lt;/strong>
&lt;ul>
&lt;li>새 단축 URL을 생성하고자 하는 클라이언트는 이 엔드포인트에 단축할 URL을 인자로 담아 POST 요청을 보내야한다.&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">POST /api/v1/data/shorten
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>인자: &lt;code>{longUrl: longURLstring}&lt;/code>&lt;/li>
&lt;li>반환: 단축 URL&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>URL 리디렉션용 엔드포인트&lt;/strong>
&lt;ul>
&lt;li>단축 URL에 대해 HTTP 요청이 오면 원래 URL로 보내주기 위한 용도의 엔드포인트&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">GET /api/v1/shortUrl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>반환: HTTP 리디렉션 목적지가 될 원래 URL&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="url-리디렉션">URL 리디렉션&lt;/h3>
&lt;p>단축 URL을 받은 서버는 그 URL을 원래 URL로 바꾸어 &lt;strong>301 응답&lt;/strong>의 &lt;strong>Location 헤더&lt;/strong>에 넣어 반환한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img.png"
width="362"
height="363"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_hu4a278bdc249e7e3e9a78362cdb2bf14f_44204_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_hu4a278bdc249e7e3e9a78362cdb2bf14f_44204_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="클라이언트와 서버 사이의 통신 절차"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;p>유의할 점은 301 응답과 302 응답의 차이로, 둘 다 리디렉션 응답이지만 차이가 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>301 Permanently Moved&lt;/code>
&lt;ul>
&lt;li>URL에 대한 HTTP 요청의 처리 책임이 &lt;strong>영구적으로 Location 헤더에 반환된 URL로 이전&lt;/strong>됨&lt;/li>
&lt;li>영구적인 이전이므로 브라우저는 이 응답을 &lt;strong>캐싱&lt;/strong>한다.&lt;/li>
&lt;li>따라서 같은 단축 URL로 재요청시 캐시된 원래 URL로 요청을 보낸다.&lt;/li>
&lt;li>서버 부하를 줄이는 것이 중요할 때 사용될 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>302 Found&lt;/code>
&lt;ul>
&lt;li>URL로의 요청이 &lt;strong>일시적으로 Location 헤더의 URL에 의해 처리&lt;/strong>되어야함&lt;/li>
&lt;li>클라이언트의 요청은 &lt;strong>캐싱되지 않으므로&lt;/strong>, 언제나 단축 URL 서버에 먼저 보내짐&lt;/li>
&lt;li>트래픽 분석 같이 클릭 발생률이나 발생 위치를 파악해야할 때 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>URL 리디렉션을 구현하는 가장 직관적인 방법은 &lt;strong>해시 테이블&lt;/strong>을 사용하는 것으로 &lt;code>&amp;lt;단축 URL: 원래 URL&amp;gt;&lt;/code> 형식으로 구현될 수 있다.&lt;/p>
&lt;h3 id="url-단축">URL 단축&lt;/h3>
&lt;p>단축 URL이 &lt;code>&amp;lt;www.tinyurl.com/{hashValue}&amp;gt;&lt;/code> 같은 형태로 만들어진다면, 긴 URL을 이 해시 값으로 대응시킬 &lt;strong>해시 함수 &lt;code>fx&lt;/code>&lt;/strong> 를 찾는 것이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_1.png"
width="263"
height="205"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_1_hu28fdb81906c71ae40d2947e410c83904_16249_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_1_hu28fdb81906c71ae40d2947e410c83904_16249_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="해시 함수 fx"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;p>해시 함수는 다음과 같은 요구사항을 만족해야 한다.&lt;/p>
&lt;ul>
&lt;li>입력으로 주어지는 긴 URL이 다른 값이면 해시 값도 달라야한다.&lt;/li>
&lt;li>계산된 해시 값은 원래 입력으로 주어졌던 긴 URL로 복원될 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;h3 id="데이터-모델">데이터 모델&lt;/h3>
&lt;p>개략적 설계에서는 모든 것을 해시 테이블에 두었지만, 이 방식은 메모리는 유한하고 비싸기 때문에 실제 시스템에서 사용되기 어렵다.&lt;/p>
&lt;p>더 나은 방식은 &lt;code>&amp;lt;단축 URL, 원래 URL&amp;gt;&lt;/code>의 순서쌍을 RDB에 저장하는 것이다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">erDiagram
URL {
number id pk
string shortURL
string longURL
}
&lt;/pre>
&lt;h3 id="해시-함수">해시 함수&lt;/h3>
&lt;p>해시 함수는 &lt;strong>원래 URL을 단축 URL로 변환&lt;/strong>하는 데 쓰인다.&lt;/p>
&lt;p>&lt;strong>해시 값 길이&lt;/strong>&lt;br>
hashValue는 &lt;code>[0-9, a-z, A-Z]&lt;/code>의 문자들로 구성된다.&lt;/p>
&lt;ul>
&lt;li>사용할 수 있는 문자의 개수는 &lt;code>10 + 26 + 26 = 62&lt;/code>개이다.&lt;/li>
&lt;li>hashValue의 길이를 정하기 위해서는 &lt;code>62^n &amp;gt;= 3650억&lt;/code>을 만드는 n의 최소값을 찾아야한다.
&lt;ul>
&lt;li>n = 7, 약 3.5조 개&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>해시후 충돌 해소&lt;/strong>&lt;br>
긴 URL을 줄이려면, 원래 URL을 7글자 문자열로 줄이는 해시 함수가 필요하다.&lt;/p>
&lt;p>가장 쉬운 방법은 CRC32, MD5, SHA-1 같이 잘 알려진 해시 함수를 이용하는 것이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_2.png"
width="403"
height="141"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_2_hu130b2b42d1534b4e7248d03256cabfb1_16625_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_2_hu130b2b42d1534b4e7248d03256cabfb1_16625_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="&amp;ldquo;https://en.wikipedia.org/wiki/Systems_design&amp;#34;의 해시값"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="685px"
>&lt;/p>
&lt;p>잘 알려진 해시 함수를 사용한 결과가 계산한 가장 짧은 해시값조차도 7보다는 길이가 긴데, 이 문제를 해결하기 위한 첫 번째 방법으로 처음 7개 문자만 사용하는 방법을 고려할 수 있다.&lt;/p>
&lt;ul>
&lt;li>해시 결과가 충돌할 확률이 높아진다.&lt;/li>
&lt;li>충돌이 발생한 경우, 충돌이 해소될 때까지 사전에 정한 문자열을 해시값에 덧붙인다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_3.png"
width="527"
height="318"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_3_hub0df4858afff8df13008d5e526aeee01_35083_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_3_hub0df4858afff8df13008d5e526aeee01_35083_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="해시 후 충돌 해소"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/p>
&lt;ul>
&lt;li>단축 URL을 생성할 때 한 번 이상 데이터베이스 질의를 해야 하므로 오버헤드가 크다.&lt;/li>
&lt;li>데이터베이스 대신 블룸 필터를 사용하면 성능을 높일 수 있다.
&lt;ul>
&lt;li>어떤 집합에 특정 원소가 있는 지 검사할 수 있도록 하는, 확률론에 기초한 공간 효율이 좋은 기술&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>base-62 변환&lt;/strong>&lt;br>
진법 변환(base conversion)은 URL 단축기를 구현할 때 흔히 사용되는 접근법이다.&lt;/p>
&lt;ul>
&lt;li>수의 표현 방식이 다른 두 시스템이 같은 수를 공유하여야 하는 경우 유용하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_4.png"
width="460"
height="209"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_4_hua0543d5a53f0486c3860430ba71667b3_17218_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_4_hua0543d5a53f0486c3860430ba71667b3_17218_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="62 진법 변환"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="528px"
>&lt;/p>
&lt;p>&lt;strong>두 접근법 비교&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>해시 후 충돌 해소&lt;/th>
&lt;th>62 진법 변환&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>단축 URL 길이가 고정됨&lt;/td>
&lt;td>단축 URL 길이가 가변적, ID 값이 커지면 길어짐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>유일성이 보장되는 ID 생성기가 필요하지 않음&lt;/td>
&lt;td>유일성 보장 ID 생성기 필요&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>충돌이 해소 전략 필요&lt;/td>
&lt;td>ID 유일성이 보장되어야 적용 가능한 전략이라 충돌 불가능&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ID로 부터 단축 URL을 계산하는 방식이 아니므로 다음에 쓸 수 있는 URL을 알아내는 것이 불가능&lt;/td>
&lt;td>ID가 1씩 증가하는 값이라고 가정하면 다음에 쓸 수 있는 단축 URL이 무엇인지 쉽게 알아낼 수 있어 보안상 문제 소지가 될 수 있음&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="url-단축기-상세-설계">URL 단축기 상세 설계&lt;/h3>
&lt;p>URL 단축기는 시스템의 핵심 컴포넌트이므로, 그 처리흐름이 논리적으로는 단순해야 하고, 기능적으로는 언제나 동작하는 상태로 유지되어야 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_5.png"
width="463"
height="348"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_5_hud414c15ad06fec3825b6f1e5e69c33f5_33072_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_5_hud414c15ad06fec3825b6f1e5e69c33f5_33072_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="URL 단축 처리 흐름"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>해당 ID 생성기의 주된 용도는, 단축 URL을 만들 때 사용할 ID를 만드는 것이고, 이 &lt;strong>ID는 전역적 유일성이 보장&lt;/strong>되는 것 이어야 한다.&lt;/p>
&lt;p>고도로 분산된 환경에서 이런 생성기를 만드는 것은 무척 어려운 일로 필요하다면 &lt;strong>7장 내용을 응용하여 분산 환경에 사용될 유일한 ID를 만들 수 있다&lt;/strong>.&lt;/p>
&lt;h3 id="url-리디렉션-상세-설계">URL 리디렉션 상세 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/8/img_6.png"
width="526"
height="167"
srcset="https://codemario318.github.io/post/system-design-interview/8/img_6_hu33c2d1982d9952264698b9ef2bfc0ff5_38702_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/8/img_6_hu33c2d1982d9952264698b9ef2bfc0ff5_38702_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="URL 리디렉션 상세 설계"
class="gallery-image"
data-flex-grow="314"
data-flex-basis="755px"
>&lt;/p>
&lt;p>쓰기보다 읽기를 더 자주하는 시스템의 특성에 맞추어, &lt;code>&amp;lt;단축 URL, 원래 URL&amp;gt;&lt;/code>의 쌍을 &lt;strong>캐싱&lt;/strong>하여 성능을 높힐 수 있다.&lt;/p>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>설계를 마친 후 시간이 좀 남는다면 다음과 같은 것을 면접관과 이야기 할 수 있을것이다.&lt;/p>
&lt;ul>
&lt;li>처리율 제한 장치
&lt;ul>
&lt;li>엄청난 양은 단축 요청이 들어올 경우 무력화될 수 있다는 잠재적 보안 결함을 갖고 있다.&lt;/li>
&lt;li>처리율 제한 장치를 통해 요청을 걸러낼 수 있다. 4장 참조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹 서버의 규모 확장
&lt;ul>
&lt;li>설계에 포함된 웹 계층은 무상태 계층이므로, 웹 서버를 자유롭게 증설, 삭제 할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터베이스 규모 확장
&lt;ul>
&lt;li>데이터베이스를 다중화하거나 샤딩하여 규모 확장성을 달성할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 분석 솔루션
&lt;ul>
&lt;li>URL 단축기에 데이터 분석 솔루션을 통합해 두면 어떤 링크를 얼마나 많은 사용자가 클릭했는지, 언제 주로 클릭했는지 등 중요한 정보를 알아낼 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성, 데이터 일관성, 안정성
&lt;ul>
&lt;li>1장 참조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>7. 분산 시스템을 위한 유일 ID 생성기 설계</title><link>https://codemario318.github.io/post/system-design-interview/7/</link><pubDate>Tue, 04 Jun 2024 14:26:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/7/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/cover.png" alt="Featured image of post 7. 분산 시스템을 위한 유일 ID 생성기 설계" />&lt;p>서비스의 규모가 작을때는 &lt;code>auto_increment&lt;/code> 속성이 설정된 관계형 데이터 베이스의 기본키를 사용하는 방법을 고려할 수 있지만, &lt;strong>분산 환경&lt;/strong>에서는 이러한 방법을 사용할 수 없다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스 서버(master) 한 대로는 요구를 감당할 수 없다.&lt;/li>
&lt;li>여러 데이터베이스 서버를 쓰는 경우 지연 시간을 낮추기 매우 힘들다.&lt;/li>
&lt;/ul>
&lt;h2 id="1단계-문제-이해-및-설계-범위-설정">1단계: 문제 이해 및 설계 범위 설정&lt;/h2>
&lt;ul>
&lt;li>Q. ID는 어떤 특성을 낮는가?
&lt;ul>
&lt;li>A. ID는 &lt;strong>유일&lt;/strong>해야 하고, &lt;strong>정렬 가능&lt;/strong>해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 새로운 레코드에 붙일 ID는 항상 1만큼 큰 값이어야 하는가?
&lt;ul>
&lt;li>A. &lt;strong>시간에 따라 커지지만&lt;/strong>, 언제나 &lt;strong>1씩 증가하지는 않아도 괜찮다&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. &lt;strong>ID는 숫자로만&lt;/strong> 구성되는가?
&lt;ul>
&lt;li>A. 예&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 시스템의 규모는 어느 정도 인가?
&lt;ul>
&lt;li>A. &lt;strong>초당 10,000 ID 생성&lt;/strong> 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위 질의응답을 통해 요구 사항을 정리하면 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>ID는 &lt;strong>유일&lt;/strong>해야함&lt;/li>
&lt;li>ID는 &lt;strong>숫자로만&lt;/strong> 구성되어야 함.&lt;/li>
&lt;li>ID는 &lt;strong>64비트로 표현&lt;/strong>될 수 있는 값이어야 한다.&lt;/li>
&lt;li>ID는 발급 날짜에 따라 &lt;strong>정렬 가능&lt;/strong>해야 한다.&lt;/li>
&lt;li>&lt;strong>초당 10,000개&lt;/strong>의 ID를 만들 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계안-제시-및-동의-구하기">2단계: 개략적 설계안 제시 및 동의 구하기&lt;/h2>
&lt;p>분산 시스템에서 유일성이 보장되는 ID를 만드는 방법은 여러 가지다.&lt;/p>
&lt;h3 id="다중-마스터-복제">다중 마스터 복제&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img.png"
width="405"
height="203"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_hu9014d3795a5b6c4cab16daba760b0bfa_48519_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_hu9014d3795a5b6c4cab16daba760b0bfa_48519_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="다중 마스터 복제 구조"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/p>
&lt;p>이 접근법은 데이터베이스의 &lt;strong>&lt;code>auto_increment&lt;/code>&lt;/strong> 기능을 활용한다.&lt;/p>
&lt;ul>
&lt;li>다음 ID의 값을 구할 때 1만큼 증가시켜 얻는 것이 아니라, &lt;strong>k만큼 증가&lt;/strong>시킨다.
&lt;ul>
&lt;li>&lt;strong>&lt;code>k = 현재 사용중인 데이터베이스 서버 대수&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이러한 방식을 통해 규모 확장성 문제를 어느정도 해결할 수 있지만, 중대한 단점이 있다.&lt;/p>
&lt;ul>
&lt;li>여러 데이터 센터에 걸쳐 규모를 늘리기 어렵다.&lt;/li>
&lt;li>ID의 유일성을 보장되지만, 그 값이 시간 흐름에 맞추어 커지도록 보장할 수 없다.
&lt;ul>
&lt;li>더 많은 ID를 생성한 데이터베이스의 ID가 덜 생성한 데이터베이스의 ID보다 늦게 생성되었어도 큰 값을 가질 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서버를 추가하거나 삭제할 때도 잘 동작하도록 만들기 어렵다.&lt;/li>
&lt;/ul>
&lt;h3 id="uuid">UUID&lt;/h3>
&lt;p>UUID는 유일성이 보장되는 ID를 만드는 또 하나의 간단한 방법이다.&lt;/p>
&lt;ul>
&lt;li>컴퓨터 시스템에 저장되는 정보를 유일하게 식별하기 위한 128비트짜리 수&lt;/li>
&lt;li>충돌 가능성이 지극히 낮다.
&lt;ul>
&lt;li>중복 UUID가 1개 생길 확률을 50%로 끌어 올리려면 초당 10억 개의 UUID를 100년동안 계속해서 만들어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>09c93e62-50b4-468d-bf8a-c07e1040bfb2&lt;/code> 와 같은 형태를 띈다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img_1.png"
width="523"
height="136"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_1_hu6256ca36668288eeedaf0076978f50bb_33014_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_1_hu6256ca36668288eeedaf0076978f50bb_33014_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="UUID를 사용하는 시스템의 구조"
class="gallery-image"
data-flex-grow="384"
data-flex-basis="922px"
>&lt;/p>
&lt;p>이러한 특성으로 UUID는 서버 간 조율 없이 독립적으로 생성 가능하므로, 각 서버가 별도의 ID 생성기를 사용해 독립적으로 ID를 만들어낸다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>UUID를 만드는 것은 단순하다.&lt;/li>
&lt;li>서버 사이의 조율이 필요 없으므로 동기화 이슈도 없다.&lt;/li>
&lt;li>각 서버가 자기가 쓸 ID를 알아서 만드는 구조이므로 규모 확장도 쉽다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ID가 128비트로 길다.
&lt;ul>
&lt;li>요구사항은 64비트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ID를 시간순으로 정렬할 수 없다.
&lt;ul>
&lt;li>임의의 중복이 힘든 문자열로 생성됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ID에 숫자가 아닌 값이 포함될 수 있다.
&lt;ul>
&lt;li>요구사항은 숫자로만 구성되어야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="티켓-서버">티켓 서버&lt;/h3>
&lt;p>티켓 서버는 &lt;code>auto_increment&lt;/code> 기능을 낮춘 데이터베이스 서버, 즉 티켓 서버를 중앙 집중형으로 하나만 사용하는 방식으로 유일성이 보장되는 ID를 만든다.&lt;/p>
&lt;ul>
&lt;li>플리커(Flickr)는 분산 기본 키(Distributed primary key)를 만들어 내기 위해 이 기술을 이용&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img_2.png"
width="514"
height="192"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_2_hu35af303bc81c90e1e9d062a2cc6f0084_34398_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_2_hu35af303bc81c90e1e9d062a2cc6f0084_34398_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="티켓 서버 동작 방식"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="642px"
>&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>유일성이 보장되는 오직 숫자로만 구성된 ID를 쉽게 만들 수 있다.&lt;/li>
&lt;li>구현하기 쉽고, 중소 구모 애플리케이션에 적합하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>티켓 서버가 SPOF가 된다.
&lt;ul>
&lt;li>티켓 서버에 장애가 발생하면 해당 서버를 이용하는 모든 시스템이 영향을 받는다.&lt;/li>
&lt;li>티켓 서버를 여러 대 준비한다면 데이터 동기화 같은 새로운 문제가 발생한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="트위터-스노플레이크-접근법">트위터 스노플레이크 접근법&lt;/h3>
&lt;p>스노플레이크 접근법은 생성해야하는 ID를 여러 절로 분할하여 독립적인 ID를 만든다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img_3.png"
width="517"
height="65"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_3_hu359222468aa455e79718e3251ca7189d_7642_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_3_hu359222468aa455e79718e3251ca7189d_7642_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="생성해야 하는 ID 구조"
class="gallery-image"
data-flex-grow="795"
data-flex-basis="1908px"
>&lt;/p>
&lt;ul>
&lt;li>사인(sign) 비트: 항상 0으로 설정되어 양수로 유지한다.
&lt;ul>
&lt;li>특별한 의미는 없는듯&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>타임스탬프(timestamp): 기원 시간 이후로 몇 밀리초가 경과했는지를 나타내는 값
&lt;ul>
&lt;li>41비트로 약 69년 동안의 시간을 표현할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터센터 ID: 데이터센터 ID
&lt;ul>
&lt;li>5비트로 32개 데이터 센터를 구분할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서버 ID: 서버 ID
&lt;ul>
&lt;li>5비트로 32개의 서버 구분 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일련번호: 각 서버에서 ID를 생성할 때마다 일련번호를 1만큼 증가시킴
&lt;ul>
&lt;li>1밀리초가 경과될 때마다 0으로 초기화됨(TS가 1ms 간격으로 증가하므로)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="3단계-상세-설계">3단계: 상세 설계&lt;/h2>
&lt;p>트위터 스노플레이크 접근법을 사용하여 보다 상세한 설계를 진행한다.&lt;/p>
&lt;ul>
&lt;li>데이터센터 ID와 서버 ID는 시스템이 시작될 때 결정되며, 일반적으로 시스템 운영중에는 바뀌지 않는다.
&lt;ul>
&lt;li>데이터센터 ID, 서버 ID를 잘못 변경하게 되면 충돌이 발생할 수 있으므로, 신중하게 해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>타임 스탬프나 일련번호는 ID 생성기가 돌고 있는 중에 만들어진다.&lt;/li>
&lt;/ul>
&lt;h3 id="타임스탬프">타임스탬프&lt;/h3>
&lt;p>타임스탬프는 시간이 흐름에 따라 점점 큰 값을 갖게 되므로, 결국 ID는 시간 순으로 정렬 가능하게 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/7/img_4.png"
width="511"
height="404"
srcset="https://codemario318.github.io/post/system-design-interview/7/img_4_hue8e03313e3458bff2af6b82679f89a78_43392_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/7/img_4_hue8e03313e3458bff2af6b82679f89a78_43392_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="타임스탬프를 이용한 UTC 추출"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>41비트로 표현할 수 있는 타임스탬프 최대값은 &lt;code>2^41 - 1 = 2,199,023,255,551&lt;/code> 밀리초 이므로 대략 69년 표현할 수 있다.&lt;/p>
&lt;p>따라서 이 ID 생성기는 69년동안만 정상 동작하므로 &lt;strong>69년이 지나면 기원 시각을 바꾸거나 ID 체계를 다른 것으로 이전&lt;/strong>(migration)하여햐한다.&lt;/p>
&lt;h3 id="일련번호">일련번호&lt;/h3>
&lt;p>일련번호는 12비트이므로,&lt;code>2^12 - 1 = 4096&lt;/code>개의 값을 가질 수 있다.&lt;/p>
&lt;p>어떤 서버가 &lt;strong>같은 밀리초 동안 하나 이상의 ID를 만들어 낸 경우에만 0보다 큰 값&lt;/strong>을 갖게 된다.&lt;/p>
&lt;h2 id="4단계-마무리">4단계: 마무리&lt;/h2>
&lt;ul>
&lt;li>시계 동기화(Clock synchronization)
&lt;ul>
&lt;li>기존 설계는 하나의 서버가 여러 코어에서 실행될 경우 유효하지 않을 수 있다.&lt;/li>
&lt;li>물리적으로 독립된 여러 장비에서 실행되는 경우 유효하지 않을 수 있다.&lt;/li>
&lt;li>NTP(Network Time Protocol)은 이 문제를 해결하는 가장 보편적인 수단이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>각 절(Section)의 길이 최적화
&lt;ul>
&lt;li>동시성이 낮고 수명이 긴 애플리케이션이라면 일련번호 절의 길이를 줄이고 타임스탬프 절의 길이를 늘리는 것이 효과적일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>고가용성
&lt;ul>
&lt;li>ID 생성기는 필수 불가결(mission critical) 컴포넌트이므로 아주 높은 가용성을 제공해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>6. 키-값 저장소 설계</title><link>https://codemario318.github.io/post/system-design-interview/6/</link><pubDate>Mon, 27 May 2024 11:59:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/6/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/cover.png" alt="Featured image of post 6. 키-값 저장소 설계" />&lt;p>키-값 저장소(key-value store)는 키-값 데이터베이스라고도 불리는 비 관계형(non-relational) 데이터베이스이다.&lt;/p>
&lt;ul>
&lt;li>이 저장소에 저장되는 값은 &lt;strong>고유 식별자&lt;/strong>를 키로 가져야한다.&lt;/li>
&lt;li>키와 값 사이의 이런 연결 관계를 &lt;strong>키-값 쌍&lt;/strong>(key-value pair)이라고 지칭한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>키&lt;/strong>&lt;br>
키-값 쌍에서의 키는 &lt;strong>유일&lt;/strong>해야 하며 해당 키에 매달린 값은 &lt;strong>키를 통해서만 접근&lt;/strong>할 수 있다.&lt;/p>
&lt;p>키는 일반 텍스트일 수도 있고 해시 값일 수도 있지만, 성능상의 이유로 짧을수록 좋다.&lt;/p>
&lt;ul>
&lt;li>일반 텍스트 키: &amp;ldquo;last_logged_in_at&amp;rdquo;&lt;/li>
&lt;li>해시 키: 253DDEC4&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>값&lt;/strong>&lt;br>
키-값 저장소는 보통 &lt;strong>값으로 무엇이 오든 상관하지 않는다&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>문자열, 리스트, 객체 등&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>키-값 저장소로 널리 알려진 것은 아마존 다이나모, memcached, 레디스 같은 것들이 있다.&lt;/p>
&lt;p>또한 기본적으로 아래와 같은 연산을 지원해야한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>put(key, value)&lt;/code>: 키-값 쌍을 저장소에 저장한다.&lt;/li>
&lt;li>&lt;code>get(key)&lt;/code>: 인자로 주어진 키에 매달린 값을 꺼낸다.&lt;/li>
&lt;/ul>
&lt;h2 id="문제-이해-및-설계-범위-확정">문제 이해 및 설계 범위 확정&lt;/h2>
&lt;p>완벽한 설계란 없다.&lt;/p>
&lt;p>읽기, 쓰기 그리고 메모리 사용량 사이에 어떤 균형을 찾고, 데이터의 일관성과 가용성 사이에서 타협적 결정을 내린 설계를 만들었다면 충분히 쓸만한 답이다.&lt;/p>
&lt;p>이번 장에서는 다음 특성을 갖는 키-값 저장소를 설계해본다.&lt;/p>
&lt;ul>
&lt;li>키-값 쌍의 크기는 10KB 이하이다.&lt;/li>
&lt;li>큰 데이터를 저장할 수 있어야 한다.&lt;/li>
&lt;li>높은 가용성을 제공해야한다.
&lt;ul>
&lt;li>시스템은 장애가 있더라도 빨리 응답해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>높은 규모 확장성을 제공해야 한다.
&lt;ul>
&lt;li>트래픽 양에 따라 자동적으로 서버 증설/삭제가 이루어져야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 일관성 수준은 조정이 가능해야 한다.&lt;/li>
&lt;li>응답 지연시간(latency)이 짧아야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="단일-서버-키-값-저장소">단일 서버 키-값 저장소&lt;/h2>
&lt;p>한 대 서버만 사용하는 키-값 저장소는 설계가 쉽다.&lt;/p>
&lt;p>가장 직관적인 방법은 키-값 쌍 전부를 메모리에 해시 테이블로 저장하는 것이다.&lt;/p>
&lt;p>이 방법은 빠른 속도를 보장하지만 &lt;strong>모든 데이터를 메모리안에 두는 것이 불가능&lt;/strong>할 수도 있다.&lt;/p>
&lt;p>이 문제의 개선책은 다음과 같은 것들이 있다.&lt;/p>
&lt;ul>
&lt;li>데이터 압축&lt;/li>
&lt;li>자주 쓰이는 데이터만 메모리에 두고 나머지는 디스크에 저장&lt;/li>
&lt;/ul>
&lt;p>이렇게 개선한다고 해도, 한 대 서버로 부족한 때가 찾아오며, 많은 데이터를 저장하기 위해서 &lt;strong>분산 키-값 저장소&lt;/strong>를 만들어야한다.&lt;/p>
&lt;h2 id="분산-키-값-저장소">분산 키 값 저장소&lt;/h2>
&lt;p>분산 키 값 저장소는 키-값 쌍을 여러 서버에 분산시키므로 &lt;strong>분산 해시 테이블&lt;/strong>이라고도 불린다.&lt;/p>
&lt;p>분산 시스템을 설계할 때는 &lt;strong>CAP 정리&lt;/strong>(Consistency, Availability, Partition Tolerance theorem)를 이해하고 있어야 한다.&lt;/p>
&lt;h3 id="cap-정리">CAP 정리&lt;/h3>
&lt;p>CAP 정리는 &lt;strong>데이터 일관성(consistency), 가용성(availability), 파티션 감내(partition tolerance)라는 세가지 요구사항을 동시에 만족하는 분산 시스템을 설계하는 것은 불가능하다&lt;/strong>는 정리이다.&lt;/p>
&lt;ul>
&lt;li>데이터 일관성
&lt;ul>
&lt;li>분산 시스템에 접속하는 모든 클라이언트는 어떤 노드에 접속했느냐에 관계없이 언제나 같은 데이터를 보게 되어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성
&lt;ul>
&lt;li>분산 시스템에 접속하는 클라이언트는 일부 노드에 장애가 발생하더라도 항상 응답을 받을 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>파티션 감내
&lt;ul>
&lt;li>파티션은 두 노드 사이에 통신 장애가 발생하였음을 의미한다.&lt;/li>
&lt;li>네트워크에 파티션(분할)이 생기더라도 시스템은 계속 동작하여야 한다는 것을 뜻한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>네트워크 파티션?&lt;/strong>&lt;br>
테이터베이스 시스템의 일부 노드들이 서로 통신할 수 없는 상황으로 인해 각 노드들(파티션)이 독립적으로 동작하게 되어 각 파티션이 서로 다른 상태나 데이터를 가지게 되는 상황&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img.png"
width="828"
height="608"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_hu8399b985eaaab4d8c3cc5e2bfd3651de_149592_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_hu8399b985eaaab4d8c3cc5e2bfd3651de_149592_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>따라서 이들 가운데 &lt;strong>어떤 두 가지를 충족하려면 나머지 하나는 반드시 희생되어야 한다&lt;/strong>는 것을 의미한다.&lt;/p>
&lt;p>키 값 저장소는 세 가지 요구사항 가운데 어느 두 가지를 만족하느냐에 따라 다음과 같이 분류할 수 있다.&lt;/p>
&lt;ul>
&lt;li>CP: 일관성과 파티션 감내를 지원(가용성 희생)&lt;/li>
&lt;li>AP: 가용성과 파티션 감내를 지원(데이터 일관성 희생)&lt;/li>
&lt;li>CA: 일관성과 가용성을 지원(파티션 감내 지원 안함)
&lt;ul>
&lt;li>통상 네트워크 장애는 피할 수 없는 일로 여겨지므로, 분산 시스템은 반드시 파티션 문제를 감내할 수 있도록 설계되어야 한다.&lt;/li>
&lt;li>실세계에서 CA 시스템은 존재하지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="구체적-사례">구체적 사례&lt;/h3>
&lt;p>분산 시스템에서 데이터는 보통 여러 노드에 복제되어 보관된다.&lt;/p>
&lt;h4 id="이상적-상태">이상적 상태&lt;/h4>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_1.png"
width="840"
height="592"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_1_hua0faa9aa952f92ab7c5a2fe27ee0e7c0_91753_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_1_hua0faa9aa952f92ab7c5a2fe27ee0e7c0_91753_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;p>이상적인 환경이라면 &lt;strong>네트워크가 파티션되는 상황은 절대로 일어나지 않을 것&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>n1&lt;/strong>에 기록된 데이터는 자동적으로 &lt;strong>n2&lt;/strong>, &lt;strong>n3&lt;/strong>에 복제되며 데이터 일관성과 가용성도 만족한다.&lt;/li>
&lt;/ul>
&lt;h4 id="실세계의-분산-시스템">실세계의 분산 시스템&lt;/h4>
&lt;p>분산 시스템은 파티션 문제를 피할 수 없다.&lt;/p>
&lt;p>파티션 문제가 발생하면 &lt;strong>일관성과 가용성 사이에서 하나를 선택&lt;/strong>해야 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_2.png"
width="839"
height="605"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_2_hud8043c96815985a7c6b0f4ed2ff33b87_103442_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_2_hud8043c96815985a7c6b0f4ed2ff33b87_103442_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="332px"
>&lt;/p>
&lt;p>&lt;strong>n3&lt;/strong>에 장애가 발생하여 &lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>와 통신 할 수 없는 상황에서&lt;/p>
&lt;ul>
&lt;li>클라이언트가 &lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>에 기록한 데이터는 &lt;strong>n3&lt;/strong>에 전달되지 않는다.&lt;/li>
&lt;li>&lt;strong>n3&lt;/strong>에 기록되었으나 &lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>로 전달되지 않은 데이터가 있다면 오래된 사본을 갖고 있을 것이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>CP 시스템&lt;/strong>&lt;/p>
&lt;p>가용성 대신 일관성을 선택한다면 세 서버 사이에 생길 수 있는 데이터 불일치 문제를 피하기 위해 &lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>에 대해 &lt;strong>쓰기 연산을 중단&lt;/strong>시켜야한다.&lt;/p>
&lt;p>이러한 경우 일부 노드가 장애가 발생하여도 동작해야 한다는 가용성이 깨진다.&lt;/p>
&lt;p>데이터 일관성을 양보할 수 없는 시스템은 이렇게 처리되어 상황이 해결될 때 까지 오류를 반환해야 한다.&lt;/p>
&lt;ul>
&lt;li>온라인 뱅킹 등&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>AP 시스템&lt;/strong>&lt;/p>
&lt;p>일관성 대신 가용성을 선택한 시스템은 &lt;strong>낡은 데이터를 반환할 위험이 있더라도 계속 읽기 연산을 허용&lt;/strong>해야한다.&lt;/p>
&lt;p>&lt;strong>n1&lt;/strong>, &lt;strong>n2&lt;/strong>는 계속 쓰기 연산을 허용하고, 파티션 문제가 해결된 뒤 새 데이터를 &lt;strong>n3&lt;/strong>에 전송해야한다.&lt;/p>
&lt;hr>
&lt;p>분산 키-값 저장소를 만들 때는 그 요구사항에 맞도록 CAP 정리를 적용해야 한다.&lt;/p>
&lt;p>면접 상황에서는 이 문제에 대해 면접관과 상의하고, 그 결론에 따라 시스템을 설계하도록 하자.&lt;/p>
&lt;h3 id="시스템-컴포넌트">시스템 컴포넌트&lt;/h3>
&lt;p>키-값 저장소 구형에 사용되는 핵심 컴포넌트들 및 기술을 살펴본다.&lt;/p>
&lt;ul>
&lt;li>데이터 파티션&lt;/li>
&lt;li>데이터 다중화&lt;/li>
&lt;li>일관성&lt;/li>
&lt;li>일관성 불일치 해소&lt;/li>
&lt;li>장애 처리&lt;/li>
&lt;li>시스템 아키텍처 다이어그램&lt;/li>
&lt;li>쓰기 경로&lt;/li>
&lt;li>읽기 경로&lt;/li>
&lt;/ul>
&lt;h4 id="데이터-파티션">데이터 파티션&lt;/h4>
&lt;p>대규모 애플리케이션의 경우 전체 데이터를 한 대 서버에 욱여넣는 것은 불가능하다.&lt;/p>
&lt;p>가장 단순한 해결책은 &lt;strong>데이터를 작은 파티션들로 분할한 다음 여러 대 서버에 저장하는 것&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>데이터를 여러 서버에 고르게 분산할 수 있는가&lt;/li>
&lt;li>노드가 추가되거나 삭제될 때 데이터의 이동을 최소화할 수 있는가&lt;/li>
&lt;/ul>
&lt;p>5장에서 다룬 안정 해시는 이런 문제를 푸는 데 적합한 기술로 활용될 수 있다.&lt;/p>
&lt;p>안정 해시를 사용하여 데이터를 파티션하면 몇가지 장점이 있다.&lt;/p>
&lt;ul>
&lt;li>규모 확장 자동화(automatic scaling)
&lt;ul>
&lt;li>시스템 부하에 따라 서버가 자동으로 추가되거나 삭제되도록 만들 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다양성(heterogeneity)
&lt;ul>
&lt;li>각 서버의 용량에 맞게 가상 노드의 수를 조정할 수 있다.&lt;/li>
&lt;li>고성능 서버는 더 많은 가상노드를 갖도록&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="데이터-다중화">데이터 다중화&lt;/h4>
&lt;p>높은 가용성과 안정성을 확보하기 위해서는 데이터를 N개 서버에 비동기적으로 다중화할 필요가 있다.&lt;/p>
&lt;p>어떤 키를 해시 링 위에 배치한 수, 그 지점으로부터 시계 방향으로 링을 순회하면서 만나는 첫 N개 서버에 데이터 사본을 보관한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_3.png"
width="843"
height="685"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_3_hu0675f294d26db8b4acf424a88b68b693_77163_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_3_hu0675f294d26db8b4acf424a88b68b693_77163_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="295px"
>&lt;/p>
&lt;p>하지만 가상 노드를 사용한다면 선택한 N개의 노드가 대응될 실제 물리 서버의 개수가 N보다 작아질 수 있다.&lt;/p>
&lt;p>이 문제를 피하려면 노드를 선택할 때 같은 물리 서버를 중복으로 선택하지 않도록 해야한다.&lt;/p>
&lt;p>같은 데이터 센터에 속한 노드는 정전, 네트워크 이슈, 자연 재해 등의 문제를 동시에 같이 겪을 가능성이 있으므로, 안정성을 담보하기 위해 데이터의 사본은 다른 센터의 서버에 보관하고, 센터들은 고속 네트워크로 연결한다.&lt;/p>
&lt;h4 id="데이터-일관성">데이터 일관성&lt;/h4>
&lt;p>여러 노드에 다중화된 데이터는 적절히 동기화가 되어야 한다.&lt;/p>
&lt;p>&lt;strong>정족수 합의&lt;/strong>(Quorum Consensus) 프로토콜을 사용하면 읽기/쓰기 연산 모두에 일관성을 보장할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>N&lt;/code>: 사본의 개수&lt;/li>
&lt;li>&lt;code>W&lt;/code>: 쓰기 연산에 대한 정족수
&lt;ul>
&lt;li>쓰기 연산이 성공한 것으로 간주되려면 적어도 &lt;code>W&lt;/code>개의 서버로부터 쓰기 연산이 성공했다는 응답을 받아야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>R&lt;/code>: 읽기 연산에 대한 정족수
&lt;ul>
&lt;li>읽기 연산이 성공한 것으로 간주되려면 적어도 &lt;code>R&lt;/code>개의 서버로부터 응답을 받아야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>일반적으로 &lt;code>N = R + W &amp;gt; N&lt;/code> 조건을 만족하도록 설정하며, 읽기와 쓰기 요청이 적어도 하나의 공통 노드를 통해 일관성을 유지하도록 보장한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_4.png"
width="839"
height="579"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_4_huec6b456c1e9a98e57b711c077ef003c7_99493_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_4_huec6b456c1e9a98e57b711c077ef003c7_99493_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="N = 3"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>&lt;code>W = 1&lt;/code>는 쓰기 연산이 성공했다고 판단하기 위해 중재자(coordinator)는 최소 한 대 서버로부터 쓰기 성공 응답을 받아야한다는 뜻이다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>s1&lt;/strong>으로 부터 성공 응답을 받았다면, 나머지 응답은 기다릴 필요가 없다.&lt;/li>
&lt;/ul>
&lt;p>중재자는 클라이언트와 노드 사이에서 프락시(proxy)역할을 한다.&lt;/p>
&lt;hr>
&lt;p>&lt;code>W&lt;/code>, &lt;code>R&lt;/code>, &lt;code>N&lt;/code>의 값을 정하는 것은 응답 지연과 데이터 일관성 사이의 타협점을 찾는 전형정인 과정이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>W = 1&lt;/code> or &lt;code>R = 1&lt;/code>
&lt;ul>
&lt;li>중재자는 한 대 서버로부터의 응답만 받으면 되므로 응답속도는 빠르다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>W &amp;gt; 1&lt;/code> or &lt;code>R &amp;gt; 1&lt;/code>
&lt;ul>
&lt;li>데이터 일관성의 수준은 향상되지만 중재자의 응답 속도는 가장 느린 서버로부터의 응답을 기다려야 하므로 느려진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;code>W + R &amp;gt; N&lt;/code>인 경우에는 일관성을 보증할 최신 데이터를 가진 노드가 최소 하나는 겹치므로 강한 일관성이 보장된다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>R = 1&lt;/code>, &lt;code>W = N&lt;/code>
&lt;ul>
&lt;li>빠른 읽기 연산에 최적화된 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>R = N&lt;/code>, &lt;code>W = 1&lt;/code>
&lt;ul>
&lt;li>빠른 쓰기 연산에 최적화된 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>R + W &amp;gt; N&lt;/code>
&lt;ul>
&lt;li>강한 일관성이 보장됨
&lt;ul>
&lt;li>보통 &lt;code>N = 3&lt;/code>, &lt;code>W = R = 2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>R + W &amp;lt;= N&lt;/code>
&lt;ul>
&lt;li>강한 일관성이 보장되지 않음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>요구되는 일관성 수준에 따라 &lt;code>W&lt;/code>, &lt;code>R&lt;/code>, &lt;code>N&lt;/code> 값을 조정한다.&lt;/p>
&lt;p>&lt;strong>일관성 모델&lt;/strong>&lt;/p>
&lt;p>일관성 모델(consistency model)은 키-값 저장소를 설계할 때 고려해야 할 요소로 데이터 일관성 수준을 결정한다.&lt;/p>
&lt;ul>
&lt;li>강한 일관성
&lt;ul>
&lt;li>모든 읽기 연산은 최신 결과를 반환한다.&lt;/li>
&lt;li>클라이언트는 절대로 낡은 데이터를 볼 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>약한 일관성
&lt;ul>
&lt;li>읽기 연산은 최신 결과를 반환하지 못할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>결과적 일관성
&lt;ul>
&lt;li>약한 일관성의 한 형태로, 갱신 결과가 결국에는 모든 사본에 반영(동기화)된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>강한 일관성&lt;/strong>을 달성하는 일반적인 방법은, &lt;strong>모든 사본에 현재 쓰기 연산의 결과가 반영될 때까지 해당 데이터에 대한 읽기/쓰기를 금지&lt;/strong>하는 것이다.&lt;/p>
&lt;ul>
&lt;li>새로운 요청의 처리가 중단되므로 고 가용성 시스템에는 적합하지 않다.&lt;/li>
&lt;/ul>
&lt;p>다이나모 또는 카산드라 같은 저장소는 결과적 일관성 모델을 택하고 있다.&lt;/p>
&lt;ul>
&lt;li>결과적 일관성 모델을 따를 경우 &lt;strong>쓰기 연산이 병렬적으로 발생하면 시스템에 저장된 값의 일관성이 깨어질 수 있는데&lt;/strong>, 이 문제는 클라이언트가 해결해야한다.&lt;/li>
&lt;li>클라이언트 측에서 데이터의 버전 정보를 활용해 일관성이 깨진 데이터를 읽지 않도록 해야한다.&lt;/li>
&lt;/ul>
&lt;p>데이터를 다중화하면 가용성은 높아지지만 사본 간 일관성이 깨질 가능성은 높아진다.&lt;/p>
&lt;p>&lt;strong>비 일관성 해소 기법: 데이터 버저닝&lt;/strong>&lt;/p>
&lt;p>버저닝은 데이터를 변경할 때마다 해당 데이터의 새로운 버전을 만든다.&lt;/p>
&lt;ul>
&lt;li>각 버전은 변경 불가능하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_5.png"
width="838"
height="387"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_5_hu314294c50ed1dac3bf6da051bfbc696c_78353_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_5_hu314294c50ed1dac3bf6da051bfbc696c_78353_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="충돌하는 두 값"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="519px"
>&lt;/p>
&lt;p>서버 1, 2가 다른 노드의 같은&lt;code>name&lt;/code>의 값을 동시에 변경하여 충돌이 발생했다고 가정했을 때 각각을 버전 &lt;strong>v1&lt;/strong>, &lt;strong>v2&lt;/strong>로 볼 수 있다.&lt;/p>
&lt;p>이러한 충돌 문제를 해결하려면, 충돌을 발견하고 자동으로 해결해 낼 버저닝 시스템이 필요하다.&lt;/p>
&lt;p>&lt;strong>백터 시계&lt;/strong>(vector clock)는 &lt;strong>&lt;code>[서버, 버전]&lt;/code>의 순서 쌍을 데이터에 매단 것&lt;/strong>으로 충돌 문제를 푸는데 보편적으로 사용된다.&lt;/p>
&lt;ul>
&lt;li>어떤 버전이 선행 버전인지, 후행 버전인지, 충돌이 있는지 판별하는 데 쓰인다.&lt;/li>
&lt;/ul>
&lt;p>데이터 D를 서버 &lt;strong>Si&lt;/strong>에 기록하려면 아래 작업 가운데 하나를 수행해야한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>[Si, Vi]&lt;/code>가 있으면 &lt;code>Vi&lt;/code>를 증가시킨다.&lt;/li>
&lt;li>그렇지 않다면 새 항목 &lt;code>[Si, 1]&lt;/code>을 만든다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_6.png"
width="717"
height="798"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_6_hu4d508b5e0485ac8ed5a6f6afc4aa05b9_112910_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_6_hu4d508b5e0485ac8ed5a6f6afc4aa05b9_112910_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="백터 시계"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/p>
&lt;ol>
&lt;li>클라이언트가 &lt;code>D1&lt;/code>을 시스템에 기록한다.
&lt;ul>
&lt;li>처리한 서버는 &lt;code>Sx&lt;/code>이므로 백터 시계는 &lt;code>D1[Sx, 1]&lt;/code>으로 변한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다른 클라이언트가 &lt;code>D1&lt;/code>을 읽고 &lt;code>D2&lt;/code>로 업데이트한 다음 기록한다.
&lt;ul>
&lt;li>&lt;code>D2&lt;/code>는 &lt;code>D1&lt;/code>의 변경이므로 덮어쓴다.&lt;/li>
&lt;li>&lt;code>Sx&lt;/code>가 처리했으므로 벡터 시계를 &lt;code>D2[Sx, 2]&lt;/code>로 변경한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다른 클라이언트가 &lt;code>D2&lt;/code>를 읽어 &lt;code>D3&lt;/code>로 갱신한 다음 기록한다.
&lt;ul>
&lt;li>&lt;code>Sy&lt;/code>가 처리했으므로 백터 시계 상태는 &lt;code>D3([Sx, 2], [Sy, 1])&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>또 다른 클라이언트가 &lt;code>D2&lt;/code>를 읽고 &lt;code>D4&lt;/code>로 갱신한 후 기록한다.
&lt;ul>
&lt;li>&lt;code>Sz&lt;/code>가 처리했으므로 백터 시계 상태는 &lt;code>D4([Sx, 2], [Sz, 1])&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>어떤 클라이언트가 D3과 D4를 읽으면 데이터 간 충돌이 있다는 것을 알게 되므로, 클라이언트가 해소한 후 서버에 기록한다.
&lt;ul>
&lt;li>&lt;code>Sx&lt;/code>가 처리했으므로 백터 시계는 &lt;code>D5([Sx, 3], [Sy, 1], [Sz, 1])&lt;/code>로 바뀐다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>벡터 시계를 이용하면 버전 Y에 포함된 모든 구성 요소의 값이 X에 포함된 모든 구성요소 값보다 같거나 큰지만 확인하면 어떤 버전 X가 버전 Y의 이전 버전인지 쉽게 판단할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>D([s0, 1], [s1, 1])&lt;/code>은 &lt;code>D([s0, 1], [s1, 2])&lt;/code>보다 이전 버전이다.(충돌 X)&lt;/li>
&lt;/ul>
&lt;p>어떤 버전 X와 Y 사이에 충돌이 있는지 보려면 &lt;strong>Y의 벡터 시계 구성 요소 가운데 X의 벡터 시계 동일 서버 구성요소보다 작은 값을 갖는 것이 있는지 확인&lt;/strong>한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>D([s0, 1], [s1, 2])&lt;/code>, &lt;code>D([s0, 2], [s1, 1])&lt;/code>는 서로 충돌한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>벡터 시계를 통해 충돌 감지하고 해소하는 방법에는 두 가지 단점이 있다.&lt;/p>
&lt;ul>
&lt;li>충돌 감지 및 해소 로직이 클라이언트에 들어가야 하므로, 클라이언트 구현이 복잡해진다.&lt;/li>
&lt;li>&lt;code>[서버: 버전]&lt;/code>의 순서쌍 개수가 굉장히 빨리 늘어난다.
&lt;ul>
&lt;li>순서쌍 개수에 임계치를 설정하고, 임계치 이상으로 길이가 길어지면 오래된 순서쌍을 백터 시계에서 제거한다.&lt;/li>
&lt;li>버전 간 선후 관계가 정확하게 결정될 수 없으므로 충돌 해소 과정의 효율성이 낮아질 수 있다.&lt;/li>
&lt;li>실제 서비스에서 그런 문제는 거의 발생하지 않으므로, 대부분 기업에서 괜찮다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="장애-처리">장애 처리&lt;/h4>
&lt;p>대규모 시스템에서 장애는 아주 흔하게 벌어지므로 장애를 어떻게 처리할 것이냐 하는 것은 굉장히 중요한 문제이다.&lt;/p>
&lt;h4 id="장애-감지">장애 감지&lt;/h4>
&lt;p>분산 시스템에서는 서버 A에 문제가 생겼을 때 바로 장애를 처리하지 않고, 보통 두 대 이상의 서버가 똑같이 서버 A에 대해 장애를 보고해야 해당 서버에 실제로 장애가 발생했다고 간주한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_7.png"
width="838"
height="636"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_7_hu135f183e800718526af99039ce9e186b_156879_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_7_hu135f183e800718526af99039ce9e186b_156879_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="멀티캐스팅 채널 구축"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>모든 노드 사이에 멀티캐스팅 채널을 구축하는 것이 서버 장애를 감지하는 손쉬운 방법이나, 이 방법은 서버가 많을 때 비효율적이다.&lt;/p>
&lt;p>따라서 &lt;strong>가십 프로토콜&lt;/strong>(gossip protocol) 같은 분산형 장애 감지 솔루션을 채택하는 편이 보다 효율적이다.&lt;/p>
&lt;ul>
&lt;li>각 노드는 맴버십 목록을 유지한다.
&lt;ul>
&lt;li>맴버십 목록: 각 맴버 ID와 그 박동 카운터(heartbeat counter) 쌍의 목록&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>각 노드는 주기적으로 자신의 박동 카운터를 증가시킨다.&lt;/li>
&lt;li>각 노드는 무작위로 선정된 노드들에게 주기적으로 자기 박동 카운터 목록을 보낸다.&lt;/li>
&lt;li>박동 카운터 목록을 받은 노드는 맴버십 목록을 최신 값으로 갱신한다.&lt;/li>
&lt;li>어떤 맴버의 박동 카운터 값이 지정된 시간 동안 갱신되지 않으면 해당 멤버는 장애 상태인 것으로 간주한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_8.png"
width="839"
height="382"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_8_hu90da88e3e0d0b1a6937865c76380943d_88593_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_8_hu90da88e3e0d0b1a6937865c76380943d_88593_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="가십 프로토콜"
class="gallery-image"
data-flex-grow="219"
data-flex-basis="527px"
>&lt;/p>
&lt;h4 id="일시적-장애-처리">일시적 장애 처리&lt;/h4>
&lt;p>장애를 감지한 시스템은 가용성을 보장하기 위해 필요한 조치를 해야한다.&lt;/p>
&lt;ul>
&lt;li>엄격한 정족수 접근법은 읽기와 쓰기 연산을 금지한다.&lt;/li>
&lt;li>느슨한 정족수 접근법은 쓰기 연산을 수행할 W개의 건강한 서버와 읽기 연산을 수행할 R개의 건강한 서버를 해시 링에서 고른다.(장애 서버는 무시)&lt;/li>
&lt;li>장애 상태인 서버로 가는 요청은 다른 서버가 잠시 맡아 처리한다.&lt;/li>
&lt;li>그동안 발생한 변경 사항은 장애 서버가 복구 되었을 때 일괄 반영하여 데이터 일관성을 보존한다.
&lt;ul>
&lt;li>임시로 쓰기 연산을 처리한 서버에는 그에 관한 단서를 남겨둔다.&lt;/li>
&lt;li>단서 후 임시 위탁(hinted handoff)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_9.png"
width="834"
height="718"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_9_hu115bfa1d5fe40c44de379ba88e53d6c2_127770_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_9_hu115bfa1d5fe40c44de379ba88e53d6c2_127770_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;/p>
&lt;p>장애 상태인 s2에 대한 읽기 및 쓰기 연산은 일시적으로 s3가 처리하며, s2가 복구되면 s3는 갱신된 데이터를 s2로 인계한다.&lt;/p>
&lt;h4 id="영구-장애-처리">영구 장애 처리&lt;/h4>
&lt;p>영구적인 노드의 장애 상태는 반-엔트로피(anti-entropy) 프로토콜을 구현하여 사본들을 동기화한다.&lt;/p>
&lt;p>반-엔트로피 프로토콜은 &lt;strong>사본들을 비교하여 최신 버전으로 갱신하는 과정을 포함&lt;/strong>한다.&lt;/p>
&lt;p>사본 간의 일관성이 망가진 상태를 탐지하고 전송 데이터의 양을 줄이기 위해서 머클(Merkle) 트리를 사용한다.&lt;/p>
&lt;blockquote>
&lt;p>머클 트리?&lt;br>
해시 트리라고 불리는 머클 트리는 각 노드에 그 자식 노드들의 보관된 값의 해시(자식 노드가 leaf인 경우) 또는 자식 노드들의 레이블로부터 계산된 해시 값을 레이블로 붙여두는 트리&lt;/p>
&lt;/blockquote>
&lt;p>해시 트리를 사용하면 &lt;strong>대규모 자료 구조의 내용을 효과적이면서도 보안상 안전한 방법으로 검증&lt;/strong>할 수 있다.&lt;/p>
&lt;p>&lt;strong>1 단계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_10.png"
width="844"
height="330"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_10_hu458e95c99f7dfcfac03b6157ee8c6e5b_44753_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_10_hu458e95c99f7dfcfac03b6157ee8c6e5b_44753_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="255"
data-flex-basis="613px"
>&lt;/p>
&lt;p>키 공간을 버킷으로 나눈다.&lt;/p>
&lt;p>&lt;strong>2 단계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_11.png"
width="842"
height="182"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_11_hu5646976f70d14d2033d017e53694f064_41493_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_11_hu5646976f70d14d2033d017e53694f064_41493_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="462"
data-flex-basis="1110px"
>&lt;/p>
&lt;p>버킷에 포함된 각각의 키에 균등 분포 해시 함수를 적용하여 해시 값을 계산한다.&lt;/p>
&lt;p>&lt;strong>3 단계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_12.png"
width="839"
height="260"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_12_hu38a58b95ad281add1c37ca9db00d3b58_73545_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_12_hu38a58b95ad281add1c37ca9db00d3b58_73545_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="322"
data-flex-basis="774px"
>&lt;/p>
&lt;p>버킷 별로 해시값을 계산한 후, 해당 해시 값을 레이블로 갖는 노드를 만든다.&lt;/p>
&lt;p>&lt;strong>4 단계&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_13.png"
width="840"
height="445"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_13_hu8894cdbe47f2eb2880a4148ac1861de4_101648_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_13_hu8894cdbe47f2eb2880a4148ac1861de4_101648_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;p>자식 노드의 레이블로부터 새로운 해시값을 계산하여, 이진 트리를 상향식으로 구성해 나간다.&lt;/p>
&lt;hr>
&lt;p>두 머클 트리의 비교는 루트 노드의 해시값을 비교하는 것으로 시작하며, 다른 데이터를 갖는 버킷을 찾을 경우 그 버킷들만 동기화한다.&lt;/p>
&lt;p>머클 트리를 사용하면 동기화해야 하는 데이터 양은 실제로 존재하는 차이의 크기에 비례할 뿐, 두 서버에 보관된 데이터의 총량과는 무관해진다.&lt;/p>
&lt;ul>
&lt;li>실제로 쓰이는 시스템의 경우 버킷 하나의 크기가 꽤 크다.&lt;/li>
&lt;li>10억(1B) 개의 키를 백만(1M) 개의 버킷으로 관리하면, 하나의 버킷은 1,000개 키를 관리한다.&lt;/li>
&lt;/ul>
&lt;h4 id="데이터-센터-장애-처리">데이터 센터 장애 처리&lt;/h4>
&lt;p>데이터 센터 장애는 정전, 네트워크 장애, 자연재해 등 다양한 이유로 발생할 수 있다.&lt;/p>
&lt;p>데이터 센터의 장애에 대응할 수 있는 시스템을 만드려면 데이터를 여러 데이터 센터에 다중화하는 것이 중요하다.&lt;/p>
&lt;h3 id="시스템-아키텍처-다이어그램">시스템 아키텍처 다이어그램&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_14.png"
width="842"
height="525"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_14_hu3a1f1cde060e244af1e3932a5858e642_94830_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_14_hu3a1f1cde060e244af1e3932a5858e642_94830_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="384px"
>&lt;/p>
&lt;ul>
&lt;li>클라이언트는 키-값 저장소가 제공하는 두 가지 단순한 API, &lt;code>get(key)&lt;/code>, &lt;code>put(key, value)&lt;/code>와 통신한다.&lt;/li>
&lt;li>중재자는 클라이언트에게 키-값 저장소에 대한 프락시 역할을 하는 노드다.&lt;/li>
&lt;li>노드는 안정 해시의 해시 링 위에 분포한다.&lt;/li>
&lt;li>노드를 자동으로 추가 또는 삭제할 수 있도록, 시스템은 완전히 분산된다.&lt;/li>
&lt;li>데이터는 여러 노드에 다중화된다.&lt;/li>
&lt;li>모든 노드가 같은 책임을 지므로, SPOF(Single Point of Failure)는 존재하지 않는다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_15.png"
width="830"
height="656"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_15_hud90111428b56169725aae5ee0bdfc804_100802_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_15_hud90111428b56169725aae5ee0bdfc804_100802_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="303px"
>&lt;/p>
&lt;p>완전히 분산된 설계를 채택하였으므로 모든 노드는 제시된 기능을 전부 지원해야한다.&lt;/p>
&lt;h3 id="쓰기-경로">쓰기 경로&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_16.png"
width="845"
height="458"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_16_hu216694585a97b0bfbb508eaee3fd8e8a_77802_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_16_hu216694585a97b0bfbb508eaee3fd8e8a_77802_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="카산드라의 사례"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="442px"
>&lt;/p>
&lt;ol>
&lt;li>쓰기 요청이 커밋 로그 파일에 기록된다.&lt;/li>
&lt;li>데이터가 메모리 캐시에 기록된다.&lt;/li>
&lt;li>메모리 캐시가 가득 차거나 사전에 정의된 임계치에 도달하면 데이터는 디스크에 있는 SSTable에 기록된다.
&lt;ul>
&lt;li>SSTable: Sorted-String Table의 약어로 &amp;lt;키, 값&amp;gt; 의 순서쌍을 정렬된 리스트로 관리하는 테이블이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="읽기-경로">읽기 경로&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_17.png"
width="845"
height="446"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_17_huaac619f90ef719991892748c739fd616_71124_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_17_huaac619f90ef719991892748c739fd616_71124_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>읽기 요청을 받은 노드는 데이터가 메모리 캐시에 있는지부터 살핀 후 데이터를 클라이언트에게 반환한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/6/img_18.png"
width="843"
height="425"
srcset="https://codemario318.github.io/post/system-design-interview/6/img_18_hub84a0c909dfc6b10b41bdf7efd5bb775_89775_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/6/img_18_hub84a0c909dfc6b10b41bdf7efd5bb775_89775_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;p>데이터가 메모리에 없는 경우 디스크에서 가져온다.&lt;/p>
&lt;p>어느 SSTable에 찾는 키가 있는지 효율적으로 찾기 위해 블룸 필터(Bloom filter)가 흔히 사용된다.&lt;/p>
&lt;ol>
&lt;li>데이터가 메모리에 있는지 검사하고 있다면 반환한다.&lt;/li>
&lt;li>데이터가 메모리에 없으므로 블룸 필터를 검사한다.&lt;/li>
&lt;li>블룸 필터를 통해 어떤 SSTable에 키가 보관되어 있는지 알아낸다.&lt;/li>
&lt;li>SSTable에서 데이터를 가져온다.&lt;/li>
&lt;li>해당 데이터를 클라이언트에게 반환한다.&lt;/li>
&lt;/ol>
&lt;h2 id="요약">요약&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>목표/문제&lt;/th>
&lt;th>기술&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>대규모 데이터 저장&lt;/td>
&lt;td>안정 해시를 사용해 서버들에 부하 분산&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>읽기 연산에 대한 높은 가용성 보장&lt;/td>
&lt;td>데이터를 여러 데이터센터에 다중화&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>쓰기 연산에 대한 높은 가용성 보장&lt;/td>
&lt;td>버저닝 및 백터 시계를 사용한 충돌 해소&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 파티션&lt;/td>
&lt;td>안정 해시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>점진적 규모 확장성&lt;/td>
&lt;td>안정 해시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>다양성(heterogeneity)&lt;/td>
&lt;td>안정 해시&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>조절 가능한 데이터 일관성&lt;/td>
&lt;td>정족수 합의(quorum consensus)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>일시적 장애 처리&lt;/td>
&lt;td>느슨한 정족수 프로토콜(sloppy quorum)과 단서 후 임시 위탁(hinted handoff)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>영구적 장애 처리&lt;/td>
&lt;td>머클 트리(Merkle tree)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>데이터 센터 장애 대응&lt;/td>
&lt;td>여러 데이터 센터에 걸친 데이터 다중화&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>5. 안정 해시 설계</title><link>https://codemario318.github.io/post/system-design-interview/5/</link><pubDate>Thu, 23 May 2024 12:04:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/5/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/cover.png" alt="Featured image of post 5. 안정 해시 설계" />&lt;p>&lt;strong>수평적 규모 확장성&lt;/strong>을 달성하기 위해서는 요청 또는 데이터를 서버에 &lt;strong>균등하게 나누는 것&lt;/strong>이 중요하다.&lt;/p>
&lt;p>&lt;strong>안정 해시&lt;/strong>는 이 목표를 달성하기 위해 보편적으로 사용하는 기술이다.&lt;/p>
&lt;h2 id="해시-키-재배치rehash-문제">해시 키 재배치(rehash) 문제&lt;/h2>
&lt;p>N개의 캐시 서버가 있을 때, 부하를 균등하게 나누는 보편적 방법은 해시 함수를 사용하는 것이다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">serverIndex = hash(key) % N
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>총 4대의 서버를 사용한다면, 주어진 각각의 키에 대해 아래와 같이 계산될 수 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키&lt;/th>
&lt;th>해시&lt;/th>
&lt;th>해시 % 4(서버 인덱스)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key0&lt;/td>
&lt;td>18358617&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key1&lt;/td>
&lt;td>26143584&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key2&lt;/td>
&lt;td>18131146&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key3&lt;/td>
&lt;td>35863496&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key4&lt;/td>
&lt;td>34085809&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key5&lt;/td>
&lt;td>27581703&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key6&lt;/td>
&lt;td>38164978&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key7&lt;/td>
&lt;td>22530351&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>키 값을 해싱한 값에 나머지 연산을 하여 저장될 서버가 결정된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img.png"
width="597"
height="323"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_hu8ecb82b93ef83548a97acf28dacc70e3_47080_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_hu8ecb82b93ef83548a97acf28dacc70e3_47080_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="184"
data-flex-basis="443px"
>&lt;/p>
&lt;p>이 방식은 &lt;strong>서버 풀의 크기가 고정되어 있을 때&lt;/strong>, &lt;strong>데이터 분포가 균등할 때&lt;/strong> 잘 동작한다.&lt;/p>
&lt;p>하지만 서버가 추가되거나, 기존 서버가 삭제되면 나머지 연산 결과 값이 변하기 때문에 문제가 발생한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>키&lt;/th>
&lt;th>해시&lt;/th>
&lt;th>해시 % 3(서버 인덱스)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>key0&lt;/td>
&lt;td>18358617&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key1&lt;/td>
&lt;td>26143584&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key2&lt;/td>
&lt;td>18131146&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key3&lt;/td>
&lt;td>35863496&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key4&lt;/td>
&lt;td>34085809&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key5&lt;/td>
&lt;td>27581703&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key6&lt;/td>
&lt;td>38164978&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key7&lt;/td>
&lt;td>22530351&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>따라서 아래와 같은 형태로 키의 분포가 바뀐다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_1.png"
width="595"
height="375"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_1_hu221148814a934c0ed66cfef734ebb8e4_56907_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_1_hu221148814a934c0ed66cfef734ebb8e4_56907_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>장애가 발생한 1번 서버에 보관되어 있는 키 뿐만 아닌 대부분의 키가 재분배되어, 대부분 캐시 클라이언트가 데이터가 없는 서버에 접속하게된다.&lt;/p>
&lt;p>이로 인해 대규모 캐시 미스가 발생하게되는데, &lt;strong>안정 해시&lt;/strong>는 이러한 문제를 효과적으로 해결하는 방식이다.&lt;/p>
&lt;h2 id="안정-해시">안정 해시&lt;/h2>
&lt;p>안정 해시는 &lt;strong>해시 테이블 크기가 조정될 때 평균적으로 &lt;code>k/n&lt;/code>개의 키만 재비치하는 해시 기술&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>k&lt;/code>: 키의 개수&lt;/li>
&lt;li>&lt;code>n&lt;/code>: 슬롯의 개수&lt;/li>
&lt;/ul>
&lt;p>이와는 달리 대부분의 전통적인 해시 테이블은 슬롯의 수가 바뀌면 거의 대부분 키를 재배치한다.&lt;/p>
&lt;h3 id="해시-공간과-해시-링">해시 공간과 해시 링&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>SHA-1&lt;/strong> 해시함수를 사용하며, 출력 값의 범위는 &lt;code>x0, x1 ... xn&lt;/code>이라고 가정한다.&lt;/li>
&lt;li>&lt;strong>SHA-1&lt;/strong>의 해시 공간(hash space) 범위는 &lt;strong>0 부터 &lt;code>2^160 - 1&lt;/code>&lt;/strong> 까지라고 알려져 있다.&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;code>x0 = 0&lt;/code>, &lt;code>xn -1 = 2^160 - 1&lt;/code>이며, 두 수 사이의 값을 갖게 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_2.png"
width="239"
height="284"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_2_huf4d0b3acc8d8378f9f6d7202b468ee24_14360_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_2_huf4d0b3acc8d8378f9f6d7202b468ee24_14360_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="201px"
>&lt;/p>
&lt;p>이 해시 공간의 양쪽을 연결하변 해시 링이 만들어진다.&lt;/p>
&lt;h3 id="해시-서버">해시 서버&lt;/h3>
&lt;p>해시 함수 &lt;code>f&lt;/code>를 사용하면 서버(IP, 이름 등)를 링 위의 어딘가에 대응시킬 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_3.png"
width="607"
height="421"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_3_hu0bc48cf4515b95e87de880bf1aab9c60_55336_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_3_hu0bc48cf4515b95e87de880bf1aab9c60_55336_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;h3 id="해시-키">해시 키&lt;/h3>
&lt;blockquote>
&lt;p>안정 해시에서 사용되는 해시 함수는 전통적인 해시 키 방식에서 언급된 방식과 다르며, 만들어질 수 있는 모든 해시 공간 &lt;code>x0 ... xn&lt;/code>을 연결한 형태이므로 나머지 연산을 사용하지 않는다.&lt;/p>
&lt;/blockquote>
&lt;p>캐시할 키 또한 서버와 함께 해시 링 위의 어느 지점에 배치할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_4.png"
width="606"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_4_hu2fcefd9766a218d8cface53baa2bca15_61260_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_4_hu2fcefd9766a218d8cface53baa2bca15_61260_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;h3 id="서버-조회">서버 조회&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_5.png"
width="606"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_5_hu2fcefd9766a218d8cface53baa2bca15_61260_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_5_hu2fcefd9766a218d8cface53baa2bca15_61260_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="155"
data-flex-basis="372px"
>&lt;/p>
&lt;p>어떤 키가 저장되는 서버는 &lt;strong>해당 키의 위치로부터 시계 방향으로 링을 탐색해 나가면서 만나는 첫번 째 서버&lt;/strong>이다.&lt;/p>
&lt;p>따라서 &lt;strong>k0&lt;/strong>는 &lt;strong>s0&lt;/strong> 에 저장된다.&lt;/p>
&lt;h3 id="서버-추가">서버 추가&lt;/h3>
&lt;p>키가 저장되는 서버가 키의 위치로부터 시계 방향으로 링을 돌면서 만나는 첫 서버이므로, 서버를 추가하더라도 키 가운데 일부만 재배치하면 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_6.png"
width="615"
height="465"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_6_huc8545933ab2d8774b07636da6ebf7ea2_77279_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_6_huc8545933ab2d8774b07636da6ebf7ea2_77279_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="317px"
>&lt;/p>
&lt;p>위 그림처럼 s4가 추가되면, k0만 재배치하면 되며, 나머지 키들은 같은 서버에 남게된다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>k0&lt;/strong>가 만나는 첫 서버가 &lt;strong>s4&lt;/strong>로 바뀌기 때문&lt;/li>
&lt;/ul>
&lt;h3 id="서버-제거">서버 제거&lt;/h3>
&lt;p>마찬가지로 한 서버가 제거되면 &lt;strong>키 일부만 재배치&lt;/strong>된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_7.png"
width="609"
height="450"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_7_hu76c16055e4220cf0e1509508dbdc7e60_68728_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_7_hu76c16055e4220cf0e1509508dbdc7e60_68728_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>s1&lt;/strong>이 삭제되었을 때 &lt;strong>k1&lt;/strong>의 첫 서버만 &lt;strong>s2&lt;/strong>로 바뀌므로 &lt;strong>k1&lt;/strong>만 &lt;strong>s2&lt;/strong>로 재배치된다.&lt;/li>
&lt;/ul>
&lt;h3 id="기존-구현법의-두-가지-문제">기존 구현법의 두 가지 문제&lt;/h3>
&lt;p>안정 해시 알고리즘은 MIT에서 처음 제안되었는데, 기본 절차는 아래와 같다.&lt;/p>
&lt;ol>
&lt;li>서버와 키를 &lt;strong>균등 분포 해시 함수&lt;/strong>를 사용해 해시 링에 배치한다.&lt;/li>
&lt;li>키의 위치에서 링을 시계방향으로 탐색하다 만나는 최초의 서버가 키가 저장될 서버이다.&lt;/li>
&lt;/ol>
&lt;p>안정 해시는 근본적으로 최소한의 추가/삭제에 대해 최소한의 재배치를 고려한다. 따라서 이러한 방식에는 두 가지 문제가 발생한다.&lt;/p>
&lt;p>&lt;strong>파티션 크기 문제&lt;/strong>&lt;/p>
&lt;p>서버가 추가되거나 삭제되는 상황을 감안하면 사용하더라도 파티션의 크기를 균등하게 유지하는 게 불가능하다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_8.png"
width="610"
height="371"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_8_hufb05e65c37497f753e3a366dbfe6320e_67873_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_8_hufb05e65c37497f753e3a366dbfe6320e_67873_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="164"
data-flex-basis="394px"
>&lt;/p>
&lt;ul>
&lt;li>파티션의 크기는 시계 방향으로 제일 가까운 서버 사이와의 거리만큼의 해시 공간으로, 서버의 해시 공간이 균등하지 않다.
&lt;ul>
&lt;li>추가 삭제될 때 시계 방향으로 제일 가까운 서버에 키들이 집중된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>키의 균등 분포 문제&lt;/strong>&lt;/p>
&lt;p>균등 분포 해시 함수는 충돌을 최소화하며 입력 키들이 해시 공간 전체에 고르게 분포되어 특정 영역에 물리지 않도록 구현되지만 완전하지는 않다.&lt;/p>
&lt;ul>
&lt;li>데이터의 비균등한 본질:
&lt;ul>
&lt;li>실제 데이터는 해시 함수의 이상적인 균등 분포를 따르지 않을 수 있다.&lt;/li>
&lt;li>특정 패턴이나 값들이 특정 해시 영역에 몰리는 경우가 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>해시 함수의 한계:
&lt;ul>
&lt;li>모든 해시 함수는 완벽한 균등 분포를 보장할 수 없다.&lt;/li>
&lt;li>특히 입력 키의 분포가 고르지 않을 경우, 해시 값의 분포도 고르지 않을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_9.png"
width="611"
height="409"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_9_hu5257857a45f5f8de50581f3a0c6d2841_61763_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_9_hu5257857a45f5f8de50581f3a0c6d2841_61763_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="358px"
>&lt;/p>
&lt;p>따라서 키의 균등 분포가 매우 달성하기 어려워 위와 같은 상황이 발생하게된다.&lt;/p>
&lt;p>&lt;strong>+ 실제 서버의 처리 능력 차이&lt;/strong>&lt;/p>
&lt;p>노드(서버)마다 처리 능력이나 저장 용량이 다를 경우, 파티션 크기의 균등성이 실제 부하의 균등성을 의미하지 않을 수 있다.&lt;/p>
&lt;h3 id="가상-노드">가상 노드&lt;/h3>
&lt;p>가상 노드는 &lt;strong>실제 노드 또는 서버를 가리키는 노드&lt;/strong>로서 하나의 서버는 링 위에 여러 개의 가상 노드를 가질 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_10.png"
width="603"
height="458"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_10_hua3bd50f3317f65ef075362e2b74282e1_85776_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_10_hua3bd50f3317f65ef075362e2b74282e1_85776_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/p>
&lt;p>서버들의 비슷한 해시 공간을 가질 수 있도록 하는 기법으로 해시 링 위에 실제 서버를 가르키는 가상 노드들을 분포시킨 후 가상 노드에 할당되는 해시 영역을 가상 노드가 가르키는 서버가 처리하도록 한다.&lt;/p>
&lt;ul>
&lt;li>따라서 각 서버는 하나가 아닌 여러 개의 파티션을 관리해야 한다.&lt;/li>
&lt;/ul>
&lt;p>가상 노드의 개수를 늘리면 표준 편차가 작아져 데이터가 고르게 분포되므로, 키위 분포는 점점 더 균등해지지만&lt;/p>
&lt;p>가상 노드 데이터를 저장할 공간이 더 많이 필요해지므로, 시스템 요구사항에 맞도록 가상 노드 개수를 적절히 조정하는 트레이드오프가 필요하다.&lt;/p>
&lt;h3 id="재배치할-키-결정">재배치할 키 결정&lt;/h3>
&lt;p>서버가 추가되거나 제거되면 데이터의 일부는 재배치해야 한다.&lt;/p>
&lt;p>&lt;strong>서버가 추가되었을 때&lt;/strong>&lt;/p>
&lt;p>&lt;strong>s4&lt;/strong>가 추가되었다고 가정하면, 영향을 받는 위는 &lt;strong>s4&lt;/strong> 부터 그 반시계 방향에 있는 &lt;strong>s3&lt;/strong> 까지이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_11.png"
width="611"
height="463"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_11_hu56d8da2926a0ef9a8f4dcf5986502707_77091_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_11_hu56d8da2926a0ef9a8f4dcf5986502707_77091_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="316px"
>&lt;/p>
&lt;p>따라서 &lt;strong>s3&lt;/strong> 부터 &lt;strong>s4&lt;/strong> 사이에 있는 키들을 &lt;strong>s4&lt;/strong>로 재배치해야한다.&lt;/p>
&lt;p>&lt;strong>서버가 삭제되었을 때&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/5/img_12.png"
width="608"
height="449"
srcset="https://codemario318.github.io/post/system-design-interview/5/img_12_hu33149acfb6f53d9b638ddb2443c387f3_70058_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/5/img_12_hu33149acfb6f53d9b638ddb2443c387f3_70058_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;strong>s1&lt;/strong>이 삭제되면 &lt;strong>s1&lt;/strong> 부터 그 반시계 방향에 있는 최초 서버 &lt;strong>s0&lt;/strong> 사이에 있는 키들이 &lt;strong>s2&lt;/strong>로 재배치되어야 한다.&lt;/p>
&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>안정 해시의 이점은 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>서버가 추가되거나 삭제될 때 재배치되는 키의 수가 최소화된다.&lt;/li>
&lt;li>데이터가 보다 균등하게 분포하게 되므로 수평적 규모 확장성을 달성하기 쉽다.&lt;/li>
&lt;li>핫스팟 키 문제를 줄인다.
&lt;ul>
&lt;li>특정한 샤드에 대한 접근이 지나치게 빈번하면 서버 과부화 문제가 생길 수 있는데(유명인사 문제), 데이터를 좀 더 균등하게 분배하므로 문제 발생 가능성을 줄인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>안정해시는 실제로 널리 쓰이는 기술이다.&lt;/p>
&lt;ul>
&lt;li>아마존 다이나모 데이터베이스의 파티셔닝 관련 컴포넌트&lt;/li>
&lt;li>아파치 카산드라 클러스터에서 데이터 파티셔닝&lt;/li>
&lt;li>디스코드 채팅 어플리케이션&lt;/li>
&lt;li>아카마이 CDN&lt;/li>
&lt;li>매그레프 네트워크 부하 분산기 등&lt;/li>
&lt;/ul></description></item><item><title>4. 처리율 제한 장치의 설계</title><link>https://codemario318.github.io/post/system-design-interview/4/</link><pubDate>Wed, 15 May 2024 12:22:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/4/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/cover.png" alt="Featured image of post 4. 처리율 제한 장치의 설계" />&lt;h2 id="처리율-제한-장치rate-limiter">처리율 제한 장치(Rate limiter)?&lt;/h2>
&lt;p>클라이언트 또는 서비스가 보내는 트래픽의 처리율을 제어하기 위한 장치이다.&lt;/p>
&lt;p>HTTP의 경우 &lt;strong>특정 기간 내에 전송되는 클라이언트의 요청 횟수를 제한&lt;/strong>한다.&lt;/p>
&lt;ul>
&lt;li>사용자는 초당 2회 이상 새 글을 올릴 수 없다.&lt;/li>
&lt;li>같은 IP 주소로는 하루 10개 이상의 계정을 생성할 수 없다.&lt;/li>
&lt;li>같은 디바이스로는 주당 5회 이상 리워드(reward)를 요청할 수 없다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;p>대형 IT 기업들이 공개한 거의 대부분의 API는 어떤 형태로든 처리율 제한 장치를 갖고 있으며, 아래와 같은 장점이 있다.&lt;/p>
&lt;ul>
&lt;li>DoS(Denial of Service) 공격에 의한 자원 고갈을 방지할 수 있다.&lt;/li>
&lt;li>자원 절약
&lt;ul>
&lt;li>추가 요청에 대한 처리율을 제한하면 서버를 많이 두지 않아도된다.&lt;/li>
&lt;li>우선순위가 높은 API에 더 많은 자원을 할당할 수 있다.&lt;/li>
&lt;li>3rd 파티 API를 사용하는 경우 요청 횟수만큼 과금이 된다면, 사용자가 처리율을 제한하여 비용을 절약할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서버 과부하 방지
&lt;ul>
&lt;li>봇에서 오는 트래픽이나 사용자의 잘못된 이용 패턴으로 유발된 트래픽을 걸러내는 데 처리율 제한 장치를 활용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="1단계-문제-이해-및-설계-범위-확정">1단계: 문제 이해 및 설계 범위 확정&lt;/h2>
&lt;p>처리율 제한 장치를 구현하는 데는 여러 가지 알고리즘을 고려할 수 있으며, 각각 고유한 장단점을 가지고 있다.&lt;/p>
&lt;p>따라서 면접관과 서통하며 어떤 제한 장치를 구현해야 하는 지 분명하게 파악해야한다.&lt;/p>
&lt;ul>
&lt;li>Q. 클라이언트 측 제한장치? 서버 측 제한장치?
&lt;ul>
&lt;li>A. 서버측 API를 위한 제한 장치&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 어떠한 기준으로? IP 주소 or 사용자 ID 등
&lt;ul>
&lt;li>A. 다양한 형태의 제어 규칙을 정의할 수 있도록 하는 유연한 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 시스템의 규모는? 스타트업 or 대기업
&lt;ul>
&lt;li>A. 대규모 요청 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 분산 환경에서 동작해야 하는가?
&lt;ul>
&lt;li>A. 예&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 처리율 제한 장치가 독립적인 서비스인가? 코드에 포함할 수 있는가?
&lt;ul>
&lt;li>A. 알아서&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 처리율 제한에 막힌 상황에 사용자에게 알려하하는가?
&lt;ul>
&lt;li>A. 예&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="요구사항">요구사항&lt;/h3>
&lt;p>질문을 통해 파악한 시스템의 요구사항은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>설정된 처리율을 초과하는 요청은 정확하게 제한&lt;/li>
&lt;li>낮은 응답시간
&lt;ul>
&lt;li>HTTP 응답시간에 나쁜 영향을 주어서는 곤란하다. (대규모 처리 허용 등)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가능한 적은 메모리&lt;/li>
&lt;li>분산형 처리율 제한
&lt;ul>
&lt;li>하나의 처리율 제한 장치를 여러 서버나 프로세스에서 공유할 수 있어야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>예외 처리
&lt;ul>
&lt;li>요청 제한시 사용자에게 분명하게 보여주어야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>높은 결함 감내성
&lt;ul>
&lt;li>제한 장치에 장애가 생기더라도 전체 시스템에 영향을 주어서는 안된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2단계-개략적-설계-제시-및-동의-구하기">2단계 개략적 설계 제시 및 동의 구하기&lt;/h2>
&lt;p>기본적인 &lt;strong>클라이언트-서버 통신 모델&lt;/strong>을 사용하여 문제를 간단하게 만든다.&lt;/p>
&lt;h3 id="어디에-둘-것인가">어디에 둘 것인가?&lt;/h3>
&lt;p>기본적인 &lt;strong>클라이언트-서버 통신 모델&lt;/strong>에서는 처리율 제한 장치는 클라이언트, 서버 측에 둘 수 있다.&lt;/p>
&lt;p>&lt;strong>클라이언트&lt;/strong>&lt;/p>
&lt;p>클라이언트 요청은 쉽게 위변조가 가능하므로 처리율 제한을 안정적으로 걸 수 있는 장소가 아니다.&lt;/p>
&lt;ul>
&lt;li>모든 클라이언트의 구현을 통제하는 것도 어려울 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>서버&lt;/strong>&lt;/p>
&lt;p>큰 틀에서 처리율 제한 장치를 API 서버와 함께 두는 방식, 미들웨어로 만드는 방식 2가지를 고려할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img.png"
width="560"
height="141"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_hu95f96bf133f868fe94b526818cbf6220_35669_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_hu95f96bf133f868fe94b526818cbf6220_35669_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="API 서버에 두는 방식"
class="gallery-image"
data-flex-grow="397"
data-flex-basis="953px"
>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_2.png"
width="549"
height="218"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_2_hu46848255408feea17de861814d1271d1_42946_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_2_hu46848255408feea17de861814d1271d1_42946_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="미들웨어 동작 예시"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="604px"
>&lt;/p>
&lt;p>처리율 제한 장치를 미들웨어로 만들어 API 서버로 가는 요청을 통제하는 방식은 제한된 요청을 API 서버로 보내지 않고, HTTP 상태코드 429를 반환한다.&lt;/p>
&lt;p>마이크로서비스의 경우 보통 API 게이트웨이라고 불리는 컴포넌트에 구현된다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>API 게이트웨이?&lt;/strong>&lt;br>
처리율 제한, SSL 종단 사용자 인증, IP 허용 목록 관리등을 지원하는 완전 위탁 관리형 서비스&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>처리율 제한 장치는 회사의 현재 기술 스택이나 엔지니어링 인력, 우선순위, 목표에 따라 어디에 둘 지 결정한다.&lt;/p>
&lt;ul>
&lt;li>프로그래밍 언어, 캐시 서비스 등 현재 사용하고 있는 기술 스택을 점검한다.&lt;/li>
&lt;li>사업에 필요에 맞는 처리율 제한 알고리즘을 찾는다.
&lt;ul>
&lt;li>직접 구현시 자유롭게 선택 가능하지만, 서드파티 게이트웨이를 사용하기로 했다면 제한될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>설계가 마이크로서비스에 기반하고 있다면, 사용자 인증이나 IP 화이트리스트 관리 등을 처리하기 위해 API 게이트웨이를 이미 포함했다면 처리율 제한 기능 또한 포함시켜야 할 수 있다.&lt;/li>
&lt;li>직접 만드는 데는 시간이 들기 때문에 인력이 충분하지 않다면 상용 API 게이트웨이를 쓰는 것이 바람직하다.&lt;/li>
&lt;/ul>
&lt;h3 id="처리율-제한-알고리즘">처리율 제한 알고리즘&lt;/h3>
&lt;p>처리율 제한을 실현하는 알고리즘은 여러가지이며, 각기 다른 장단점을 가지고 있다.&lt;/p>
&lt;ul>
&lt;li>토큰 버킷, 누출 버킷, 고정 윈도 카운터, 이동 윈도 로그, 이동 윈도 카운터 등&lt;/li>
&lt;/ul>
&lt;h4 id="토큰-버킷-알고리즘">토큰 버킷 알고리즘&lt;/h4>
&lt;p>토큰 버킷 알고리즘은 처리율 제한에 폭 넓게 이용되고 있다.&lt;/p>
&lt;p>간단하고, 알고리즘에 대한 이해도가 높아 인터넷 기업들이 보편적으로 사용하고 있다.&lt;/p>
&lt;ul>
&lt;li>아마존, 스트라이프 등&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_4.png"
width="529"
height="492"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_4_hud272ad2e7ce6d0192e191aa981cc5e7d_63798_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_4_hud272ad2e7ce6d0192e191aa981cc5e7d_63798_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="107"
data-flex-basis="258px"
>&lt;/p>
&lt;p>&lt;strong>토큰 버킷&lt;/strong>은 지정된 용량을 갖는 컨테이너로, 사전 설정된 양의 토큰이 주기적으로 채워진다.&lt;/p>
&lt;p>토큰이 꽉 찬 버킷에는 더 이상의 토큰은 추가되지 않고 버려진다.&lt;/p>
&lt;ul>
&lt;li>각 요청은 처리될 때마다 하나의 토큰을 사용한다.&lt;/li>
&lt;li>요청이 도착하면 버킷에 충분한 토큰이 있는지 검사하게 된다.&lt;/li>
&lt;li>토큰이 있는 경우 버킷에서 토큰 하나를 꺼낸 후 요청을 시스템에 전달한다.&lt;/li>
&lt;li>없는 경우 버려진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_5.png"
width="469"
height="547"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_5_hu470c561bcff0a77f741d71f0c2c45165_78035_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_5_hu470c561bcff0a77f741d71f0c2c45165_78035_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="버킷 크기 = 4, 공급률 = 분당 4"
class="gallery-image"
data-flex-grow="85"
data-flex-basis="205px"
>&lt;/p>
&lt;p>토큰 버킷 알고리즘은 2가지 인자를 받는다.&lt;/p>
&lt;ul>
&lt;li>버킷 크기: 버킷에 담을 수 있는 토큰의 최대 개수&lt;/li>
&lt;li>토큰 공급률: 초당 몇개의 토큰이 버킷에 공급되는가&lt;/li>
&lt;/ul>
&lt;p>적절한 버킷의 개수는 공급 제한 규칙에 따라 결정된다.&lt;/p>
&lt;ul>
&lt;li>통상적으로, API 엔드포인트마다 벌도의 버킷을 둔다.
&lt;ul>
&lt;li>포스팅 1번, 친구 150명 추가 가능, 좋아요 5번 이라면 사용자마다 3개 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>IP 주소별 처리율 제한 필요시 IP 주소마다 버킷을 하나씩 할당해야 한다.&lt;/li>
&lt;li>시스템의 처리율을 초당 10,000개 요청으로 제한하고 싶다면, 모든 요청이 하나의 버킷을 공유하도록 한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>구현이 쉽다.&lt;/li>
&lt;li>메모리 사용 측면에서도 효율적이다.&lt;/li>
&lt;li>짧은 시간에 집중되는 트래픽도 처리 가능하다.
&lt;ul>
&lt;li>버킷에 남은 토큰이 있다면 요청은 전달된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>파라미터를 적절하게 튜닝하는 것이 까다롭다.&lt;/li>
&lt;/ul>
&lt;h4 id="누출-버킷-알고리즘">누출 버킷 알고리즘&lt;/h4>
&lt;p>누출 버킷 알고리즘은 토큰 버킷 알고리즘과 비슷하지만 &lt;strong>요청 처리율이 고정되어 있다는 점&lt;/strong>이 다르다.&lt;/p>
&lt;p>보통 FIFO 큐로 구현하며 동작 원리는 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>요청이 도착하면 큐가 가득 차 있는지 본다.
&lt;ul>
&lt;li>빈자리가 있다면 큐에 요청을 추가한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>큐가 가득 차 있는 경우에는 새 요청을 버린다.&lt;/li>
&lt;li>지정된 시간마다 큐에서 요청을 꺼내어 처리한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_6.png"
width="599"
height="221"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_6_hu20c9bad42732607dad0a83639f3502f8_30101_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_6_hu20c9bad42732607dad0a83639f3502f8_30101_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="누출 버킷 알고리즘"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="650px"
>&lt;/p>
&lt;p>누출 버킷 알고리즘은 다음의 두 인자를 사용한다.&lt;/p>
&lt;ul>
&lt;li>버킷 크기: 처리될 항목들이 보관될 큐의 사이즈&lt;/li>
&lt;li>처리율: 지정된 시간당 몇 개의 항목을 처리할지 지정하는 값.(보통 초단위)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>큐의 크기가 제한되어 있어 메모리 사용량 측면에서 효율적이다.&lt;/li>
&lt;li>고정된 처리율을 가지므로 안정된 출력(Stable outflow rate)이 필요한 경우에 적합하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>단시간에 많은 트래픽이 몰리는 경우 큐에는 오래된 요청들이 쌓이고, 그 요청들을 제때 처리 못하면 최신 요청들은 버려진다.&lt;/li>
&lt;li>파라미터를 올바르게 튜닝하기 까다로울 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="고정-윈도-카운터-알고리즘">고정 윈도 카운터 알고리즘&lt;/h4>
&lt;p>고정 윈도 카운터 알고리즘은 다음과 같이 동작한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_7.png"
width="601"
height="355"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_7_huacea6638a786d893354d0e089d7abe1d_35784_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_7_huacea6638a786d893354d0e089d7abe1d_35784_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;ol>
&lt;li>타임라인을 고정된 간격의 윈도로 나누고, 각 윈도마다 카운터를 붙인다.&lt;/li>
&lt;li>요청이 접수될 때마다 이 카운터의 값을 1씩 증가시킨다.&lt;/li>
&lt;li>카운터의 값이 사전에 설정된 임계치에 도달하면 새로운 요청은 새 윈도가 열릴 때 까지 버려진다.&lt;/li>
&lt;/ol>
&lt;p>고정 윈도 카운터 알고리즘의 가장 큰 문제는 윈도의 경계 부근에 순간적으로 많은 트래픽이 집중될 경우 윈도에 할당된 양보다 더 많은 요청이 처리될 수 있다는 점이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_8.png"
width="604"
height="296"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_8_hu06e9b333628f278fe9f5a17c951f72ed_27698_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_8_hu06e9b333628f278fe9f5a17c951f72ed_27698_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="489px"
>&lt;/p>
&lt;p>분당 최대 5개 요청을 허용하는 시스템에서 &lt;code>2:00:00 ~ 2:01:00&lt;/code>, &lt;code>2:01:00 ~ 2:02:00&lt;/code> 윈도우에 각각 5개 요청을 처리하였으나, 윈도우를 30초 옮겨 &lt;code>2:00:30 ~ 2:01:30&lt;/code>를 살펴보면 총 10개의 요청을 처리하게되어 설정된 최대 처리량 5개를 초과하게 된다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>메모리 효율이 좋다.&lt;/li>
&lt;li>이해하기 쉽다.&lt;/li>
&lt;li>윈도가 닫히는 시점에 카운터를 초기화하는 방식은 특정한 트래픽 패턴을 처리하기에 적합하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>윈도 경계 부근에서 일시적으로 많은 트래픽이 몰려드는 경우, 기대했던 시스템의 처리 한도보다 많은 양의 요청을 처리하게 된다.&lt;/li>
&lt;/ul>
&lt;h4 id="이동-윈도-로깅-알고리즘">이동 윈도 로깅 알고리즘&lt;/h4>
&lt;p>고정 윈도 카운터 알고리즘의 문제를 해결한 방식이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_9.png"
width="582"
height="400"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_9_hu98c0a7c61c2865bfd0748184396a4361_43992_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_9_hu98c0a7c61c2865bfd0748184396a4361_43992_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;ul>
&lt;li>요청의 타임 스탬프를 추적한다.
&lt;ul>
&lt;li>보통 레디스의 정렬 집합 같은 캐시에 보관한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>새 요청이 오면 만료된 타임스탬프는 제거한다.
&lt;ul>
&lt;li>타임스탬프 값이 현재 윈도의 시작 지점보다 오래된 타임 스탬프&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>새 요청의 타임스탬프 로그에 추가한다.&lt;/li>
&lt;li>로그의 크기가 허용치보다 같거나 작으면 요청을 시스템에 전달한다. 아닐경우 처리를 거부한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>어느 순간 윈도를 보더라도, 허용되는 요청의 개수는 시스템의 처리율 한도를 넘기지 않는다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>거부된 요청의 타임스탬프도 보관하기 때문에 다량의 메모리를 사용하게된다.&lt;/li>
&lt;/ul>
&lt;h4 id="이동-윈도-카운터-알고리즘">이동 윈도 카운터 알고리즘&lt;/h4>
&lt;p>이동 윈도 카운터 알고리즘은 고정 윈도 카운터 알고리즘과 이동 윈도 로깅 알고리즘을 결합한 것이다.&lt;/p>
&lt;p>&lt;code>현재 1분간의 요청 수 + 직전 1분간의 요청 수 * 이동 윈도와 직전 1분이 겹치는 비율&lt;/code>을 계산하여 현재 윈도에 몇개의 요청이 왔는지를 구한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_10.png"
width="581"
height="343"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_10_hu4227282d9657e7f968e2cd18b876213b_41691_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_10_hu4227282d9657e7f968e2cd18b876213b_41691_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>분당 7개 요청으로 설정되어 있고, 이전 1분동안 5개의 요청이, 그리고 1분 동안 3개의 요청이 왔다면&lt;/p>
&lt;p>&lt;code>3 + 5 * 70%&lt;/code>를 계산하여 현재 6.5개의 요청이 있다고 계산하고, 분당 7개의 요청보다 적으므로 전달된다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>이전 시간대의 평균 처리율에 따라 윈도의 상태를 계산하므로 짧은 시간에 몰리는 트래픽에도 잘 대응한다.&lt;/li>
&lt;li>메모리 효율이 좋다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>직전 시간대에 도착한 요청이 균등하게 분포되어 있다고 가정한 상태에서 추정치를 계산하기 때문에 다소 느슨하다.
&lt;ul>
&lt;li>생각만큼은 심각한 문제는 아니다.&lt;/li>
&lt;li>클라우드플레어가 실시했던 실험에 따르면 40억 개의 요청 가운데 스템의 실제 상태와 맞지 않게 허용되거나 버려진 요청은 0.003%에 불과하였다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="개략적인-아키텍처">개략적인 아키텍처&lt;/h3>
&lt;p>처리율 제한 알고리즘은 얼마나 많은 요청이 접수되었는지를 추적할 수 있는 카운터를 추적 대상별로 두고(사용자 or IP or API 엔드포인트) 이 카운터의 값이 어떤 한도를 넘어서면 도착한 요청을 거부하는 것이다.&lt;/p>
&lt;p>이러한 카운터는 읽기 쓰기 작업이 빈번하고, 빠르게 지워져야 하는 특성으로 인해 빠른데다 시간에 기반한 만료 정책을 지원하는 메모리 캐시가 적절하다.&lt;/p>
&lt;p>대표적으로 레디스가 많이 활용되며 이에 적합한 &lt;code>INCR&lt;/code>, &lt;code>EXPIRE&lt;/code> 명령을 제공한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>INCR&lt;/code>: 메모리에 저당된 카운터의 값을 1만큼 증가시킨다.&lt;/li>
&lt;li>&lt;code>EXPIRE&lt;/code>: 카운터에 타임아웃 값을 설정한다. 시간이 지나면 자동 삭제된다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_11.png"
width="593"
height="260"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_11_hua0ec6a8fedf59bf7e19688bf87bdb91a_52761_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_11_hua0ec6a8fedf59bf7e19688bf87bdb91a_52761_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="개략적인 아키텍처"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="547px"
>&lt;/p>
&lt;ol>
&lt;li>클라이언트가 처리율 제한 미들웨어에게 요청을 보낸다.&lt;/li>
&lt;li>처리율 제한 미들웨어는 레디스의 지정 버킷에서 카운터를 가져와 한도에 도달했는지 검사한다.
&lt;ul>
&lt;li>한도에 도달했다면 요청은 거부됨&lt;/li>
&lt;li>한도에 도달하지 않았다면 API로 요청을 전달하고, 카운터의 값을 증가시켜 레디스에 저장한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="상세-설계">상세 설계&lt;/h2>
&lt;p>개략적 설계만 봐서는 다음과 같은 사항은 알 수가 없다.&lt;/p>
&lt;ul>
&lt;li>처리율 제한 규칙은 어떻게 만들어지고 어디에 저장되는가?&lt;/li>
&lt;li>처리가 제한된 요청들은 어떻게 처리되는가?&lt;/li>
&lt;/ul>
&lt;h3 id="처리율-제한-규칙">처리율 제한 규칙&lt;/h3>
&lt;p>리프트(lyft)는 처리율 제한에 오픈 소스를 사용하고 있는데, 이 컴포넌트를 통해 어떤 처리율 제한 규칙이 사용되고 있는지 살펴볼 수 있다.&lt;/p>
&lt;p>이러한 규칙들은 보통 설정 파일 형태로 디스크에 저장된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">domain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">messaging&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">descriptors&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">message_type&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">Value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">marketing&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rate_limit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">day&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests_per_unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>마케팅 메시지의 최대치를 하루 5개로 제한&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">domain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">auth&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">descriptors&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">auth_type&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">Value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">login&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rate_limit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">minute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests_per_unit&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>클라이언트가 분당 5회 이상 로그인 할 수 없도록 제한&lt;/li>
&lt;/ul>
&lt;h3 id="처리율-한도-초과-트래픽의-처리">처리율 한도 초과 트래픽의 처리&lt;/h3>
&lt;p>어떤 요청이 한도 제한에 걸리면 HTTP 429 응답을 보내거나, 한도 제한에 걸린 메시지를 나중에 처리하기 위해 큐에 보관할 수도 있다.&lt;/p>
&lt;p>&lt;strong>처리율 제한 장치가 사용하는 HTTP 헤더&lt;/strong>&lt;/p>
&lt;p>클라이언트가 요청이 제한에 관련된 정보들을 HTTP 응답 헤더를 확인하면 알 수 있다.&lt;/p>
&lt;p>처리율 제한 장치는 다음 HTTP 헤더를 클라이언트에 보내 제한에 걸렸음을 알린다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>X-Ratelimit-Remaining&lt;/code>: 윈도 내에 남은 처리 가능 요청 수&lt;/li>
&lt;li>&lt;code>X-Ratelimit-Limit&lt;/code>: 매 윈도마다 클라이언트가 전송할 수 있는 요청의 수&lt;/li>
&lt;li>&lt;code>X-Ratelimit-Retry-After&lt;/code>: 한도 제한에 걸리지 않기 위해 몇초 뒤에 요청을 다시 보내야 하는지&lt;/li>
&lt;/ul>
&lt;p>사용자가 너무 많은 요청을 보내면 &lt;strong>429 too many requests&lt;/strong>오류를 &lt;code>X-Ratelimit-Retry-After&lt;/code> 헤더와 함께 반환하도록 한다.&lt;/p>
&lt;h3 id="상세-설계-1">상세 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_12.png"
width="616"
height="504"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_12_hue300fb2d822881a8aa53d8fa5a83713d_105530_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_12_hue300fb2d822881a8aa53d8fa5a83713d_105530_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="122"
data-flex-basis="293px"
>&lt;/p>
&lt;ul>
&lt;li>처리율 제한 규칙은 디스크에 보관한다.
&lt;ul>
&lt;li>작업 프로세스는 수시로 규칙을 읽어 캐시에 저장한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>클라이언트가 요청을 서버에 보내면 요청은 먼저 처리율 제한 미들웨어에 도달한다.&lt;/li>
&lt;li>처리율 제한 미들웨어는 제한 규칙을 캐시에서 가져온다. 아울러 카운터 및 마지막 요청의 타임스탬프를 레디스 캐시에서 가져온다.
&lt;ul>
&lt;li>요청이 제한에 걸리지 않은 경우 API 서버로 보낸다.&lt;/li>
&lt;li>처리율 제한에 걸렸다면 에러를 클라이언트에 보낸다.
&lt;ul>
&lt;li>요청은 버리거나 메시지 큐에 보관한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="분산-환경에서의-처리율-제한-장치의-구현">분산 환경에서의 처리율 제한 장치의 구현&lt;/h3>
&lt;p>여러 대의 서버와 병렬 스레드를 지원하려면 &lt;strong>경쟁 조건&lt;/strong>과 &lt;strong>동기화&lt;/strong> 문제를 고려해야 한다.&lt;/p>
&lt;h4 id="경쟁-조건">경쟁 조건&lt;/h4>
&lt;p>처리율 제한 장치는 다음과 같이 동작한다.&lt;/p>
&lt;ol>
&lt;li>레디스에서 카운터의 값을 읽는다.&lt;/li>
&lt;li>카운터의 값이 임계치를 넘는지 본다.&lt;/li>
&lt;li>넘지 않는다면 레디스에 보관된 카운터 값을 1만큼 증가시킨다.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_13.png"
width="602"
height="340"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_13_hu25f5b8ce1e5471668532889a2cb0e3bf_33618_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_13_hu25f5b8ce1e5471668532889a2cb0e3bf_33618_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="424px"
>&lt;/p>
&lt;p>병행성이 심한 환경에서는 위와 같이 보관될 값이 달라질 수 있는 이슈가 존재한다.&lt;/p>
&lt;p>이러한 경쟁 조건 문제를 해결하는 가장 널리 알려진 해결책은 **락(Lock)**이지만, 락은 시스템의 성능을 상당히 떨어뜨린다는 문제가 있다.&lt;/p>
&lt;p>위와 같은 설계의 경우 락 대신 **루아 스크립트(Lua script)**와 **정렬 집합(Sorted set)**이라 불리는 레디스 자료구조를 사용하여 해결할 수 있다.&lt;/p>
&lt;h4 id="동기화-이슈">동기화 이슈&lt;/h4>
&lt;p>수백만 사용자를 지원하려면 한 대의 처리율 제한 장치 서버로는 충분하지 않을 수 있어 처리율 제한 장치 서버를 여러 대 두게 되면 동기화가 필요해진다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_14.png"
width="612"
height="219"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_14_hud5d811b010ac2a69e5217967669d0f69_74199_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_14_hud5d811b010ac2a69e5217967669d0f69_74199_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="279"
data-flex-basis="670px"
>&lt;/p>
&lt;p>웹은 무상태이므로 클라이언트는 다음 요청을 다른 처리율 제한 장치로 보내게 될 수 있다.&lt;/p>
&lt;p>이때 동기화를 하지 않는다면 제한 장치 1은 클라이언트 2에 대해서는 아무것도 모르므로 처리율 제한이 올바르게 적용되지 않을 수 있다.&lt;/p>
&lt;p>이러한 문제를 해결하기 위해 같은 클라이언트로부터의 요청은 항상 같은 처리율 제한 장치로 보내는 &lt;strong>고정 세션&lt;/strong> 방식을 고려할 수 있다.&lt;/p>
&lt;p>하지만 이러한 방식은 확장 불가능, 뻣뻣하다는 단점을 가진다.&lt;/p>
&lt;p>따라서 레디스와 같은 중앙 집중형 데이터 저장소를 사용하여 해결하는 것이 좋다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/4/img_15.png"
width="559"
height="252"
srcset="https://codemario318.github.io/post/system-design-interview/4/img_15_hub3172bc6f37be502955916b9482777c8_60583_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/4/img_15_hub3172bc6f37be502955916b9482777c8_60583_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="532px"
>&lt;/p>
&lt;h4 id="성능-최적화">성능 최적화&lt;/h4>
&lt;p>성능 최적화는 시스템 설계 면접의 단골 주제이며, 지금까지 살펴본 설계는 두 가지 지점에서 개선이 가능하다.&lt;/p>
&lt;ul>
&lt;li>여러 데이터센터를 지원하는 문제
&lt;ul>
&lt;li>멀리 떨어진 사용자를 지원하기 위해 지연시간이 증가할 수 밖에 없는데, 대부분의 클라우드 서비스 사업자는 세계 곳곳에 에지 서버를 심어두어 성능을 끌어올린다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>제한 장치 간에 데이터를 동기화할 때 최종 일관성 모델을 사용하는 것&lt;/li>
&lt;/ul>
&lt;h4 id="모니터링">모니터링&lt;/h4>
&lt;p>처리율 제한 장치를 설치한 이후에는 효과적으로 동작하는지 확인하기 위해 데이터를 모을 필요가 있다.&lt;/p>
&lt;ul>
&lt;li>채택된 처리율 제한 알고리즘이 효과적인지 확인하기 위해
&lt;ul>
&lt;li>이벤트 같은 이슈로 트래픽이 급증할 때 처리율 제한 장치가 비효율적으로 동작한다면 트래픽 패턴을 고려하여 알고리즘 변경을 고려한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정의한 처리율 제한 규칙이 효과적인지 확인하기 위해
&lt;ul>
&lt;li>제한 규칙이 너무 엄격하다면 많은 유효 요청이 처리되지 못하고 버려질 경우 완화한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="마무리">마무리&lt;/h2>
&lt;p>시간이 허락된다면 다음 부분을 언급해보면 좋다.&lt;/p>
&lt;ul>
&lt;li>경성 또는 연성 처리율 제한
&lt;ul>
&lt;li>경성 처리율 제한: 요청의 개수는 임계치를 절대 넘어설 수 없다.&lt;/li>
&lt;li>연성 처리율 제한: 요청의 개수는 잠시동안은 임계치를 넘어설 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다양한 계층에서의 처리율 제한
&lt;ul>
&lt;li>애플리케이션 계층 외 다른 계층에서도 처리율 제한이 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>처리율 제한을 회피하는 방법. 클라이언트를 어떻게 설계하는 것이 최선인가?
&lt;ul>
&lt;li>클라이언트 측 캐시를 사용하여 API 호출 횟수를 줄인다.&lt;/li>
&lt;li>임계치를 이해하고, 짧은 시간 동안 너무 많은 메시지를 보내지 않도록 한다.&lt;/li>
&lt;li>예외나 에러를 처리하는 코드를 도입하여 예외적 상황을 우아하게 복구될 수 있도록 한다.&lt;/li>
&lt;li>재시도 로직을 구현할 때는 충분한 백오프 시간을 둔다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>3. 시스템 설계 면접 공략법</title><link>https://codemario318.github.io/post/system-design-interview/3/</link><pubDate>Tue, 07 May 2024 16:01:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/3/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/3/cover.png" alt="Featured image of post 3. 시스템 설계 면접 공략법" />&lt;blockquote>
&lt;p>&lt;strong>시스템 설계 면접&lt;/strong>은 두 명의 동료가 모호한 문제를 풀기 위해 협력하여 그 해결책을 찾아내는 과정에 대한 시뮬레이션이다.&lt;/p>
&lt;/blockquote>
&lt;p>시스템 설계 먼접은 특정 제품을 설계해보라는 식으로 막연하고, 넓은 범위로 인해 당황스러울 때가 많다.&lt;/p>
&lt;p>하지만 실세계에서 많은 엔지니어들이 참여하여 개발한 제품은 극도로 복잡하기 때문에 한 시간 안에 설계하는 것은 불가능 할 뿐더러, 완벽한 설계를 요구하지 않는다.&lt;/p>
&lt;ul>
&lt;li>시스템 설계 면접은 정해진 결말, 정답이 없다.
&lt;ul>
&lt;li>최종적으로 도출될 설계안은 설계 과정에서 들인 노력에 비하면 그다지 중요하지 않다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>설계 기술을 시연하는 자리이다.&lt;/li>
&lt;li>설계 과정에서 내린 결정들에 대한 방어 능력을 보이는 자리이다.&lt;/li>
&lt;li>면접관의 피드백을 건설적인 방식으로 처리할 자질이 있음을 보이는 자리이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>면접관의 의도&lt;/strong>&lt;/p>
&lt;p>시스템 설계 면접은 지원자의 설계 능력의 기술적인 측면 뿐만 아니라 여러 시그널을 수집한다.&lt;/p>
&lt;ul>
&lt;li>협력에 적합한 사람인가?&lt;/li>
&lt;li>압박이 심한 상황도 잘 헤쳐 나갈 자질이 있는가?&lt;/li>
&lt;li>모호한 문제를 건설적으로 해결할 능력이 있는가?&lt;/li>
&lt;li>설계의 순수성에 집착한 나머지, 타협정 결정(trade off)를 도외시하는가?&lt;/li>
&lt;li>완고함, 편협함 등&lt;/li>
&lt;/ul>
&lt;h2 id="효과적인-면접을-위한-4단계-접근법">효과적인 면접을 위한 4단계 접근법&lt;/h2>
&lt;p>시스템 설계 면접은 제각각이다.&lt;/p>
&lt;p>훌륭한 설계 면접은 정해진 결말도 없고 정답도 없지만, 절차나 범위에는 &lt;strong>공통적인 부분&lt;/strong>이 존재한다.&lt;/p>
&lt;h3 id="문제-이해-및-설계-범위-확정">문제 이해 및 설계 범위 확정&lt;/h3>
&lt;p>요구사항을 완전히 이해하지 않고 답을 내놓는 행위는 아주 엄청난 부정적 신호이다.&lt;/p>
&lt;p>따라서 깊이 생각하고 질문하여 요구사항과 가정들을 분명히 해야한다.&lt;/p>
&lt;p>적절한 설계를 위해 엔지니어가 가져야 할 중요한 기술은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>올바른 질문을 하는 것&lt;/li>
&lt;li>적절한 가정을 하는 것&lt;/li>
&lt;li>시스템 구축에 필요한 정보를 모으는 것&lt;/li>
&lt;/ul>
&lt;p>따라서 올바른 질문을 통해 적절한 가정과 정보를 모아야하며, 요구사항을 정확히 이해하기 위한 질문은 아래와 같은 유형이 있다.&lt;/p>
&lt;ul>
&lt;li>구체적으로 어떤 기능을 만들어야 하나?&lt;/li>
&lt;li>제품 사용자 수는 얼마나 되나?&lt;/li>
&lt;li>회사의 규모는 얼마나 빨리 커지리라 예상하나?&lt;/li>
&lt;li>회사가 주로 사용하는 기술 스택은 무엇인가?&lt;/li>
&lt;li>설계를 단순화하기 위해 활용할 수 있는 기존 서비스로는 어떤 것들이 있는가?&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>뉴스 피드(news feed) 시스템 설계 질문 예제&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Q. 모바일 앱과 웹 앱 가운데 어느쪽을 지원해야 하는가?
&lt;ul>
&lt;li>A. 둘다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 가장 중요한 기능은?
&lt;ul>
&lt;li>A1. 새로운 포스트 올리기&lt;/li>
&lt;li>A2. 다른 친구의 뉴스 피드 조회하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 정렬 기준은?
&lt;ul>
&lt;li>A. 시간 역순으로&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 한 사용자의 최대 친구 수
&lt;ul>
&lt;li>A. 5,000명&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 트래픽 규모는?
&lt;ul>
&lt;li>A. 일간 능동 사용자(DAU) 천만 명&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q. 피드는 텍스트로만 구성되는가?
&lt;ul>
&lt;li>A. 이미지나 비디오 같은 미디어 파일도 포스트 할 수 있어야함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="개략적인-설계안-제시-및-동의-구하기">개략적인 설계안 제시 및 동의 구하기&lt;/h3>
&lt;p>개략적인 설계안을 제시하고 면접관의 동의를 구할 때 면접관과 협력하며 진행하면 좋다.&lt;/p>
&lt;ul>
&lt;li>설계안에 대한 최초 청사진을 제시하고 의견을 구하라.
&lt;ul>
&lt;li>면접관을 마치 팀원인 것 처럼&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>화이트보드나 종이에 핵심 컴포넌트를 포함하는 다이어그램을 그려라.
&lt;ul>
&lt;li>클라이언트, API, 웹 서버, 데이터 저장소, 캐시, CDN, 메시지 큐 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>최초 설계안이 시스템 규모에 관계된 제약사항들을 만족하는지를 개략적으로 계산한다.
&lt;ul>
&lt;li>계산 과정은 소리 내어 설명한다.&lt;/li>
&lt;li>개략적 추정이 필요한지는 면접관에게 미리 물어본다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>가능하다면 시스템의 구체적 사용 사례도 몇 가지 살펴보면 고려하지 못한 에지 케이스를 발견하는 데도 도움이 될 것이다.&lt;/p>
&lt;p>&lt;strong>뉴스 피드 시스템 개략적 설계 예시&lt;/strong>&lt;/p>
&lt;p>개략적으로 보면 &lt;strong>피드 발행&lt;/strong>, &lt;strong>피드 생성&lt;/strong> 두 가지 처리 플로로 나눠 생각해 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>피드 발행
&lt;ul>
&lt;li>사용자가 포스트를 올리면 관련된 데이터가 캐시/데이터베이스에 기록되고, 해당 사용자의 친구 뉴스 피드에 뜨게 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>피드 생성
&lt;ul>
&lt;li>사용자의 뉴스 피드는 해당 사용자 친구들의 포스트를 시간 역순으로 정렬하여 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/3/img.png"
width="423"
height="690"
srcset="https://codemario318.github.io/post/system-design-interview/3/img_hu039827f8027f9a00b1371e9a94d12627_101123_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/3/img_hu039827f8027f9a00b1371e9a94d12627_101123_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 발행"
class="gallery-image"
data-flex-grow="61"
data-flex-basis="147px"
>
&lt;img src="https://codemario318.github.io/post/system-design-interview/3/img_1.png"
width="370"
height="589"
srcset="https://codemario318.github.io/post/system-design-interview/3/img_1_hu4e33947bf61ce6fe45cda92442fd57d4_67943_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/3/img_1_hu4e33947bf61ce6fe45cda92442fd57d4_67943_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 생성"
class="gallery-image"
data-flex-grow="62"
data-flex-basis="150px"
>&lt;/p>
&lt;h3 id="상세-설계">상세 설계&lt;/h3>
&lt;p>이 단계로 왔다면 아래 목표는 달성한 상태일 것이다.&lt;/p>
&lt;ul>
&lt;li>시스템에서 전반적으로 달성해야 할 목표와 가능 범위 확인&lt;/li>
&lt;li>전체 설계의 개략적 청사진 마련&lt;/li>
&lt;li>해당 청사진에 대한 면접관의 의견 청취&lt;/li>
&lt;li>상세 설계에서 집중해야 할 영역들 확인&lt;/li>
&lt;/ul>
&lt;p>이 단계에서는 면접관이 설계 대상 컴포넌트 사이의 우선순위를 정한다.&lt;/p>
&lt;p>대부분의 경우 면접관은 &lt;strong>특정 시스템 컴포넌트들의 세부사항을 깊이 있게 설명하는 것을 보길 원한다&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>단축 URL 생성기
&lt;ul>
&lt;li>해시 함수의 설계의 구체적인 내용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>채팅 시스템
&lt;ul>
&lt;li>어떻게하면 지연시간을 줄이고 사용자의 온/오프라인 상태를 표시할 것인지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위와 같은 경우 너무 과도하거나 불필요한 세부 사항을 설명하지 않는 것이 바람직하다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/3/img_2.png"
width="641"
height="725"
srcset="https://codemario318.github.io/post/system-design-interview/3/img_2_hu6034e7d7aae53ae4575eee71d3d0d535_164348_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/3/img_2_hu6034e7d7aae53ae4575eee71d3d0d535_164348_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="피드 발행 상세"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="212px"
>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/3/img_3.png"
width="563"
height="566"
srcset="https://codemario318.github.io/post/system-design-interview/3/img_3_hu740b51119dfe66fb11a0bcd33bce86e0_132618_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/3/img_3_hu740b51119dfe66fb11a0bcd33bce86e0_132618_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="뉴스 피드 가져오기 상세"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;h3 id="마무리">마무리&lt;/h3>
&lt;p>마지막 단계에서 면접관은 설계 결과물에 관련된 몇 가지 후속 질문을 던질 수도 있고 스스로 추가 논의를 진행하도록 할 수도 있다.&lt;/p>
&lt;p>그럴때는 아래와 같은 내용들을 언급해보면 좋은 방향으로 마무리 할 수 있다.&lt;/p>
&lt;ul>
&lt;li>면접관이 시스템 병목구간, 혹은 좀 더 개선 가능한 지점을 찾아내라 주문할 때
&lt;ul>
&lt;li>완벽하다거나 개선할 부분이 없다는 답은 X&lt;/li>
&lt;li>비판적 사고 능력을 보이고, 마지막으로 좋은 인상을 남길 기회이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>만든 설계를 한번 다시 요약해준다.
&lt;ul>
&lt;li>여러 해결책을 제시한 경우에는 특히 중요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오류가 발생하면 무슨 일이 생기는지 따져본다.&lt;/li>
&lt;li>운영 이슈도 논의할 가치가 충분하다.
&lt;ul>
&lt;li>메트릭 수집, 모니터링, 로그, 배포 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>미래에 닥칠 규모 확장 요구에 어떻게 대처할 것인가?&lt;/li>
&lt;li>필요하지만 다루지 못했던 세부적 개선사항들을 제안할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>해야할 것&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>질문을 통해 확인하라. 스스로 내린 가정이 옳다 믿고 진행하지 말라.&lt;/li>
&lt;li>문제의 요구사항을 이해하라.&lt;/li>
&lt;li>정답이나 최선의 답안 같은 것은 없다는 점을 명심하라.&lt;/li>
&lt;li>면접관이 사고 흐름을 이해할 수 있도록 하라. 면접관과 소통하라.&lt;/li>
&lt;li>가능하다면 여러 해법을 함께 제시하라.&lt;/li>
&lt;li>개략적 설계에 면접관이 동의하면, 가장 중요한 컴포넌트부터 컴포넌트의 세부사항을 설명하기 시작하라.&lt;/li>
&lt;li>면접관의 아이디어를 이끌어내라. 좋은 면접관은 같은 팀원처럼 협력한다.&lt;/li>
&lt;li>포기하지 말라.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>하지 말아야 할 것&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>전형적인 면접 문제들에도 대비하지 않은 상태에서 면접장에 가지 말라.&lt;/li>
&lt;li>요구사항이나 가정들을 분명히 하지 않은 상태에서 설계를 제시하지 말라.&lt;/li>
&lt;li>처음부터 특정 컴포넌트의 세부사항을 너무 깊이 설명하지 말라. 개략적 설계를 마친 뒤 서부사항으로 나아가라.&lt;/li>
&lt;li>힌트를 청하기를 주저하지 말라.&lt;/li>
&lt;li>소통을 주저하지 말라. 침묵 속에 설계를 진행하지 말라.&lt;/li>
&lt;li>설계안을 내놓는 순간 면접이 끝난다고 생각하지 말라.&lt;/li>
&lt;li>의견을 일찍, 그리고 자주 구하라.&lt;/li>
&lt;/ul>
&lt;h2 id="시간-배분">시간 배분&lt;/h2>
&lt;p>시스템 설계 면접은 보통 매우 광범위한 영역을 다루기 때문에 시간이 충분하지 않을 수 있어 시관 관리를 잘 하는 것이 중요하다.&lt;/p>
&lt;p>대략적인 시간 분배는 아래와 같으며, 문제의 범위나 면접관의 요구사항에 따라 달라질 수 있다.&lt;/p>
&lt;ul>
&lt;li>문제 이해 및 설계 범위 확정: 3 ~ 10분&lt;/li>
&lt;li>개략적 설계안 제시 및 동의 구하기: 10 ~ 15분&lt;/li>
&lt;li>상세 설계: 10 ~ 25분&lt;/li>
&lt;li>마무리: 3 ~ 5분&lt;/li>
&lt;/ul></description></item><item><title>2. 개략적인 규모 추정</title><link>https://codemario318.github.io/post/system-design-interview/2/</link><pubDate>Tue, 30 Apr 2024 22:03:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/2/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/2/cover.png" alt="Featured image of post 2. 개략적인 규모 추정" />&lt;p>개략적인 규모 추정(back-of-the-envelope estimation)은 보편적으로 통용되는 성능 수치상에서 사고 실험(thought experiments)을 행하여 추정치를 계산하는 행위로서, 어떤 설계가 요구사항에 부합할 것인지 보기 위한 것이다.&lt;/p>
&lt;h2 id="2의-제곱수">2의 제곱수&lt;/h2>
&lt;p>분산 시스템에서 다루는 데이터 양은 매우 커질 수 있으나 계산법은 기본을 크게 벗어나지 않는다.&lt;/p>
&lt;p>제데로 된 계산 결과를 얻으려면 데이터 볼륨의 단위를 2의 제곱수로 표현하면 어떻게 되는지를 알아야한다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>2의 x 제곱&lt;/th>
&lt;th>근사치&lt;/th>
&lt;th>이름&lt;/th>
&lt;th>축약형&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>1천&lt;/td>
&lt;td>1킬로바이트&lt;/td>
&lt;td>1KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>1백만&lt;/td>
&lt;td>1메가바이트&lt;/td>
&lt;td>1MB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>30&lt;/td>
&lt;td>10억&lt;/td>
&lt;td>1기가바이트&lt;/td>
&lt;td>1GB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>40&lt;/td>
&lt;td>1조&lt;/td>
&lt;td>1테라바이트&lt;/td>
&lt;td>1TB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>50&lt;/td>
&lt;td>1000조&lt;/td>
&lt;td>1페타바이트&lt;/td>
&lt;td>1PB&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="모든-프로그래머가-알아야-하는-응답지연-값">모든 프로그래머가 알아야 하는 응답지연 값&lt;/h2>
&lt;p>구글의 제프 딘은 2010년에 &lt;strong>통상적인 컴퓨터에서 구현된 연산들의 응답지연 값&lt;/strong>을 공개한 바 있다.&lt;/p>
&lt;p>컴퓨터의 성능이 더 좋아지며 유효하진 않지만, 연산의 처리 속도가 어느정도인지 가늠해볼 수는 있다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>연산명&lt;/th>
&lt;th>시간&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>L1 캐시 참조&lt;/td>
&lt;td>0.5ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>분기 예측 오류(branch mispredict)&lt;/td>
&lt;td>5ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>L2 캐시 참조&lt;/td>
&lt;td>7ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>뮤텍스 락/언락&lt;/td>
&lt;td>100ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>주 메모리 참조&lt;/td>
&lt;td>100ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Zippy로 1 KB 압축&lt;/td>
&lt;td>10,000ns = 10µs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1 Gbps 네트워크로 2 KB 전송&lt;/td>
&lt;td>20,000ns = 20µs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>메모리에서 1 MB 순차적으로 read&lt;/td>
&lt;td>250,000ns = 250µs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>같은 데이터 센터 내에서의 메시지 왕복 지연 시간&lt;/td>
&lt;td>500,000ns = 500µs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>디스크 탐색(seek)&lt;/td>
&lt;td>10,000,000ns = 10ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>네트워크에서 1 MB 순차적으로 read&lt;/td>
&lt;td>10,000,000ns = 10ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>디스크에서 1 MB 순차적으로 read&lt;/td>
&lt;td>30,000,000ns = 30ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>한 패킷의 캘리포니아로부터 네덜란드까지의 왕복 지연 시간&lt;/td>
&lt;td>150,000,000ns = 150ms&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>한 구글 엔지니어가 딘 박사가 나열한 수들을 시각화하였고, 최근 기술 동향(2020)이 반영되어있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/2/img.png"
width="606"
height="594"
srcset="https://codemario318.github.io/post/system-design-interview/2/img_hu0f7c2f161aa870801df5883ac4825f9d_187921_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/2/img_hu0f7c2f161aa870801df5883ac4825f9d_187921_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="244px"
>&lt;/p>
&lt;p>이 수치들을 분석하면 다음과 같은 결론이 나온다.&lt;/p>
&lt;ul>
&lt;li>메모리는 빠르지만 디스크는 아직도 느리다.&lt;/li>
&lt;li>디스크 탐색(seek)는 가능한 한 피하라.&lt;/li>
&lt;li>단순한 압축 알고리즘은 빠르다.&lt;/li>
&lt;li>데이터를 인터넷으로 전송하기 전에 가능하면 압축하라.&lt;/li>
&lt;li>데이터 센터는 보통 여러 지역에 분산되어 있고, 센터들 간에 데이터를 주고받는 데는 시간이 걸린다.&lt;/li>
&lt;/ul>
&lt;h2 id="가용성에-관계된-수치들">가용성에 관계된 수치들&lt;/h2>
&lt;p>고가용성(high availability)은 시스템이 오랜 시간 동안 지속적으로 중단 없이 운영될 수 있는 능력을 지칭하는 용어다.&lt;/p>
&lt;p>고가용성을 표현하는 값은 퍼센트로 표현하는데, 100%는 시스템이 단 한 번도 중단된 적이 없었음을 의미하며, 대부분의 서비스는 99%에서 100% 사이의 값을 갖는다.&lt;/p>
&lt;p>SLA(Service Level Agreement)는 서비스 사업자(service provider)가 보편적으로 사용하는 용어로, &lt;strong>서비스 사업자와 고객 사이에 맺어진 합의&lt;/strong>를 의미한다.&lt;/p>
&lt;p>이 합의에는 서비스 사업자가 제공하는 서비스의 가용시간(uptime)이 공식적으로 기술되어 있다.&lt;/p>
&lt;p>가용시간은 관습적으로 숫자 9를 사용해 표시하며, 9가 많을수록 좋다.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>가용률&lt;/th>
&lt;th>하루당 장애시간&lt;/th>
&lt;th>주당 장애시간&lt;/th>
&lt;th>개월당 장애시간&lt;/th>
&lt;th>연간 장애시간&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>99%&lt;/td>
&lt;td>14.40분&lt;/td>
&lt;td>1.68시간&lt;/td>
&lt;td>7.31시간&lt;/td>
&lt;td>3.65일&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99.9%&lt;/td>
&lt;td>1.44분&lt;/td>
&lt;td>10.08분&lt;/td>
&lt;td>43.83분&lt;/td>
&lt;td>8,77시간&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99.99%&lt;/td>
&lt;td>8.64초&lt;/td>
&lt;td>1.01분&lt;/td>
&lt;td>4.38분&lt;/td>
&lt;td>52.60분&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99.999%&lt;/td>
&lt;td>864.00밀리초&lt;/td>
&lt;td>6.05초&lt;/td>
&lt;td>26.30&lt;/td>
&lt;td>5.26분&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>99.9999&lt;/td>
&lt;td>86.40밀리초&lt;/td>
&lt;td>604.80밀리초&lt;/td>
&lt;td>2.63초&lt;/td>
&lt;td>31.56초&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="예제-트위터-qps와-저장소-요구량-추정">예제: 트위터 QPS와 저장소 요구량 추정&lt;/h2>
&lt;p>&lt;strong>가정&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>월간 능동 사용자(monthly active user)는 3억(300million) 명이다.&lt;/li>
&lt;li>50%의 사용자가 트위터를 매일 사용한다.&lt;/li>
&lt;li>평균적으로 각 사용자는 매일 2건의 트윗을 올린다.&lt;/li>
&lt;li>미디어를 포함하는 트윗은 10% 정도다.&lt;/li>
&lt;li>데이터는 5년간 보관된다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>추정&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>QPS(Query Per Second) 추정치
&lt;ul>
&lt;li>일간 능동 사용자(Daily Active User, DAU) = 3억 * 0.5 = 1.5억&lt;/li>
&lt;li>QPS = 1.5억 * 2트윗 / 24시간 / 3600초 = 약 3500&lt;/li>
&lt;li>최대 QPS(Peek QPS) = 2 * QPS = 약 7000&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>미디어 저장을 위한 저장소 요구량
&lt;ul>
&lt;li>평균 트윗 크기
&lt;ul>
&lt;li>tweet_id에 64바이트&lt;/li>
&lt;li>텍스트에 140바이트&lt;/li>
&lt;li>미디어에 1MB&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>미디어 저정소 요구량 = 1.5억 * 2 * 0.1 * 1MB = 30TB/일&lt;/li>
&lt;li>5년간 미디어를 보관하기 위한 저장소 요구량: 30TB * 365 * 5 = 약 55PB&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="팁">팁&lt;/h2>
&lt;p>개략적인 규모 추정과 관계된 면접에서 가장 중요한 것은 &lt;strong>문제를 풀어 나가는 절차&lt;/strong>다.&lt;/p>
&lt;p>&lt;strong>올바른 절차를 밟느냐가 결과를 내는 것보다 중요&lt;/strong>하다.&lt;/p>
&lt;ul>
&lt;li>근사치를 활용한 계산(rounding and approximation):
&lt;ul>
&lt;li>적절한 근사치를 활용하여 시간을 절약하자.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가정(assumption)들은 적어 둔다.&lt;/li>
&lt;li>단위(unit)을 붙여라.
&lt;ul>
&lt;li>헷갈리게 되므로, 단위를 붙이는 습고나을 들여 모호함을 방지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>QPS, 최대 QPS, 저장소 요구량, 캐시 요구량, 서버 수 등을 추정하는 것이 자주 출제된다.&lt;/li>
&lt;/ul></description></item><item><title>1. 사용자 수에 따른 규모 확장성</title><link>https://codemario318.github.io/post/system-design-interview/1/</link><pubDate>Mon, 22 Apr 2024 14:53:50 +0900</pubDate><guid>https://codemario318.github.io/post/system-design-interview/1/</guid><description>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/cover.png" alt="Featured image of post 1. 사용자 수에 따른 규모 확장성" />&lt;p>수백만 사용자를 지원하는 시스템을 설계하는 것은 도전적인 과제이며, 지속적인 계량과 끝없는 개선이 요구되는 여정이다.&lt;/p>
&lt;p>이번 장은 한 명의 사용자를 지원하는 시스템에서 시작하여, 최종적으로 몇백만 사용자를 지원하는 시스템을 설계해본다.&lt;/p>
&lt;h2 id="단일-서버">단일 서버&lt;/h2>
&lt;p>모든 컴포넌트가 단 한대의 서버에서 실행되는 간단한 시스템부터 설계해보자.&lt;/p>
&lt;p>웹 앱, 데이터베이스, 캐시 등이 전부 서버 한 대에서 실행된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img.png"
width="615"
height="390"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_hu499b8fa6fe43f3f924784d377eb4708e_41034_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_hu499b8fa6fe43f3f924784d377eb4708e_41034_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;p>&lt;strong>사용자 요청 처리 흐름&lt;/strong>&lt;br>
&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_1.png"
width="608"
height="382"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_1_hua0cbd5db31f0ad82b45addc6a6db9692_42287_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_1_hua0cbd5db31f0ad82b45addc6a6db9692_42287_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="381px"
>&lt;/p>
&lt;ol>
&lt;li>사용자는 도메인 이름(api.mysite.com)을 이용하여 웹사이트에 접속한다. 이 접속을 위해 DNS에 질의하여 IP 주소로 변환하는 과정을 치게 된다.
&lt;ul>
&lt;li>DNS는 보통 서드 파티가 제공하는 유료 서비스를 이용하므로 시스템의 일부는 아니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DNS 조회 결과로 IP 주소가 반환된다.&lt;/li>
&lt;li>해당 IP 주소로 HTTP 요청이 전달된다.&lt;/li>
&lt;li>요청을 받은 웹 서버는 HTML 페이지나 JSON 형태의 응답을 반환한다.&lt;/li>
&lt;/ol>
&lt;p>실제 요청은 웹 앱과 모바일 앱 두가지 종류에 단말로 부터 온다.&lt;/p>
&lt;ul>
&lt;li>웹 애플리케이션
&lt;ul>
&lt;li>비즈니스 로직, 데이터 저장 등을 처리하기 위해서 서버 구현용 언어(자바, 파이썬 등)를 사용한다.&lt;/li>
&lt;li>프레젠테이션 용으로는 클라이언트 구현용 언어(HTML, 자바스크립트 등)를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모바일 앱
&lt;ul>
&lt;li>모바일 앱과 웹 서버 간 통신을 위해서는 HTTP 프로토콜을 이용한다.&lt;/li>
&lt;li>반환될 응답 데이터의 포맷으로는 보통 JSON이 널리 쓰인다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="데이터베이스">데이터베이스&lt;/h2>
&lt;p>사용자가 늘면 서버 하나로는 충분하지 않아서 여러 서버를 두어야 한다.&lt;/p>
&lt;ul>
&lt;li>웹/모바일 트래픽 처리&lt;/li>
&lt;li>데이터베이스&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_2.png"
width="612"
height="377"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_2_hub3bdf37c2a22d7f06e833db20a5f8b0a_53786_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_2_hub3bdf37c2a22d7f06e833db20a5f8b0a_53786_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="162"
data-flex-basis="389px"
>&lt;/p>
&lt;p>웹/모바일 트래픽 처리 서버(웹 계층)와 데이터베이스 서버(데이터 계층)를 분리하면 그 각각을 독립적으로 확장해 나갈 수 있게 된다.&lt;/p>
&lt;h3 id="어떤-데이터베이스를-사용할-것인가">어떤 데이터베이스를 사용할 것인가?&lt;/h3>
&lt;p>전통적인 관계형 데이터베이스와 비-관계형 데이터베이스 사이에서 고를 수 있다.&lt;/p>
&lt;ul>
&lt;li>관계형 데이터베이스
&lt;ul>
&lt;li>관계형 데이터베이스 관리 시스템(RDBMS)이라고도 부르며, 자료를 테이블과 열, 컬럼으로 표현한다.&lt;/li>
&lt;li>SQL을 사용하면 여러 테이블에 있는 데이터를 그 관계에 따라 조인(join)하여 합칠 수 있다.&lt;/li>
&lt;li>ex) MySQL, Oracle, PostgreSQL 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비-관계형 데이터 베이스
&lt;ul>
&lt;li>NoSQL이라고도 부른다.&lt;/li>
&lt;li>키-값 저장소(key-value store), 그래프 저장소(graph store), 컬럼 저장소(column store), 문서 저장소(document store) 네 부류로 나뉜다.&lt;/li>
&lt;li>비-관계형 데이터베이스는 일반적으로 조인 연산은 지원하지 않는다.&lt;/li>
&lt;li>ex) CouchDB, Neo4j, Cassandra, HBase, Amazon DynamoDB 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>대부분의 개발자에게는 40년 이상 시장에서 살아남아 잘 사용되어온 관계형 데이터베이스가 최선이다.&lt;/p>
&lt;p>하지만 구축하려는 시스템에 적합하지 않은 경우에는 관계형 데이터베이스 이외의 저장소도 살펴보아야한다.&lt;/p>
&lt;ul>
&lt;li>아주 낮은 응답 지연시간(latency)이 요구됨&lt;/li>
&lt;li>다루는 데이터가 비정형(unstructured)이라 관계형 데이터가 아님&lt;/li>
&lt;li>데이터(JSON, YAML, XML 등)를 직렬화하거나(serialize) 역직렬화(deserialize) 할 수 있기만 하면 됨&lt;/li>
&lt;li>아주 많은 양의 데이터를 저장할 필요가 있음&lt;/li>
&lt;/ul>
&lt;h2 id="수직적-규모-확장-vs-수평적-규모-확장">수직적 규모 확장 VS 수평적 규모 확장&lt;/h2>
&lt;h3 id="수직적-규모-확장vertical-scaling">수직적 규모 확장(vertical scaling)&lt;/h3>
&lt;p>&lt;strong>스케일 업(scale up)&lt;/strong> 이라고도 불리는 수직적 규모 확장 프로세스는 서버에 고사양 자원을 추가하는 행위를 말한다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>서버로 유입되는 트래픽의 양이 적을 때는 수직적 확장이 좋은 선택이다.&lt;/li>
&lt;li>단순하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>한 대의 서버에 CPU나 메모리를 무한대로 증설할 방법이 없어 한계가 있다.&lt;/li>
&lt;li>장애에 대한 자동복구(failover) 방안이나 다중화(redundancy) 방안을 제시하지 않는다.
&lt;ul>
&lt;li>서버에 장애가 발생하면 완전히 중단된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="수평적-규모-확장horizontal-scaling">수평적 규모 확장(horizontal scaling)&lt;/h3>
&lt;p>&lt;strong>스케일 아웃(scale out)&lt;/strong> 이라고도 불리는 수평적 규모 확장 프로세스는 더 많은 서버를 추가하여 성능을 개선하는 행위를 말한다.&lt;/p>
&lt;p>수직적 규모 확장에서 언급된 단점으로 인해 대규모 애플리케이션을 지원하는 데는 수평적 규모 확장법이 보다 적절하다.&lt;/p>
&lt;hr>
&lt;p>수평적 규모 확장을 위해 추가적인 장치가 필요하다.&lt;/p>
&lt;p>앞서 본 설계에서 사용자가 웹 서버로 바로 연결되는데,&lt;/p>
&lt;ul>
&lt;li>웹 서버가 다운되면 사용자는 웹 사이트에 접속할 수 없다.&lt;/li>
&lt;li>너무 많은 사용자가 접속하여 웹 서버가 한계에 도달하면 응답 속도가 느려지거나 서버 접속이 불가능해질 수 있다.&lt;/li>
&lt;/ul>
&lt;p>이런 문제를 해결하는 데는 부하 분산기 또는 로드밸런서를 도입하는 것이 최선이다.&lt;/p>
&lt;h3 id="로드밸런서load-balancer">로드밸런서(Load balancer)&lt;/h3>
&lt;p>로드밸런서는 부하 분산 집합(load balancing set)에 속한 웹 서버들에게 트래픽 부하를 고르게 분산하는 역할을 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_3.png"
width="608"
height="540"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_3_huf74bbc3ffd6647fb098a2fc03966306f_85207_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_3_huf74bbc3ffd6647fb098a2fc03966306f_85207_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="270px"
>&lt;/p>
&lt;ul>
&lt;li>사용자는 로드밸런서의 공개 IP 주소로 접속하므로, 웹 서버는 클라이언트의 접속을 직접 처리하지 않는다.&lt;/li>
&lt;li>보안을 위해 서버 간 통신에는 사설 IP 주소가 이용된다.
&lt;ul>
&lt;li>같은 네트워크에 속한 서버 사이의 통신에만 쓰일 수 있는 IP 주소로, 인터넷을 통해서 접속할 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>부하 분산 집합에 또 하나의 웹 서버를 추가하고 나면, 장애를 자동복구하지 못하는 문제(no failover)는 해소되며, 웹 계층의 가용성(availability)은 향상된다.&lt;/p>
&lt;ul>
&lt;li>서버 1이 다운되면 모든 트래픽은 서버 2로 전송된다.
&lt;ul>
&lt;li>웹 사이트 전체가 다운되는 일이 방지된다.&lt;/li>
&lt;li>부하를 나누기 위해 새로운 서버를 추가할 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>웹사이트로 유입되는 트래픽이 가파르게 증가할 경우 웹 서버 계층에 더 많은 서버를 추가하면 로드밸런스가 자동적으로 트래픽을 분산한다.&lt;/li>
&lt;/ul>
&lt;h3 id="데이터베이스-다중화">데이터베이스 다중화&lt;/h3>
&lt;p>많은 데이터베이스들이 주(master)-부(slave) 관계를 설정하여 데이터 원본은 주 서버에, 사본은 부 서버에 저장하는 방식으로 다중화를 지원한다.&lt;/p>
&lt;p>쓰기 연산은 마스터에만 지원하며, 부 데이터베이스는 주 데이터베이스로부터 그 사본을 전달받아 읽기 연산만을 지원한다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스를 변경하는 명령어(&lt;code>INSERT&lt;/code>, &lt;code>DELETE&lt;/code>, &lt;code>UPDATE&lt;/code> 등)는 주 데이터베이스로만 전달되어야 한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_4.png"
width="612"
height="546"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_4_hu75d2f6312382855c75a554918b468d43_102326_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_4_hu75d2f6312382855c75a554918b468d43_102326_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="112"
data-flex-basis="269px"
>&lt;/p>
&lt;p>데이터베이스르 다중화하면 다음과 같은 이득이 있다.&lt;/p>
&lt;ul>
&lt;li>더 나은 성능
&lt;ul>
&lt;li>모든 데이터 변경 연산은 주 데이터베이스 서버로만 전달되는 반면 읽기 연산은 부 데이터베이스 서버들로 분산되어 병렬로 처리될 수 있는 질의(query)가 늘어나므로, 성능이 좋아진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>안정성
&lt;ul>
&lt;li>자연 재해 등의 이유로 데이터베이스 서버 가운데 일부가 파괴되어도 데이터는 보존된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성
&lt;ul>
&lt;li>데이터를 여러 지역에 복제해 둠으로써, 하나의 데이터베이스 서버에 장애가 발생하더라도 다른 서버에 있는 데이터로 계속 서비스할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위와 같은 데이터계층을 구성하면 데이터베이스 서버 가운데 하나가 다운되더라도 아래와 같은 상황을 감당할 수 있다.&lt;/p>
&lt;ul>
&lt;li>부 서버 한대뿐인데 다운된 경우
&lt;ul>
&lt;li>읽기 연산이 한시적으로 주 데이터베이스로 전달된다.&lt;/li>
&lt;li>즉시 새로운 부 데이터베이스 서버가 장애 서버를 대처한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>부 서버 중 한대가 다운된 경우
&lt;ul>
&lt;li>일기 연산이 나머지 부 데이터베이스 서버로 분산된다.&lt;/li>
&lt;li>새로운 부 데이터베이스 서버가 장애 서버를 대체한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주 데이터베이스 서버가 다운된 경우
&lt;ul>
&lt;li>부 데이터베이스 서버 중 하나가 새로운 주 서버가 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="다중화를-고려한-설계">다중화를 고려한 설계&lt;/h3>
&lt;p>아래는 로드밸런서와 데이터베이스 다중화를 고려한 설계안이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_5.png"
width="615"
height="680"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_5_hu0d3cc45b151b2f2d78ede4b0a35c84d1_160088_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_5_hu0d3cc45b151b2f2d78ede4b0a35c84d1_160088_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="90"
data-flex-basis="217px"
>&lt;/p>
&lt;ol>
&lt;li>사용자는 DNS로부터 로드밸런서의 공개 IP 주소를 받는다.&lt;/li>
&lt;li>사용자는 해당 IP 주소를 사용해 로드밸런서에 접속한다.&lt;/li>
&lt;li>HTTP 요청은 서버 1이나 서버 2로 전달된다.&lt;/li>
&lt;li>웹 서버는 사용자의 데이터를 부 데이터베이스 서버에서 읽는다.&lt;/li>
&lt;li>웹 서버는 데이터 변경 연산은 주 데이터베이스로 전달한다.&lt;/li>
&lt;/ol>
&lt;h2 id="캐시-cache">캐시 Cache&lt;/h2>
&lt;p>캐시를 붙여 응답 시간(latency)를 개선해볼 수 있다.&lt;/p>
&lt;p>캐시는 &lt;strong>값비싼 연산 결과&lt;/strong> 또는 &lt;strong>자주 참조되는 데이터&lt;/strong>를 메모리 안에 두고, 뒤이은 요청이 보다 빨리 처리될 수 있도록 하는 저장소이다.&lt;/p>
&lt;p>애플리케이션의 성능은 데이터베이스를 얼마나 자주 호출하느냐에 크게 좌우되는데, 캐시는 그런 문제를 완화할 수 있다.&lt;/p>
&lt;h3 id="캐시-계층">캐시 계층&lt;/h3>
&lt;p>캐시 계층(cache tier)은 데이터가 잠시 보관되는 곳으로 데이터베이스보다 훨씬 빠르다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스보다 훨씬 빠르므로 성능이 개선된다.&lt;/li>
&lt;li>요청 분산으로 데이터베이스의 부하를 줄일 수 있다.&lt;/li>
&lt;li>캐시 계층의 규모를 독립적으로 확장시키는 것도 가능해진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_6.png"
width="613"
height="116"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_6_huc62d7a17723bf3e18e1d3339b357022d_33317_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_6_huc62d7a17723bf3e18e1d3339b357022d_33317_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="528"
data-flex-basis="1268px"
>&lt;/p>
&lt;p>요청받은 웹 서버는 캐시에 응답이 저장되어 있는지를 확인 후 저장되어 있다면 해당 데이터 반환하고 없을 경우 데이터베이스 조회하여 결과를 반환하는데, 이러한 캐시 전략을 &lt;strong>읽기 주도형 캐시 전략(read-through caching strategy)&lt;/strong> 이라고 부른다.&lt;/p>
&lt;p>이외에도 다양한 캐시 전략이 있으며, 캐시할 데이터 종류, 크기, 액세스 패턴에 맞는 캐시 전략을 선택하면 된다.&lt;/p>
&lt;ul>
&lt;li>쓰기 주도형 캐시 전략 (Write-Through Cache)
&lt;ul>
&lt;li>데이터를 업데이트할 때 캐시와 백엔드 데이터 소스 모두에 동시에 업데이트&lt;/li>
&lt;li>데이터 일관성을 유지하면서 쓰기 작업을 처리&lt;/li>
&lt;li>쓰기 작업의 경우 백엔드 저장소로의 추가적인 I/O 작업이 필요하므로 성능 저하의 가능성이 있지만, 데이터 일관성을 보장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>쓰기 지연형 캐시 전략 (Write-Behind Cache)
&lt;ul>
&lt;li>데이터 업데이트를 먼저 캐시에만 적용하고, 나중에 백엔드 데이터 소스에 업데이트를 적용&lt;/li>
&lt;li>이는 쓰기 작업의 지연을 최소화하여 응답 시간을 줄이는 데 도움&lt;/li>
&lt;li>쓰기 지연형 캐시는 데이터 일관성을 유지하기 위해 추가적인 메커니즘을 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자세한 내용의 캐시 전략 (Write-Through and Read-Through Cache):
&lt;ul>
&lt;li>읽기와 쓰기 모두에 대해 캐시를 사용하는 전략&lt;/li>
&lt;li>데이터가 요청될 때마다 읽기 주도형 캐시와 유사하게 작동하며, 데이터가 업데이트될 때마다 쓰기 주도형 캐시와 유사한 방식으로 작동&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시 앞 단의 캐시 전략 (Cache-Aside Cache):
&lt;ul>
&lt;li>클라이언트가 데이터를 직접 캐시에 저장하고 검색하는 방식&lt;/li>
&lt;li>캐시에 데이터가 없는 경우 클라이언트는 백엔드 데이터 소스에서 직접 데이터를 가져와서 캐시에 저장하고 응답&lt;/li>
&lt;li>이 방식은 간단하고 유연하며, 응용 프로그램 코드 내에 캐시 로직을 명시적으로 구현할 수 있음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이중 캐시 전략 (Two-Level Cache):
&lt;ul>
&lt;li>두 개의 캐시 레이어를 사용하여 성능을 최적화&lt;/li>
&lt;li>보통 두 개의 캐시는 크기와 접근 속도 등에서 차이가 있음&lt;/li>
&lt;li>먼저 작은 고속 캐시가 데이터를 저장하고, 그 다음에 큰 용량의 캐시가 데이터를 보관&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>오프힙 로컬 캐시 전략 (Off-Heap Local Cache Strategy):
&lt;ul>
&lt;li>캐시를 메모리 외의 오프힙(Off-Heap) 영역에 저장하여 자바 가상 머신의 힙 메모리 한계를 초과하는 데이터 양을 처리할 수 있게 함&lt;/li>
&lt;li>이는 대규모 캐시나 대용량 데이터를 다룰 때 유용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="캐시-사용-시-유의할-점">캐시 사용 시 유의할 점&lt;/h3>
&lt;ul>
&lt;li>데이터 갱신은 자주 일어나지 않지만 참조는 빈번하게 일어나는 경우 고려할 수 있다.&lt;/li>
&lt;li>캐시는 데이터를 휘발성 메모리에 두므로, 영속적으로 보관할 데이터를 캐시에 두는 것은 바람직하지 않다.&lt;/li>
&lt;li>데이터를 무기한 보존할 수 없으므로 만료에 대한 정책을 마련해야한다.
&lt;ul>
&lt;li>너무 짧으면 데이터베이스 읽기가 자주 발생한다.&lt;/li>
&lt;li>너무 길면 원본과 차이 날 가능성이 높아진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>원본을 갱신하는 연산과 캐시를 갱신하는 연산이 단일 트랜잭션으로 처리되지 않는 경우 일관성이 깨질 수 있다.&lt;/li>
&lt;li>캐시 서버를 한 대만 두는 경우 해당 서버가 단일 장애 지점(Single Point of Failure, SPOF)이 되어버릴 가능성이 있다.
&lt;ul>
&lt;li>여러 지역에 걸처 캐시 서버를 분산시켜야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시 메모리가 너무 작으면 액세스 패턴에 따라 데이터가 자주 캐시에서 밀려나 성능이 떨어지게 된다.
&lt;ul>
&lt;li>캐시 메모리를 과할당하면 데이터가 갑자기 늘어났을 때 생길 문제를 방지할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시가 가득 찼을 때 추가로 데이터를 넣기 위한 데이터 방출 정책을 적절히 지정해야한다.
&lt;ul>
&lt;li>가장 널리 쓰이는 것은 LRU(least Recently Used - 가장 오래 사용 안된 데이터)나 FIFO(가장 먼저 들어온) 등이 있으며 경우에 맞게 적용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="콘텐츠-전송-네트워크-cdn">콘텐츠 전송 네트워크 CDN&lt;/h2>
&lt;p>응답 시간을 개선할 방법으로 CDN(Content Delivery Network)를 적용해 볼 수 있다.&lt;/p>
&lt;p>CDN은 정적 콘텐츠를 전성하는 데 쓰이는, 지리적으로 분산된 서버의 네트워크이다. (이미지, 비디오, CSS, JS 파일 등)&lt;/p>
&lt;ul>
&lt;li>요청 경로, 질의 문자열, 쿠키, 요청 헤더 등의 정보에 기반하여 HTML을 캐싱하는 &lt;strong>동적 콘텐츠 캐싱&lt;/strong>도 적용해 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_7.png"
width="605"
height="231"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_7_hu799239a592ed42b7290231250760d8ad_30988_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_7_hu799239a592ed42b7290231250760d8ad_30988_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="261"
data-flex-basis="628px"
>&lt;/p>
&lt;p>어떤 사용자 웹 사이트를 방문하면, 사용자에게 가장 가까운 CDN 서버가 정적 콘텐츠를 전달하며, 사용자가 CDN 서버로부터 멀어질 수록 천천히 로드될 것이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_8.png"
width="612"
height="218"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_8_hu5d5fc61be434c460205659abbfd7acf0_63071_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_8_hu5d5fc61be434c460205659abbfd7acf0_63071_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="280"
data-flex-basis="673px"
>&lt;/p>
&lt;ol>
&lt;li>사용자 A가 이미지 URL을 이용해 &lt;code>image.png&lt;/code>에 접근한다.(URL의 도메인은 CDN 서비스 사업자가 제공한다.)&lt;/li>
&lt;li>CDN 서버의 캐시에 해당 이미지가 없는 경우 원본 서버에서 요청하여 파일을 가져온다.&lt;/li>
&lt;li>원본 서버가 파일을 CDN 서버에 반환한다.
&lt;ul>
&lt;li>응답 HTTP 헤더에 TTL(Time-To-Live) 값을 넣어 보낸다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CDN 서버는 파일을 캐시하고 사용자 A에게 반환한다.
&lt;ul>
&lt;li>이미지는 TTL에 명신된 시간이 끝날 때 까지만 캐시된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>사용자 B가 같은 이미지를 CDN 서버에게 요청한다.&lt;/li>
&lt;li>만료되지 않은 이미지에 대한 요청은 캐시를 통해 처리된다.&lt;/li>
&lt;/ol>
&lt;h3 id="cdn-사용-시-고려해야-할-사항">CDN 사용 시 고려해야 할 사항&lt;/h3>
&lt;ul>
&lt;li>비용
&lt;ul>
&lt;li>CDN은 보통 서드파티에 의해 운영되며, CDN으로 들어가고 나가는 데이터 전송 양에 따라 요금을 낸다.&lt;/li>
&lt;li>자주 사용되지 않는 콘텐츠를 캐싱하는 것은 이득이 적으므로, CDN에서 빼는 것을 고려할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>적절한 만료 시한 설정
&lt;ul>
&lt;li>시의성이 중요한(time-sensitive) 콘텐츠는 만료 시점을 잘 정해야한다.&lt;/li>
&lt;li>너무 길면 콘텐츠의 신선도가 떨어진다.&lt;/li>
&lt;li>너무 짧으면 원본 서버에 빈번히 접속되어 좋지 않다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CDN 장애 대처 방안
&lt;ul>
&lt;li>CDN 자체가 죽었을 경우 애플리케이션이 어떻게 동작해야 하는지 고려해야 한다.&lt;/li>
&lt;li>응답을 감지하여 원본 서버에서 가져오는 등의 방식으로 처리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>콘텐츠 무효화 방법
&lt;ul>
&lt;li>만료되지 않은 콘텐츠라도 CDN에서 제거할 수 있다.&lt;/li>
&lt;li>CDN 서비스 사업자가 제공하는 API 활용&lt;/li>
&lt;li>콘텐츠의 다른 버전을 서비스 하도록 오브젝트 버저닝 이용.
&lt;ul>
&lt;li>&lt;code>image.png?v=2&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cdn과-캐시가-추가된-설계">CDN과 캐시가 추가된 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_9.png"
width="625"
height="670"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_9_hu460b71978870d67db3c5f1597124e471_170383_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_9_hu460b71978870d67db3c5f1597124e471_170383_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="223px"
>&lt;/p>
&lt;ol>
&lt;li>정적 콘텐츠를 CDN을 통해 제공하여 더 나은 성능을 보장한다.&lt;/li>
&lt;li>캐시가 데이터베이스 부하를 줄여준다.&lt;/li>
&lt;/ol>
&lt;h2 id="무상태stateless-웹-계층">무상태(Stateless) 웹 계층&lt;/h2>
&lt;p>웹 계층을 수평적으로 확장하는 방법을 고민해 볼 수 있다.&lt;/p>
&lt;p>이를 위해 상태 정보(사용자 세션 등)를 웹 계층에서 제거해야한다.&lt;/p>
&lt;p>바람직한 전략은 상태 정보를 관계형 데이터베이스나 NoSQL 같은 지속성 저장소에 보관하고, 필요할 때 가져오도록 하는 것이다.&lt;/p>
&lt;p>이렇게 구성된 웹 계층을 &lt;strong>무상태 웹 계층&lt;/strong>이라 부른다.&lt;/p>
&lt;h3 id="상태-정보-의존적인-아키텍처">상태 정보 의존적인 아키텍처&lt;/h3>
&lt;p>상태 정보를 보고나하는 서버는 클라이언트 정보, 즉 상태를 유지하여 요청들 사이에 공유되도록 하지만, 무상태 서버에는 이러한 장치가 없다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_10.png"
width="624"
height="387"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_10_hu5fb9397f4d4b70e8494c0677a4642dc6_65604_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_10_hu5fb9397f4d4b70e8494c0677a4642dc6_65604_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;p>위와 같은 경우 같은 클라이언트로부터의 요청은 항상 같은 서버로 전송되어야 한다.&lt;/p>
&lt;p>로드밸런서가 이를 지원하기 위해 고정 세션이라는 기능을 제공하지만, 이는 로드밸런서에 부담을 줄 수 있다.&lt;/p>
&lt;p>또한 로드 밸런서 뒷단에 서버를 추가하거나 제거하기도 까다로워지며, 이들 서버의 장애를 처리하기도 복잡해진다.&lt;/p>
&lt;h3 id="무상태-아키텍처">무상태 아키텍처&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_11.png"
width="601"
height="582"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_11_hu39f308bbb91eb0dc2a5c19d7114ea62c_76175_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_11_hu39f308bbb91eb0dc2a5c19d7114ea62c_76175_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="247px"
>&lt;/p>
&lt;p>무상태 아키텍처는 사용자로부터의 HTTP 요청은 어떤 웹 서버로도 전달될 수 있다.&lt;/p>
&lt;p>웹 서버는 상태 정보가 필요할 경우 물리적으로 분리된 공유 저장소로부터 데이터를 가져온다.&lt;/p>
&lt;h3 id="무상태-웹-계층을-갖는-설계">무상태 웹 계층을 갖는 설계&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_12.png"
width="592"
height="593"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_12_hu8a96a4f1289cdc64fec7a7b4b0f65b88_150815_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_12_hu8a96a4f1289cdc64fec7a7b4b0f65b88_150815_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="239px"
>&lt;/p>
&lt;ul>
&lt;li>세션 데이터를 웹 계층에서 분리하고 지속성 데이터 보관소에 저장하도록 만들었다.
&lt;ul>
&lt;li>공유 저장소는 관계형 데이터베이스일 수도 있고, 캐시일 수도 있으며, NoSQL일 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 정보가 웹 서버들로부터 제거되었으므로 자동으로 규모를 확장할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="데이터-센터">데이터 센터&lt;/h2>
&lt;p>애플리케이션의 사용자가 매우 많다면 가용성을 높이고 쾌적하게 사용할 수 있도록 하기 위해 여러 데이터 센터를 지원하는 것이 필수적이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_13.png"
width="605"
height="612"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_13_huacec91b27a2e95c1fae44550dc9946c4_231088_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_13_huacec91b27a2e95c1fae44550dc9946c4_231088_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="237px"
>&lt;/p>
&lt;p>&lt;strong>지리적 라우팅&lt;/strong>&lt;/p>
&lt;p>장애가 없는 상황에서 사용자는 가장 가까운 데이터 센터로 안내되는데 이 절차를 지리적 라우팅(geoDNS-routing 또는 geo-routing)이라고 부른다.&lt;/p>
&lt;p>geoDNS는 사용자의 위치에 따라 도메인 이름을 어떤 IP 주소로 변활할지 결정할 수 있도록 해주는 DNS 서비스다.&lt;/p>
&lt;p>&lt;strong>데이터 센터 장애&lt;/strong>&lt;/p>
&lt;p>데이터 센터 중 하나에 심각한 장애가 발생하면 모든 트래픽은 장애가 없는 데이터 센터로 전송된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_14.png"
width="598"
height="619"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_14_huae6b76823045f17d81dcfd1753a37701_207085_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_14_huae6b76823045f17d81dcfd1753a37701_207085_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="96"
data-flex-basis="231px"
>&lt;/p>
&lt;p>이에 따라 다중 데이터센터 아키텍처를 만들려면 몇 가지 기술적 난제를 해결해야 한다.&lt;/p>
&lt;ul>
&lt;li>트래픽 우회
&lt;ul>
&lt;li>올바른 데이터센터로 트래픽을 보내는 효과적인 방법을 찾아야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 동기화(Synchronization)
&lt;ul>
&lt;li>데이터를 여러 데이터센터에 걸쳐 다중화 하여, 장애 복구 시에도 데이터를 동기화 할 수 있도록 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>테스트와 배포
&lt;ul>
&lt;li>여러 데이터 센터를 사용하도록 시스템이 구성된 상황이라면 웹 사이트 또는 애플리케이션을 여러 위치에서 테스트 해보는 것이 중요하다.&lt;/li>
&lt;li>자동화된 배포 도구는 모든 데이터 센터에 동일한 서비스가 설치되도록 하는 데 중요한 일을 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="메시지-큐message-queue">메시지 큐(Message Queue)&lt;/h2>
&lt;p>시스템을 더 큰 규모로 확장하기 위해서는 시스템의 컴포넌트를 분리하여, 각기 독립적으로 확장될 수 있어야 한다.&lt;/p>
&lt;p>메시지 큐는 분산 시스템이 이 문제를 풀기 위해 채용하고 있는 핵심 전략 가운데 하나다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_15.png"
width="606"
height="141"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_15_huc34a000f73eb7366f54fab25c10cd600_37954_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_15_huc34a000f73eb7366f54fab25c10cd600_37954_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="429"
data-flex-basis="1031px"
>&lt;/p>
&lt;p>메시지 큐는 메시지의 무손실을 보장하는 비동기 통신을 지원하는 컴포넌트로 메시지의 버퍼 역할을 하며, 비동기적으로 전송한다.&lt;/p>
&lt;ol>
&lt;li>생산자 또는 발행자라고 불리는 입력 서비스가 메시지를 만들어 메시지 큐에 발행한다.&lt;/li>
&lt;li>소비자 혹은 구독자라 불리는 서비스 혹은 서버가 메시지를 받아 그에 맞는 동작을 수행한다.&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>메시지 큐를 이용하면 서비스 또는 서버 간 결합이 느슨해져서, 규모 확장성이 보장되어야 하는 안정적 애플리케이션을 구성하기 좋다.&lt;/p>
&lt;ul>
&lt;li>생산자는 소비자 프로세스가 다운되어 있어도 메시지를 발행할 수 있다.&lt;/li>
&lt;li>소비자는 생산자 서비스가 가용한 상태가 아니더라도 메시지를 수신할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>큐가 커지면 더 많은 작업 프로세스를 추가해야 처리 시간을 줄일 수 있으며, 큐가 거의 항상 비어있는 상태라면, 작업 프로세스의 수를 줄일 수 있다.&lt;/p>
&lt;h2 id="로그-메트릭-그리고-자동화">로그, 메트릭 그리고 자동화&lt;/h2>
&lt;p>웹 사이트와 함께 사업 규모가 커지고 나면, 로그나 메트릭, 자동화 같은 도구에 필수적으로 투자해야한다.&lt;/p>
&lt;ul>
&lt;li>로그
&lt;ul>
&lt;li>시스템의 오류와 문제들을 쉽게 찾아낼 수 있게 돕는다.&lt;/li>
&lt;li>로그를 단일 서비스로 모아주는 도구를 활용하면 더 편리하게 검색하고 조회할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메트릭
&lt;ul>
&lt;li>사업 현황에 관한 유용한 정보를 얻을 수도 있고, 시스템의 현재 상태를 쉽게 파악할 수 있다.&lt;/li>
&lt;li>호스트 단위 메트릭: CPU, 메모리, 디스크 I/O,에 관한 메트릭&lt;/li>
&lt;li>종합 메트릭: 데이터베이스 계층의 성능, 캐시 계층의 성능 등&lt;/li>
&lt;li>핵심 비즈니스 메트릭: 일별 능동 사용자, 수익, 재방문 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자동화
&lt;ul>
&lt;li>시스템이 크고 복잡해지면 생산성을 높이기 위해 자동화 도구를 활용해야한다.&lt;/li>
&lt;li>지속적 통합을 활용한 검증 절차 수행 및 빌드, 테스트, 배포 절차 자동화 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="수정한-설계안">수정한 설계안&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_16.png"
width="595"
height="741"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_16_hu91dcf9847683962bf50eb168546423cd_177817_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_16_hu91dcf9847683962bf50eb168546423cd_177817_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;ul>
&lt;li>메시지 큐는 각 컴포넌트가 보다 느슨히 결합될 수 있도록 하고, 결함에 대한 내성을 높인다.&lt;/li>
&lt;li>로그, 모니터링, 메트릭, 자동화 등을 지원하기 위한 장치를 추가한다.&lt;/li>
&lt;/ul>
&lt;h2 id="데이터베이스-규모-확장">데이터베이스 규모 확장&lt;/h2>
&lt;p>저장할 데이터가 많아지면 데이터베이스에 대한 부하도 증가한다.&lt;/p>
&lt;p>데이터베이스의 규모를 확장하는데는 앞서 언급했던 수직적 규모 확장과 수평적 규모 확장을 고려할 수 있다.&lt;/p>
&lt;p>&lt;strong>수평적 확장&lt;/strong>&lt;/p>
&lt;p>기존 서버에 더 많은, 고성능의 자원을 증설하는 방법이다.&lt;/p>
&lt;p>스택오버플로는 천만 명의 사용자 전부를 단 한 대의 마스터 데이터베이스로 처리했다.&lt;/p>
&lt;p>하지만 언급했던대로 몇가지 심각한 약점이 있다.&lt;/p>
&lt;ul>
&lt;li>무한 증설할 수는 없다.&lt;/li>
&lt;li>SPOF로 인한 위험성이 크다.&lt;/li>
&lt;li>비용이 많이 든다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>수평적 확장&lt;/strong>&lt;/p>
&lt;p>데이터베이스의 수평적 확장은 샤딩(sharding)이라고도 부르는데, 더 많은 서버를 추가함으로써 성능을 향상시킬 수 있도록 한다.&lt;/p>
&lt;h3 id="샤딩">샤딩&lt;/h3>
&lt;ul>
&lt;li>대규모 데이터베이스를 샤드(shard)라고 부르는 작은 단위로 분할하는 기술을 일컫는다.&lt;/li>
&lt;li>모든 샤드는 같은 스키마를 쓰지만 보관되는 데이터 사이에는 중복이 없다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_17.png"
width="369"
height="266"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_17_huc997d539c0fa3f28c4bae7dad9a2068b_33539_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_17_huc997d539c0fa3f28c4bae7dad9a2068b_33539_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="332px"
>&lt;/p>
&lt;p>위의 예시에서 &lt;code>user_id % 4&lt;/code>를 해시 함수로 사용하여 데이터가 보관되는 샤드를 정한다.&lt;/p>
&lt;p>이처럼 샤딩 전략을 구현할 때 고려해야 할 가장 중요한 것은 &lt;strong>샤딩 키&lt;/strong>를 어떻게 정하냐 하는 것이다.&lt;/p>
&lt;ul>
&lt;li>샤딩 키(파티션 키)는 데이터가 어떻게 분살될지 정하는 하나 이상의 컬럼으로 구성된다.&lt;/li>
&lt;li>샤딩 키를 통해 올바른 데이터베이스에 질의를 보내어 데이터 조회나 변경을 처리하므로 효율을 높일 수 있다.&lt;/li>
&lt;/ul>
&lt;p>샤딩 키를 정할 때는 데이터를 고르게 분할 할 수 있도록 하는 게 가장 중요하다.&lt;/p>
&lt;p>&lt;strong>주의사항&lt;/strong>&lt;/p>
&lt;p>샤딩은 데이터베이스 규모 확장을 실현하는 휼륭한 기술이지만 완벽하지 않으며, 도입하면 시스템이 복잡해지고 풀어야 할 새로운 문제도 생긴다.&lt;/p>
&lt;ul>
&lt;li>데이터의 재 샤딩
&lt;ul>
&lt;li>데이터가 너무 많아져서 하나의 샤드로는 더 이상 감당하기 어려울 때&lt;/li>
&lt;li>샤드 소진: 샤드 간 데이터 분포가 균등하지 못하여 어떤 샤드에 할당된 공간 소모가 다른 사드에 비해 빨리 진행될 때&lt;/li>
&lt;li>이러한 형상이 발생하면 샤드 키를 계산하는 함수를 변경하고 데이터를 재배치 하여야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유명인사 문제(핫스팟 키 문제)
&lt;ul>
&lt;li>특정 샤드에 질의가 집중되어 서버에 과부하가 걸리는 문제다.&lt;/li>
&lt;li>특정 샤드의 원인에 대해 샤드를 하나씩 할당해야 할 수도 있고, 더 잘개 쪼개야 할 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>조인과 비정규화
&lt;ul>
&lt;li>데이터베이스를 여러 샤드 서버로 쪼개고 나면, 여러 샤드에 걸친 데이터를 조인하기가 힘들어진다.&lt;/li>
&lt;li>데이터베이스를 비정규화하여 하나의 테이블에서 질의가 수행될 수 있도록 하는 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="샤드를-적용한-아키텍처">샤드를 적용한 아키텍처&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/system-design-interview/1/img_18.png"
width="643"
height="800"
srcset="https://codemario318.github.io/post/system-design-interview/1/img_18_hu3cfaabe2145c01222e45ae94975b52ee_217530_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/system-design-interview/1/img_18_hu3cfaabe2145c01222e45ae94975b52ee_217530_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="80"
data-flex-basis="192px"
>&lt;/p>
&lt;ul>
&lt;li>데이터베이스에 대한 부하를 줄이기 위해 굳이 관계형 데이터베이스가 요구되지 않는 기능들은 NoSQL로 이전할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="백만-사용자-그리고-그-이상">백만 사용자, 그리고 그 이상&lt;/h2>
&lt;p>시스템의 규모를 확장하는 것은 지속적이고 반복적인 과정이며, 이번 장에서 다룬 내용을 반복하다 보면 원하는 규모의 시스템을 달성할 수 있게 된다.&lt;/p>
&lt;p>그러나 수백만 사용자 이상을 지원하려면 새로운 전략을 도입해야 하고 지속적으로 시스템을 가다듬어야 할 것이다.&lt;/p>
&lt;ul>
&lt;li>시스템 최적화 및 마이크로서비스 등&lt;/li>
&lt;/ul>
&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>웹 계층은 무상태 계층으로&lt;/li>
&lt;li>모든 계층에 다중화 도입&lt;/li>
&lt;li>가능한 한 많은 데이터를 캐시할 것&lt;/li>
&lt;li>여러 데이터 센터를 지원할 것&lt;/li>
&lt;li>정적 콘텐츠는 CDN을 통해 서비스할 것&lt;/li>
&lt;li>데이터 계층은 샤딩을 통해 그 규모를 확장할 것&lt;/li>
&lt;li>각 계층은 독립적 서비스로 분할할 것&lt;/li>
&lt;li>시스템을 지속적으로 모니터링하고, 자동화 도구들을 활용할 것&lt;/li>
&lt;/ul></description></item><item><title>34. 빠져있는 장: By Simon Brown</title><link>https://codemario318.github.io/post/clean-architecture/34/</link><pubDate>Fri, 19 Apr 2024 15:59:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/34/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/cover.png" alt="Featured image of post 34. 빠져있는 장: By Simon Brown" />&lt;p>지금까지 읽은 모든 조언을 통해 올바르게 정의된 경계, 명확한 책임, 통제된 의존성을 가진 클래스와 컴포넌트로 구성된 좋은 소프트웨어를 설계할 수 있다.&lt;/p>
&lt;p>하지만 실제 적용에서는 &lt;strong>디테일&lt;/strong>(구현 세부사항)을 심사숙고하지 않는다면 마지막 고비에 걸려 넘어지기 십상이다.&lt;/p>
&lt;h2 id="계층-기반-패키지">계층 기반 패키지&lt;/h2>
&lt;p>가장 단순한 설계 방식으로 &lt;strong>전통적인 수평 계층형 아키텍처&lt;/strong>가 있다.&lt;/p>
&lt;p>&lt;strong>계층 기반 패키지&lt;/strong>라고도 불리는 이 방법은 기술적인 관점에서 해당 코드가 하는 일에 기반해 그 코드를 분할한다.&lt;/p>
&lt;p>이러한 전형적인 계층형 아키텍처에는 웹, 업무 규칙, 영속성 코드를 위해 계층이 각각 하나씩 존재한다.&lt;/p>
&lt;p>코드는 계층이라는 얇은 수평 조각으로 나뉘며, 각 계층은 유사한 종류의 것들을 묶는 도구로 사용된다.&lt;/p>
&lt;ul>
&lt;li>엄격한 계층형 아키텍처의 경우 계층은 반드시 바로 아래 계층에만 의존해야한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/img.png"
width="635"
height="674"
srcset="https://codemario318.github.io/post/clean-architecture/34/img_hu09d1a64cd1e72f2d69d142c6a608bf93_75674_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/34/img_hu09d1a64cd1e72f2d69d142c6a608bf93_75674_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;code>OrdersController&lt;/code>
&lt;ul>
&lt;li>웹 컨트롤러이며, 웹 기반 요청을 처리한다.&lt;/li>
&lt;li>ex) Spring MVC 컨트롤러 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>OrdersService&lt;/code>
&lt;ul>
&lt;li>주문 관련 업무 규칙을 정의하는 인터페이스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>OrdersServiceImpl&lt;/code>
&lt;ul>
&lt;li>&lt;code>OrdersService&lt;/code>의 구현체&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>OrdersRepository&lt;/code>
&lt;ul>
&lt;li>영구 저장된 주문 정보에 접근하는 방법을 정의하는 인터페이스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>JdbcOrdersRepository&lt;/code>
&lt;ul>
&lt;li>&lt;code>OrdersRespository&lt;/code>의 구현체&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>마틴 파울러는 &lt;strong>프레젠테이션 도메인 데이터&lt;/strong> 계층화에서 처음 시작하기에는 계층형 아키텍처가 적합하다고 언급한다.&lt;/p>
&lt;ul>
&lt;li>엄청난 복잡함을 겪지 않고도 무언가를 작동시켜 주는 아주 빠른 방법이다.&lt;/li>
&lt;li>소프트웨어가 커지고 복잡해지기 시작하면 세 개의 계층으로만은 부족하다 느끼고 더 잘게 모듈화 해야할 필요성을 느낄 수 있다.&lt;/li>
&lt;li>업무 도메인에 대해 아무것도 말해주지 않는다.&lt;/li>
&lt;/ul>
&lt;h2 id="기능-기반-패키지">기능 기반 패키지&lt;/h2>
&lt;p>&lt;strong>기능 기반 패키지&lt;/strong> 구조는 서로 연관된 기능, 도메인 개념, (도메인 주도 설계 용어를 자주 사용한다면) Aggregate Root에 기반하여 수직의 얇은 조각으로 코드를 나누는 방식이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/img2.png"
width="627"
height="670"
srcset="https://codemario318.github.io/post/clean-architecture/34/img2_hub33c374a47ec3a9ae590abdd19e1dc17_60523_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/34/img2_hub33c374a47ec3a9ae590abdd19e1dc17_60523_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;p>인터페이스와 클래스는 이전과 같지만, 모두가 단 하나의 패키지에 속하게 된다.&lt;/p>
&lt;ul>
&lt;li>이는 &lt;strong>계층 기반 패키지&lt;/strong>를 아주 간단히 리팩터링한 형태지만 코드의 상위 수준 구조가 업무 도메인에 대해 무언가를 알려주게된다.&lt;/li>
&lt;li>유스케이스가 변경될 경우 변경해야 할 코드를 모두 찾는 작업이 더 쉬워질 수 있다.&lt;/li>
&lt;/ul>
&lt;p>소프트웨어 개발팀이 수평적 계층화의 문제를 깨닫고, 수직적 계층화로 전환하는 경우가 많지만, 두 접근법 모두 차선책이다.&lt;/p>
&lt;h2 id="포트와-어댑터">포트와 어댑터&lt;/h2>
&lt;p>포트와 어댑터(Ports and Adapters) 혹은 육각형 아키텍처(Hexagonal Architecture), 경계, 컨트롤러, 엔티티(BCE) 등의 방식으로 접근하는 이유는 업무/도메인에 초점을 둔 코드가 프레임워크나 데이터베이스 같은 기술적인 세부 구현과 독립적이며 분리된 아키텍처를 만들기 위해서다.&lt;/p>
&lt;p>그런 코드 베이스는 **내부(도메인)**와 **외부(인프라)**로 구성됨을 흔히 볼 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/img3.png"
width="633"
height="485"
srcset="https://codemario318.github.io/post/clean-architecture/34/img3_hub97e2c2908d969078290a6c0afd4246d_67211_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/34/img3_hub97e2c2908d969078290a6c0afd4246d_67211_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;ul>
&lt;li>내부 영역
&lt;ul>
&lt;li>도메인 개념을 모두 포함한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>외부 영역
&lt;ul>
&lt;li>외부 세계(UI, DB, 서드파티 통합)와의 상호작용을 포함한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>외부가 내부에 의존하며, 절대 그 반대로는 안된다.&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/img4.png"
width="632"
height="669"
srcset="https://codemario318.github.io/post/clean-architecture/34/img4_hu067ed2819602a97a65ad3f6557f29a26_73442_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/34/img4_hu067ed2819602a97a65ad3f6557f29a26_73442_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;p>위 구조에서 &lt;code>com.mycompany.myapp.domain&lt;/code> 패키지가 내부이며, 나머지 패키지는 모두 외부이다.&lt;/p>
&lt;p>&lt;code>OrdersRepository&lt;/code>가 &lt;code>Orders&lt;/code>라는 간단한 이름으로 바뀌었는데, 이는 도메인 주도 설계라는 세계관에서 비롯된 명명법으로, &lt;strong>내부&lt;/strong>에 존재하는 모든 것의 이름은 반드시 &lt;strong>유비쿼터스 도메인 언어&lt;/strong>관점에서 기술하라고 조언한다.&lt;/p>
&lt;ul>
&lt;li>도메인에 대하 논의할 때 &lt;strong>주문&lt;/strong>에 대해 말하는 것이지 &lt;strong>주문 리포지토리&lt;/strong>에 대해 말하는 것이 아니기 때문&lt;/li>
&lt;/ul>
&lt;h2 id="컴포넌트-기반-패키지">컴포넌트 기반 패키지&lt;/h2>
&lt;p>SOLID, REP, CCP, CRP 같은 이 책에 대다수의 조언은 당연히 중요하지만, 코드를 조직화하는 방법에 대해서는 &lt;strong>컴포넌트 기반 패키지&lt;/strong>같은 접근 방법을 적용해 볼 수 있다.&lt;/p>
&lt;p>&lt;strong>계층형 아키텍처의 단점&lt;/strong>&lt;/p>
&lt;p>계층형 아키텍처의 목적은 기능이 같은 코드끼리 서로 분리하는 것이다.&lt;/p>
&lt;p>구현 관점에서 보면 각 계층은 일반적으로 자바 패키지에 해당하며 서로 다른 패키지에 속한다. 따라서 코드의 접근성 관점에서 살펴보면 아래와 같은 문제가 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>OrdersController&lt;/code>가 &lt;code>OrdersService&lt;/code> 인터페이스에 의존하려면 &lt;code>OrdersService&lt;/code> 인터페이스는 반드시 &lt;code>public&lt;/code>으로 선언되어야 한다.&lt;/li>
&lt;li>&lt;code>OrdersRepository&lt;/code> 인터페이스도 &lt;code>public&lt;/code>이어야만 &lt;code>repository&lt;/code> 패키지 외부에 있는 &lt;code>OrdersServiceImpl&lt;/code> 클래스에 접근할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>엄격한 계층형 아키텍처에서 의존성 화살표는 항상 아래를 향해야 하므로, 깔끔한 비순환 의존성 그래프를 만들 수 있을 것이라 생각할 수 있지만, 실제로는 코드 베이스의 요소들이 서로를 의존할 때는 몇 가지 규칙을 반드시 지켜야한다.&lt;/p>
&lt;p>여기서 큰 문제는, 속임수를 써서 의존성을 의도치 않은 방식으로 추가하더라도 보기에는 여전히 좋은 비순환 의존성 그래프가 생성된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/img_1.png"
width="629"
height="671"
srcset="https://codemario318.github.io/post/clean-architecture/34/img_1_hue2c4f507d4fc8ef9fe870f9d5a52a08a_68784_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/34/img_1_hue2c4f507d4fc8ef9fe870f9d5a52a08a_68784_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="224px"
>&lt;/p>
&lt;p>위 상황처럼 &lt;code>OrdersController&lt;/code>가 &lt;code>OrdersService&lt;/code>를 우회하여 직접 &lt;code>OrdersRepository&lt;/code>에 의존성을 가지게 하더라도 비순환 의존성 그래프가 만들어진다.&lt;/p>
&lt;p>이러한 조직화는 인접한 계층들을 건너 뛰는 일이 허용되기 때문에 &lt;strong>완화된 계층형 아키텍처&lt;/strong>라고 부르며, 이러한 방식은 CQRS(Command Query Responsibility Segregation) 패턴 같은 경우를 제외한다면 바람직하지 못하다.&lt;/p>
&lt;p>따라서 계층형 아키텍처는 이러한 우회를 강제할 수 있는 방법이 없기 때문에 아키텍처가 지켜지기 힘들어진다.&lt;/p>
&lt;p>&lt;strong>컴포넌트 기반 패키지&lt;/strong>&lt;/p>
&lt;p>반면 컴포넌트 기반 패키지는 컴파일러를 사용해서 아키텍처를 강제할 수 있다.&lt;/p>
&lt;p>컴포넌트 기반 패키지는 큰 단위(coarse-grained)의 단일 컴포넌트와 관련된 모든 책임을 하나의 자바 패키지로 묶는데 주안점을 둔다.&lt;/p>
&lt;p>이 접근법은 마이크로서비스 아키텍처가 가진 시각과 동일하게 서비스 중심적인 시각으로 소프트웨어 시스템을 바라볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>포트와 어댑터에서 웹을 그저 또 다른 전달 메커니즘으로 취급하는 것과 마찬가지로, 사용자 인터페이스를 큰 단위의 컴포넌트로부터 분리해서 유지한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/img_2.png"
width="628"
height="668"
srcset="https://codemario318.github.io/post/clean-architecture/34/img_2_huade6c3c558bab5a248a2fc0978ef31a2_60168_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/34/img_2_huade6c3c558bab5a248a2fc0978ef31a2_60168_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="225px"
>&lt;/p>
&lt;p>컴포넌트 기반 패키지는 본질적으로 업무 로직과 영속성 관련 코드를 하나로 묶는데 이러한 단위를 컴포넌트라 부른다.&lt;/p>
&lt;blockquote>
&lt;p>지금까지 언급되었던 배포할 수 있는 가장 작은 단위라는 의미가 아닌 &lt;strong>깔끔한 인터페이스로 감싸진 연관된 기능들의 묶음&lt;/strong>을 의미한다.&lt;br>
스프트웨어 시스템의 전적 구조를 컨테이너, 컴포넌트, 클래스(코드) 측면에서 계층적으로 생각하는 방법(C4 소프트웨어 아키텍처 모델)&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>관련된 무언가를 코딩해야 할 때 &lt;code>**Component&lt;/code>만 둘러보면 된다.&lt;/li>
&lt;li>컴포넌트 내부에서 관심사 분리는 여전히 유효하다.&lt;/li>
&lt;li>따라서 업무 로직은 데이터 영속성과 분리된다.
&lt;ul>
&lt;li>컴포넌트 구현과 관련된 세부사항으로, 사용자는 알 필요가 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>모노리틱 애플리케이션에서 컴포넌트를 잘 정의하면 마이크로서비스 아키텍처로 가기 위한 발판으로 삼을 수 있다.&lt;/p>
&lt;h2 id="구현-세부사항엔-항상-문제가-있다">구현 세부사항엔 항상 문제가 있다.&lt;/h2>
&lt;p>언급한 네 가지 접근법이 코드를 조직하하는 것으로 보이지만 세부사항을 잘못 구현하면 이러한 견해도 아주 빠르게 흐트러지기 시작한다.&lt;/p>
&lt;ul>
&lt;li>모든 타입에서 &lt;strong>public&lt;/strong> 지시자를 사용한다는 것 제공하는 캡슐화 이점을 활용하지 않겠다는 뜻이며, 이로인해 지향아는 아키텍처 스타일을 위반하게 될 것이다.&lt;/li>
&lt;/ul>
&lt;h3 id="조직화-vs-캡슐화">조직화 VS 캡슐화&lt;/h3>
&lt;p>자바 애플리케이션에서 모든 타입을 &lt;code>public&lt;/code>으로 지정한다면 패키지는 단순히 조직화를 위한 매커니즘(폴더와 같은 역할만)으로 전락하여 캠슐화를 위한 메커니즘이 될 수 없다.&lt;/p>
&lt;ul>
&lt;li>코드 베이스를 어디서도 사용할 수 있다면 패키지를 사용하는 데 따른 이점이 거의 없다.&lt;/li>
&lt;li>패키지를 무시해 버리면 캡슐화나 은닉에 아무런 도움이 없으므로 최종적으로 어떤 아키텍처 스타일로 만들려고 하는지는 아무런 의미가 없어진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/img_3.png"
width="630"
height="446"
srcset="https://codemario318.github.io/post/clean-architecture/34/img_3_hubd3840a39404a726edb0ac1a8a8a458d_77645_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/34/img_3_hubd3840a39404a726edb0ac1a8a8a458d_77645_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;p>모든 타입을 &lt;code>public&lt;/code>으로 선언한다면 실제로 갖게 되는 것은 수평적 계층형 아키텍처를 표현하는 방법에 불과해진다.&lt;/p>
&lt;hr>
&lt;p>접근 지시자를 적절하게 사용하면, 타입을 패키지로 배치하는 방식에 다라서 각 타입에 접근할 수 있는 정도가 실제로 크게 달라질 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/34/img_4.png"
width="631"
height="487"
srcset="https://codemario318.github.io/post/clean-architecture/34/img_4_hub59749830694f830b27427b6082c0095_105897_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/34/img_4_hub59749830694f830b27427b6082c0095_105897_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;ol>
&lt;li>계층 기반 패키지 접근법
&lt;ul>
&lt;li>&lt;code>OrdersService&lt;/code>, &lt;code>OrdersRepository&lt;/code> 인터페이스는 외부 패키지의 클래스로부터 자신이 속한 패키지 내부로 들어오는 의존성으로 &lt;code>public&lt;/code> 으로 선언되어야하지만, 구체 클래스는 누구도 알 필요가 없는 구현 세부사항이므로 &lt;code>protected&lt;/code>로 선언할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>기능 기반 패키지 접근법
&lt;ul>
&lt;li>&lt;code>OrdersController&lt;/code>가 패키지로 들어올 수 있는 유일한 통로를 제공하므로 나머지 패키지는 &lt;code>protected&lt;/code>로 지정할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>포트와 어댑터 접근법
&lt;ul>
&lt;li>&lt;code>OrdersService&lt;/code>와 &lt;code>Orders&lt;/code> 인터페이스는 외부로부터 들어오는 의존성을 가지므로 &lt;code>public&lt;/code>으로 지정해야한다.&lt;/li>
&lt;li>구현 클래스 패키지는 &lt;code>protected&lt;/code>로 지정하며, 런타임에 의존성을 주입할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>컴포넌트 기반 패키지
&lt;ul>
&lt;li>컨트롤러에서 &lt;code>OrdersComponent&lt;/code> 인터페이스로 향하는 의존성을 가지며, 그 외의 모든 것은 패키지 &lt;code>protected&lt;/code>로 지정할 수 있다.&lt;/li>
&lt;li>패키지 외부의 코드에서는 &lt;code>OrdersRepository&lt;/code> 인터페이스나 구현체를 직접 사용할 수 있는 방법이 전혀 없으므로 컴파일러를 통해 아키텍처를 강제할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>아키텍처 원칙을 강제할 때 컴파일러의 도움을 받아 그렇게 할 수 밖에 없도록 만들어야 한다.&lt;/p>
&lt;p>모든 코드가 하나의 소스 코드 트리로 존재하는 모노리틱 애플리케이션이라면 큰 도움이 될 것이다.&lt;/p>
&lt;h2 id="다른-결합-분리-모드">다른 결합 분리 모드&lt;/h2>
&lt;p>프로그래밍 언어가 제공하는 방법 외에도 소스 코드 의존성을 분리하는 방법은 존재할 수 있다.&lt;/p>
&lt;ul>
&lt;li>모듈 시스템(ex. 자바 OSGI)&lt;/li>
&lt;li>소스코드 수준에서 의존성을 분리하는 방법
&lt;ul>
&lt;li>&lt;strong>서로 다른 소스 코드 트리로 분리하는 방법&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="결론-빠져있는-조언">결론: 빠져있는 조언&lt;/h2>
&lt;p>최적의 설계를 꾀했더라도, 구현 전략에 얽힌 복잡함을 고려하지 않으면 설계가 순식간에 망가질 수도 있다.&lt;/p>
&lt;ul>
&lt;li>설계를 어떻게 해야만 원하는 코드 구조로 매핑할 수 있을지&lt;/li>
&lt;li>코드를 어떻게 조직화 할지&lt;/li>
&lt;li>런타임과 컴파일타입에 어떤 결합 분리 모드를 적용할지&lt;/li>
&lt;/ul>
&lt;p>위와 같은 내용을 고민해야하며, 선택사항을 열어두되 실용주의적으로 행해야한다.&lt;/p>
&lt;ul>
&lt;li>팀의 규모, 기술 수준, 해결책의 복잡성을 일정과 예산이라는 제약과 동시에 고려해야한다.&lt;/li>
&lt;li>선택된 아키텍처 스타일을 강제하는 데 컴파일러의 도움을 받을 수 있을지 고민해야한다.&lt;/li>
&lt;li>데이터 모델과 같은 다른 영역에 결합되지 않도록 주의해야한다.&lt;/li>
&lt;/ul>
&lt;p>구현 세부사항에는 항상 문제가 있는 법이다.&lt;/p></description></item><item><title>33. 사례연구: 비디오 판매</title><link>https://codemario318.github.io/post/clean-architecture/33/</link><pubDate>Fri, 19 Apr 2024 15:27:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/33/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/33/cover.png" alt="Featured image of post 33. 사례연구: 비디오 판매" />&lt;p>짧고 단순한 사례를 통해 뛰어난 아키텍트가 일을 처리하는 과정과 결정을 내리는 모습을 살펴보자.&lt;/p>
&lt;h2 id="제품-비디오-판매-웹-서비스">제품: 비디오 판매 웹 서비스&lt;/h2>
&lt;ul>
&lt;li>판매하길 원하는 비디오들이 있고, 개인과 기업에게 웹을 통해 판매한다.&lt;/li>
&lt;li>개인은 단품 가격을 지불해 스트리밍으로 본다.&lt;/li>
&lt;li>개인은 더 높은 가격을 지불하여 비디오를 다운로드해서 영구 소장할 수 있다.&lt;/li>
&lt;li>기업용 라이선스는 스트리밍 전용이다.&lt;/li>
&lt;li>기업용 라이선스로 대량 구매시 할인을 받을 수 있다.&lt;/li>
&lt;li>개인은 시청자인 동시에 구매자&lt;/li>
&lt;li>기업은 다른 사람들이 시청할 비디오를 구매하는 사람이 따로 있다.&lt;/li>
&lt;li>비디오 제작자는 비디오 파일과 설명서, 부속 파일(시험, 문제, 해법, 소스 코드 등)을 제공한다.&lt;/li>
&lt;li>관리자는 신규 비디오 시리즈물을 추가한다.&lt;/li>
&lt;li>관리자는 기존 시리즈물에 비디오를 추가 도는 삭제한다.&lt;/li>
&lt;li>관리자는 다양한 라이선스에 맞춰 가격을 책정한다.&lt;/li>
&lt;/ul>
&lt;h2 id="유스케이스-분석">유스케이스 분석&lt;/h2>
&lt;p>주요 액터는 구매자, 시청자, 제작자, 관리자 네 가지이다.&lt;/p>
&lt;p>단일 책임 원칙에 따라 네 액터가 시스템이 변경되어야 할 네 가지 주요 근원이 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/33/img.png"
width="709"
height="700"
srcset="https://codemario318.github.io/post/clean-architecture/33/img_huc3fc667673246b20a35a0a0b5773b4d6_306180_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/33/img_huc3fc667673246b20a35a0a0b5773b4d6_306180_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="101"
data-flex-basis="243px"
>&lt;/p>
&lt;p>신규 기능 추가나, 기존 기능 변경의 이유는 액터 중 하나에게 해당 기능을 제공하기 위함이므로, 시스템을 분할하여 특정 액터를 위한 변경이 나머지 액터에게는 전혀 영향을 미치지 않게 만들어야한다.&lt;/p>
&lt;p>중앙 점선으로 된 유스케이스는 추상 유스케이스이다.&lt;/p>
&lt;p>추상 유스케이스는 범용적인 정책을 담고 있으며, 다른 유스케이스에서 이를 더 구체화한다.&lt;/p>
&lt;p>시청자 입장에서 카탈로그 조회하기와 구매자 입장에서 카탈로그 조회하기 유스케이스는 모두 카탈로그 조회하기라는 추상 유스케이스를 상속받는다.&lt;/p>
&lt;ul>
&lt;li>이 추상 유스케이스를 다이어그램에서 없애더라도 전체 제품의 기능을 조금도 손상시키지 않지만, 이들 두 유스케이스는 너무 비슷하기 때문에, 유사성을 식별하여 분석 초기에 통합하는 방법을 찾는 방법이 더 현명하다고 판단하였다.&lt;/li>
&lt;/ul>
&lt;h2 id="컴포넌트-아키텍처">컴포넌트 아키텍처&lt;/h2>
&lt;p>액터와 유스케이스를 식별했으므로, 예비 단계의 컴포넌트 아키텍처를 만들어 볼 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/33/img_1.png"
width="642"
height="478"
srcset="https://codemario318.github.io/post/clean-architecture/33/img_1_hue0ddbb544a7f722e559ab09d7f8f1c4f_121162_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/33/img_1_hue0ddbb544a7f722e559ab09d7f8f1c4f_121162_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="322px"
>&lt;/p>
&lt;p>이중으로 된 선은 아키텍처 경계를 나타낸다.&lt;/p>
&lt;ul>
&lt;li>뷰 프레젠터, 인터랙터, 컨트롤러로 분리된 전형적이 분할 방법을 활용했다.&lt;/li>
&lt;li>대응하는 액터에 다라 카테고리를 분리했다.&lt;/li>
&lt;/ul>
&lt;p>특수한 컴포넌트인 &lt;code>Catalog View&lt;/code>와 &lt;code>Catalog Presenter&lt;/code>는 &lt;strong>카탈로그 조회하기&lt;/strong>라는 추상 유스케이스를 처리하는 방식으로 뷰와 프레젠터는 해당 컴포넌트 내부에 추상 클래스로 코드화될 것이며, 상속받는 컴포넌트에서는 이를 추상클래스로부터 상속받은 뷰와 프레젠터 클래스들을 포함한다.&lt;/p>
&lt;p>시스템을 이러한 컴포넌트들로 모두 분할한다면, 모든 컴포넌트를 분할해서 여러개의 &lt;code>.jar&lt;/code> 등 파일로 전달할 수도 있고 모두 한 파일로도 합칠 수 있다.&lt;/p>
&lt;p>이는 선택지를 열어두는 것이며, 선택지를 열어두면, 시스템이 변경되는 양상에 맞춰 시스템 배포 방식을 조정할 수 있다.&lt;/p>
&lt;h2 id="의존성-관리">의존성 관리&lt;/h2>
&lt;p>위 그림에서 제어흐름은 오른족에서 왼쪽으로 이동한다.&lt;/p>
&lt;ol>
&lt;li>입력이 컨트롤러에서 발생&lt;/li>
&lt;li>인터렉터에 의해 처리되어 결과가 만들어짐&lt;/li>
&lt;li>프레젠터가 결과의 포멧을 변경&lt;/li>
&lt;li>뷰가 화면에 표시&lt;/li>
&lt;/ol>
&lt;p>대부분의 화살표가 왼쪽에서 오른쪽으로 향하는데, 이는 아키텍처가 의존성 규칙을 준수하기 때문이다.&lt;/p>
&lt;p>모든 의존성은 경계선을 한 방향으로만 즉, 항상 더 높은 수준의 정책을 포함하는 컴포넌트로 향해야한다.&lt;/p>
&lt;p>사용 관계(열린 화살표)는 제어흐름과 같은 방향을 가리키며, 상속 관계(닫힌 화살표)는 제어흐름과는 반대 방향을 가르키는데, 이는 개방 폐쇄 원칙을 적용했음을 보여준다.&lt;/p>
&lt;p>이를 통해 의존성이 올바른 방향으로 흐르며, 저수준의 세부사항에서 발생한 변경이 상위로 파급되어 상위 수준의 정책에 영향을 미치지는 않음을 보장할 수 있다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>그림으로 확인할 수 있는 단일 책임 원칙에 기반한 액터의 분리와 의존성 규칙 모두 서로 다른 이유로, 서로 다른 속도로 변경되는 컴포넌트를 분리하는 데 그 목적이 있다.&lt;/p>
&lt;ul>
&lt;li>서로 다른 이유라는 것은 액터와 관련이 있다.&lt;/li>
&lt;li>서로 다른 속도라는 것은 정책 수준과 관련이 있다.&lt;/li>
&lt;/ul>
&lt;p>이러한 방식으로 코드를 한번 구조화하고 나면 시스템을 실제로 배포하는 방식은 다양하게 선택할 수 있게된다.&lt;/p></description></item><item><title>32. 프레임워크는 세부사항이다</title><link>https://codemario318.github.io/post/clean-architecture/32/</link><pubDate>Thu, 18 Apr 2024 19:42:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/32/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/32/cover.png" alt="Featured image of post 32. 프레임워크는 세부사항이다" />&lt;p>아무리 해도 프레임워크는 아키텍처가 될 수 없다.&lt;/p>
&lt;h2 id="프레임워크-제작자">프레임워크 제작자&lt;/h2>
&lt;p>프레임워크 제작자는 자신이 해결해야 할 고유한 문제를 위해 프레임워크를 제작한 것 이므로, 내가 풀려는 문제와 완벽하게 일치할수는 없다.&lt;/p>
&lt;h2 id="혼인-관계의-비대칭성">혼인 관계의 비대칭성&lt;/h2>
&lt;p>프레임워크 제작자와 사용자의 관계는 놀라울 정도로 비대칭 적이며 프레임워크 제작자는 당신에게 프레임워크와 혼인하기를 요구하는 것 처럼 보인다.&lt;/p>
&lt;p>프레임워크 제작자는 당신의 애플리케이션이 가능하면 프레임워크에 공고하게 결합될 것을 강하게 역설한다.&lt;/p>
&lt;p>이러한 결합은 제작자에게는 위험 요소가 되지 않으며, 프레임워크에대해 절대적인 제어권을 쥐고 있는 입장에서 오히려 프레임워크와 결합되기를 바란다.&lt;/p>
&lt;p>한술 더 떠 제작자는 사용자도 프레임워크에 결합되어 관계를 깨지 못하는 것을 기대하고 있다.&lt;/p>
&lt;p>제작자는 프레임워크에대해 장시간에 걸친 헌신을 요청하지만, 그에 상응하는 헌신을 받을수 는 없을 것이다.&lt;/p>
&lt;p>모든 위험과 부담은 당신이 감수할 뿐, 제작자가 감수하는 건 아무것도 없다.&lt;/p>
&lt;h2 id="위험요인">위험요인&lt;/h2>
&lt;p>&lt;strong>프레임워크의 아키텍처는 깔끔하지 않은 경우가 많다.&lt;/strong> &lt;br>
프레임워크는 의존성 규칙을 위반하는 경향이 있다.&lt;/p>
&lt;ul>
&lt;li>업무 객체를 만들 때 프레임워크 코드를 상속할 것을 요구한다.&lt;/li>
&lt;li>고유한 엔티티에 코드가 상속되면 애플리케이션의 가장 안쪽 원과 프레임워크의 결합이 발생한다.&lt;/li>
&lt;/ul>
&lt;p>프레임워크가 한번 원 안으로 들어가버리면 다시는 원 밖으로 나오지 않을 것이다.&lt;/p>
&lt;p>&lt;strong>결국 싸우게된다.&lt;/strong>&lt;/p>
&lt;p>프레임워크가 애플리케이션의 초기 기능을 만드는데 도움이 될 것이지만, 제품이 성숙해지면서 프레임워크가 제공하는 기능과 틀을 벗어나게 될 것이다.&lt;/p>
&lt;p>&lt;strong>앞으로의 변화&lt;/strong>&lt;/p>
&lt;p>프레임워크는 애플리케이션에게 도움되지 않는 방향으로 진화할 수도 있다.&lt;/p>
&lt;p>&lt;strong>더 나은 프레임워크&lt;/strong>&lt;/p>
&lt;p>새롭고 더 나은 프레임워크가 등장해서 갈아타고 싶을 수도 있다.&lt;/p>
&lt;h2 id="해결책">해결책&lt;/h2>
&lt;blockquote>
&lt;p>프레임워크와 결혼하지 말라!&lt;/p>
&lt;/blockquote>
&lt;p>프레임워크를 사용할 수는 있지만 결합해서는 안된다.&lt;/p>
&lt;p>프레임워크는 아키텍처의 바깥쪽 원에 속하는 세부사항으로 취급해야한다.&lt;/p>
&lt;p>업무 객체를 만들 때 프레임워크가 자신의 기반 클래스로부터 파생하기를 요구한다면, 프락시를 만들고, 업무 규칙에 플러그인할 수 있는 컴포넌트에 이 프락시를 위치시켜 프레임워크가 핵심 코드 안으로 들어오지 못하게 해야한다.&lt;/p>
&lt;p>대신 핵심 코드에 플러그인할 수 있는 컴포넌트에 프레임워크를 통합하고, 의존성 규칙을 준수한다.&lt;/p>
&lt;h2 id="이제-선언합니다">이제 선언합니다.&lt;/h2>
&lt;p>애플리케이션이 프레임워크와 결혼하고자 한다면 애플리케이션의 남은 생애 동안 그 프레임워크와 항상 함께 해야 한다는 사실을 반드시 명심해야한다.&lt;/p>
&lt;p>결코 가볍게 시작할 수 있는 관계가 아니다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>프레임워크와의 첫 만남부터 바로 결혼하려 들지 말라.&lt;/p>
&lt;p>가급적이면 프레임워크를 가능한 한 오랫동안 아키텍처 경계 너머에 두자.&lt;/p></description></item><item><title>31. 웹은 세부사항이다</title><link>https://codemario318.github.io/post/clean-architecture/31/</link><pubDate>Thu, 18 Apr 2024 19:07:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/31/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/31/cover.png" alt="Featured image of post 31. 웹은 세부사항이다" />&lt;h2 id="끝없이-반복하는-추">끝없이 반복하는 추&lt;/h2>
&lt;p>1960년대 이래로 모든 연산 능력을 중앙 서버에 두는 방식과 모든 연산 능력을 단말에 두는 방식 사이의 일련의 반복되는 진동을 겪어왔으며 웹은 진동 끝 한 점에 있을 뿐이다.&lt;/p>
&lt;p>IT 역사 전체로 시야를 넓히면 웹은 아무것도 바꾸지 않았으며, 이러한 진동은 앞으로도 지속될것이다.&lt;/p>
&lt;p>따라서 아키텍트로서 이 진동은 핵심 업무 규칙의 중심에서 밀어내야하는 단기적인 문제일 뿐이다.&lt;/p>
&lt;p>이러한 진동은 GUI의 변경을 동반하며, 이러한 변경으로부터 애플리케이션을 보호하기 위해 GUI로부터 업무 규칙을 분리해야한다.&lt;/p>
&lt;h2 id="요약">요약&lt;/h2>
&lt;p>GUI는 세부사항이다. 웹은 입 출력 장치의 다른 모습이므로 GUI이며, 이러한 이유로 웹은 세부사항이다.&lt;/p>
&lt;p>따라서 아키텍트는 웹을 핵심 업무 로직에서 분리된 경계 바깥에 두어야한다.&lt;/p>
&lt;p>애플리케이션과 GUI의 상호작용은 빈번하고 방식도 사용중인 GUI 종류에 따라 차이가 크기 때문에 추상화하려는 시도는 성공할 가능성이 낮아 보인다.&lt;/p>
&lt;p>하지만 UI와 애플리케이션 사이에는 추상화가 가능한 또 다른 경계가 존재한다.&lt;/p>
&lt;ul>
&lt;li>업무 로직은 다수의 유스케이스로 구성되며, 각 유스케이스는 사용자를 대신해서 일부 함수를 수행하는 것을 볼 수 있다.&lt;/li>
&lt;li>각 유스케이스는 입력 데이터 수행할 처리 과정, 출력 데이터를 기반으로 기술할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>완전한 입력 데이터&lt;/strong>와 그에 따른 &lt;strong>출력 데이터&lt;/strong>는 데이터 구조로 만들어서 유스케이스를 실행하는 처리 과정의 입력 값과 출력 값으로 사용할 수 있기 때문에, &lt;strong>각 유스케이스가 장치 독립적인 방식으로 UI라는 입출력 장치를 동작시킨다&lt;/strong>고 간주할 수 있다.&lt;/p>
&lt;p>이러한 입력 데이터와 그에 따른 출력 데이터로 만들어지는 데이터 구조는 UI와 애플리케이션 사이의 경계를 넘나드는 수단이므로 추상화가 가능한 경계이다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>이러한 종류의 추상화는 만들기 쉽지 않고, 제대로 만들려면 수차례의 반복 과정을 거쳐야 할 것이다.&lt;/p>
&lt;p>하지만 이러한 추상화는 가능하며, 변경이 될 요소는 매우 많기 때문에 추상화는 꼭 필요하다.&lt;/p></description></item><item><title>30. 데이터베이스는 세부사항이다</title><link>https://codemario318.github.io/post/clean-architecture/30/</link><pubDate>Thu, 18 Apr 2024 16:19:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/30/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/30/cover.png" alt="Featured image of post 30. 데이터베이스는 세부사항이다" />&lt;p>아키텍처 관점에서 볼 때 데이터베이스는 엔티티가 아니다.&lt;/p>
&lt;p>데이터 모델과는 달리 아키텍처 관점에서는 데이터베이스는 세부사항이라서 아키텍처의 구성요소 수준으로 끌어올릴 수 없다.&lt;/p>
&lt;p>데이터베이스는 소프트웨어일 뿐이며, 데이터에 접근할 방법을 제공하는 유틸리티이다.&lt;/p>
&lt;p>유틸리티는 저수준 세부사항(메커니즘)일 뿐 아키텍처와는 관계 없으므로, 데이터베이스를 이용한다는 사실이 아키텍처에 영향을 주지 않아야한다.&lt;/p>
&lt;h2 id="관계형-데이터베이스">관계형 데이터베이스&lt;/h2>
&lt;p>관계형 테이블은 특정한 형식의 데이터에 접근하는 경우에 편리함을 제공하지만, 데이터를 테이블에 행 단위로 배치한다는 자체는 아키텍처적으로 볼 때 전혀 중요하지 않다.&lt;/p>
&lt;p>따라서 (관계형 데이터베이스에 저장된)데이터가 테이블 구조를 가진다는 사실은 오직 아키텍처의 외부 원에 위치한 최하위 수준의 유틸리티 함수만 알아야한다.&lt;/p>
&lt;p>소프트웨어에서 테이블과 행을 허용한다면, 유스케이스, 업무 규칙, UI조차도 관계형 데이터 구조에 결합되어버린다.&lt;/p>
&lt;h2 id="데이터베이스-시스템은-왜-이렇게-널리-사용되는가">데이터베이스 시스템은 왜 이렇게 널리 사용되는가?&lt;/h2>
&lt;p>데이터 저장 공간의 한계로 디스크를 사용할 수 밖에 없었기 때문이다.&lt;/p>
&lt;p>디스크의 단점은 느리다는 점 인데, 이로인해 발생하는 성능 저하 완화를 위한 색인, 캐시, 쿼리 계획 최적화가 필요해졌다.&lt;/p>
&lt;p>색인, 캐시, 쿼리 계획을 위해 작업중인 대상이 어떤 데이터인지 알 수 있어야 했으므로 데이터를 표현하는 일종의 표준적인 방식도 필요했고, 시간이 흘러 파일 시스템과 관계형 데이터베이스 관리 시스템(RDBMS) 2가지 유형으로 분리되었다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>파일 시스템&lt;/strong>&lt;/p>
&lt;p>문서(document) 기반 시스템으로, 문서 전체를 자연스럽고 편리하게 저장하는 방법을 제공한다.&lt;/p>
&lt;p>문서를 이름을 기준으로 저장하거나 조회할 때는 잘 동작하지만, 내용을 기준으로 검색할 때는 크게 도움되지 않는다.&lt;/p>
&lt;p>&lt;strong>데이터베이스 시스템&lt;/strong>&lt;/p>
&lt;p>내용 기반 시스템으로 내용을 기반으로 레코드를 자연스럽고 편리하게 찾는 방법을 제공한다.&lt;/p>
&lt;p>레코드가 서로 공유하는 일부 내용에 기반해서 다수의 레코드를 연관 짓는 데 매우 탁월하지만, 정형화되지 않은 문서를 저장하고 검색하는 데는 대체로 부적합하다.&lt;/p>
&lt;hr>
&lt;p>각 시스템은 데이터를 디스크에 체계화하고 특화된 방식으로 데이터를 저장하고 검색할 수 있도록 하며, 성능을 높히기 위해 데이터를 색인하고 RAM에 배치하는 고유한 전략을 활용한다.&lt;/p>
&lt;h2 id="디스크가-없다면-어떻게-될까">디스크가 없다면 어떻게 될까?&lt;/h2>
&lt;p>디스크는 RAM으로 대체되고있다.&lt;/p>
&lt;p>모든 데이터가 RAM에 저장된다면 데이터들을 연결 리스트, 트리, 해시 테이블, 스택, 큐 와 같은 데이터 구조로 체계화 될 것이며, 데이터에 접근할 때는 포인터나 참조를 활용할 것이다.&lt;/p>
&lt;p>데이터가 데이터베이스나 파일 시스템에 있더라도, RAM으로 읽은 후에는 다루기 편리한 형태로 그 구조로 변경하는데, 이는 프로그래머가 하는 일로 그대로 하면 된다.&lt;/p>
&lt;h2 id="세부사항">세부사항&lt;/h2>
&lt;p>데이터가 파일 시스템이나 데이터베이스 시스템을 통해 저장된다고 하더라도 결과적으로 실제 데이터를 처리할 때는 사용하기 편한 방식(자료구조)으로 처리하여 RAM에 올려 사용하게 된다.&lt;/p>
&lt;p>이처럼 데이터베이스는 디스크와 RAM 사이에서 데이터를 옮길 때 사용할 뿐인 메커니즘이고, 데이터를 장기적으로 저장하는 공간일 뿐이다.&lt;/p>
&lt;p>따라서 아케텍처 관점에서 본다면 데이터베이스는 세부사항이므로, 데이터가 어떤 형태로 어디에 저장되어있는지 인식해서는 안된다.&lt;/p>
&lt;h2 id="하지만-성능은">하지만 성능은?&lt;/h2>
&lt;p>데이터 저장소 측면에서 성능은 완전히 캡슐화하여 업무 규칙과는 분리할 수 있는 관심사이다.&lt;/p>
&lt;p>데이터 저장소에서 데이터를 빠르게 넣고 뺄 수 있어야 하는 것은 맞지만, 이는 저수준 관심사로 저수준의 데이터 매커니즘 단에서 다뤄야한다.&lt;/p>
&lt;ul>
&lt;li>인덱스 등&lt;/li>
&lt;/ul>
&lt;p>따라서 데이터 저장소의 성능은 시스템의 전반적인 아케텍처와는 관계가 없다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>체계화된 데이터 구조와 데이터 모델은 아키텍처적으로 중요한 반면, 데이터를 디스크에서 이리 저리 옮길 뿐인 기술과 시스템은 아키텍처적으로 중요하지 않다.&lt;/p>
&lt;p>데이터를 테이블 구조로 만들고 SQL로만 접근하도록 하는 관계형 데이터베이스 시스템은 후자와 관련이 깊으므로 아키텍처적으로 종요하지 않다.&lt;/p>
&lt;p>데이터는 중요하나, 데이터베이스는 세부사항이다.&lt;/p></description></item><item><title>28. 테스트 경계</title><link>https://codemario318.github.io/post/clean-architecture/28/</link><pubDate>Mon, 15 Apr 2024 18:17:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/28/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/28/cover.png" alt="Featured image of post 28. 테스트 경계" />&lt;p>테스트는 시스템의 일부이며, 아키텍처에도 관여한다.&lt;/p>
&lt;h2 id="시스템-컴포넌트인-테스트">시스템 컴포넌트인 테스트&lt;/h2>
&lt;p>아키텍처 관점에서는 어떠한 종류에 테스트이든 동일하다.&lt;/p>
&lt;p>테스트는 태생적으로 의존성 규칙을 따른다.&lt;/p>
&lt;ul>
&lt;li>테스트는 세부적이며 구체적이다.&lt;/li>
&lt;li>따라서 의존성은 항상 테스트 대상이 되는 코드를 향한다.(아키텍처의 가장 바깥쪽 원으로 볼 수 있다.)&lt;/li>
&lt;li>시스템 내부의 어떤 것도 테스트에는 의존하지 않는다.&lt;/li>
&lt;li>독립적으로 배포 가능하다.&lt;/li>
&lt;li>시스템 컴포넌트 중에서 가장 고립되어 있다.&lt;/li>
&lt;li>시스템 운영에 꼭 필요치는 않다.&lt;/li>
&lt;li>테스트의 역할은 운영이 아니라 개발을 지원하는 것이므로, 어떤 사용자도 테스트에 의존하지 않는다.&lt;/li>
&lt;/ul>
&lt;p>그렇다고 하더라도 테스트가 시스템 컴포넌트가 아니라는 뜻은 아니며, 다른 모든 시스템 컴포넌트가 반드시 지켜야하는 모델을 표현해준다.&lt;/p>
&lt;h2 id="테스트를-고려한-설계">테스트를 고려한 설계&lt;/h2>
&lt;p>테스트의 극단적인 고립성이 대체로 배포하지 않는다는 사실과 어우러져, 테스트가 시스템의 설계 범위 밖에 있다고 착각한다.&lt;/p>
&lt;p>테스트가 시스템 설계와 잘 통합되지 않으면, 테스트는 깨지기 쉬워지고, 시스템은 뻣뻣해져서 변경하기가 어려워진다.&lt;/p>
&lt;p>&lt;strong>깨지기 쉬운 테스트 문제(Fragile Tests Problem)&lt;/strong>&lt;/p>
&lt;p>시스템에 강하게 결합된 테스트라면 시스템이 변경될 때 함께 변경되어야하므로, 시스템 컴포넌트에 생긴 아주 사소한 변경도, 이와 결합된 수많은 테스트를 망가뜨릴 수 있다.&lt;/p>
&lt;p>시스템의 공통 컴포넌트가 변경되면 수백, 심지어 수천 개의 테스트가 망가진다.&lt;/p>
&lt;hr>
&lt;p>깨지기 쉬운 테스트는 시스템을 뻣뻣하게 만든다는 부작용을 낳을 때가 많다.&lt;/p>
&lt;ul>
&lt;li>시스템에 가한 간단한 변경이 대량의 테스트 실패로 이어진다는 사실을 알게되면, 개발자는 변경을 하지 않으려고 할 것이다.&lt;/li>
&lt;/ul>
&lt;p>따라서 이러한 문제를 해결하기 위해 테스트를 고려한 설계가 필요하다.&lt;/p>
&lt;p>핵심은 &lt;strong>변동성이 있는 것에 의존하지 않는 것&lt;/strong>이다.&lt;/p>
&lt;p>변동성이 큰 GUI같은 것으로 시스템을 조작하는 테스트 스위트는 깨지기 쉽기 때문에 시스템과 테스트를 설계할 때 GUI를 사용하지 않고 업무 규칙을 테스트 할 수 있게 해야한다.&lt;/p>
&lt;h2 id="테스트-api">테스트 API&lt;/h2>
&lt;p>변동성이 적은 방식으로 업무 규칙을 테스트하기 위해 모든 업무 규칙을 검증하는 데 사용할 수 있도록 특화된 API를 만든다.&lt;/p>
&lt;ul>
&lt;li>보안 제약 사항을 무시할 수 있어야 한다.&lt;/li>
&lt;li>데이터베이스와 같은 값비싼 자원은 건너뛰고, 시스템을 테스트 가능한 특정 상태로 강제하는 강력한 힘을 지녀야한다.&lt;/li>
&lt;li>사용자 인터페이스가 사용하는 &lt;strong>인터렉터&lt;/strong>와 &lt;strong>인터페이스 어댑터&lt;/strong>들의 상위 집합이 될 것이다.&lt;/li>
&lt;/ul>
&lt;p>테스트 API는 테스트를 애플리케이션으로부터 분리할 목적으로 사용한다.&lt;/p>
&lt;h3 id="구조적-결합">구조적 결합&lt;/h3>
&lt;p>구조적 결합은 테스트 결합 중에서 가장 강하며, 가장 은밀하게 퍼져나가는 유형이다.&lt;/p>
&lt;p>모든 상용 클래스에 테스트 클래스가 각각 존재하고, 모든 상용 메서드에 테스트 메서드 집합이 각각 존재하는 테스트 스위트가 있다고 가정할 때 이러한 테스트 스위트는 애플리케이션 구조에 강하게 결합되어있다.&lt;/p>
&lt;ul>
&lt;li>상용 클래스나 메서드 중 하나라도 변경되면 딸려있는 다수의 테스트가 변경되어야한다.&lt;/li>
&lt;li>테스트는 깨지기 위워지고, 이로 인해 상용 코드를 뻣뻣하게 만든다.&lt;/li>
&lt;/ul>
&lt;p>테스트 API의 역할은 애플리케이션의 구조를 테스트로부터 숨기는 데 있다.&lt;/p>
&lt;ul>
&lt;li>상용 코드를 리펙터링하거나 진화시키더라도 테스트에는 전혀 영향을 주지 않는다.&lt;/li>
&lt;li>테스트를 리펙터링 하거나 진화시킬 때도 사용 코드에는 영향을 주지 않는다.&lt;/li>
&lt;/ul>
&lt;p>시간이 지날수록 테스트는 계속해서 더 구체적이고 특화된 형태로 변하고, 상용 코드는 더 추상적이고 범용적인 형태로 변하기 때문에 따로따로 진화할 수 있다는 점은 필수적이다.&lt;/p>
&lt;p>하지만 구조적 결합이 강하면 위와 같은 진화 과정을 방해한다.&lt;/p>
&lt;h3 id="보안">보안&lt;/h3>
&lt;p>테스트 API를 운영 시스템에 배포하면 위험에 처할 수 있다.&lt;/p>
&lt;p>테스트 API 자체와 테스트 API 중 위험한 부분의 구현부를 독립적으로 배포할 수 있는 컴포넌트로 분리해야한다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>테스트는 시스템의 일부이다.&lt;/p>
&lt;p>따라서 테스트에서 기대하는 안정성과 회귀의 이점을 얻을 수 있으려면 테스트는 잘 설계 돼야만한다.&lt;/p>
&lt;p>테스트를 시스템의 일부로 설계하지 않으면 테스트는 깨지기 쉽고 유지보수하기 어려워지는 경향이 있으며, 이러한 테스트는 유지보수하기 힘들기 때문에 버려지는 최후를 맡는다.&lt;/p></description></item><item><title>27. 크고 작은 모든 서비스들</title><link>https://codemario318.github.io/post/clean-architecture/27/</link><pubDate>Mon, 15 Apr 2024 17:13:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/27/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/27/cover.png" alt="Featured image of post 27. 크고 작은 모든 서비스들" />&lt;p>서비스 지향 아키텍처와 마이크로서비스 아키텍처는 최근에 큰 인기를 끌고 있는데 이유는 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>서비스를 사용하면 상호 결합이 철저하게 분리되는 것처럼 보인다.&lt;/li>
&lt;li>서비스를 사용하면 개발과 배포 독립성을 지원하는 것처럼 보인다.&lt;/li>
&lt;/ul>
&lt;h2 id="서비스-아키텍처">서비스 아키텍처?&lt;/h2>
&lt;p>서비스를 사용한다는 것이 본질적으로 아키텍처에 해당하는지에 대해 생각해보면 명백히 사실이 아니다.&lt;/p>
&lt;p>시스템의 아키텍처는 의존선 규칙을 준수하며 고수준의 정책을 저수준의 세부사항으로부터 분리하는 경계에 의해 정의된다.&lt;/p>
&lt;p>이러한 관점에서 애플리케이션의 행위를 분리할 뿐인 서비스라면 값비싼 함수 호출에 불과하며, 아키텍처 관점에서 꼭 중요하다고 볼 수는 없다.&lt;/p>
&lt;p>기능을 프로세스나 플랫폼에 독립적이 되게끔 서비스들을 생성하면 의존성 규칙 준수 여부와 상관 없이 큰 도움이 될 때가 많으나, 서비스 그 자체로는 아키텍처를 정의하지 않는다.&lt;/p>
&lt;p>위에 언급한대로 시스템에서 아키텍처를 정의하는 요소는 의존성 규칙을 따르며 아키텍처 경계를 넘나드는 행위 자체이며, 결국 서비스는 프로세스나 플랫폼 경계를 가로지르는 함수 호출에 지나지 않는다고 볼 수 있다.&lt;/p>
&lt;h2 id="서비스의-이점">서비스의 이점?&lt;/h2>
&lt;p>많은 사람들이 생각하는 서비스의 이점에 대해 아키텍처 관점의 근본적인 문제를 살펴보면 이러한 부분들이 완벽한 해결책은 아님을 알 수 있다.&lt;/p>
&lt;h3 id="결합-분리의-오류">결합 분리의 오류&lt;/h3>
&lt;p>시스템을 서비스들로 분리함으로써 얻게 되리라 예상되는 큰 이점중 하나는 &lt;strong>서비스 사이의 결합이 확실히 분리된다는 점&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>각 서비스는 서로 다른 프로세스에서 실행되므로 서비스는 다른 서비스의 변수에 직접 접근이 불가능하다.&lt;/li>
&lt;li>모든 서비스의 인터페이스는 반드시 잘 정의되어 있어야 한다.&lt;/li>
&lt;/ul>
&lt;p>서비스들이 변수를 통해 직접 접근할 수는 없지만 프로세서 내의 또는 네트워크 상의 공유 자원과 이로 인한 공유하는 데이터에 의해 서비스들이 강력하게 결합된다.&lt;/p>
&lt;ul>
&lt;li>서비스 사이를 오가는 데이터 레코드에 새로운 필드를 추가하면, 이 필드를 사용하는 모든 서비스는 반드시 변경되어야한다.&lt;/li>
&lt;li>필드에 담긴 데이터를 해석하는 방식을 사전에 완벽하게 조율해야 한다.&lt;/li>
&lt;/ul>
&lt;p>이로 인해 서비스들은 레코드에 강하게 결합되고, 서비스들 사이는 서로 간접적으로 결합되어버린다.&lt;/p>
&lt;h3 id="개발-및-배포-독립성의-오류">개발 및 배포 독립성의 오류&lt;/h3>
&lt;p>전담팀이 서비스를 소유하고 운영하게 되므로 각자 개발 및 배포할 수 있게되어 &lt;strong>확장 가능한&lt;/strong>, 확장이 용이한 구조라고 생각하지만, 서비스는 확장 가능한 시스템을 구축하는 유일한 선택지가 아니다.&lt;/p>
&lt;ul>
&lt;li>모노리틱 시스템이나 컴포넌트 기반 시스템으로도 확장 가능한 시스템을 구축할 수 있다는 사실이 역사적으로 증명되어왔다.&lt;/li>
&lt;/ul>
&lt;p>결합 분리 오류에서 언급한 내용을 토대로 살펴보면 서비스라고 해서 항상 독립적으로 개발, 배포, 운영할 수 있는 것은 아니며, 결합된 정도에 맞게 조정해야한다.&lt;/p>
&lt;h2 id="야옹이-문제">야옹이 문제&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/27/img.png"
width="1393"
height="574"
srcset="https://codemario318.github.io/post/clean-architecture/27/img_huc93515613977e36e214e87cb871aaccb_354737_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/27/img_huc93515613977e36e214e87cb871aaccb_354737_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="242"
data-flex-basis="582px"
>&lt;/p>
&lt;p>이전에 예시로 들었던 택시 통합 시스템을 수많은 작은 마이크로 서비스를 기반으로 구축했다.&lt;/p>
&lt;p>이러한 아키텍처에서 야옹이 배달 서비스를 런칭하겠다고 가정한다.&lt;/p>
&lt;p>&lt;strong>요구사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>사용자는 집이나 사무실로 야옹이를 배달해달라고 주문할 수 있다.
&lt;ul>
&lt;li>야옹이를 태울 다수의 승차 지점을 설정해야한다.&lt;/li>
&lt;li>승차 지점 중 한 곳에서 야옹이를 태운 후, 올바른 주로소 야옹이를 배달해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>제약사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>운전자가 고양이 알러지가 있는 경우 해당 운전자는 이 서비스에서 제외되어야한다.&lt;/li>
&lt;li>일반 택시 승객이 알러지가 있을 수 있으므로, 배차를 신청한 고객이 알러지가 있다면, 야옹이를 배달했던 차량은 배차에서 제외한다.&lt;/li>
&lt;/ul>
&lt;p>서비스 다이어그램을 살펴봤을 때 마이크로서비스들은 모두 결합되어 있어 독립적으로 개발하고 배포하거나 유지할 수 없다.&lt;/p>
&lt;p>따라서 야옹이 배달 기능을 추가하려면 구성된 모든 마이크로서비스를 변경해야 한다.&lt;/p>
&lt;p>이는 횡단 관심사(Cross-Cutting Concern)가 지닌 문제로 기능적 분해는 새로운 기능이 기능적 행위를 횡단하는 상황에서 매우 취약하다.&lt;/p>
&lt;h2 id="객체가-구출하다">객체가 구출하다&lt;/h2>
&lt;p>SOLID 설계원칙에서, 다향적으로 확장할 수 있는 클래스 집합을 생성해 새로운 기능을 처리하도록 한다.&lt;/p>
&lt;p>이를 통해 컴포넌트 아키텍처에서는 아래와 같은 전략을 활용할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/27/img_1.png"
width="1418"
height="1356"
srcset="https://codemario318.github.io/post/clean-architecture/27/img_1_hu5da0ee89e3d37864338935723ad5c1a6_654243_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/27/img_1_hu5da0ee89e3d37864338935723ad5c1a6_654243_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;p>원래 서비스 로직 중 대다수가 이 객체 모델의 기반 클래스들 내부로 녹아들었다.&lt;/p>
&lt;ul>
&lt;li>배차에 특화된 로직 부분은 &lt;code>Rides&lt;/code> 컴포넌트로 추출되었다.&lt;/li>
&lt;li>야옹이에 대한 신규 기능은 &lt;code>Kittens&lt;/code> 컴포넌트에 들어있다.&lt;/li>
&lt;li>이 두 컴포넌트는 기존 컴포넌트들에 있는 추상 기반 클래스를 템플릿 메서드나 전략 패턴 등을 이용해서 오버라이드한다.&lt;/li>
&lt;li>신규 컴포넌트 &lt;code>Rides&lt;/code>, &lt;code>Kittens&lt;/code>가 의존성 규칙을 준수한다.&lt;/li>
&lt;li>이 기능을 구현하는 클래스들은 UI의 제어 하에 팩토리가 생성한다.&lt;/li>
&lt;/ul>
&lt;p>이 전략을 따르더라도 야옹이 기능을 구현하려면 &lt;code>TaxiUI&lt;/code>는 변경해야 하지만, 그 외의 것들은 변경할 필요가 없다.&lt;/p>
&lt;p>따라서 야옹이 기능은 결합이 분리되며, 독립적으로 개발하여 배포할 수 있다.&lt;/p>
&lt;h2 id="컴포넌트-기반-서비스">컴포넌트 기반 서비스&lt;/h2>
&lt;p>서비스가 반드시 소규모 단일체(monolith)일 이유는 없다.&lt;/p>
&lt;p>서비스는 SOLID 원칙대로 설계할 수 있으며 컴포넌트 구조를 갖출 수도 있다.&lt;/p>
&lt;p>java의 경우 서비스를 하나 이상의 &lt;code>jar&lt;/code> 파일에 포함되는 &lt;strong>추상 클래스들의 집합&lt;/strong>이라고 생각할 수 있다.&lt;/p>
&lt;p>새로운 기능 추가 혹은 기능 확장은 기존 &lt;code>jar&lt;/code> 파일에 정의돈 추상 클래스들을 확장하여 새로운 &lt;code>jar&lt;/code> 파일로 만든다면, 새로운 기능 배포는 서비스를 재배포하는 문제가 아니라, 서비스를 로드하는 경로에 단순히 새로운 &lt;code>jar&lt;/code> 파일을 추가하는 문제가 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/27/img_2.png"
width="1404"
height="1024"
srcset="https://codemario318.github.io/post/clean-architecture/27/img_2_huc3c601dcdc257ffe66a5f4dc26dbb7e2_569311_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/27/img_2_huc3c601dcdc257ffe66a5f4dc26dbb7e2_569311_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/p>
&lt;p>각 서비스의 내부는 자신만의 컴포넌트 설계로 되어 있어서 파생 클래스를 만드는 방식으로 신규 기능을 추가할 수 있다.&lt;/p>
&lt;h2 id="횡단-관심사">횡단 관심사&lt;/h2>
&lt;p>아키텍처 경계는 서비스 사이에 있지 않고 오히려 서비스를 관통하며, 서비스를 컴포넌트 단위로 분할한다.&lt;/p>
&lt;p>모든 주요 시스템이 직면하는 횡단 관심사를 처리하려면, 서비스 내부는 의존성 규칙도 준수하는 컴포넌트 아키텍처로 설계해야한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/27/img_3.png"
width="1426"
height="639"
srcset="https://codemario318.github.io/post/clean-architecture/27/img_3_hu56c1406b520655ab8ea4c66d27f42c03_210561_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/27/img_3_hu56c1406b520655ab8ea4c66d27f42c03_210561_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="535px"
>&lt;/p>
&lt;p>서비스들은 시스템의 아키텍처 경계를 정의하지 않으며, 아키텍처 경계를 정의하는 것은 서비스 내에 위치한 컴포넌트이다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>서비스는 시스템의 확정성과 개발 가능성 측면에서 유용하지만, 그 자체로는 아키텍처적으로 그리 중요한 요소는 아니다.&lt;/p>
&lt;p>시스템의 아키텍처는 구성 요소가 통신하고 실행되는 물리적인 매커니즘에 의해 아키텍처가 정의되는 것이 아닌, 시스템 내부에 그어진 경계와 경계를 넘나드는 의존성에 의해 정의된다.&lt;/p>
&lt;ul>
&lt;li>서비스는 단 하나의 아케텍처 경계로 둘러싸인 단일 컴포넌트로 만들 수 있다.&lt;/li>
&lt;li>여러 아키텍처 경계로 분리된 다수의 컴포넌트로 구성할 수도 있다.&lt;/li>
&lt;li>클라이언트와 서비스가 강하게 결합되어 아키텍처적으로 아무런 의미가 없을 때도 있다.&lt;/li>
&lt;/ul></description></item><item><title>26. 메인 컴포넌트</title><link>https://codemario318.github.io/post/clean-architecture/26/</link><pubDate>Mon, 15 Apr 2024 16:48:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/26/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/26/cover.png" alt="Featured image of post 26. 메인 컴포넌트" />&lt;p>모든 시스템에는 최소한 하나의 컴포넌트가 존재하여 나머지 컴포넌트를 생성, 조정, 관리하는데 이러한 컴포넌트를 메인 컴포넌트라 한다.&lt;/p>
&lt;h2 id="궁극적인-세부사항">궁극적인 세부사항&lt;/h2>
&lt;p>메인 컴포넌트는 &lt;strong>궁극적인 세부사항&lt;/strong>으로, 가장 낮은 수준의 정책이다.&lt;/p>
&lt;ul>
&lt;li>시스템의 초기 진입점이다.&lt;/li>
&lt;li>운영체제를 제외하면 어떤 것도 메인에 의존하지 않는다.&lt;/li>
&lt;/ul>
&lt;p>메인은 모든 팩토리(Factory)와 전략(Strategy), 시스템 전반을 담당하는 나머지 기발 설비를 생성한 후, 시스템에서 더 높은 수준을 담당하는 부분으로 제어권을 넘긴다.&lt;/p>
&lt;hr>
&lt;p>의존성 주입 프레임워크를 이용해 의존성을 주입하는 일은 메인 컴포넌트에서 이뤄져야 한다.&lt;/p>
&lt;p>메인에 의존성이 주입되고 나면, 의존성 주입 프레임워크를 사용하지 않고도 일반적인 방식으로 의존성을 분배할 수 있어야한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">game&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">HtwFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeGame&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;htw.game.HuntTheWumpusFacade&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Main&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">createMap&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BufferdReader&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">BufferedReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">InputStreamReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">in&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeRestCommand&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">excute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPlayerCavern&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Health: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">hitPoints&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; arrows: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getQuiver&lt;/span>&lt;span class="o">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HuntTheWumpus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Command&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeRestCommand&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;&amp;gt;&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">br&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readLine&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;e&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EAST&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WEST&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">NORTH&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;s&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SOUTH&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sw&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">WEST&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;se&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EAST&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sn&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EAST&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ss&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">game&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">makeMoveCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SOUTH&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">command&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equalsIgnoreCase&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;q&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">excute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>HtwFactory&lt;/code>를 사용하여 게임을 생성할 때, &lt;code>htw.game.HuntTheWumpusFacade&lt;/code>라는 클래스 이름을 문자열로 전달하는데, 이는 이 클래스가 변경이 매우 많은 지저분한 클래스이므로, 문자열을 통해 참조하도록 하여 직접 참조하지 않게 하여 변경이 생겨도 메인을 재컴파일/재배포하지 않게 만들기 위함이다.&lt;/p>
&lt;p>입력 스티름 생성 부분, 게임의 메인 루프 처리, 간단한 입력 명령어 해석 등은 모두 &lt;code>main()&lt;/code>에서 처리하지만, 명령어를 실제로 처리하는 일은 다른 고수준 컴포넌트로 위임한다.&lt;/p>
&lt;hr>
&lt;p>메인은 클린 아키텍처에서 가장 바깥 원에 위치하는, 지저분한 저수준 모듈이다.&lt;/p>
&lt;p>메인은 고수준의 시스템을 위한 모든 것을 로드한 후, 제어권을 고수준의 시스템에게 넘긴다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>메인을 초기 조건과 성정을 구성하고, 외부 자원을 모두 수집한 후 제어권을 애플리케이션의 고수준 정책으로 넘기는 플러그인이다.&lt;/p>
&lt;p>메인은 플러그인이므로 메인 컴포넌트를 애플리케이션의 설정별로 하나씩 두로록 하여 둘 이상의 메인 컴포넌트를 만들 수도 있다.&lt;/p>
&lt;ul>
&lt;li>개발용 메인 플러그인&lt;/li>
&lt;li>테스트용 메인 플러그인&lt;/li>
&lt;li>국가별 플러그인&lt;/li>
&lt;li>관할 영역 별 플러그인&lt;/li>
&lt;li>고객별 플러그인 등&lt;/li>
&lt;/ul>
&lt;p>메인을 플러그인 컴포넌트로 여기고 아키텍처 경계 바깥에 위치한다고 보면 설정 관련 문제를 훨씬 쉽게 해결할 수 있다.&lt;/p></description></item><item><title>25. 계층과 경계</title><link>https://codemario318.github.io/post/clean-architecture/25/</link><pubDate>Thu, 04 Apr 2024 09:16:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/25/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/25/cover.png" alt="Featured image of post 25. 계층과 경계" />&lt;p>단순한 시스템에서는 UI, 업무 규칙, 데이터베이스 컴포넌트만으로도 충분하지만, 대다수의 시스템에서 컴포넌트의 개수는 이보다 훨씬 많다.&lt;/p>
&lt;p>이에 따라 컴포넌트간 경계도 훨씬 많이질 수 밖에 없다.&lt;/p>
&lt;p>아키텍처 경계는 어디에나 존재하며, 아키텍트는 아키텍처 경계가 언제 필요한지를 신중하게 파악해내야한다.&lt;/p>
&lt;p>이러한 경계를 제대로 구현하는 비용은 크며, 경계가 무시되었다면 나중에 다시 추가하는 비용도 매우 크다.&lt;/p>
&lt;p>오버 엔지니어링이 언더 엔지니어링보다 나쁠 때가 훨씬 많으므로 XP의 원칙인 &lt;strong>YAGNI&lt;/strong>가 말하는 것 처럼 추상화가 필요하리라고 미리 예측해서는 안 된다.&lt;/p>
&lt;p>하지만, 경계가 존재하지 않는 상황에서 경계가 필요하다는 것을 깨닳고 추가하려면 비용이 매우 많이 들고 큰 위험을 감수해야한다.&lt;/p>
&lt;hr>
&lt;p>이처럼 소프트웨어 아키텍트는 여러 상황들을 적절히 고려하여 소프트웨어가 어떻게 발전할지 예측해야한다.&lt;/p>
&lt;p>이를 통해 완벽하게 구현할 경계와 부분적으로 구현할 경계, 무시할 경계가 무엇인지 결정해야만 한다.&lt;/p>
&lt;p>그렇지만 프로젝트 초반에는 경계를 쉽게 결정할 수 없기 때문에 한번에 정해지는 것은 아니므로, 시스템이 발전함에 따라 주의를 기울여야한다.&lt;/p>
&lt;ul>
&lt;li>경계가 필요할 수 있는 부분에 주목한다.&lt;/li>
&lt;li>경계가 존재하지 않아 생기는 마찰의 첫 조짐을 신중하게 관찰한다.
&lt;ul>
&lt;li>경계를 구현하는 비용가 무시할 때 감수할 비용을 가늠해본다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>결정된 사항을 자주 검토한다.&lt;/li>
&lt;/ul>
&lt;p>경계의 구현 비용이 그것을 무시하여 생기는 비용보다 적어지는 시점에 경계를 구현해야하며, 적절한 시점에 경계를 구현하기 위해 빈틈없이 지켜봐야한다.&lt;/p></description></item><item><title>24. 부분적 경계</title><link>https://codemario318.github.io/post/clean-architecture/24/</link><pubDate>Thu, 04 Apr 2024 08:49:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/24/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/24/cover.png" alt="Featured image of post 24. 부분적 경계" />&lt;p>아키텍처 경계를 완벽하게 만드는 데는 엄청난 노력을 기율여야 하고, 유지하는 데도 엄청난 노력이 든다.&lt;/p>
&lt;ul>
&lt;li>쌍방향의 다형적 &lt;code>Boundary&lt;/code> 인터페이스&lt;/li>
&lt;li>&lt;code>Input&lt;/code>, &lt;code>Output&lt;/code>을 위한 데이터 구조&lt;/li>
&lt;li>두 영역을 독립적으로 컴파일하고 배포할 수 있는 컴포넌트로 격리하는 데 필요한 모든 의존성 관리&lt;/li>
&lt;/ul>
&lt;p>많은 경우에 이러한 경계를 만드는 비용이 크다고 판단하면서도, 필요한 작업만 해야한다는 XP 원칙인 &lt;strong>YAGNI&lt;/strong>(You Aren&amp;rsquo;t going to Need It)을 위배하며 나중에 필요할 것이라 예상대는 것들에 대한 대비하길 원한다.&lt;/p>
&lt;p>이렇게 필요할 것으로 예상되는 것을 꼭 대비해야 한다면 완벽한 경계가 아닌 &lt;strong>부분적 경계&lt;/strong>(Patial boundary)를 활용해 볼 수 있다.&lt;/p>
&lt;h2 id="마지막-단계를-건너-뛰기">마지막 단계를 건너 뛰기&lt;/h2>
&lt;p>독립적으로 컴파일하고 배포할 수 있는 컴포넌트를 만들기 위한 작업은 모두 수행한 후, 단일 컴포넌트에 그대로 모아만 두는 방법이다.&lt;/p>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>다수의 컴포넌트를 관리하는 작업을 하지 않아도 된다.&lt;/li>
&lt;li>추적을 위한 버전 번호도 필요없다.&lt;/li>
&lt;li>배포 관리 부담이 없다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>부분적 경계를 만들기 위해 완벽한 경계를 만들 때 만큼의 코드량과 사전 설계가 필요하다.&lt;/li>
&lt;li>시간이 흐르며 별도로 분리한 컴포넌트가 재사용될 가능성이 전혀 없을 것임이 명백해지는 경우가 있다.&lt;/li>
&lt;li>시간이 흐르며 컴포넌트 사이의 구분이 점점 약화된다.&lt;/li>
&lt;/ul>
&lt;h2 id="일차원-경계">일차원 경계&lt;/h2>
&lt;p>완벽한 형태의 아키텍처 경계는 양방향으로 격리된 상태를 유지해야 하므로 쌍방향 &lt;code>Boundary&lt;/code> 인터페이스를 사용하는데, 이러한 형태는 초기 설정할 때나 지속적으로 유지할 때도 비용이 많이 든다.&lt;/p>
&lt;p>이러한 경우 추후 완벽한 형태의 경계로 확장할 수 있는 공간을 확보하고자 할 때, 전통적인 전략 패턴을 사용하여 간단한 구조를 활용해 볼 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/24/img.png"
width="720"
height="292"
srcset="https://codemario318.github.io/post/clean-architecture/24/img_huf66003e0682ccdb8f85feab7e684d52d_81657_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/24/img_huf66003e0682ccdb8f85feab7e684d52d_81657_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="591px"
>&lt;/p>
&lt;p>&lt;code>Client&lt;/code>를 &lt;code>ServiceImpl&lt;/code>로 부터 격리시키는 데 필요한 의존성 역전이 적용되었기 때문에 미래에 필요한 아키텍처 경계를 대비할 수 있다.&lt;/p>
&lt;p>하지만 이러한 형태의 분리는 쌍방향 인터페이스가 없고 개발자와 아키텍트의 능력에 따라, 점선과 같은 비밀 통로가 생기는 일을 막을 방법이 없다.&lt;/p>
&lt;h2 id="퍼사드">퍼사드&lt;/h2>
&lt;p>더 단순한 경계는 퍼사드 패턴으로, 이 경우에는 의존성 역전까지 희생한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/24/img_1.png"
width="720"
height="299"
srcset="https://codemario318.github.io/post/clean-architecture/24/img_1_huda7c855c7c3463c0aff875896060fffa_46486_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/24/img_1_huda7c855c7c3463c0aff875896060fffa_46486_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="240"
data-flex-basis="577px"
>&lt;/p>
&lt;p>경계는 &lt;code>Facade&lt;/code> 클래스로만 간단히 전의되며, 모든 서비스 클래스를 메서드 형태로 정의하고, 서비스 호출이 발생하면 서비스 클래스로 호출을 전달한다.&lt;/p>
&lt;p>클라이언트는 서비스 클래스에 직접 접근할 수 없지만, &lt;code>Client&lt;/code>가 이 모든 서비스 클래스에 대해 추이 종속성을 가지게 된다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>추이 종속성&lt;/strong>&lt;br>
A 모듈이 B 모듈에 의존하고, B 모듈이 C 모듈에 의존한다고 가정할 때, A 모듈은 직접적으로는 C 모듈에 의존하지 않지만, B 모듈을 통해 C 모듈에 간접적으로 의존하는 형태&lt;/p>
&lt;/blockquote>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>아키텍처 경계를 부분적으로 구현하는 방법은 많다.&lt;/p>
&lt;p>이러한 접근법은 각각 나름의 비용과 장점을 지니며, 완벽한 형태의 경계를 담기 위한 공간으로써 적절하게 사용할 수 있는 상황이 서로 다르다.&lt;/p>
&lt;p>부분적인 경계는 추후에 완벽한 형태의 경계가 실제로 구체화되지 않으면 가치가 떨어질 수 있다.&lt;/p></description></item><item><title>23. 프레젠터와 험블 객체</title><link>https://codemario318.github.io/post/clean-architecture/23/</link><pubDate>Wed, 03 Apr 2024 22:31:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/23/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/23/cover.png" alt="Featured image of post 23. 프레젠터와 험블 객체" />&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/23/img.png"
width="772"
height="567"
srcset="https://codemario318.github.io/post/clean-architecture/23/img_hudd764f775c86d6d6fb1802d465c14dac_405598_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/23/img_hudd764f775c86d6d6fb1802d465c14dac_405598_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>프레젠터는 험블 객체(Humble Object) 패턴을 따른 형태로, 아키텍처 경계를 식별하고 보호하는 데 도움이 된다.&lt;/p>
&lt;h2 id="험블-객체-패턴">험블 객체 패턴&lt;/h2>
&lt;p>험블 객체 패턴은 디자인 패턴으로, 테스트하기 어려운 행위와 테스트하기 쉬운 행위를 단위 테스트 작성자가 분리하기 쉽게 하는 방법으로 고안되었다.&lt;/p>
&lt;ul>
&lt;li>행위들을 두 개의 모듈 또는 클래스로 나눈다.&lt;/li>
&lt;li>가장 기본적인 본질은 남기고, 테스트하기 어려운 행위를 모두 험블 객체로 옮긴다.&lt;/li>
&lt;li>나머지 모듈에는 험블 객체에 속하지 않은, 테스트하기 쉬운 행위를 모두 옮긴다.&lt;/li>
&lt;/ul>
&lt;h2 id="프레젠터와-뷰">프레젠터와 뷰&lt;/h2>
&lt;p>GUI는 화면에서 각 요소가 필요한 위치에 적절히 표시되었는지 테스트 해야하므로 작성하기 어려운 반면, GUI에서 수행하는 행위의 대다수는 쉽게 테스트할 수 있다.&lt;/p>
&lt;p>험블 객체 패턴을 사용하면 두 부류의 행위를 분리하여 프레젠터와 뷰라는 서로 다른 클래스로 만들 수 있다.&lt;/p>
&lt;p>&lt;strong>뷰&lt;/strong>&lt;br>
뷰는 데이터를 GUI로 이동시키지만, 데이터를 직접 처리하지는 않는다.&lt;/p>
&lt;ul>
&lt;li>험블 객체이고 테스트하기 어렵다.&lt;/li>
&lt;li>포함된 코드를 가능한 간단하게 유지한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>프레젠터&lt;/strong>&lt;br>
애플리케이션으로 부터 데이터를 받아 화면에 표현할 수 있는 포멧으로 만든다.&lt;/p>
&lt;ul>
&lt;li>뷰가 데이터를 받아 화면에 전달하는 간단한 일만 처리하도록 만들어준다.&lt;/li>
&lt;li>테스트하기 쉬워진다.&lt;/li>
&lt;/ul>
&lt;p>뷰는 뷰 모델의 데이터를 화면으로 로드할 뿐이며, 이 외에 뷰가 맡은 역할은 전혀 없기 때문에 뷰는 보잘것없다(Humble)&lt;/p>
&lt;h2 id="테스트와-아키텍처">테스트와 아키텍처&lt;/h2>
&lt;p>테스트 용이성은 좋은 아키텍처가 지녀야 할 속성으로 오랫동안 알려저 왔다.&lt;/p>
&lt;p>험블 객체 패턴은 테스트하기 쉬운 부분과 테스트하기 어려운 부분으로 분리하여 아키텍처 경계를 정의하므로 테스트가 용이하다.&lt;/p>
&lt;p>즉, 아키텍처에 험블 객체 패턴을 적절히 활용하면 프레젠터와 뷰와 같이 테스트가 용이한 구조를 만들 수 있다.&lt;/p>
&lt;h2 id="데이터베이스-게이트웨이">데이터베이스 게이트웨이&lt;/h2>
&lt;p>유스케이스 인터랙터와 데이터베이스 사이에는 데이터베이스 게이트웨이(데이터베이스의 쿼리를 처리하는 모든 메서드가 포함)가 위치한다.&lt;/p>
&lt;p>유스케이스 레이어는 SQL을 허용하지 않아야 하므로 필요한 메서드를 제공하는 게이트웨이 인터페이스를 호출하게 되는데, 이 때 데이터베이스 레이어에 존재하는 &lt;strong>인터페이스의 구현체&lt;/strong>가 험블 객체이다.&lt;/p>
&lt;p>이와 달리 인터랙터는 애플리케이션에 특화된 업무 규칙을 캡슐화화기 때문에 험블 객체가 아니기 때문에 게이트웨이는 가짜 데이터(Mock, stub, test-double, fake)를 통해서도 테스트를 할 수 있으므로 테스트하기 쉬워진다.&lt;/p>
&lt;h2 id="데이터-매퍼">데이터 매퍼&lt;/h2>
&lt;p>하이버네이트와 같은 ORM은 어느 계층에 속하는가?&lt;/p>
&lt;p>ORM 시스템은 데이터베이스 레이어에 위치하며 게이트웨이 인터페이스와 데이터베이스 사이의 일종에 또 다른 험블 객체 경계를 형성한다.&lt;/p>
&lt;ul>
&lt;li>사용자 관점에서 객체는 공개된 메서드만 볼 수 있으므로, 단순히 오퍼레이션의 집합이다.&lt;/li>
&lt;li>&lt;strong>데이터 구조&lt;/strong>는 함축된 행위를 가지지 않는 공개된 변수의 집합이다.&lt;/li>
&lt;/ul>
&lt;p>객체는 데이터 구조가 아니기 때문에, 사실 객체 관계 매퍼(Object Relational Mapper, ORM)는 관계형 데이터베이스 테이블로부터 가져온 데이터를 데이터 구조에 맞게 담아주는 역할을 수행하므로 사실 데이터 매퍼라고 볼 수 있다.&lt;/p>
&lt;h2 id="서비스-리스너">서비스 리스너&lt;/h2>
&lt;p>서비스에서도 험블 객체 패턴을 발견할 수 있다.&lt;/p>
&lt;p>애플리케이션은 데이터를 간단한 데이터 구조 형태로 로드한 후, 이 데이터 구조를 경계를 거슬러 특정 모듈로 전달하고, 데이터 구조를 전달받은 모듈이 적절한 포맷으로 만들어 외부 서비스로 전송하게 된다.&lt;/p>
&lt;p>외부로부터 데이터를 수신하는 서비스는 서비스 리스너가 서비스 인터페이스로부터 데이터를 수신하고, 데이터를 애플리케이션에서 사용할 수 있게 간단한 데이터 구조로 포맷을 변경하여 서비스 경계를 가로질러 내부로 전달된다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>아키텍처 경계마다 험블 객체 패턴을 발견할 수 있다.&lt;/p>
&lt;p>경계를 넘나드는 통신은 거의 모두 간단한 데이터 구조를 수반할 때가 많고, 대개 그 경계는 테스트하기 어려운 무언가와 테스트하기 쉬운 무언가로 분리된다.&lt;/p>
&lt;p>이러한 아키텍처 경계에서 험블 객체 패턴을 사용하면 전체 시스템의 테스트 용이성을 크게 높일 수 있다.&lt;/p></description></item><item><title>22. 클린 아키텍처</title><link>https://codemario318.github.io/post/clean-architecture/22/</link><pubDate>Wed, 03 Apr 2024 16:22:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/22/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/22/cover.png" alt="Featured image of post 22. 클린 아키텍처" />&lt;ul>
&lt;li>육각형 아키텍처(Hexagonal Architecture)&lt;/li>
&lt;li>DCI(Data, Context and Interaction)&lt;/li>
&lt;li>BCE(Boundary-Control-Entity)&lt;/li>
&lt;/ul>
&lt;p>위와 같은 아키텍처들의 목적은 &lt;strong>관심사의 분리&lt;/strong>(Separation of concerns)이다.&lt;/p>
&lt;p>소프트웨어를 계층으로 분리함으로써 관심사의 분리라는 목표를 달성할 수 있었다.&lt;/p>
&lt;p>각 아키텍처는 최소한 업무 규칙을 위한 계층 하나와, 사용자와 시스템 인터페이스를 위한 또 다른 계층 하나를 반드시 포함하며, 시스템이 다음과 같은 특징을 가지도록 만든다.&lt;/p>
&lt;ul>
&lt;li>프레임워크 독립성&lt;/li>
&lt;li>테스트 용이성&lt;/li>
&lt;li>UI 독립성&lt;/li>
&lt;li>데이터베이스 독립성&lt;/li>
&lt;li>모든 외부 에이전시에 대한 독립성&lt;/li>
&lt;/ul>
&lt;h2 id="의존성-규칙">의존성 규칙&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/22/img.png"
width="772"
height="567"
srcset="https://codemario318.github.io/post/clean-architecture/22/img_hudd764f775c86d6d6fb1802d465c14dac_405598_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/22/img_hudd764f775c86d6d6fb1802d465c14dac_405598_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="136"
data-flex-basis="326px"
>&lt;/p>
&lt;p>그림의 각 동원은 소프트웨어의 서로 다른 영역을 표현하는데, 안으로 들어갈수록 고수준의 소프트웨어가 된다.(바깥쪽은 메커니즘, 안쪽은 정책)&lt;/p>
&lt;p>이러한 아키텍처가 동작하도록 하는 가장 중요한 규칙은 소스 코드 의존성은 반드시 안쪽으로, 고수준의 정책을 향해야 한다는 &lt;strong>의존성 규칙&lt;/strong>(Dependency Rule)이다.&lt;/p>
&lt;ul>
&lt;li>내부의 원에 속한 요소는 외부의 원에 속한 어떤 것도 알지 못한다.
&lt;ul>
&lt;li>함수, 클래스, 변수, 엔티티 등&lt;/li>
&lt;li>외부의 원에 선언된 데이터 형식도 내부의 원에서 절대 사용해서는 안된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>외부 원에 위치한 어떤 것도 내부 원에 영향을 주지 않아야한다.&lt;/p>
&lt;h3 id="엔티티">엔티티&lt;/h3>
&lt;p>엔티티는 전사적인 핵심 업무 규칙을 캡슐화한 것이다.(단순한 단일 애플리케이션이라면 애플리케이션의 업무 객체)&lt;/p>
&lt;ul>
&lt;li>메서드를 가지는 객체&lt;/li>
&lt;li>일련의 데이터 구조와 함수의 집합&lt;/li>
&lt;/ul>
&lt;p>기업의 다양한 애플리케이션에서 엔티티를 재사용할 수만 있다면, 그 형태는 그다지 중요하지 않다.&lt;/p>
&lt;p>운영 관점에서 특정 애플리케이션에 무언가 변경이 필요하더라도 엔티티 계층에는 절대로 영향을 주어서는 안 된다.&lt;/p>
&lt;h3 id="유스케이스">유스케이스&lt;/h3>
&lt;p>유스케이스 계층의 소프트웨어는 애플리케이션에 특화된 업무 규칙을 포함하며, 시스템의 모든 유스케이스를 캡슐화하고 구현한다.&lt;/p>
&lt;ul>
&lt;li>엔티티로 들어오고 나가는 데이터 흐름을 조정한다.&lt;/li>
&lt;li>엔티티가 자신의 핵심 업무 규칙을 사용해서 유스케이스의 목적을 달성하도록 이끈다.&lt;/li>
&lt;/ul>
&lt;p>유스케이스 레이어를 잘 격리하여 발생한 변경이 엔티티에 영향을 줘서는 안될 뿐만 아니라, 외부 요소에서 발생한 변경이 이 계층에 영향을 줘서도 안된다.&lt;/p>
&lt;p>유스케이스 레이어는 아래와 같은 상황에서만 영향을 받아야한다.&lt;/p>
&lt;ul>
&lt;li>운영 관점에서 애플리케이션이 변경되어 유스케이스 자체가 영향을 받은 경우&lt;/li>
&lt;li>유스케이스의 세부 사항이 변경된 경우&lt;/li>
&lt;/ul>
&lt;h3 id="인터페이스-어댑터">인터페이스 어댑터&lt;/h3>
&lt;p>인터페이스 어댑터 레이어는 일련의 어댑터들(Controllers, Gateways, Presenters)로 구성된다.&lt;/p>
&lt;p>어댑터는 데이터를 유스케이스와 엔티티에게 가장 편리한 형식에서 데이터베이스나 웹 같은 외부 에이전시에게 가장 편리한 형식으로 변환한다.&lt;/p>
&lt;ul>
&lt;li>ex) GUI의 MVC 아키텍처&lt;/li>
&lt;/ul>
&lt;p>모델은 데이터 구조 정도에 지나지 않으며, 컨트롤러에서 유스케이스로 전달되고, 다시 유스케이스에서 프레젠터와 뷰로 되돌아간다.&lt;/p>
&lt;p>인터페이스 어댑터 레이어는 데이터를 엔티티와 유스케이스에게 가장 편리한 형식에서 영속성용으로 사용 중인 임의의 프레임워크(ex. DB)가 이용하기에 가장 편리한 형식으로 변환한다.&lt;/p>
&lt;p>또한 데이터를 외부 서비스와 같은 외부적인 형식에서 유스케이스나 엔티티에서 사용되는 내부적인 형식으로 변환하는 또 다른 어댑터가 필요하다.&lt;/p>
&lt;h3 id="프레임워크와-드라이버">프레임워크와 드라이버&lt;/h3>
&lt;p>가장 바깥 레이어인 프레임워크와 드라이버 레이어는 모든 세부사항이 위치하는 곳으로, 일반적으로 데이터베이스나 웹 프레임워크 같은 프레임워크나 도구들로 구성된다.&lt;/p>
&lt;p>이 계층에서는 안쪽 원과 통신하기 위한 접합 코드 외에는 특별히 더 작성해야 할 코드가 그다지 많지 않다.&lt;/p>
&lt;p>웹, 데이터베이스와 같은 세부사항을 모두 외부에 위치시켜서 피해를 최소화한다.&lt;/p>
&lt;h3 id="원은-네-개여야만-하는가">원은 네 개여야만 하는가?&lt;/h3>
&lt;p>그림의 원들은 하나의 예시일 뿐이며 더 많은 원이 필요할 수 있다.&lt;/p>
&lt;p>하지만 어떤 경우에도 &lt;strong>의존성 규칙&lt;/strong>은 적용된다.&lt;/p>
&lt;ul>
&lt;li>소스코드 의존성은 항상 안족을 향한다.&lt;/li>
&lt;li>안쪽으로 이동할수록 추상화와 정책의 수준은 높아진다.&lt;/li>
&lt;li>가장 바깥쪽 원은 저수준의 구체적인 세부사항으로 구성된다.&lt;/li>
&lt;li>안쪽으로 이동할수록 소프트웨어는 점점 추상화되고 더 높은 수준의 정책들을 캡슐화한다.&lt;/li>
&lt;/ul>
&lt;h3 id="경계-횡단하기">경계 횡단하기&lt;/h3>
&lt;p>위 예시에서 컨트롤러와 프레젠터가 다음 계층에 속한 유스케이스와 통신하는 모습을 확인할 수 있다.&lt;/p>
&lt;ol>
&lt;li>컨트롤에서 시작&lt;/li>
&lt;li>유스케이스를 지남&lt;/li>
&lt;li>프레젠터에서 실행&lt;/li>
&lt;/ol>
&lt;p>유스케이스가 내부 원의 인터페이스를 호출하도록 하고, 외부 원의 프레젠터가 그 인터페이스를 구현하도록 만들어 의존성 흐름을 역전시켰다.&lt;/p>
&lt;p>이처럼 제어흐름과 의존성의 방향이 명백히 반대여야 하는 경우, 의존성 역전 원칙을 사용하여 해결한다.&lt;/p>
&lt;ul>
&lt;li>인터페이스와 상속 관계 등&lt;/li>
&lt;/ul>
&lt;p>아키텍처 경계를 횡단할 때 언제라도 동일한 기법을 사용할 수 있다.&lt;/p>
&lt;h3 id="경계를-횡단하는-데이터는-어떤-모습인가">경계를 횡단하는 데이터는 어떤 모습인가?&lt;/h3>
&lt;p>경계를 가로지르는 데이터는 흔히 간단한 데이터 구조로 이루어져 있다.&lt;/p>
&lt;ul>
&lt;li>기본적인 구조체, 간단한 데이터 전송 객체(DTO) 등&lt;/li>
&lt;li>함수 호출 시 간단한 인자&lt;/li>
&lt;li>해시맵, 객체&lt;/li>
&lt;/ul>
&lt;p>중요한 점은 엔티티 객체나 데이터베이스의 행을 전달하는 것이 아닌 격리되어 있는 간단한 데이터 구조가 경계를 가로질러 전달되어야 한다.&lt;/p>
&lt;p>위와 같은 경우 결과적으로 어떠한 형태로든 전달되는 데이터 구조를 통해 내부의 원에서 외부 원의 무언가를 알게 되므로 의존성 규칙을 위배하게된다.&lt;/p>
&lt;p>따라서 경계를 가로질러 데이터를 전달할 때, 데이터는 항상 내부의 원에서 사용하기에 가장 편리한 형태를 가져야한다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>위와같은 간단한 규칙들을 준수하는 것은 어렵지 않으며, 향후에 겪을 수많은 고통거리를 덜어준다.&lt;/p>
&lt;p>소프트웨어를 계층으로 분리하고 의존성 규칙을 준수한다면 본질적으로 테스트하기 쉬운 시스템을 만들게 될 것이며, 그에 다른 이점을 누릴 수 있다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스나 프레임워크와 같은 시스템의 외부 요소를 교체하더라도 훨씬 수월해진다.&lt;/li>
&lt;/ul></description></item><item><title>21. 소리치는 아키텍처</title><link>https://codemario318.github.io/post/clean-architecture/21/</link><pubDate>Tue, 02 Apr 2024 16:19:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/21/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/21/cover.png" alt="Featured image of post 21. 소리치는 아키텍처" />&lt;p>건물의 청사진을 살펴본다고 가정했을 때, 커다란 정문, 체크인과 체크아웃을 담당할 사서를 위한 공간, 독서 공간, 작은 회의실, 책장을 배치한 진열실이 나타난다면, 이 아키텍처는 &amp;ldquo;도서관&amp;quot;을 위한 아키텍처임을 예상해볼 수 있다.&lt;/p>
&lt;p>이처럼 잘 만들어진 소프트웨어 아키텍처라면 상위 수준의 디렉터리 구조, 최상위 패키지에 담긴 소스 파일등을 살펴보면 어떠한 역할을 수행하는 소프트웨어인지 한눈에 파악할 수 있다.&lt;/p>
&lt;h2 id="아키텍처의-테마">아키텍처의 테마&lt;/h2>
&lt;blockquote>
&lt;p>소프트웨어 아키텍처는 시스템의 유스케이스를 지원하는 구조이다.&lt;br>
- 이바 야콥슨 Ivar Jacobson,&lt;br>
Object-Oriented Software Engineering: Use Case Driven Approach&lt;/p>
&lt;/blockquote>
&lt;p>소프트웨어 애플리케이션의 아키텍처도 애플리케이션의 유스케이스에 대해 소리처야한다.&lt;/p>
&lt;ul>
&lt;li>아키텍처는 프레임워크에 대한 것이 아니며 절대로 그래서도 안된다.&lt;/li>
&lt;li>아키텍처를 프레임워크로부터 제공받아서는 절대 안된다.&lt;/li>
&lt;/ul>
&lt;p>프레임워크는 사용하는 도구일 뿐, 아키텍처가 준수해야 할 대상이 아니다.&lt;/p>
&lt;p>아키텍처를 프레임워크 중심으로 만들어버리면 유스케이스가 중심이 되는 아키텍처는 절대 나올 수 없다.&lt;/p>
&lt;h2 id="아키텍처의-목적">아키텍처의 목적&lt;/h2>
&lt;p>좋은 아키텍처는 유스케이스를 그 중심에 두기 때문에, 프레임워크나 도구, 환경에 전혀 구애받지 않고 유스케이스를 지원하는 구조를 아무런 문제 없이 기술할 수 있다.&lt;/p>
&lt;ul>
&lt;li>건물의 청사진의 관심사는 목적에 맞는 공간임을 확실히 하는 것이지, 어떤 기법, 재질로 지어지는지 확인하는 것이 아니다.&lt;/li>
&lt;/ul>
&lt;p>좋은 소프트웨어 아키텍처는 유스케이스에 중점을 두며, 지엽적인 관심사에 대한 결합을 분리시켜 개발 환경 문제나 도구에 대해서는 결정을 미루고, 쉽게 번복할 수 있도록 한다.&lt;/p>
&lt;h2 id="하지만-웹은">하지만 웹은?&lt;/h2>
&lt;p>웹은 전달 메커니즘(입출력 장치)이며, 애플리케이션 아키텍처에서도 그와 같이 취급해야한다.&lt;/p>
&lt;ul>
&lt;li>웹을 통해 전달된다는 사실 자체가 세부 사항이므로, 시스템 구조를 지배해서는 안된다.&lt;/li>
&lt;/ul>
&lt;p>시스템 아키텍처는 과도한 문제를 일으키거나 근본적인 아키텍처를 뜯어고치지 않더라도 시스템을 콘솔 앱, 웹 앱, 리치 클라이언트, 웹서비스 앱등 다양한 방식으로 전달할 수 있어야 한다.&lt;/p>
&lt;h2 id="프레임워크는-도구일-뿐-삶의-방식은-아니다">프레임워크는 도구일 뿐, 삶의 방식은 아니다&lt;/h2>
&lt;p>프레임워크는 매우 강력하고 상당히 유용할 수 있지만, 프레임워크가 아키텍처의 기준이 되서는 안된다.&lt;/p>
&lt;p>좋은 아키텍트라면 아키텍처를 유스케이스에 중점을 둔 채 그대로 보존할 수 있을지를 생각해야 하며, 프레임워크가 아키텍처의 중심을 차지하는 일을 막을 수 있는 전략을 개발해야한다.&lt;/p>
&lt;h2 id="테스트하기-쉬운-아키텍처">테스트하기 쉬운 아키텍처&lt;/h2>
&lt;p>아키텍처가 유스케이스를 최우선으로 하고, 이로인해 프레임워크와는 적당한 거리를 둔다면, 프레임워크를 전혀 준비하지 않더라도 필요한 유스케이스 전부에 대해 단위 테스트를 할 수 있어야 한다.&lt;/p>
&lt;ul>
&lt;li>테스트를 돌리는 데 웹 서버가 반드시 필요한 상황이 되어서는 안된다.&lt;/li>
&lt;li>데이터베이스가 반드시 연결되어 있어야만 테스트를 돌릴 수 있어서도 안된다.&lt;/li>
&lt;/ul>
&lt;p>엔티티 객체는 반드시 오래된 방식의 간단한 객체(Plain Old Object)여야 하며, 여타 복잡한 것들에 의존해서는 안된다.&lt;/p>
&lt;p>유스케이스 객체가 엔티티 객체를 조작하도록 해야하며, 최종적으로 프레임워크로 인한 어려움을 겪지 않고도 이 모두를 있는 그래도 테스트할 수 있어야 한다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>아키텍처는 유스케이스를 통해 시스템을 이야기해야 하며, 시스템에 적용한 프레임워크에 대해 이야기해서는 안된다.&lt;/p>
&lt;p>시스템이 어떻게 전달될지 알지 못한 상태에서도 시스템의 모든 유스케이스를 이해할 수 있어야한다.&lt;/p></description></item><item><title>20. 업무 규칙</title><link>https://codemario318.github.io/post/clean-architecture/20/</link><pubDate>Fri, 22 Mar 2024 00:23:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/20/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/20/cover.png" alt="Featured image of post 20. 업무 규칙" />&lt;p>애플리케이션을 업무 규칙과 플러그인으로 구분하려면 업무 규칙이 실제로 무엇인지를 잘 이해해야만 한다.&lt;/p>
&lt;p>&lt;strong>핵심 업무 규칙&lt;/strong>(Critical Business Rule)&lt;/p>
&lt;ul>
&lt;li>업무 규칙은 사업적으로 수익을 얻거나 비용을 줄일 수 있는 규칙 또는 절차이다.&lt;/li>
&lt;li>컴퓨터상으로 구현했는지와 상관없이, 사업적으로 수익을 얻거나 비용을 줄일 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;p>핵심 업무 규칙은 사업 자체에 핵심적이며, 규칙을 자동화하는 시스템이 없더라도 업무 규칙은 그대로 존재한다.&lt;/p>
&lt;p>&lt;strong>핵심 업무 데이터&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>핵심 업무 규칙이 요구하는 데이터&lt;/li>
&lt;li>시스템으로 자동화되지 않은 경우에도 존재하는 데이터이다.&lt;/li>
&lt;/ul>
&lt;p>핵심 규칙과 핵심 데이터는 본질적으로 결함되어 있기 때문에 객체로 만들 좋은 후보가 되며 이러한 유형의 객체를 &lt;strong>엔티티&lt;/strong>(Entity)라고 부른다.&lt;/p>
&lt;h2 id="엔티티">엔티티&lt;/h2>
&lt;p>엔티티는 컴퓨터 시스템 내부의 객체로서, 핵심 업무 데이터를 기반으로 동작하는 일련의 조그만 핵심 업무 규칙을 구체화한다.&lt;/p>
&lt;ul>
&lt;li>핵심 업무 데이터를 직접 포함할 수 있다.&lt;/li>
&lt;li>핵심 업무 데이터에 매우 쉽게 접근할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>엔티티의 인터페이스는 핵심 업무 데이터를 기반으로 동작하는 핵심 업무 규칙을 구현한 함수들로 구성된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/20/img.png"
width="600"
height="279"
srcset="https://codemario318.github.io/post/clean-architecture/20/img_hubc44a445cee9fc3574f155c156bd7117_18299_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/20/img_hubc44a445cee9fc3574f155c156bd7117_18299_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="516px"
>&lt;/p>
&lt;p>엔티티를 생성할 때는&lt;/p>
&lt;ul>
&lt;li>업무에서 핵심적인 개념을 구현하는 소프트웨어를 한데 모은다.&lt;/li>
&lt;li>구축 중인 자동화 시스템의 나머지 모든 고려사항과 분리시킨다.&lt;/li>
&lt;/ul>
&lt;p>이 클래스는 업무의 대표자로서 독립적으로 존재한다.&lt;/p>
&lt;p>엔티티는 순전히 업무만을 위한 것이므로 데이터베이스, 사용자 인터페이스, 서드파티 프레임워크에 대한 고려사항들로 인해 오염되어서는 절대 안된다.&lt;/p>
&lt;ul>
&lt;li>어떤 시스템에서도 업무를 수행할 수 있어야 한다.&lt;/li>
&lt;li>시스템의 표현 형식이나 데이터 저장 방식, 시스템에서 컴퓨터가 배치되는 방식과도 무관하다.&lt;/li>
&lt;/ul>
&lt;p>엔티티의 유일한 요구 조건은 &lt;strong>핵심 업무 데이터와 핵심 업무 규칙을 하나로 묶어 별도의 소프트웨어 모듈로 만들어야 한다는 것이다.&lt;/strong>&lt;/p>
&lt;h2 id="유스케이스">유스케이스&lt;/h2>
&lt;p>유스케이스는 &lt;strong>자동화된 시스템이 동작하는 방법을 정의하고 제약함으로써 수익을 얻거나 비용을 줄이는 업무 규칙&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>자동화된 시스템이 사용되는 방법을 설명한다.&lt;/li>
&lt;li>사용자가 제공해야 하는 입력을 기술한다.&lt;/li>
&lt;li>사용자에게 제공해야하는 출력을 기술한다.&lt;/li>
&lt;li>해당 출력을 생성하기 위한 처리 단계를 기술한다.&lt;/li>
&lt;/ul>
&lt;p>엔티티 내의 핵심 업무 규칙과는 반대로, &lt;strong>애플리케이션에 특화된 업무 규칙&lt;/strong>을 설명한다.&lt;/p>
&lt;p>인터페이스로 들어오는 데이터와 인터페이스에서 도될려주는 데이터를 형식 없이 명시한다는 점만 빼면, 유스케이스는 사용자 인터페이스를 기술하지 않는다.&lt;/p>
&lt;p>유스케이스는 시스템이 사용자에게 어떻게 보이는지를 설명하지 않는다.&lt;/p>
&lt;p>애플리케이션에 특화된 규칙을 설명하며, 이를 통해 &lt;strong>사용자와 엔티티 사이의 상호작용을 규정&lt;/strong>한다.&lt;/p>
&lt;ul>
&lt;li>애플리케이션에 특화된 업무 규칙을 구현하는 하나 이상의 함수를 제공한다.&lt;/li>
&lt;li>입력 데이터를 포함한다.&lt;/li>
&lt;li>출력 데이터를 포함한다.&lt;/li>
&lt;li>유스케이스가 상호작용하는 엔티티에 대한 참조 데이터를 포함한다.&lt;/li>
&lt;/ul>
&lt;p>유스케이스는 단일 애플리케이션에 특화되어 있으며, 따라서 해당 시스템의 입력과 출력에 보다 가깝게 위치하므로, 엔티티와 같은 고수준 개념은 유스케이스와 같은 저수준 개념에 대해 아무것도 알지 못한다.&lt;/p>
&lt;p>즉, 유스케이스는 엔티티에 의존하며, 엔티티는 유스케이스에 의존하지 않는다.&lt;/p>
&lt;h2 id="요청-및-응답-모델">요청 및 응답 모델&lt;/h2>
&lt;p>유스케이스는 입력 데이터를 받아서 출력 데이터를 생성한다.&lt;/p>
&lt;p>하지만 제대로 구성된 유스 케이스 객체라면 데이터를 사용자나 또 다른 컴포넌트와 주고 받는 방식에 대해서는 전혀 눈치챌 수 없어야 한다.&lt;/p>
&lt;p>유스케이스는 단순한 요청 데이터 구조를 입력으로 받아들이고 단순한 응답 데이터 구조를 출력으로 반환하는 역할만 수행하며, 이러한 데이터 구조는 어떤것에도 의존하지 않아야 한다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>HttpRequest&lt;/code>, &lt;code>HttpResponse&lt;/code> 등&lt;/li>
&lt;/ul>
&lt;p>요청 및 응답 모델이 독립적이지 않다면 그 모델에 의존하는 유스케이스도 결국 해당 모델이 수반하는 의존성에 간접적으로 결합이 되므로 의존성을 제거해야 한다.&lt;/p>
&lt;hr>
&lt;p>엔티티와 요청/응답 모델은 많은 데이터를 공유하므로 엔티티의 참조를 요청/응답 데이터 구조에 포함하려는 유혹을 받을 수 있다.&lt;/p>
&lt;p>하지만 두 객체의 목적은 완전히 다르므로, 시간이 지남에 따라 다른 이유로 변경될 것이다.&lt;/p>
&lt;p>따라서 어떤 식으로든 함께 묶는 행위는 공통 폐쇄 원칙과 단일 책임 원칙을 위배하게 되며, 결국 코드에는 수많은 떠돌이 데이터가 만들어지고, 이로인해 수많은 조건문이 추가되어 버린다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>업무 규칙은 소프트웨어 시스템이 존재하는 이유, 핵심적인 기능이다.&lt;/p>
&lt;p>업무 규칙은 수익을 내고 비용을 줄이는 코드를 수반하는 매우 중요한 요소이다.&lt;/p>
&lt;p>따라서 사용자 인터페이스나 데이터베이스와 같은 저수준의 관심사로 인해 오염되어서는 안 되며, 원래 그대로의 모습으로 남아 있어야 한다.&lt;/p>
&lt;p>이상적으로는 업무 규칙을 표현하는 코드는 반드시 시스템의 심장부에 위치해야 하며, 덜 중요한 코드는 이 심장부에 플러그인되어야 한다.&lt;/p>
&lt;p>&lt;strong>업무 규칙은 시스템에서 가장 독립적이며 가장 많이 재사용할 수 있는 코드여야 한다.&lt;/strong>&lt;/p></description></item><item><title>19. 정책과 수준</title><link>https://codemario318.github.io/post/clean-architecture/19/</link><pubDate>Thu, 21 Mar 2024 23:41:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/19/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/19/cover.png" alt="Featured image of post 19. 정책과 수준" />&lt;p>소프트웨어 시스템이란 정책을 기술한 것이다.&lt;/p>
&lt;p>컴퓨터 프로그램은 각 입력을 출력으로 변환하는 정책을 상세하게 기술한 설명서이다.&lt;/p>
&lt;p>대다수의 주요 시스템에서 하나의 정책은 이 정책을 서술하는 여러 개의 조그만 정책들로 쪼갤 수 있다.&lt;/p>
&lt;p>소프트웨어 아키텍처를 개발하는 기술에는 정책을 신중하게 분리하고, 정책이 변경되는 양상에 따라 정책을 재편성하는 일도 포함된다.&lt;/p>
&lt;ul>
&lt;li>동일한 이유로 동일한 시점에 변경되는 정책은 동일한 수준에 위치하며, 동일한 컴포넌트에 속해야 한다.&lt;/li>
&lt;li>서로 다른 이유, 다른 시점에 변경되는 정책은 다른 수준에 위치하며, 반드시 컴포넌트로 분리해야 한다.&lt;/li>
&lt;/ul>
&lt;p>아키텍처 개발은 재편성된 컴포넌트들을 비순환 방향 그래프(directed acyclic graph)로 구성하는 기술을 포함한다.&lt;/p>
&lt;ul>
&lt;li>정점(node): 동일한 수준의 정책을 포함하는 컴포넌트&lt;/li>
&lt;li>간선(edge): 컴포넌트 사이의 의존성&lt;/li>
&lt;/ul>
&lt;p>좋은 아키텍처라면 각 컴포넌트를 연결할 때 의존성의 방향이 컴포넌트의 수준을 기반으로 저수준 컴포넌트가 고수준 컴포넌트에 의존하도록 설계해야 한다.&lt;/p>
&lt;h2 id="수준">수준&lt;/h2>
&lt;p>수준(level)은 &lt;strong>입력과 출력까지의 거리&lt;/strong>로 정의할 수 있다.&lt;/p>
&lt;p>시스템의 입력과 출력 모두로부터 멀리 위치할수록 정책의 수준은 높아지며, 입력과 출력을 다루는 정책이라면 시스템에서 최하위 수준에 위치한다.&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/19/img.png"
width="1400"
height="738"
srcset="https://codemario318.github.io/post/clean-architecture/19/img_hu0cccb83cda5e1cfc944d8b5720341535_354495_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/19/img_hu0cccb83cda5e1cfc944d8b5720341535_354495_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="455px"
>&lt;/p>
&lt;p>간단한 암호화 프로그램의 설계 예시 처럼 프로그램을 제대로 설계했다면 소스 코드 의존성은 곧은 점선처럼 표시되어야 한다.&lt;/p>
&lt;p>&lt;code>Translate&lt;/code> 컴포넌트는 입력과 출력에서 가장 멀리 떨어져 있으므로 최고 수준의 컴포넌트이다.&lt;/p>
&lt;p>굽은 실선은 데이터의 흐름을 나타내는데, 보는 것과 같이 데이터 흐름과 소스 코드 의존성이 항상 같은 방향을 가리키지는 않는다.&lt;/p>
&lt;ul>
&lt;li>소스 코드 의존성은 그 수준에 따라 결합되어야 하며, 데이터 흐름을 기준으로 결합되어서는 안된다는 것이다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">function encrypt() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> while(true)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> writeChar(translate(readChar()));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위와 같은 예시는 고수준인 &lt;code>encrypt&lt;/code> 함수가 저수준인 &lt;code>readChar&lt;/code>, &lt;code>writeChar&lt;/code> 함수에 의존하기 때문에 잘못된 아키텍처이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/19/img_1.png"
width="672"
height="560"
srcset="https://codemario318.github.io/post/clean-architecture/19/img_1_hu3792ba83091153c640e2b5a2eab1f46a_335401_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/19/img_1_hu3792ba83091153c640e2b5a2eab1f46a_335401_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;p>&lt;code>Encrypt&lt;/code> 클래스, &lt;code>CharWriter&lt;/code>와 &lt;code>CharReader&lt;/code> 인터페이스를 둘러싸고 있는 점선으로 된 경계로 묶인 영역이 이 시스템에서 최고 수준의 구성요소이며, 횡단하는 의존성은 모두 경계 안쪽으로 향한다.&lt;/p>
&lt;p>입력과 출력에 변화가 생기더라도 암호화 정책은 거의 영향을 받지 않기 때문에, 고수준의 암호화 정책을 저수준의 입력/출력 정책으로 부터 분리시켜 암호화 정책을 더 넓은 맥락에서 사용할 수 있다.&lt;/p>
&lt;hr>
&lt;p>정책을 컴포넌트로 묶는 기준은 정책이 변경되는 방식에 달려있다.&lt;/p>
&lt;p>단일 책임 원칙(SRP)과 공통 폐쇄 원칙(CCP)에 따르면 동일한 이유로 동일한 시점에 변경되는 정책은 함께 묶인다.&lt;/p>
&lt;ul>
&lt;li>고수준 정책: 입력/출력에서부터 멀리 떨어진 정책
&lt;ul>
&lt;li>저수준 정책에 비해 덜 빈번하게 변경된다.&lt;/li>
&lt;li>보다 중요한 이유로 변경된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>저수준 정책: 입력과 출력에 가까운 정책
&lt;ul>
&lt;li>더 빈빈하게 변경된다.&lt;/li>
&lt;li>긴급성을 요하며, 덜 중요한 이유로 변경된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이처럼 소스 코드 의존성 방향이 고수준 정책을 향할 수 있도록 정책을 분리했다면 변경의 영향도를 줄일 수 있다.&lt;/p>
&lt;ul>
&lt;li>시스템의 최저 수준에서 중요하지 않지만 긴급한 변경이 발생하더라도, 중요한 수준에 미치는 영향이 거의 없게 된다.&lt;/li>
&lt;/ul>
&lt;p>이는 저수준 컴포넌트가 고수준 컴포넌트에 플러그인되어야 한다는 관점으로도 바라볼 수 있다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>정책을 분리하는 것은 단일 책임 원칙, 개방 폐쇄 원칙, 공통 폐쇄 원칙, 의존성 역전 원칙, 안정된 의존성 원칙, 안정된 추상화 원칙을 모두 포함한다.&lt;/p></description></item><item><title>18. 경계 해부학</title><link>https://codemario318.github.io/post/clean-architecture/18/</link><pubDate>Thu, 21 Mar 2024 15:36:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/18/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/18/cover.png" alt="Featured image of post 18. 경계 해부학" />&lt;p>시스템 아키텍처는 일련의 소프트웨어 퀌포넌트와 그 컴포넌트들을 분리하는 경계에 의해 정의된다.&lt;/p>
&lt;p>이러한 경계는 다양한 형태로 나타난다.&lt;/p>
&lt;h2 id="경계-횡단하기">경계 횡단하기&lt;/h2>
&lt;p>&amp;lsquo;런타임에 경계를 횡단한다&amp;rsquo;는 의미는 경계 한쪽에 있는 기능에서 반대편 기능을 호출하여 데이터를 전달하는 일에 불과하다.&lt;/p>
&lt;p>적절한 위치에서 경계를 횡단하게 하는 비결은 소스 코드 의존성 관리에 있다.&lt;/p>
&lt;ul>
&lt;li>소스 코드 모듈 하나의 변경으로 읜존하는 다른 소스 코드 모듈을 변경하거나, 다시 컴파일해서 새로 배포해야 할 지도 모르기 때문&lt;/li>
&lt;/ul>
&lt;p>경계는 소스 코드 변경이 전파되는 것을 막는 방화벽을 구축하고 관리하는 수단으로써 존재한다.&lt;/p>
&lt;h2 id="두려운-단일체">두려운 단일체&lt;/h2>
&lt;p>아키텍처 경계 중 가장 단순하며 흔한 형태는 물리적으로 엄격하게 구분되지 않는 형태다.&lt;/p>
&lt;p>이는 앞서 언급했던 소스 수준 분리 모드로, 함수와 데이터가 단일 프로세서에서 같은 주소 공간을 공유하며 나름의 규칙에 따라 분리되어있는 상태이다.&lt;/p>
&lt;p>배포 관점에서 이는 단일체(monolith)라고 불리는 단일 실행 파일이므로, 외부에서 볼 때(물리적으로) 경계가 밖으로 드러나지는 않는다.&lt;/p>
&lt;p>가장 단순한 형태의 경계 횡단은 저수준 클라이언트에서 고수준 서비스로 향하는 함수 호출이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/18/img.png"
width="878"
height="328"
srcset="https://codemario318.github.io/post/clean-architecture/18/img_hu33eeba12431c5bf1806d35e4e7b8ce12_88436_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/18/img_hu33eeba12431c5bf1806d35e4e7b8ce12_88436_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="267"
data-flex-basis="642px"
>&lt;/p>
&lt;p>이 경우 런타임 의존성과 컴파일타임 의존성은 모두 저수준 컴포넌트에서 고수준 컴포넌트로 향한다.&lt;/p>
&lt;hr>
&lt;p>고수준 클라이언트가 저수준 서비스를 호출해야 한다면 동적 다형성을 사용하여 제어흐름과는 반대 방향으로 의존성을 역전시킬 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/18/img_1.png"
width="886"
height="326"
srcset="https://codemario318.github.io/post/clean-architecture/18/img_1_hu4203ca497a373869a2b5425ba45e2e20_90287_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/18/img_1_hu4203ca497a373869a2b5425ba45e2e20_90287_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="652px"
>&lt;/p>
&lt;p>경계를 횡단할 때 의존성은 모두 고수준 컴포넌트를 향하고 있으며, 데이터 구조의 정의가 호출하는 쪽에 위치한다.&lt;/p>
&lt;hr>
&lt;p>정적 링크된 모노리틱 구조의 실행 파일이라도 규칙적인 방식으로 구조를 분리하면 프로젝트를 개발, 테스트, 배포하는 작업에 큰 도움이 된다.&lt;/p>
&lt;p>단일체에서 컴포넌트간 통신은 전형적인 함수 호출에 지나지 않으므로 매우 빠르고 값싸며, 이러한 이유로 소스 수준에서 결합이 분리되면 경계를 가로지르는 통신은 상당히 빈번할 수 있다.&lt;/p>
&lt;h2 id="배포형-컴포넌트">배포형 컴포넌트&lt;/h2>
&lt;p>아키텍처의 경계가 물리적으로 드러날 수도 있는데 그중 가장 단순한 형태는 동적 링크 라이브러리다.&lt;/p>
&lt;p>이는 배포 수준 결합 분리 모드에 해당하며 컴포넌트를 동적 링크 라이브러리 형태로 배포하면 따로 컴파일하지 않고 곧바로 사용할 수 있는 대신 바이너리와 같이 배포 가능한 형태로 전달된다.&lt;/p>
&lt;p>배포 관점에서 이러한 형태는 단순히 배포 가능한 단위를 좀 더 편리한 형태로 묶으므로, 단일체와 동일하다.&lt;/p>
&lt;ul>
&lt;li>모든 함수가 동일한 프로세서와 주소 공간에 위치하며, 컴포넌트 간 의존성을 관리하는 전략도 동일하다.&lt;/li>
&lt;/ul>
&lt;p>단일체와 마찬가지로 경계를 가로지르는 통신은 함수 호출에 지나지 않으므로 값싸기 때문에, 경계를 가로지르는 통신은 대체로 매우 빈번하다.&lt;/p>
&lt;h2 id="스레드">스레드&lt;/h2>
&lt;p>스레드는 아키텍처 경계도 아니며 배포 단위도 아니다.&lt;/p>
&lt;p>단일체와 배포형 컴포넌트 모두 스레드를 활용할 수 있다.&lt;/p>
&lt;p>스레드는 실행 계획과 순서를 체계화 하는 방법에 가까우며, 모든 스레드가 단 하나의 컴포넌트에 포함될 수도 있고, 분산될 수도 있다.&lt;/p>
&lt;h2 id="로컬-프로세스">로컬 프로세스&lt;/h2>
&lt;p>로컬 프로세스는 이전 언급한 경계보다 훨씬 강한 물리적 형태를 띈다.&lt;/p>
&lt;p>주로 명령행이나 그와 유사한 시스템 호출을 통해 생성되고, 동일한 프로세서 또는 하나의 멀티코어 시스템에 속한 여러 프로세서들에서 실행되지만, 독립된 주소 공간에서 실행된다.&lt;/p>
&lt;p>종종 공유 메모리 파티션을 사용하기도 하지만, 일반적으로는 메모리 보호를 통해 프로세스들이 메모리를 공유하지 못하게 한다.&lt;/p>
&lt;p>대개의 경우 소켓, 메일박스, 메시지 큐와 같이 운영체제에서 제공하는 통신 기능을 이용하여 서로 통신한다.&lt;/p>
&lt;hr>
&lt;p>각 로컬 프로세스는 정적으로 링크된 단일체 이거나 동적으로 링크된 여러개의 컴포넌트로 구성될 수 있다.&lt;/p>
&lt;ul>
&lt;li>정적으로 링크된 단일체
&lt;ul>
&lt;li>여러 모노리틱 프로세스가 같은 컴포넌트들을 가지고 있을 수 있다.&lt;/li>
&lt;li>컴파일하고 정적 링크하는 과정에서 각 컴포넌트의 바이너리가 단일체에 물리적으로 복사되기때문&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>동적으로 링크된 배포형 컴포넌트
&lt;ul>
&lt;li>동적으로 링크된 배포형 컴포넌트들을 서로 공유할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>로컬 프로세스는 컴포넌트 간 의존성을 동적 다형성을 통해 관리하는 저수준 컴포넌트로 구성되므로 일종의 최상위 컴포넌트로 볼 수 있다.&lt;/p>
&lt;p>로컬 프로세스 간 분리 전략은 단일체나 바이너리 컴포넌트의 경우와 동일하다.&lt;/p>
&lt;p>소스 코드 의존성은 고수준 컴포넌트를 향해야하므로 로컬 프로세스에서는 고수준 프로세스의 소스 코드가 저수준 프로세스의 이름, 물리 주소, 레지스트리 조회 키를 절대로 포함해서는 안된다.&lt;/p>
&lt;p>로컬 프로세스 경계를 지나는 통신에는 운영체제 호출, 데이터 마샬링, 언마샬링, 프로세스 간 문맥 교환 등이 있으며, 이들은 제법 비싼 작업이므로 통신이 너무 빈번하게 이뤄지지 않도록 신중하게 제한해야한다.&lt;/p>
&lt;h2 id="서비스">서비스&lt;/h2>
&lt;p>물리적인 형태를 띠는 가장 강력한 경계는 서비스다.&lt;/p>
&lt;p>서비스는 프로세스로, 일반적으로 명령행 또는 그와 동등한 시스템 호출을 통해 구동된다.&lt;/p>
&lt;p>서비스들은 모든 통신이 네트워크를 통해 이뤄진다고 가정하므로 자신의 물리적 위치에 구애받지 않는다.&lt;/p>
&lt;p>서비스 경계를 지나는 통신은 함수 호출에 매우 느리므로 가능하다면 빈번하게 통신하는 일을 피해야 하며, 지연(latency)에 따른 문제를 고수준에서 처리할 수 있어야 한다.&lt;/p>
&lt;p>이를 제외하고는 로컬 프로세스에 적용한 규칙이 서비스에 적용된다.&lt;/p>
&lt;p>저수준 서비스는 반드시 고수준 서비스에 &lt;strong>플러그인&lt;/strong>되어야하며, 고수준 서비스의 소스 코드에는 저수준 서비스를 특정 짓는 어떤 물리적인 정보(URI 등)도 절대로 포함해서는 안된다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>단일체를 제외한 대다수의 시스템은 한 가지 이상의 경계 전략을 사용한다.&lt;/p>
&lt;p>실제로 서비스는 상호작용하는 일련의 로컬 프로세스 퍼사드에 불과할 때가 많다.&lt;/p>
&lt;p>또한 개별 서비스 또는 로컬 프로세스는 거의 언제나 소스 코드 컴포넌트로 구성된 단일체이거나, 동적으로 링크된 배포형 컴포넌트의 집합이다.&lt;/p>
&lt;p>즉, 한 시스템 안에서도 통신이 빈번한 로컬 경계와 지연을 중요하게 고려해야 하는 경계가 혼합되어 있음을 의미한다.&lt;/p></description></item><item><title>17. 경계: 선 긋기</title><link>https://codemario318.github.io/post/clean-architecture/17/</link><pubDate>Wed, 20 Mar 2024 21:36:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/17/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/17/cover.png" alt="Featured image of post 17. 경계: 선 긋기" />&lt;p>소프트웨어 아키텍처는 선을 긋는 기술이며, 이러한 선을 &lt;strong>경계&lt;/strong>(Boundary)라고 부른다.&lt;/p>
&lt;p>경계는 소프트웨어 요소를 서로 분리하고, 경계 한편에 있는 소소가 반대편에 있는 요소를 알지 못하도록 막는다.&lt;/p>
&lt;p>이 중 초기에 그려지는 선은 &lt;strong>가능한 한 오랫동안 결정을 연기&lt;/strong>시키기고, 결정이 핵심적인 업무 로직을 &lt;strong>오염시키지 못하게 만들려는 목적&lt;/strong>으로 쓰인다.&lt;/p>
&lt;p>아키텍트의 목표는 시스템을 만들고 유지하는 데 드는 자원을 최소화 하는 것인데, 효율을 떨어뜨리는 요인은 &lt;strong>결합&lt;/strong>(Coupling)이며, &lt;strong>너무 일찍 내려진 결정에 따른 결합은 더 큰 영향&lt;/strong>을 미친다.&lt;/p>
&lt;p>너무 일찍 내려진 결정은 시스템의 업무 요구사항, 즉 유스케이스와 아무런 관련이 없는 결정을 의미한다.&lt;/p>
&lt;ul>
&lt;li>프레임워크&lt;/li>
&lt;li>데이터베이스&lt;/li>
&lt;li>웹 서버&lt;/li>
&lt;li>유틸리티 라이브러리&lt;/li>
&lt;li>의존성 주입에 대한 결정 등&lt;/li>
&lt;/ul>
&lt;p>좋은 시스템 아키텍처란 유스케이스와 아무런 관련이 없는 결정에 의존하지 않아 이러한 결정이 부수적이며, 연기할 수 있는 아키텍처다.&lt;/p>
&lt;p>경계선을 긋는 행위는 결정을 늦추고 연기하는 데 도움이되며, 궁극적으로는 시간을 엄청나게 절약해주었으며, 골치를 썩지 않게 해준다.&lt;/p>
&lt;h2 id="어떻게-선을-그을까-언제-그을까">어떻게 선을 그을까? 언제 그을까?&lt;/h2>
&lt;p>관련이 있는 것과 없는 것 사이에 선을 긋는다.&lt;/p>
&lt;ul>
&lt;li>GUI는 업뮤 규칙과는 관련 없기 때문에, 둘 사이에는 반드시 선이 있어야한다.&lt;/li>
&lt;li>데이터베이스는 GUI와는 고나련이 없으므로, 둘 사이에는 반드시 선이 있어야한다.&lt;/li>
&lt;li>데이터베이스는 업무 규칙과 관련이 없으므로, 둘 사이에도 선이 있어야한다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>데이터베이스는 업무 규칙과 서로 떼어놓을 수 없는 관계라고 배운 사람이 많으며, 심지어 업무 규칙이 구체화된 것이 데이터베이스라고 확신하는 사람도 더러 있지만 이는 잘못된 생각이다.&lt;/p>
&lt;p>업무 규칙은 데이터를 가져오고 저장할 때 사용할 수 있는 함수 집합이 있다는 사실이 전부여야한다.&lt;/p>
&lt;p>이러한 함수 집합을 통해 데이터베이스를 인터페이스 뒤로 숨길 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/17/img.png"
width="407"
height="281"
srcset="https://codemario318.github.io/post/clean-architecture/17/img_hu673cbb09eeb85c8e13222d62fdbc3a4e_65890_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/17/img_hu673cbb09eeb85c8e13222d62fdbc3a4e_65890_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="클래스 경계선"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>&lt;code>DatabaseAccess&lt;/code>에서 출발하는 화살표는 클래스로부터 바깥쪽으로 향하는데 이는 &lt;code>DatabaseAccess&lt;/code>가 존재하는 클래스는 없다는 의미이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/17/img_1.png"
width="401"
height="283"
srcset="https://codemario318.github.io/post/clean-architecture/17/img_1_hub12dd706ba5018e7ec9bc226af343837_66166_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/17/img_1_hub12dd706ba5018e7ec9bc226af343837_66166_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="컴포넌트 경계선"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;p>&lt;code>DatabaseInterface&lt;/code> 클래스는 &lt;code>BusinessRules&lt;/code> 컴포넌트에 속하며, &lt;code>DatabaseAccess&lt;/code> 클래스는 &lt;code>Database&lt;/code> 컴포넌트에 속하므로, &lt;code>Database&lt;/code>는 &lt;code>BusinessRules&lt;/code>에 대해 알고있지만, &lt;code>BusinessRules&lt;/code>은 &lt;code>Database&lt;/code>에 관해 알지 못한다.&lt;/p>
&lt;p>따라서 &lt;code>BusinessRules&lt;/code>에게 있어 &lt;code>Database&lt;/code>는 문제가 되지 않지만, &lt;code>Database&lt;/code>는 &lt;code>BusinessRules&lt;/code> 없이는 존재할 수 없다.&lt;/p>
&lt;hr>
&lt;p>&lt;code>Database&lt;/code> 컴포넌트는 &lt;code>BusinessRules&lt;/code>가 만들어 낸 호출을 데이터베이스의 쿼리 언어로 변환하는 코드를 담고 있으며, 이 변환 코드가 &lt;code>BusinessRules&lt;/code>를 알고 있는 것이다.&lt;/p>
&lt;p>두 컴포넌트 사이에 경계선, 화살표의 방향이 &lt;code>BusinessRules&lt;/code>를 향하도록 만들었기 때문에 어떤 종류의 데이터베이스도 사용할 수 있게된다.&lt;/p>
&lt;p>따라서 데이터베이스에 대한 결정을 연기할 수 있으며, 데이터베이스를 결정하기에 앞서 업무 규칙을 먼저 작성하고 테스트하는 데 집중할 수 있다.&lt;/p>
&lt;h2 id="입력과-출력은">입력과 출력은?&lt;/h2>
&lt;p>입력과 출력은 중요하지않다.&lt;/p>
&lt;p>시스템의 행위를 입출력이 지닌 행위적 측면에서 생각하는 경향이 있는데, 이러한 입출력 뒤에는 모델(데이터 구조와 함수로 구성된 정교한 집합)이 존재한다는 사실을 잊는다.&lt;/p>
&lt;p>이러한 모델은 GUI가 없이도 동작할 수 있으므로 중요하지 않고, 실제로 중요한 것은 &lt;strong>업무 규칙&lt;/strong>이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/17/img_2.png"
width="401"
height="275"
srcset="https://codemario318.github.io/post/clean-architecture/17/img_2_huca1b9f1dde324acc9010f81287c21632_63448_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/17/img_2_huca1b9f1dde324acc9010f81287c21632_63448_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="145"
data-flex-basis="349px"
>&lt;/p>
&lt;p>&lt;code>GUI&lt;/code> 컴포넌트는 &lt;code>BusinessRules&lt;/code> 컴포넌트에게 의존하기 때문에 경계선으로 분할할 수 있다.&lt;/p>
&lt;p>따라서 &lt;code>GUI&lt;/code>는 다른 종류의 인터페이스로 얼마든지 교체할 수 있으며 &lt;code>BusinessRules&lt;/code>에 끼치는 영향은 없다.&lt;/p>
&lt;h2 id="플러그인-아키텍처">플러그인 아키텍처&lt;/h2>
&lt;p>데이터베이스와 GUI에 대해 내린 두 가지 결정을 하나로 합쳐서 보면 컴포넌트 추가와 관련한 일정의 패턴이 만들어진다.&lt;/p>
&lt;p>소프트웨어 개발 기술의 역사는 프러그인을 손쉽게 생성하여, 확장 가능하며 유지보수가 쉬운 시스템 아키텍처를 확립할 수 있게 만드는 방법에 대한 이야기이다.&lt;/p>
&lt;ul>
&lt;li>선택적이거나 또는 수많은 다양한 형태로 구현될 수 있는 나머지 컴포넌트로부터 핵심적인 업무 규칙은 분리되어 있고, 또한 독립적이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/17/img_3.png"
width="411"
height="276"
srcset="https://codemario318.github.io/post/clean-architecture/17/img_3_hu6d5ed14c5677eea0e6c3298e2ee307eb_74568_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/17/img_3_hu6d5ed14c5677eea0e6c3298e2ee307eb_74568_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="148"
data-flex-basis="357px"
>&lt;/p>
&lt;p>위와 같은 설계에서 사용자 인터페이스는 플러그인 형태로 고려되었기에, 수많은 종류의 사용자 인터페이스를 플러그인 형태로 연결할 수 있게 된다.&lt;/p>
&lt;p>데이터베이스도 동일하게 적용할 수 있다.&lt;/p>
&lt;p>GUI, 데이터베이스 등의 교체 작업이 쉬운 작업은 아니고, 업무 규칙 활용을 위해 추가적인 작업도 필요할 수 있지만, 플러그인 구조를 가정한 채 시작함으로써, 이러한 변경 작업을 현실성 있도록 만든다.&lt;/p>
&lt;h2 id="플러그인에-대한-논의">플러그인에 대한 논의&lt;/h2>
&lt;p>시스템을 플러그인 아키텍처로 배치함으로써 변경이 전파될 수 없는 방화벽을 생성할 수 있다.&lt;/p>
&lt;p>경계는 &lt;strong>변경의 축&lt;/strong>(Axis of change)이 있는 지점에 그어진다. 그리고 경계의 한쪽에 위치한 컴포넌트는 경계 반대편의 컴포넌트와는 다른 속도로, 다른 이유로 변경된다.&lt;/p>
&lt;p>따라서 다른 시점에 다른 속도로 변경되는 둘 사이에는 반드시 경계가 필요하다.&lt;/p>
&lt;p>이 역시도 단일 책임 원칙에 해당하며, 단일 책임 원칙은 어디에 경계를 그어야 할지 알려준다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>소프트웨어 아키텍처에서 경계선을 그리려면&lt;/p>
&lt;ol>
&lt;li>
&lt;p>먼저 시스템을 컴포넌트 단위로 분할해야한다.&lt;/p>
&lt;ul>
&lt;li>일부 컴포넌트는 핵심 업무 규칙에 해당한다.&lt;/li>
&lt;li>나머지 컴포넌트는 플러그인으로 핵심 업무와는 직접적인 관련이 없지만 필수 기능을 포함한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>컴포넌트 사이의 화살표가 핵심 업무를 향하도록 컴포넌트의 소스를 배치한다.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>이는 의존성 역전 원칙과 안정된 추상화 원칙을 응용한 것이며, 의존성의 화살표는 저수준 세부사항에서 고수준의 추상화를 향하도록 배치된다.&lt;/p></description></item><item><title>16. 독립성</title><link>https://codemario318.github.io/post/clean-architecture/16/</link><pubDate>Wed, 13 Mar 2024 14:51:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/16/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/16/cover.png" alt="Featured image of post 16. 독립성" />&lt;p>좋은 아키텍처는 다음을 지원해야한다.&lt;/p>
&lt;ul>
&lt;li>시스템의 유스케이스&lt;/li>
&lt;li>시스템의 운영&lt;/li>
&lt;li>시스템의 개발&lt;/li>
&lt;li>시스템의 배포&lt;/li>
&lt;/ul>
&lt;h2 id="유스케이스">유스케이스&lt;/h2>
&lt;p>시스템의 아키텍처는 시스템의 의도를 지원해야 한다는 뜻이다.&lt;/p>
&lt;p>실제로 아키텍트의 최우선 관심사는 유스케이스이며, 아키텍처에서도 유스케이스가 최우선이다. 따라서 아키텍처는 반드시 유스케이스를 지원해야한다.&lt;/p>
&lt;p>아키텍처는 시스템의 행위 차제에는 큰 영향을 주지 않으며, 행위와 관련하여 아키텍처가 열어둘 수 있는 선택사항의 거의 없다.&lt;/p>
&lt;p>하지만, 아키텍처의 시스템의 행위에 대한 직접적인 영향력과 별개로 좋은 아키텍처는 시스템의 행위를 지원할 수 있다.&lt;/p>
&lt;ul>
&lt;li>행위를 명확히 하고 외부로 드러낸다.&lt;/li>
&lt;li>이를 통해 시스템이 지닌 의도를 아키텍처 수준에서 알아볼 수 있게 만든다.&lt;/li>
&lt;/ul>
&lt;p>좋은 아키텍처를 가진다면 시스템의 유스케이스는 시스템 구조 자체에서 한눈에 드러난다.&lt;/p>
&lt;ul>
&lt;li>이러한 시스템의 &lt;strong>행위&lt;/strong>는 &lt;strong>일급 요소 first-class element&lt;/strong>이며 시스템의 최상위 수준에서 알아볼 수 있으므로, 개발자가 일일이 찾아 헤매이지 않아도 된다.&lt;/li>
&lt;li>이들 요소는 클래스이거나 함수 또는 모듈러서 아키텍처 내에서 핵심적인 자리를 차지할 뿐만 아니라, 자신의 기능을 분명하게 설명하는 이름을 가져야한다.&lt;/li>
&lt;/ul>
&lt;h2 id="운영">운영&lt;/h2>
&lt;p>시스템의 운영 지원 관점에서 볼 때 아키텍처는 더 실질적이며 덜 피상적인 역할을 맡는다.&lt;/p>
&lt;p>&lt;strong>예시&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>시스템이 초당 100,000명의 고객을 처리해야 한다면, 아키텍처는 이 요구와 관련된 각 유스케이스에 걸맞은 처리량과 응답시간을 보장해야 한다.&lt;/li>
&lt;li>시스템에서 수 밀리초 안에 3차원의 빅데이터 테이블에 질의해야 한다면, 반드시 이러한 운영 작업을 허용할 수 있는 형태로 아키텍처를 구조화해야한다.&lt;/li>
&lt;/ul>
&lt;p>예시와 같이 &lt;strong>형태를 지원&lt;/strong>한다는 말은 다양한 의미를 지닌다.&lt;/p>
&lt;ul>
&lt;li>시스템의 처리 요소를 일련의 작은 서비스들로 배열하여, 서로 다른 많은 서버에서 병렬로 실행할 수 있는 시스템&lt;/li>
&lt;li>경량의 수많은 스레드가 단일 프로세서에서 같은 주소 공간을 공유하는 시스템&lt;/li>
&lt;li>독립된 주소 공간에서 실행되는 소수의 프로세스만으로도 충분한 시스템&lt;/li>
&lt;li>단일 프로세스에서 실행되는 단순한 모노리틱 프로그램&lt;/li>
&lt;/ul>
&lt;p>위와 같은 운영 관점의 아키텍처 결정은 뛰어난 이키텍트라면 열어두어야 하는 선택 사항 중의 하나다.&lt;/p>
&lt;p>아키텍처에서 각 컴포넌트를 적절히 격리하여 유지하고 컴포넌트 간 통신 방식을 특정 형태로 제한하지 않는다면, 시간이 지나 운영에 필요한 요구사항이 바뀌더라도 스레드, 프로세스, 서비스로 구성된 기술 스펙트럼 사이를 전환하는 일이 훨씬 쉬워질 것이다.&lt;/p>
&lt;h2 id="개발">개발&lt;/h2>
&lt;p>아키텍처는 개발환경을 지원하는데 있어 핵심적인 역할을 수행한다.&lt;/p>
&lt;blockquote>
&lt;p>시스템을 설계하는 조직이라면 어디든지 그 조직의 의사소통 구조와 동일한 구조의 설계를 만들어 낼 것이다.&lt;br>
- 콘웨이 법칙 -&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>많은 팀으로 구성되며 관심사가 다양한 조직에서 어떤 시스템을 개발해야 한다면, 각 팀이 독립적으로 행동하기 편한 아키텍처를 반드시 확보하여 개발하는 동안 팀들이 서로 방해하지 않도록 해야 한다.&lt;/li>
&lt;li>잘 격리되어 독립적으로 개발 가능한 컴포넌트 단위로 시스템을 분할 할 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="배포">배포&lt;/h2>
&lt;p>아키텍처는 배포 용이성(&lt;strong>즉각적인 배포 immediate deployment&lt;/strong>)을 결정하는 데 중요한 역할을 한다.&lt;/p>
&lt;p>좋은 아키텍처라면 시스템이 빌드된 후 즉각 배포할 수 있도록 지원해야 한다.&lt;/p>
&lt;ul>
&lt;li>수십 개의 작은 설정 스크립트나 속성 파일을 약간씩 수정하는 방식을 사용하지 않는다.&lt;/li>
&lt;li>꼭 필요한 디렉터리나 파일을 수작업으로 생성하게 내버려 두지 않는다.&lt;/li>
&lt;/ul>
&lt;p>이러한 아케텍처를 만들려면 시스템을 컴포넌트 단위로 적절하게 분할하고 격리시켜야 한다.&lt;/p>
&lt;p>마스터 컴포넌트는 시스템 전체를 하나로 묶고, 각 컴포넌트를 올바르게 구동하고 통합하고 관리해야 한다.&lt;/p>
&lt;h2 id="선택사항-열어놓기">선택사항 열어놓기&lt;/h2>
&lt;p>좋은 아키텍처는 컴포넌트 구조와 관련된 이 관심사들 사이에서 균형을 맞추고, 각 관심사 모두를 만족시켜야 하지만, 현실에서는 이러한 균형을 잡기가 매우 어렵다.&lt;/p>
&lt;ul>
&lt;li>모든 유스케이스를 알 수는 없다.&lt;/li>
&lt;li>운영하는 데 따르는 제약사항, 팀 구조, 배포 요구사항을 알지 못한다.&lt;/li>
&lt;li>이러한 사항들을 알고 있더라도, 시스템이 생명주기의 단계를 하나씩 거쳐감에 따라 이 사항들도 반드시 변한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>도달하려는 목표는 뚜렷하지 않을 뿐만 아니라 시시각각 변한다.&lt;/strong>&lt;/p>
&lt;p>이러한 변화속에서도 몇몇 아키텍처 원칙을 구현하는 비용이 비교적 비싸지 않으며, 이를 통해 관심사들 사이에서 균형을 잡는데 도움이 된다는 사실은 변하지 않는다.&lt;/p>
&lt;ul>
&lt;li>균형을 맞추려는 목표점을 명확히 그릴 수 없는 경우에도 관심사들 사이에서 균형을 잡는 데 도움이 된다.&lt;/li>
&lt;li>시스템을 제대로 격리된 컴포넌트 단위로 분할할 때 도움이 된다.&lt;/li>
&lt;li>이를 통해 선택사항을 가능 한 많이, 가능한 오랫동안 열어 둘 수 있게 해준다.&lt;/li>
&lt;/ul>
&lt;p>좋은 아키텍처는 선택사항을 열어 둠으로써, 향후 시스템에 변경이 필요할 때 어떤 방향으로든 쉽게 변경할 수 있도록 한다.&lt;/p>
&lt;h2 id="계층-결합-분리">계층 결합 분리&lt;/h2>
&lt;p>UI, 애플리케이션 자체와 밀접한 업무 규칙과, 도메인에 밀접한 업무 규칙, 기술적인 세부사항 등은 각자 다른 속도로, 다른 이유로 변경되므로 서로 분리하고, 독립적으로 변경할 수 있도록 만들어야만 한다.&lt;/p>
&lt;p>업무 규칙은 그 자체가 애플리케이션과 밀접한 관련이 있거나, 혹은 더 범용적일 수 있는데, 아키텍트는 이들을 시스템의 나머지 부분으로부터 분리하여 독립적으로 변경할 수 있도록 해야한다.&lt;/p>
&lt;ul>
&lt;li>입력 필드 유효성 검사는 애플리케이션 자체와 밀접하게 관련된 업무 규칙이다.&lt;/li>
&lt;li>계좌의 이자 계산이나 재고품 비교는 업무 도메인에 더 밀접하게 연관된 업무 규칙이다.&lt;/li>
&lt;/ul>
&lt;p>이러한 계층의 예로는 UI, 애플리케이션에 특화된 업무 규칙, 애플리케이션과는 독립접인 업무 규칙, 데이터베이스와 같은 기술적인 세부사항등이 있다.&lt;/p>
&lt;h2 id="유스케이스-결합-분리">유스케이스 결합 분리&lt;/h2>
&lt;p>유스케이스 자체도 서로 다른 이유로 변경될 수 있다.&lt;/p>
&lt;ul>
&lt;li>예) 주문 입력 시스템의 주문 추가 유스케이스와 주문 삭제 유스케이스&lt;/li>
&lt;/ul>
&lt;p>유스케이스는 시스템의 수평적인 계층을 가르지르도록 자른 수직으로 좁다란 조각이기도 하다.&lt;/p>
&lt;ul>
&lt;li>각 유스케이스는 UI의 일부, 애플리케이션 특화 업무 규칙의 일부, 애플리케이션 독립적 업무 규칙의 일부 데이터베이스 기능의 일부 를 사용한다.&lt;/li>
&lt;/ul>
&lt;p>따라서 시스템을 수평적 계층으로 분할하면서 동시에 해당 계층을 가로지르는 얇은 수직적인 유스케이스로 시스템을 분할할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/16/img.png"
width="725"
height="247"
srcset="https://codemario318.github.io/post/clean-architecture/16/img_hu9d481b337dae54d8696707eddc9309ec_159985_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/16/img_hu9d481b337dae54d8696707eddc9309ec_159985_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="293"
data-flex-basis="704px"
>&lt;/p>
&lt;p>이와 같이 수직, 수평 결합을 동시에 분리하여 시스템의 맨 아래 계층까지 수직으로 내려가며 유스케이스들이 각 계층에서 서로 겹치지 않게 한다.&lt;/p>
&lt;p>서로 다른 이유로 변경되는 요소들의 결합을 분리하면 기존 요소에 지장을 주지 않고도 새로운 유스케이스를 계속해서 추가할 수 있다.&lt;/p>
&lt;p>또한 유스케이스를 뒷받침하는 서로 다른 관점(aspect)을 사용하게 되면, 새로운 유스케이스를 추가하더라도 기존 유스케이스에 영향을 주는 일은 거의 없을 것이다.&lt;/p>
&lt;h2 id="개발-독립성">개발 독립성&lt;/h2>
&lt;p>컴포넌트가 완전히 분리되면 팀 사이의 간섭은 줄어든다.&lt;/p>
&lt;p>기능 팀, 컴포넌트 팀, 계층 팀, 혹은 다른 형태의 팀이라도, 계층과 유스케이스의 결합이 분리되는 한 시스템의 아키텍처는 그 팀 구조를 뒷받침해 줄 것이다.&lt;/p>
&lt;h2 id="배포-톡립성">배포 톡립성&lt;/h2>
&lt;p>유스케이스와 계층의 결합이 분리되면 배포 측면에서도 고도의 유연성이 생긴다.&lt;/p>
&lt;p>결합을 제대로 분리했다면 운영 중인 시스템에서도 계층과 유스케이스를 교체할 수 있다.&lt;/p>
&lt;h2 id="가짜-중복">가짜 중복&lt;/h2>
&lt;p>아키텍트는 중복에 대한 공포로부터 발생하는 함정에 빠지곤 한다.&lt;/p>
&lt;p>소프트웨어에서 중복은 일반적으로 나쁜 것이나, 중복에도 여러 종류가 있다.&lt;/p>
&lt;ul>
&lt;li>진짜 중복
&lt;ul>
&lt;li>인스턴스가 변경되면, 동일한 변경을 그 인스턴스의 모든 복사본에 반드시 적용해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가짜 중복: 거짓된 또는 우발적인 중복
&lt;ul>
&lt;li>중복으로 보이는 두 코드 영역이 각자의 경로로 발전한다면(서로 다른 속도와 다른 이유로 변경된다면) 이 코드는 중복이 아니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>의도적으로 만든 중복(비슷하지만 다른 방향으로 발전할 것이 예상되는)우발적 중복을 통합한다면 나중에 코드를 다시 분리하느라 큰 수고를 감수해야 한다.&lt;/p>
&lt;p>유스케이스를 수직으로 분리할 때 이러한 문제와 마주치는 경우가 많으므로, 중복이 진짜 중복인지 확인하고 통합해야한다.&lt;/p>
&lt;p>계층을 수평으로 분리하는 경우, 특정 데이터베이스 레코드의 데이터 구조가 특정 화면의 데이터 구조와 상당히 비슷한 경우를 자주 볼 수 있는데, 이때 데이터베이스 레코드와 동일한 형태의 뷰 모델을 만들어서 각 항목을 복사하는 방식을 선택해야한다.&lt;/p>
&lt;h2 id="결합-분리-모드">결합 분리 모드&lt;/h2>
&lt;p>위와 같이 결합을 분리하면 운영 관점에서 여러가지 장점을 살펴볼 수 있다.&lt;/p>
&lt;p>유스케이스에서 서로 다른 관점이 분리되었다면,&lt;/p>
&lt;ul>
&lt;li>높은 처리량을 보장해야 하는 유스케이스와 낮은 처리량으로도 충분한 유스케이스는 이미 분리되어 있을 가능성이 높다.&lt;/li>
&lt;li>UI와 데이터베이스가 업무 규칙과 분리되어 있다면, UI와 데이터베이스는 업무 규칙과는 다른 서버에서 실행될 수 있다.&lt;/li>
&lt;li>높은 대역폭을 요구하는 유스케이스는 여러 서버로 복제하여 실행할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>유스케이스를 위해 수행하는 그 작업들(분리된 것들)은 운영에도 도움이 될 수 있다.&lt;/p>
&lt;p>운영 측면에서 이점을 살리기 이해선 결합을 분리할 때 적절한 모드를 선택해야 한다.&lt;/p>
&lt;ul>
&lt;li>분리된 컴포넌트를 서로 다른 서버에서 실행해야 하는 상황: MSA 등&lt;/li>
&lt;/ul>
&lt;p>때때로는 컴포넌트를 서비스 수준까지도 분리해야 한다.&lt;/p>
&lt;p>좋은 아키텍처는 선택권을 열어둔다는 말에서 결합 분리 모드는 이러한 선택지 중 하나다.&lt;/p>
&lt;p>계층과 유스케이스의 결합을 분리하는 방법은 다양하다.&lt;/p>
&lt;ul>
&lt;li>소스 수준 분리 모드
&lt;ul>
&lt;li>소스 코드 모듈 사이의 의존성을 제어할 수 있다.&lt;/li>
&lt;li>하나의 모듈이 변하더라도 다른 모듈을 변경하거나 재컴파일하지 않도록 만들 수 있다.&lt;/li>
&lt;li>모노리틱 구조&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>배포 수준 분리 모드
&lt;ul>
&lt;li>&lt;code>.jar&lt;/code>, &lt;code>DLL&lt;/code>, 공유 라이브러리와 같이 배포 가능한 단위들 사이의 의존성을 제어할 수 있다.&lt;/li>
&lt;li>소스 코드가 변하더라도 다른 모듈을 재빌드하거나 재배포하지 않도록 만들 수 있다.&lt;/li>
&lt;li>많은 컴포넌트가 같은 주소 공간에 상주하며, 단순한 함수 호출을 통해 통신할 수 있다.&lt;/li>
&lt;li>어떤 컴포넌트는 동일한 프로세스의 다른 프로세스에 상주하고, 프로세스 간 통신, 소켓, 공유 메모리를 통해 통신할 수 있다.&lt;/li>
&lt;li>결합이 분리된 컴포넌트가 독립적으로 배포할 수 있는 단위로 분할되어 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서비스 수준 분리 모드
&lt;ul>
&lt;li>의존하는 수준을 데이터 구조 단위까지 낮추고, 네트워크 패킷을 통해서만 통신하도록 만들 수 있다.&lt;/li>
&lt;li>모든 실행 가능한 단위는 소스와 바이너리 변경에 대해 서로 완전히 독립적이게 된다.&lt;/li>
&lt;li>마이크로서비스, 서비스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>프로젝트 초기 단계는 어떤 모드가 최선인지 알기 어려우며, 프로젝트가 성숙해갈수록 최적인 모드가 달라질 수 있다.&lt;/p>
&lt;p>좋은 아키텍처는 시스템이 모노리틱 구조로 태어나서 단일 파일로 배포되더라도,이후에는 독립적으로 배포 가능한 단위들의 집합으로 성장하고, 또 독립적인 서비스나 마이크로서비스 수준까지 성장할 수 있도록 만들어져야 한다.(반대도 마찬가지)&lt;/p>
&lt;p>좋은 아키텍처는 결합 분리 모드를 선택사항으로 남겨두어서 배포 규모에 다라 가장 적합한 모드를 선택해 사용할 수 있게 만들어 준다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>시스템의 결합 분리 모드는 시간이 지나면서 바뀌기 쉬우며, 뛰어난 아키텍트라면 이러한 변경을 예측하여 큰 무리 없이 반영할 수 있도록 만들어야한다.&lt;/p></description></item><item><title>15. 아키텍처란?</title><link>https://codemario318.github.io/post/clean-architecture/15/</link><pubDate>Tue, 12 Mar 2024 15:37:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/15/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/15/cover.png" alt="Featured image of post 15. 아키텍처란?" />&lt;p>&lt;strong>소프트웨어 아키텍트란?&lt;/strong>&lt;br>
소프트웨어 아키텍트는 프로그래머이며, 앞으로도 계속 프로그래머로 남아야하므로, 고수준 문제에만 집중하여 코드와 동떨어져서는 안 된다.&lt;/p>
&lt;p>소프트웨어 아키텍트는 개발에 참여하며 나머지 팀원들이 생산성을 극대화할 수 있는 설계를 하도록 방향을 이끌어준다.&lt;/p>
&lt;p>따라서 프로그래밍을 작업에 계속 참여하며 문제를 직접 경험하고 이를 통해 다른 프로그래머를 지원하는 작업을 수행해야한다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>소프트웨어 시스템의 아키텍처란?&lt;/strong>&lt;/p>
&lt;p>시스템을 구축했던 사람들이 만들어낸 시스템의 형태로 컴포넌트로 분할하는 방법, 분할된 컴포넌트를 배치하는 방법, 컴포넌트가 서로 의사소통하는 방식에 따라 정해진다.&lt;/p>
&lt;p>이러한 시스템 형태는 아키텍처 안에 담긴 소프트웨어 시스템이 쉽게 개발, 배포, 운영, 유지보수되도록 만들어진다.&lt;/p>
&lt;blockquote>
&lt;p>개발, 배포, 운영, 유지보수를 용이하게 만들기 위해서는 가능한 한 많은 선택지를, 가능한 한 오래 남겨두는 전략을 따라야한다.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>시스템 아키텍처는 시스템의 동작 여부와는 거의 관련이 없다.&lt;/p>
&lt;ul>
&lt;li>형편없는 아키텍처를 갖춤 시스템도 수없이 많지만, 그런데로 잘 동작한다.&lt;/li>
&lt;li>이러한 경우 대체로 운영에서는 문제가 없지만 배포, 유지보수, 계속되는 개발 과정에서 어려움을 겪는다.&lt;/li>
&lt;/ul>
&lt;p>시스템 아키텍처가 시스템이 제대로 동작하는 것과는 직접적으로 관련이 없지만, 시스템이 제대로 동작하도록 &lt;strong>지원&lt;/strong>한다(간접적).&lt;/p>
&lt;ul>
&lt;li>시스템을 쉽게 이해할 수 있게 한다.&lt;/li>
&lt;li>쉽게 개발할 수 있게 한다.&lt;/li>
&lt;li>쉽게 유지보수할 수 있게 한다.&lt;/li>
&lt;li>쉽게 배포하게 해준다.&lt;/li>
&lt;/ul>
&lt;p>아키텍처의 주된 목적은 시스템의 생명주기를 지원하는 것이다. 궁극적으로 시스템의 수명과 관련된 비용은 최소화하고, 프로그래머의 생산성은 최대화하는 데 있다.&lt;/p>
&lt;h2 id="개발">개발&lt;/h2>
&lt;p>시스템 아키텍처는 개발팀(들)이 시스템을 쉽게 개발할 수 있도록 뒷받침해야만 한다.&lt;/p>
&lt;p>&lt;strong>팀 구조&lt;/strong>&lt;/p>
&lt;p>팀 구조가 다르다면 아키텍처 관련 결정에서도 차이가 난다.&lt;/p>
&lt;ul>
&lt;li>작은 규모
&lt;ul>
&lt;li>팀 규모가 작아 상위 구조로 인한 장애물이 없기를 바라기 때문에 아키텍처 없이 시작하는 경우가 많다.&lt;/li>
&lt;li>잘 정의된 컴포넌트나 인터페이스가 없더라도 서로 효율적으로 협력하여 모노리틱 시스템을 개발할 수 있다.&lt;/li>
&lt;li>개발 초기에는 아키텍처 관련 제약들이 오히려 방해가 된다고 여길 가능성이 높다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>큰 규모
&lt;ul>
&lt;li>다른 요소를 고려하지 않는다면 아키텍처는 팀별 단일 컴포넌트(큰 관심사 별 컴포넌트)로 각각 발전될 가능성이 높다.&lt;/li>
&lt;li>팀별 단일 컴포넌트 아키텍처는 시스템을 배포, 운영, 유지보수하는 데 최적은 아닐 확률이 높다.&lt;/li>
&lt;li>시스템을 신뢰할 수 있고 안정된 인터페이스를 갖춘, 잘 설계된 컴포넌트 단위로 분리하지 않으면 개발이 진척되지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="배포">배포&lt;/h2>
&lt;p>배포 비용이 높을수록 시스템의 유용성은 떨어진다.&lt;/p>
&lt;p>따라서 소프트웨어 아키텍처는 시스템을 단 한번에 쉽게 배포할 수 있도록 만드는 데 그 목표를 두어야 한다.&lt;/p>
&lt;ul>
&lt;li>초기 개발 단계에서는 배포 전략을 거의 고려하지 않기 때문에 개발하기는 쉬워도 배포하기는 어려운 아키텍처가 만들어진다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>마이크로서비스 아키텍처 micro-service architecture&lt;/strong>&lt;/p>
&lt;p>컴포넌트 경계가 매우 뚜렷해지고, 인터페이스가 대체로 안정화되므로 시스템을 매우 쉽게 개발할 수 있다.&lt;/p>
&lt;p>하지만 늘어난 수많은 마이크로서비스로인해 서로 연결하기 위해 설정하고 작동 순서를 결정하는 과정에서 오작동이 발생할 원천이 스며들어 배포하기 어려워진다.&lt;/p>
&lt;hr>
&lt;p>아키텍트가 배포 문제를 초기에 고려했다면, 더 적은 서비스를 사용하고, 서비스 컴포넌트와 프로세스 수준의 컴포넌트를 하이브리드 형태로 융합하며, 좀 더 통합된 도구를 사용해 상호 연결을 관리했을 것이다.&lt;/p>
&lt;h2 id="운영">운영&lt;/h2>
&lt;p>아키텍처가 시스템 운영에 미치는 영향은 개발, 배포, 유지보수에 미치는 영향보다는 &lt;strong>덜 극적&lt;/strong>이다.&lt;/p>
&lt;p>운영에서 겪는 대다수의 어려움은 단순히 하드웨어를 더 투입해서 해결할 수 있다.&lt;/p>
&lt;ul>
&lt;li>소프트웨어 아키텍처가 비효율적이라면 스토리자와 서버를 추가하는 것만으로 제대로 동작하도록 만들 수 있을 때가 많다.&lt;/li>
&lt;li>하드웨어는 값싸고 인력은 비싸다.&lt;/li>
&lt;/ul>
&lt;p>운영 관점에서 소프트웨어 아키텍처는 비용 공식 관점에서 보다는 개발, 배포 유지보수 쪽으로 더 기운다는 의미를 가진다.&lt;/p>
&lt;p>&lt;strong>운영 방식&lt;/strong>&lt;/p>
&lt;p>시스템 아키텍처가 개발자에게 시스템의 운영 방식을 잘 드러내 준다.&lt;/p>
&lt;p>좋은 소프트웨어 아키텍처는 시스템을 운영하는 데 필요한 요구도 알려준다.&lt;/p>
&lt;ul>
&lt;li>유스케이스, 기능, 시스템의 필수 행위를 일급 엔티티로 격상시킨다.&lt;/li>
&lt;li>위 요소가 개발자에게 주요 목표로 인식되도록 해야한다.&lt;/li>
&lt;/ul>
&lt;p>이를 통해 시스템을 이해하기 쉬워지며, 따라서 개발과 유지보수에 큰 도움이 된다.&lt;/p>
&lt;h2 id="유지보수">유지보수&lt;/h2>
&lt;p>유지보수는 모든 측면에서 소프트웨어 시스템에서 가장 많은 비용이 발생한다.&lt;/p>
&lt;p>유지보수의 가장 큰 비용은 &lt;strong>탐사 spelunking&lt;/strong>와 &lt;strong>이로 인한 위험부담&lt;/strong>에 있다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>탐사란?&lt;/strong>&lt;/p>
&lt;p>기존 소프트웨어에 새로운 기능을 추가하거나 결함을 수정할 때, 소프트웨어를 파헤쳐서 어디를 고치는 게 최선인지, 어떤 전략을 쓰는 게 최적일지를 결정할 때 드는 비용&lt;/p>
&lt;/blockquote>
&lt;p>변경사항을 반영할 때 의도치 않은 결함이 발생할 가능성은 항상 존재하며, 이로인한 위험부담 비용이 추가된다.&lt;/p>
&lt;p>주의를 기울여 신중하게 아키텍처를 만들면 이 비용을 크게 줄일 수 있다.&lt;/p>
&lt;ul>
&lt;li>시스템을 컴포넌트로 분리&lt;/li>
&lt;li>안정된 인터페이스를 두어 서로 격리&lt;/li>
&lt;/ul>
&lt;p>이를 통해 미래에 추가될 기능에 대한 길을 밝혀 둘 수 있을 뿐만 아니라 의도치 않은 장재가 발생할 위험을 크게 줄일 수 있다.&lt;/p>
&lt;h2 id="선택사항-열어두기">선택사항 열어두기&lt;/h2>
&lt;p>책 초반에 언급했듯, 소프트웨어는 행위적 가치와 구조적 가치를 지니며, 아키텍처 관점에서 구조적 가치를 추구해야한다.&lt;/p>
&lt;p>소프트웨어를 만든 이유는 기계의 행위를 빠르고 쉽게 변경하는 방법이 필요했기 때문인데, 이러한 유연성은 &lt;strong>시스템의 형태&lt;/strong>, &lt;strong>컴포넌트의 배치 방식&lt;/strong>, &lt;strong>컴포넌트가 상호 연결되는 방식&lt;/strong>에 상당히 크게 의존한다.&lt;/p>
&lt;p>소프트웨어의 유연성을 유지하는 방법은 선택사항(세부사항)을 &lt;strong>가능한 한 많이&lt;/strong>, &lt;strong>가능한 한 오랫동안&lt;/strong> 열어두는 것이다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>정책과 세부사항&lt;/strong>&lt;/p>
&lt;p>모든 소프트웨어 시스템은 정책과 세부사항으로 분해할 수 있다.&lt;/p>
&lt;ul>
&lt;li>정책
&lt;ul>
&lt;li>모든 업무 규칙과 업무 절차를 구체화한다.&lt;/li>
&lt;li>시스템의 진정한 가치가 살아있는 곳&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>세부사항
&lt;ul>
&lt;li>사람, 외부 시스템, 프로그래머가 정책과 소통할 때 필요한 요소&lt;/li>
&lt;li>정책이 가진 행위에는 조금도 영향을 미치지 않는다.&lt;/li>
&lt;li>입출력 장치, DB, 웹 시스템, 서버, 프레임워크, 프로토콜 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>아키텍트의 목표는 시스템에서 정책을 가장 핵심적인 요소로 식별하고, 동시에 세부사항은 정책에 무관하게 만들 수 있는 형태의 시스템을 구축하는 데 있다.&lt;/p>
&lt;p>이를 통해 세부사항을 결정하는 일은 미루거나 연기할 수 있게 된다.&lt;/p>
&lt;p>&lt;strong>예시&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>개발 초기에는 데이터베이스 시스템을 선택할 필요가 없다.
&lt;ul>
&lt;li>고수준의 정책을 데이터베이스가 관계형인지, 분산형인지, 계층형인지 등에 관계 없도록 만들어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개발 초기에는 웹 서버를 선택할 필요가 없다.
&lt;ul>
&lt;li>고수준의 정책은 자신이 웹을 통해 전달된다는 사실을 알아서는 안 된다.&lt;/li>
&lt;li>웹 개발 기술들에 대해 고수준의 정책이 전혀 알지 못하게 만들면, 프로젝트 후반까지는 어떤 종류의 웹 시스템을 사용할지를 결정하지 않아도 된다.&lt;/li>
&lt;li>시스템을 웹을 통해 전송할 것인지조차도 결정할 필요가 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개발 초기에는 REST를 적용할 필요가 없다.
&lt;ul>
&lt;li>고수준의 정책은 외부 세계로의 인터페이스에 대해 독립적이어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>의존성 주입 프레임워크를 적용할 필요가 없다.
&lt;ul>
&lt;li>고수준의 정책은 의존성을 해석하는 방식에 대해 신경써서는 안된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>세부사항에 몰두하지 않은 채 고수준의 정책을 만들 수 있다면, 이러한 세부사항에 대한 결정을 오랫동안 미루거나 연기할 수 있다.&lt;/p>
&lt;ul>
&lt;li>이러한 결정을 더 오래 참을 수 있다면, 더 많은 정보를 얻을 수 있고, 이를 기초로 제대로 된 결정을 내릴 수 있다.&lt;/li>
&lt;li>선택사항을 더 오랫동안 열어 둘 수 있다면 더 많은 실험을 해볼 수 있고 더 많은 것을 시도할 수 있다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>좋은 아키텍트는 결정되지 않은 사항의 수를 최대화한다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>좋은 아케텍트는 세부사항을 정책으로부터 신중하게 가려내고, 정책이 세부사항과 결합되지 않도록 엄격하게 분리한다.&lt;/p>
&lt;p>이를 통해 정책은 세부사항에 관한 어떠한 지식도 갖지 못하게 되며, 어떤 경우에도 세부사항에 의존하지 않게 된다.&lt;/p>
&lt;p>좋은 아키텍트는 세부사항에 대한 결정을 가능한 한 오랫동안 미룰 수 있는 방향으로 정책을 설계한다.&lt;/p></description></item><item><title>14. 컴포넌트 결합</title><link>https://codemario318.github.io/post/clean-architecture/14/</link><pubDate>Thu, 07 Mar 2024 15:31:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/14/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/cover.png" alt="Featured image of post 14. 컴포넌트 결합" />&lt;p>지금부터 다룰 세 가지 원칙은 &lt;strong>컴포넌트 사이의 관계&lt;/strong>를 설명한다.&lt;/p>
&lt;p>컴포넌트 사이의 관계는 응집도와 마찬가지로 개발 가능성과 논리적 설계 사이의 균형을 다룬다.&lt;/p>
&lt;p>컴포넌트 구조와 관련된 아키텍처를 침범하는 힘은 기술적이며, 정치적이고, 가변적이다.&lt;/p>
&lt;h2 id="adp-의존성-비순환-원칙">ADP: 의존성 비순환 원칙&lt;/h2>
&lt;blockquote>
&lt;p>컴포넌트 의존성 그래프에 순환(Cycle)이 있어서는 안된다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>숙취 증후군 The morning after syndrome&lt;/strong>&lt;br>
무언가를 작동하게 만들놓았는데, 무언가를 의존하고 있던 무언가를 다른 사람이 수정하여 동작하지 않는 현상을 저자는 숙취 증후군이라 부른다.&lt;/p>
&lt;hr>
&lt;p>숙취 증후군은 많은 개발자가 동일한 소스 파일을 수정하는 환경에서 발생한다.&lt;/p>
&lt;p>소수의 개발자로 구성된 작은 프로젝트에서는 큰 문제가 되지 않지만, 프로젝트와 개발팀 규모가 커지면 큰 문제로 다가온다.&lt;/p>
&lt;p>지난 수십 년 동안 이 문제의 해결책으로 두 가지 방법이 발전되어 왔다.&lt;/p>
&lt;ul>
&lt;li>주 단위 빌드(Weekly build)&lt;/li>
&lt;li>의존성 비순환 원칙(Acyclic Dependencies Principle)&lt;/li>
&lt;/ul>
&lt;h3 id="주-단위-빌드">주 단위 빌드&lt;/h3>
&lt;p>중간 규모의 프로젝트에서는 흔하게 사용되는 방법으로 일주일의 첫 4일 동안은 각자 작업한 후 금요일이 되면 변경된 코드를 모두 통합하여 시스템을 빌드한다.&lt;/p>
&lt;p>이 접근법은 5일 중 4일 동안 개발자가 걱정없이 개발할 수 있다는 장점이 있지만, 금요일에 통합과 관련된 막대한 업보를 치러야한다는 단점을 가진다.&lt;/p>
&lt;ol>
&lt;li>프로젝트가 커질수록 통합은 하루만에 끝마치는게 불가능해진다.
&lt;ul>
&lt;li>통합 일정이 길어진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>개발보다 통합에 드는 시간이 늘어나면서 팀의 효율성도 서서히 나빠진다.
&lt;ul>
&lt;li>빌드 주기가 길어진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>이러한 과정이 반복되며 효율성을 유지하기 위해 빌드 일정을 계속 늘려야 하고, 빌드 주기가 늦어질수록 프로젝트가 감수할 위험은 더 커지게된다.&lt;/p>
&lt;ul>
&lt;li>통합과 테스트를 수행하기가 점점 어려워진다.&lt;/li>
&lt;li>빠른 피드백이 주는 장점을 잃는다.&lt;/li>
&lt;/ul>
&lt;h3 id="순환-의존성-제거하기">순환 의존성 제거하기&lt;/h3>
&lt;p>이 문제의 해결책은 &lt;strong>개발 환경을 릴리스 가능한 컴포넌트 단위로 분리하는 것&lt;/strong>이다.&lt;/p>
&lt;p>이를 통해 컴포넌트는 개별 개발자 또는 단일 개발팀이 책임질 수 있는 작업 단위가 된다.&lt;/p>
&lt;ol>
&lt;li>개발자가 해당 컴호넌트가 동작하도록 만든 후, 해당 컴포넌트를 릴리스하여 다른 개발자가 사용할 수 있도록 만든다.&lt;/li>
&lt;li>컴포넌트에 릴리스 번호를 부여하고, 다른팀에서 사용할 수 있는 디렉터리로 이동시킨다.&lt;/li>
&lt;li>개발자는 자신만의 공간에서 해당 컴포넌트를 지속적으로 수정한다.&lt;/li>
&lt;li>나머지 개발자는 릴리스된 버전을 사용한다.&lt;/li>
&lt;li>컴포넌트가 새로 릴리스되어 사용할 수 있게 되면, 다른팀에서는 새 릴리스를 적용할 지 결정한다.&lt;/li>
&lt;/ol>
&lt;p>특정 컴포넌트가 변경 되더라도 다른 팀에 영향을 즉각 영향을 주지는 않으므로 어떤 팀도 다른 팀에 의해 좌우되지 않는다.&lt;/p>
&lt;ul>
&lt;li>각 팀은 특정 컴포넌트가 새로 릴리스되면 자신의 컴포넌트를 해당 컴포넌트에 맞게 수정할 시기를 스스로 결정할 수 있다.&lt;/li>
&lt;li>통합은 작고 점진적으로 이뤄진다.&lt;/li>
&lt;/ul>
&lt;p>이 같은 작업 절차는 단순하며 합리적이여서 널리 사용되는 방식이나, 성공적으로 동작하려면 컴포넌트 사이의 의존성 구조를 반드시 관리해야한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img.png"
width="1410"
height="706"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_hu25b06e863fc54028a17a8c977c361598_212469_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_hu25b06e863fc54028a17a8c977c361598_212469_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="479px"
>&lt;/p>
&lt;p>컴포넌트 다이어그램에서는 컴포넌트를 조립하여 애플리케이션을 만드는 다소 전형적인 구조로, 중요한 점은 컴포넌트 간의 의존성 구조이다.&lt;/p>
&lt;ul>
&lt;li>의존성 관계는 일방향이다.&lt;/li>
&lt;li>어느 컴포넌트에서 시작하더라도, 의존성 관계를 따라가면서 최초의 컴포넌트로 되돌아갈 수 없다.&lt;/li>
&lt;li>어떠한 컴포넌트의 새로운 릴리스를 만들게 되면 영향을 받는 컴포넌트는 의존성 화살표를 거꾸로 따라가면 알 수 있다.
&lt;ul>
&lt;li>&lt;code>Presenters&lt;/code> &amp;gt; &lt;code>View&lt;/code>, &lt;code>Main&lt;/code>&lt;/li>
&lt;li>&lt;code>Main&lt;/code>은 새로 릴리스되더라도 영향을 받는 컴포넌트가 전혀 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;code>Presenters&lt;/code> 컴포넌트를 만드는 개발자가 이 컴포넌트를 테스트하려고 한다면, 현재 사용중인 버전의 &lt;code>Interactors&lt;/code>와 &lt;code>Entities&lt;/code>를 이용해서 &lt;code>Presenters&lt;/code> 자체 버전을 빌드하면 그만이다.&lt;/p>
&lt;ul>
&lt;li>테스트를 구성할 때 대체로 적은 노력이 든다.&lt;/li>
&lt;li>고려해야 할 변수도 상대적으로 적다.&lt;/li>
&lt;/ul>
&lt;p>시스템 전체를 릴리스해야 할 때가 오면 릴리스 절차는 상향식으로 진행된다.&lt;/p>
&lt;ol>
&lt;li>&lt;code>Entities&lt;/code> 컴포넌트를 컴파일하고, 테스트하고, 릴리스한다.&lt;/li>
&lt;li>&lt;code>Database&lt;/code>와 &lt;code>Interactors&lt;/code>에서도 동일한 과정을 거친다.&lt;/li>
&lt;li>&lt;code>Presenters&lt;/code>, &lt;code>Views&lt;/code>, &lt;code>Controllers&lt;/code>, &lt;code>Authorizer&lt;/code> 순으로 진행한다.&lt;/li>
&lt;li>마지막으로 &lt;code>Main&lt;/code>을 처리한다.&lt;/li>
&lt;/ol>
&lt;p>구성요소 간 의존성을 파악하고 있으면 시스템을 빌드하는 방법을 알 수 있다.&lt;/p>
&lt;h3 id="순환이-컴포넌트-의존성-그래프에-미치는-영향">순환이 컴포넌트 의존성 그래프에 미치는 영향&lt;/h3>
&lt;p>요구사항 발생으로 &lt;code>Entities&lt;/code>의 &lt;code>User&lt;/code> 클래스가 &lt;code>Authorizer&lt;/code>의 &lt;code>Permissions&lt;/code> 클래스를 사용한다고 가정하면, 아래와 같이 순환 의존성이 발생한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_2.png"
width="600"
height="293"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_2_hu1d9357bad079e1bd21e0590f44df1af1_28113_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_2_hu1d9357bad079e1bd21e0590f44df1af1_28113_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="491px"
>&lt;/p>
&lt;p>&lt;code>Database&lt;/code> 컴포넌트를 릴리스하려면 &lt;code>Entities&lt;/code>와의 호환되어야 하므로 &lt;code>Authorizer&lt;/code>과 확인도 필요하며, &lt;code>Authorizer&lt;/code>는 &lt;code>Interactors&lt;/code>와도 의존하므로 세 개의 컴포넌트가 사실상 하나의 거대한 컴포넌트가되어 릴리스 하기 어려워진다.&lt;/p>
&lt;p>해당 컴포넌트의 개발자들은 항상 정확하게 동일한 릴리스를 사용해야하므로 모두 서로에게 얽매이게 된다.&lt;/p>
&lt;p>&lt;code>Entites&lt;/code> 컴포넌트를 테스트할 때도 &lt;code>Authorizer&lt;/code>와 &lt;code>Interactors&lt;/code> 까지도 반드시 빌드하고 통합해야한다.&lt;/p>
&lt;p>이처럼 순환이 생기면 컴포넌트를 분리하기가 상당히 어려워진다.&lt;/p>
&lt;ul>
&lt;li>단위테스트를 하고 릴리스를 하는 일도 굉장히 어려워진다. 에러가 쉽게 발생한다.&lt;/li>
&lt;li>모듈의 개수가 많아짐에 따라 빌드 관련 이슈는 기하급수적으로 증가한다.&lt;/li>
&lt;li>컴포넌트를 어떤 순서로 빌드해야 올바를지 파악하기가 상당히 힘들어진다.
&lt;ul>
&lt;li>순환이 생기면 올바른 순서라는 것 자체가 없을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="순환-끊기">순환 끊기&lt;/h3>
&lt;p>컴포넌트 사이의 순환을 끊고 의존성을 다시 DAG로 원상복구하는 일은 언제라도 가능하다.&lt;/p>
&lt;p>&lt;strong>의존성 역전 원칙 적용&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_4.png"
width="600"
height="297"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_4_hu2d0ddebed758504a656ef831a9615a2e_23447_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_4_hu2d0ddebed758504a656ef831a9615a2e_23447_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="484px"
>&lt;/p>
&lt;ol>
&lt;li>&lt;code>User&lt;/code>가 필요로하는 메서드를 제공하는 인터페이스를 생성한다.&lt;/li>
&lt;li>이 인터페이스를 &lt;code>Entities&lt;/code>에 위치시키고, &lt;code>Authorizer&lt;/code>에서 이 인터페이스를 상속받는다.&lt;/li>
&lt;/ol>
&lt;p>이를 통해 &lt;code>Entities&lt;/code>와 &lt;code>Authorizer&lt;/code> 사이의 의존성을 역전시킬 수 있고, 이를 통해 순환을 끊을 수 있다.&lt;/p>
&lt;p>&lt;strong>새로운 컴포넌트&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_1.png"
width="1024"
height="496"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_1_hud3e3acb0c4f3794f6f3cfe621553502d_150119_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_1_hud3e3acb0c4f3794f6f3cfe621553502d_150119_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="206"
data-flex-basis="495px"
>&lt;/p>
&lt;ol>
&lt;li>&lt;code>Entities&lt;/code>와 &lt;code>Authorizer&lt;/code>가 모두 의존하는 새로운 컴포넌트를 만든다.&lt;/li>
&lt;li>두 컴포넌트가 모두 의존하는 클래스들을 새로운 컴포넌트로 이동시킨다.&lt;/li>
&lt;/ol>
&lt;h3 id="흐트러짐jitters">흐트러짐(Jitters)&lt;/h3>
&lt;p>새로운 컴포넌트를 생성하는 두 번째 해결책에서 시사하는 바는 &lt;strong>요구사항이 변경되면 컴포넌트 구조도 변경될 수 있다&lt;/strong>는 사실이다.&lt;/p>
&lt;p>애플리케이션이 성장함에 따라 컴포넌트 의존성 구조는 서서히 흐트러지며 또 성장하므로, 의존성 구조에 순환이 발생하는지를 항상 관찰하여 순환이 발생하면 어떤 식으로든 끊어야 한다.&lt;/p>
&lt;p>이로인해 새로운 컴포넌트를 생성하거나 의존성 구조가 더 커질수도 있다.&lt;/p>
&lt;h2 id="하향식top-down-설계">하향식(Top-down) 설계&lt;/h2>
&lt;p>지금까지 논의로 &lt;strong>컴포넌트 구조는 하향식으로 설계될 수 없다&lt;/strong>는 결론에 다다른다.&lt;/p>
&lt;p>컴포넌트는 시스템에서 가장 먼저 설계할 수 있는 대상이 아니며, 오히려 시스템이 성장하고 변경될 때 함께 진화한다.&lt;/p>
&lt;hr>
&lt;p>컴포넌트와 같이 큰 단위로 분해된 구조는 고수준의 기능적인 구조로 다시 분해할 수 있다고 기대하기 때문에 동의하지 않을 수 있지만, 컴포넌트 의존성 다이어그램은 애플리케이션의 기능을 기술하는 일과는 거의 관련이 없다.&lt;/p>
&lt;p>컴포넌트 의존성 다이어그램은 애플리케이션의 빌드 가능성과 유지보수성을 보여주는 지도이므로 빌드하거나 유지보수할 소프트웨어가 없다면 빌드와 유지보수에 관한 지도 도한 필요 없기 때문에 컴포넌트 구조는 프로젝트 초기에 설계할 수 없다.&lt;/p>
&lt;p>하지만 프로젝트가 진행되고 발전함에 따라 의존성관리, 영향범위 최소화, 안정적인 컴포넌트, 재사용성 등의 대한 요구로 점점 아키텍처를 새로 만들고 가다듬게 되어 컴포넌트 의존성 그래프는 조금씩 흐트러지고 성장한다.&lt;/p>
&lt;hr>
&lt;p>이처럼 아직 아무런 클래스도 설계하지 않은 상태에서 컴포넌트 의존성 구조를 설계하려고 시도한다면 큰 실패를 맛볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>공통 폐쇄에 대해 파악할 수 없다.&lt;/li>
&lt;li>재사용 가능한 요소도 알 수 없다.&lt;/li>
&lt;li>컴포넌트 생성 시 대부분 순환 의존성이 발생하게된다.&lt;/li>
&lt;/ul>
&lt;p>따라서 컴포넌트 의존성 구조는 시스템의 논리적인 설계에 발맞춰 성장하며 또 진화해야한다.&lt;/p>
&lt;h2 id="sdp-안정된-의존성-원칙">SDP: 안정된 의존성 원칙&lt;/h2>
&lt;blockquote>
&lt;p>안정성의 방향으로(더 안정된 쪽에) 의존하라.&lt;/p>
&lt;/blockquote>
&lt;p>설계를 유지하다 보면 변경은 불가피하므로 결코 정적일 수 없다.&lt;/p>
&lt;p>공통 폐쇄 원칙을 준수함으로써 컴포넌트가 다른 유형의 변경에는 영향받지 않으면서도 &lt;strong>특정 유형의 변경&lt;/strong>에만 민감하게 만들 수 있으며, 이에 맞추어 특정 컴포넌트는 변동성을 지니도록 설계한다.&lt;/p>
&lt;p>변동성이 높은(변동이 예상되는) 컴포넌트에 한번 의존하게 되면 변동성이 큰 컴포넌트도 결국 변경이 어려워지므로 변경이 쉽지 않은 컴포넌트가 변동이 예상되는 컴포넌트에 의존하게 만들어서는 절대 안된다.&lt;/p>
&lt;ul>
&lt;li>모듈을 만들 때는 변경하기 쉽도록 설계했지만, 그 모듈에 의존성을 매달아 버리면 해당 모듈도 변경하기 어려워진다.&lt;/li>
&lt;li>만든 모듈에서는 한 줄의 코드도 변경되지 않았더라도 변경하는 일이 상당히 도전적인 일이 되어버린다.&lt;/li>
&lt;/ul>
&lt;p>안정된 의존성 원칙을 준수하면 변경하기 어려운 모듈이 변경하기 쉽게 만들어진 모듈에 의존하지 않도록 만들 수 있다.&lt;/p>
&lt;h3 id="안정성">안정성&lt;/h3>
&lt;p>동전을 세로로 세우면 안정성이 떨어지지만 건드리지 않으면 넘어지지 않는 것 처럼, 안정성은 변화가 발생하는 빈도와는 직접적인 관련이 없다.&lt;/p>
&lt;p>웹스터 사전에서는 안정성을 &amp;lsquo;쉽게 움직이지 않는&amp;rsquo;이라고 정의하는데 이는 변경을 만들기 위해 필요한 작업량과 관련된다.&lt;/p>
&lt;ul>
&lt;li>변경을 위해 필요한 작업량이 많으면 안정적이다.&lt;/li>
&lt;/ul>
&lt;p>소프트웨어 컴포넌트를 변경하기 어렵게 만드는 데는 크기, 복잡도, 간결함 등 많은 요인이 있지만, 변경하기 어렵게 만드는 확실한 방법 중 하나는 &lt;strong>수 많은 컴포넌트가 해당 컴포넌트에 의존&lt;/strong>하게 만드는 것이다.&lt;/p>
&lt;ul>
&lt;li>컴포넌트 안쪽으로 들어오는 의존성이 많아지면, 사소한 변경이라도 의존하는 모든 컴포넌트를 만족시키면서 변경하기 위해 많은 노력이 들기 때문에 상당히 안정적이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>안정된 컴포넌트&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_5.png"
width="600"
height="236"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_5_huda8f1298a64169a65f641afa6cef89c1_12377_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_5_huda8f1298a64169a65f641afa6cef89c1_12377_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="254"
data-flex-basis="610px"
>&lt;/p>
&lt;ul>
&lt;li>X는 세 컴포넌트를 &lt;strong>책임 responsible&lt;/strong>진다
&lt;ul>
&lt;li>X에 3개 컴포넌트가 의존하기 때문에 X를 변경하지 말아야할 이유는 3가지이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>X는 &lt;strong>독립적&lt;/strong>이다.
&lt;ul>
&lt;li>어디에도 의존하지 않으므로 변경되도록 만들 수 있는 외적인 영향이 전혀 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>불안정한 컴포넌트&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_6.png"
width="600"
height="240"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_6_hu7f1ed0727c7caffa02617c63a39a84b1_16824_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_6_hu7f1ed0727c7caffa02617c63a39a84b1_16824_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="250"
data-flex-basis="600px"
>&lt;/p>
&lt;ul>
&lt;li>책임성이 없다.
&lt;ul>
&lt;li>어떤 컴포넌트도 Y에 의존하지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>의존적이다.
&lt;ul>
&lt;li>3개 컴포넌트에 의존하므로 변경이 발생할 수 있는 외부 요인이 3가지이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="안정성-지표">안정성 지표&lt;/h3>
&lt;p>컴포넌트로 들어오고 나가는 의존성의 개수를 세어 컴포넌트가 위치상(Positional) 어느 정도의 안정성을 가지는지 계산할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Fan-in&lt;/strong>: 안으로 들어오는 의존성
&lt;ul>
&lt;li>컴포넌트 내부의 클래스에 의존하는 컴포넌트 외부의 클래수 개수&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Fan-out&lt;/strong>: 바깥으로 나가는 의존성
&lt;ul>
&lt;li>컴포넌트 외부의 크래스에 의존하는 컴포넌트 내부의 클래수 개수&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>I(불안정성)&lt;/strong>: &lt;code>I = Fan-out / (Fan-in + Fan-out)&lt;/code>
&lt;ul>
&lt;li>0 ~ 1&lt;/li>
&lt;li>0이면 최고로 안정된 컴포넌트&lt;/li>
&lt;li>1이면 최고로 불안정한 컴포넌트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Fan-in&lt;/code>과 &lt;code>Fan-out&lt;/code> 지표는 특정 컴포넌트 내부의 클래스에 의존하는, 컴포넌트 외부에 위치한 클래스의 개수를 세어서 계산할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_7.png"
width="600"
height="270"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_7_hub157614c3a6b055305efa756855a49e0_18409_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_7_hub157614c3a6b055305efa756855a49e0_18409_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="222"
data-flex-basis="533px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;code>I&lt;/code> 값이 1이면 어떤 컴포넌트도 해당 컴포넌트에 의존하지 않지만, 해당 컴포넌트는 다른 컴포넌트에 의존한다는 뜻이다.
&lt;ul>
&lt;li>최고로 불안정한 상태, 책임이 없으며 의존적이다.&lt;/li>
&lt;li>자신에게 의존하는 컴포넌트가 없으므로 변경하지 말아야 할 이유가 없다.&lt;/li>
&lt;li>다른 컴포넌트에 의존하기 때문에 언젠가는 해당 컴포넌트를 변경해야 할 이유가 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>I&lt;/code> 값이 0이면 해당 컴포넌트에 의존하는 다른 컴포넌트가 있지만, 해당 컴포넌트 자체는 다른 컴포넌트에 의존하지 않는다는 뜻이다.
&lt;ul>
&lt;li>최고로 안정된 상태, 다른 컴포넌트를 책임지면서 독립적이다.&lt;/li>
&lt;li>자신에게 의존하는 컴포넌트가 있으므로 변경하기가 어렵다.&lt;/li>
&lt;li>해당 컴포넌트를 변경하도록 강제하는 의존성은 같지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>SDP에서 컴포넌트 &lt;code>I&lt;/code> 지표는 그 컴포넌느가 의존하는 다른 컴포넌트들의 &lt;code>I&lt;/code>보다 커야한다고 말한다.&lt;/p>
&lt;p>즉, 의존성 방향으로 갈수록 &lt;code>I&lt;/code> 지표 값이 감소해야한다.&lt;/p>
&lt;h3 id="모든-컴포넌트가-안정적이어야-하는-것은-아니다">모든 컴포넌트가 안정적이어야 하는 것은 아니다.&lt;/h3>
&lt;p>모든 컴포넌트가 최고로 안정적인 시스템이라면 &lt;strong>변경이 불가능&lt;/strong>하다.&lt;/p>
&lt;p>이는 바람직한 상황은 아니며, 컴포넌트 구조를 설계할 때 기대하는 것은 &lt;strong>불안정한 컴포넌트와 안정된 컴포넌트가 공존하는 상태&lt;/strong>다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_8.png"
width="600"
height="279"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_8_hudc89e9bfdfd398c241eb318aebd58dcb_13750_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_8_hudc89e9bfdfd398c241eb318aebd58dcb_13750_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="516px"
>&lt;/p>
&lt;p>위 다이어그램은 세 컴포넌트로 구성된 이상적인 구조이다.&lt;/p>
&lt;p>&lt;strong>추상 컴포넌트&lt;/strong>&lt;/p>
&lt;p>인터페이스만을 포함하는 추상 컴포넌트는 상당히 안정적이므로, 덜 안정적인 컴포넌트가 의존할 수 있는 이상적인 대상이다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_9.png"
width="1234"
height="265"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_9_hu6570728dfc635355d54dc2e2f70ef94b_129829_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_9_hu6570728dfc635355d54dc2e2f70ef94b_129829_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="465"
data-flex-basis="1117px"
>&lt;/p>
&lt;p>안정적인 &lt;code>Stable&lt;/code>의 내부 클래스 &lt;code>U&lt;/code>가 불안정한 &lt;code>Flexible&lt;/code>의 내부 클래스 &lt;code>C&lt;/code>를 사용해야한다면, DIP를 도입해 문제를 해결할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_10.png"
width="1232"
height="493"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_10_hu9ebc981cdc230977d03f9eebf0861deb_153552_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_10_hu9ebc981cdc230977d03f9eebf0861deb_153552_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="249"
data-flex-basis="599px"
>&lt;/p>
&lt;p>&lt;code>US&lt;/code>라는 인터페이스를 생성한 수 &lt;code>UServer&lt;/code> 컴포넌트에 넣고, 해당 인터페이스를 구현하도록 하면 &lt;code>Stable&lt;/code>의 &lt;code>Flexible&lt;/code>에 대한 의존성을 끊을 수 있고, &lt;code>UServer&lt;/code> 자체는 어디에도 의존하지 않으므로 안정된 상태이므로, 모든 의존성이 감소하는 방향으로 개선할 수 있다.&lt;/p>
&lt;h2 id="sap-안정된-추상화-원칙">SAP: 안정된 추상화 원칙&lt;/h2>
&lt;blockquote>
&lt;p>컴포넌트는 안정된 정도만큼만 추상화되어야 한다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="고수준-정책을-어디에-위치시켜야-하는가">고수준 정책을 어디에 위치시켜야 하는가?&lt;/h3>
&lt;p>고수준 아키텍처가 정책 결정과 관련된 소프트웨어는 자주 변경되서는 절대로 안되는 소프트웨어이다.&lt;/p>
&lt;p>따라서 시스템에서 고수준 정책을 캡슐화하는 소프트웨어는 반드시 안정된 컴포넌트(&lt;code>I = 0&lt;/code>)에 위치해야 한다.&lt;/p>
&lt;p>불안정한 컴포넌트(&lt;code>I = 1&lt;/code>)는 반드시 변동성이 큰 소프트웨어, 즉 쉽고 바르게 변경할 수 있는 소프트웨어만을 포함해야 한다.&lt;/p>
&lt;p>하지만 고수준 정책을 안정된 컴포넌트에 위치시키면, 그 정책을 포함하는 소스코드는 수정하기 어려워져 시스템 전체 아키텍쳐가 유연성을 잃게 된다.&lt;/p>
&lt;p>개방 폐쇄 원칙의 추상화를 통해 컴포넌트가 최고로 안정된 상태이면서도 동시에 변경에 충분히 대응할 수 있을 정도로 유연하게 만들 수 있다.&lt;/p>
&lt;h3 id="안정된-추상화-원칙">안정된 추상화 원칙&lt;/h3>
&lt;p>안정된 추상화 원칙은 안정성과 추상화 정도 사이의 관계를 정의한다.&lt;/p>
&lt;ul>
&lt;li>안정된 컴포넌트는 추상 컴포넌트여야한다.&lt;/li>
&lt;li>이를 통해 안정성이 컴포넌트를 확장하는 일을 방해해서는 안된다.&lt;/li>
&lt;li>불안정한 컴포넌트는 반드시 구체 컴포넌트여야한다.
&lt;ul>
&lt;li>컴포넌트 내부의 구체적인 코드를 쉽게 변경할 수 있어야 하므로&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>따라서 안정적인 컴포넌트라면 반드시 인터페이스와 추상 클래스로 구성되어 쉽게 확장할 수 있어야 한다.&lt;/p>
&lt;p>안정된 컴포넌트가 확장 가능해지면 유연성을 얻게 되고 아키텍처를 과도하게 제약하지 않게 된다.&lt;/p>
&lt;p>SDP에서는 의존성이 반드시 안정성의 방향으로 향해야 한다고 말하며, SAP에서는 안정성이 결국 추상화를 의미한다고 말하기 때문에 SAP와 SDP를 결합하면 &lt;strong>컴포넌트에 대한 DIP&lt;/strong>와 같다.&lt;/p>
&lt;ul>
&lt;li>따라서 의존성은 추상화의 방향으로 향하게 된다.&lt;/li>
&lt;/ul>
&lt;h3 id="추상화-정도-측정하기">추상화 정도 측정하기&lt;/h3>
&lt;p>SDP + SPA 조합이 컴포넌트에 대한 DIP라고 언급했었지만, DIP는 클래스에 대한 원칙이므로 추상적이거나 그렇지 않거나 둘중 하나이다.&lt;/p>
&lt;p>하지만 SDP + SAP 조합은 컴포넌트에 대한 원칙이므로 컴포넌트의 어떤 부분은 추상적이면서 다른 부분은 안정적일 수 있다.&lt;/p>
&lt;p>&lt;code>A&lt;/code> 지표는 컴포넌트의 클래스 총 수 대비 인터페이스와 추상 클래스의 개수를 단순히 계산하여 컴포넌트의 추상화 정도를 측정한 값이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>Nc&lt;/code>: 컴포넌트의 클래스 개수&lt;/li>
&lt;li>&lt;code>Na&lt;/code>: 컴포넌트의 추상 클래스와 인터페이스 개수&lt;/li>
&lt;li>&lt;code>A&lt;/code>: 추상화 정도
&lt;ul>
&lt;li>&lt;code>A = Na / Nc&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>A&lt;/code>지표는 0과 1 사이의 값을 가지며, 0이면 추상 클래스가 하나도 없다는 뜻, 1이면 추상클래스만 포함한다는 뜻이다.&lt;/p>
&lt;h3 id="주계열-main-sequence">주계열: Main Sequence&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_11.png"
width="600"
height="297"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_11_hua926ad8375330f6f0926e565cc510cc5_5673_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_11_hua926ad8375330f6f0926e565cc510cc5_5673_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="484px"
>&lt;/p>
&lt;ul>
&lt;li>최고로 안정적이며 추상화된 컴포넌트는 (0, 1)&lt;/li>
&lt;li>최고로 불안정하며 구체화된 컴포넌트는 (1, 0)&lt;/li>
&lt;/ul>
&lt;p>컴포넌트는 추상화와 안정화 정도가 다양하므로 두 지점에만 분포할 수는 없다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/14/img_12.png"
width="579"
height="297"
srcset="https://codemario318.github.io/post/clean-architecture/14/img_12_huf3699ca9d7d2715e368d8f9e5572debf_24335_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/14/img_12_huf3699ca9d7d2715e368d8f9e5572debf_24335_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;p>따라서 A/I 그래프 상에서 컴포넌트가 위치할 수 있는 합리적인 지점을 정의하는 궤적이 있을 것이라 가정해 볼 수 있으며, 이 궤적은 컴포넌트가 절대로 위치해서는 안 되는 영역(배제할 구역)을 찾는 방식으로 추론할 수 있다.&lt;/p>
&lt;h3 id="고통의-구역-zone-of-pain">고통의 구역: Zone of Pain&lt;/h3>
&lt;p>(0, 0) 주변 구역에 위치한 컴포넌트는 매우 안정적이며 구체적이므로 굉장히 뻣뻣한 상태로 바람직한 상태는 아니다.&lt;/p>
&lt;ul>
&lt;li>추상적이지 않으므로 확장할 수 없다.&lt;/li>
&lt;li>안정적이므로 변경하기 어렵다.&lt;/li>
&lt;/ul>
&lt;p>제대로 설계된 컴포넌트라면 (0, 0) 근처에는 위치하지 않을 것이라 보는게 일반적이다.&lt;/p>
&lt;p>일부 소프트웨어 엔티티는 고통의 구역에 위치한다.&lt;/p>
&lt;ul>
&lt;li>데이터베이스 스키마
&lt;ul>
&lt;li>변동성이 매우 높다.&lt;/li>
&lt;li>극단적으로 구체적이다.&lt;/li>
&lt;li>많은 컴포넌트가 의존한다.&lt;/li>
&lt;li>OO 애플리케이션과 데이터베이스 사이에 위치한 인터페이스는 관리하기 굉장히 어렵다.&lt;/li>
&lt;li>스키마가 변경되면 대체로 고통을 수반한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>유틸리티 라이브러리(&lt;code>String&lt;/code> 컴포넌트)
&lt;ul>
&lt;li>I가 1일지라도, 실제로는 변동성이 거의 없다.&lt;/li>
&lt;li>속한 클래스가 모두 구체 클래스이다.&lt;/li>
&lt;li>광범위하게 사용되어 수정하면 혼란을 초래할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>변동될 가능성이 거의 없는 컴포넌트는 (0, 0)에 위치했더라도 해롭지 않다.&lt;/p>
&lt;p>고통의 구역에서 문제가 되는 경우는 변동성이 있는 소프트웨어 컴포넌트이다.&lt;/p>
&lt;h3 id="쓸모없는-구역-zone-of-uselessness">쓸모없는 구역: Zone of Uselessness&lt;/h3>
&lt;p>(1, 1)에 위치한 컴포넌트는 최고로 추상적이지만 누구도 그 컴포넌트에 의존하지 않기 때문에 쓸모없는 컴포넌트이며 이로인해 쓸모없는 구역이라 부른다.&lt;/p>
&lt;p>이 영역에 존재하는 소프트웨어 엔티티는 폐기물과도 같다.&lt;/p>
&lt;ul>
&lt;li>대부분 누구도 구현하지 않은 채 남겨진 추상 클래스&lt;/li>
&lt;/ul>
&lt;p>쓸모없는 구역 내부 깊숙이 자리잡은 컴포넌트는 이러한 엔티티의 상당 부분을 포함할 가능성이 높다.&lt;/p>
&lt;h3 id="배제-구역-벗어나기">배제 구역 벗어나기&lt;/h3>
&lt;p>변동성이 큰 컴포넌트 대부분은 두 배제 구역으로부터 가능한 멀리 떨어뜨려야 한다.&lt;/p>
&lt;p>주계열에 위치한 컴포넌트는 자신의 안정성에 비해 너무 추상적이지도 않고, 추상화 정도에 비해 너무 불안정하지도 않다.&lt;/p>
&lt;ul>
&lt;li>쓸모없지 않으면서 고통을 안겨 주지도 않는다.&lt;/li>
&lt;li>추상화된 수준에 어울릴 정도로만 다른 컴포넌트가 의존한다.&lt;/li>
&lt;li>구체화된 수준에 어울릴 정로로만 다른 컴포넌트에 의존한다.&lt;/li>
&lt;/ul>
&lt;p>컴포넌트가 위치할 수 있는 가장 바람직한 지점은 &lt;strong>주계열의 두 종점&lt;/strong>이다.&lt;/p>
&lt;p>하지만 대규모 시스템에서 일부 컴포넌트는 완벽히 추상적이거나 완전하게 안정적일 수 없으므로, 이러한 컴포넌트는 주 계열 바로 위에 또는 가깝게 위치하게 설계하는 것이 이상적이다.&lt;/p>
&lt;h3 id="주계열과의-거리">주계열과의 거리&lt;/h3>
&lt;p>추상화 정도를 측정하는 A/I 그래프에서 (1, 0), (0, 1)를 연결하는 직선인 주계열을 기준으로 해당 컴포넌트가 얼마나 떨어져있는지 거리를 측정하여 지표으로 사용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>D: 거리, D = |A + I - 1|
&lt;ul>
&lt;li>유효범위: [0, 1]&lt;/li>
&lt;li>0이면 주계열 바로 위에 위치, 1이면 주계열로부터 가정 멀리 위치&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이 지표를 통해 컴포넌트가 주계열에 대체로 일치하도록 설계되었는지(추상화, 구체화 수준에 어울리는 의존성을 갖는지) 분석하고, 거리가 먼 컴포넌트들을 개선할 수 있다.&lt;/p>
&lt;p>&lt;strong>통계적 활용&lt;/strong>&lt;/p>
&lt;p>값으로 계산할 수 있으므로 통계적으로 분석 가능해진다.&lt;/p>
&lt;p>설계에 포함된 컴포넌트들의 D를 계산하고 이들의 평균과 분산을 측정하였을때, 주계열에 일치하도록 설계되었다면 평균과 분산은 0에 가까워진다.&lt;/p>
&lt;ul>
&lt;li>분산을 통해 다른 컴포넌트에 비해 극히 예외적인 컴포넌트르 식별할 수 있으므로 관리 한계를 결정하는데 유용할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>시간에 따른 변화 확인&lt;/strong>&lt;/p>
&lt;p>각 컴포넌트의 D 값을 시간의 흐름에 따라 확인해보면, 해당 컴포넌트가 시간이 지남에 따라 의존성이 어떻게 변화하는지 확인할 수 있다.&lt;/p>
&lt;p>이를 통해 주계열에서 멀리 벗어난 컴포넌트들을 분석하여 인사이트를 얻는 것도 가능하다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>의존성 관리 지표는 설계의 의존성과 추상화 정도가 휼륭한 패턴이라고 생각하는 수준에 얼마나 잘 부합하는지를 측정한다.&lt;/p>
&lt;p>하지만 지표는 임의로 결정된 표준을 기초로 한 측정값이므로 진리가 아니며, 의존성의 좋고 나쁨을 지표로만 판단해서는 안된다.&lt;/p>
&lt;p>그러나 이러한 지표를 통해 이상을 확인할 여지가 충분하고, 이를 상세하게 분석하여 아키텍처 개선에 유용하게 사용될 수 있다.&lt;/p></description></item><item><title>13. 컴포넌트 응집도</title><link>https://codemario318.github.io/post/clean-architecture/13/</link><pubDate>Thu, 07 Mar 2024 15:09:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/13/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/13/cover.png" alt="Featured image of post 13. 컴포넌트 응집도" />&lt;p>이 장에서는 컴포넌트 응집도와 관련된 세 가지 원칙을 논의한다.&lt;/p>
&lt;h2 id="rep-재사용릴리스-등가-원칙">REP: 재사용/릴리스 등가 원칙&lt;/h2>
&lt;blockquote>
&lt;p>재사용 단위는 릴리스 단위와 같다.&lt;/p>
&lt;/blockquote>
&lt;p>재사용 가능한 컴포넌트나 컴포넌트 라이브러리가 매우 많이 만들어짐에 따라 모듈 관리 도구가 점점 중요해졌다.&lt;/p>
&lt;p>소프트웨어 컴포넌트가 릴리스 절차를 통해 추적 관리되지 않거나, 릴리스 번호가 부여되지 않는다면 해당 컴포넌트를 재사용하고 싶어도 할 수도 없고, 하지도 않을 것이다.&lt;/p>
&lt;ul>
&lt;li>릴리스 번호가 없다면 재사용 컴포넌트들이 서로 호환되는지 보증할 방법이 전혀 없다.&lt;/li>
&lt;li>릴리스 번호를 통해 새로운 버전이 언제 출시되고 무엇이 변했는지를 소프트웨어 개발자들이 알아야 한다.
&lt;ul>
&lt;li>따라서 릴리스 절차에는 적절한 공지와 함께 릴리스 문서 작성도 포함되어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이 원칙을 소프트웨어 설계와 아키텍처 관점에서 보면 &lt;strong>단일 컴포넌트는 응집성 높은 클래스와 모듈들로 구성되어야 함&lt;/strong>을 뜻한다.&lt;/p>
&lt;p>다른 시각으로 바라보면 &lt;strong>하나의 컴포넌트로 묶인 클래스와 모듈은 반드시 함께 릴리스할 수 있어야 한다.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>하나의 컴포넌트로 묶인 클래스와 모듈은 버전 번호가 같아야 한다.&lt;/li>
&lt;li>동일한 릴리스로 추적 관리되어야 한다.&lt;/li>
&lt;li>동일한 릴리스 문서에 포함되어야 한다.&lt;/li>
&lt;/ul>
&lt;p>REP의 이러한 내용은 개발자들 간의 관습이라는 점이 약점이다. 하지만 그렇기 때문에 컴포넌트가 REP를 위배하면 컴포넌트 사용자가 알게 되고, 아키텍트로서 능력을 높게 평가하지 않을 것이다.&lt;/p>
&lt;p>이 원칙의 약점은 다른 두 원칙이 지닌 강점을 통해 충분히 보완할 수 있다.&lt;/p>
&lt;h2 id="ccp-공통-폐쇄-원칙">CCP: 공통 폐쇄 원칙&lt;/h2>
&lt;blockquote>
&lt;p>동일한 시점에 변경되는 클래스를 같은 컴포넌트로 묶어라.&lt;br>
서로 다른 시점에 다른 이유로 변경되는 클래스는 다른 컴포넌트로 분리하라.&lt;/p>
&lt;/blockquote>
&lt;h3 id="srp와-유사성">SRP와 유사성&lt;/h3>
&lt;p>이 원칙은 단일 책임 원칙(SRP)을 컴포넌트 관점에서 다시 쓴 원칙이다.&lt;/p>
&lt;blockquote>
&lt;p>동일한 시점에 동일한 이유로 변경되는 것들을 한데 묶어라. 서로 다른 시점에 다른 이유로 변경되는 것들은 서로 분리하라.&lt;/p>
&lt;/blockquote>
&lt;p>SRP에서 클래스의 변경 이유는 하나여야 한다고 말하듯이, 공통 폐쇄 원칙에서도 마찬가지로 &lt;strong>단일 컴포넌트는 변경의 이유가 여러개여서는 안된다&lt;/strong>고 말한다.&lt;/p>
&lt;p>대다수의 애플리케이션에서 유지보수성(Maintainability)은 재사용성보다 훨씬 중요하다.&lt;/p>
&lt;p>애플리케이션의 코드가 반드시 변경되어야 한다면, 여러 컴포넌트 도처에서 분산되어 발생하기 보다는, 변경 모두가 단일 컴포넌트에서 발생하는 편이 낫다.&lt;/p>
&lt;p>변경을 단일 컴포넌트로 제한할 수 있다면, 해당 컴포넌트만 재배포하면 되므로 의존하지 않는 다른 컴포넌트는 다시 검증하거나 배포할 필요가 없어진다.&lt;/p>
&lt;p>CCP는 같은 이유로 변경될 가능성이 있는 클래스는 모두 한곳으로 묶을 것을 권한다.&lt;/p>
&lt;ul>
&lt;li>물리적 또는 개념적으로 강하게 결합되어 항상 함께 변경되는 클래스들은 하나의 컴포넌트에 속해야 한다.&lt;/li>
&lt;/ul>
&lt;p>이를 통해 소프트웨어를 릴리스, 재검증, 배포하는 일과 관련된 작업량을 최소화 할 수 있다.&lt;/p>
&lt;h3 id="ocp와의-유사성">OCP와의 유사성&lt;/h3>
&lt;p>이 원칙은 개방 폐쇄 원칙과도 밀접하게 관련되어 있다.&lt;/p>
&lt;p>OCP에서는 클래스가 변경에는 닫혀있고 확장에는 열려있어야 한다고 말하는데, 100% 완전한 폐쇄란 불가능하므로 전략적으로 폐쇄해야 하며, 이에 따라 발생할 가능성이 있거나 과거에 발생했던 대다수의 공통적인 변경에 대해서 클래스가 닫혀 있도록 설계한다.&lt;/p>
&lt;p>CCP에서는 동일한 유형의 변경에 대해 닫혀있는 클래스들을 하나의 컴포넌트로 묶음으로써 OCP에서 얻은 교훈을 확대 적용한다.&lt;/p>
&lt;p>따라서 변경이 필요한 요구사항이 발생했을 때, 그 변경이 영향을 주는 컴포넌트들이 최소한으로 한정될 가능성이 확실히 높아진다.&lt;/p>
&lt;h2 id="crp-공통-재사용-원칙">CRP: 공통 재사용 원칙&lt;/h2>
&lt;blockquote>
&lt;p>컴포넌트 사용자들을 필요하지 않는 것에 의존하게 강요하지 말라.&lt;/p>
&lt;/blockquote>
&lt;p>공통 재사용 원칙도 클래스와 모듈을 어느 컴포넌트에 위치시킬 지 결정할 때 도움되는 원칙이다.&lt;/p>
&lt;p>CRP에서는 &lt;strong>같이 재사용되는 경향이 있는 클래스와 모듈들은 같은 컴포넌트에 포함해야 한다고 말한다.&lt;/strong>&lt;/p>
&lt;p>재사용 가능한 클래스는 재사용 모듈의 일부로써 해당 모듈의 다른 클래스와 상호작용하는 경우가 많은데, CRP에서는 이런 클래스들이 동일한 컴포넌트에 포함되어야 한다고 말한다.&lt;/p>
&lt;ul>
&lt;li>예를 들어 컨테이너 클래스와 해당 클래스의 이터레이터 클래스는 서로 강하게 결합되어 있기 때문에 함께 재사용되므로 이들 클래스는 반드시 동일한 컴포넌트에 위치해야 한다.&lt;/li>
&lt;/ul>
&lt;p>이처럼 CRP는 각 컴포넌트에 어떤 클래스들을 포함시켜야 하는지를 설명해준다.&lt;/p>
&lt;h3 id="isp와의-관계">ISP와의 관계&lt;/h3>
&lt;p>CRP는 인터페이스 분리 원칙의 포괄적인 버전이다.&lt;/p>
&lt;blockquote>
&lt;p>필요하지 않은 것에 의존하지 말라.&lt;/p>
&lt;/blockquote>
&lt;p>ISP는 사용하지 않은 메서드가 있는 클래스에 의존하지 말라고 조언하고, CRP는 사용하지 않는 클래스를 가진 컴포넌트에 의존하지 말라고 조언한다.&lt;/p>
&lt;p>이를 통해 CRP는 동일한 컴포넌트로 묶어서는 안되는 클래스가 무엇인지도 말해준다.&lt;/p>
&lt;p>&lt;strong>어떤 컴포넌트가 다른 컴포넌트를 사용하면, 두 컴포넌트 사이에는 의존성이 생겨난다.&lt;/strong>&lt;/p>
&lt;p>사용하는 컴포넌트가 사용되는 컴포넌트의 극히 일부만을 사용한다고 하더라도 의존성은 조금도 약해지지 않는다.&lt;/p>
&lt;ul>
&lt;li>사용되는 컴포넌트가 변경될 때마다 사용하는 컴포넌트도 변경해야 할 가능성이 높다.&lt;/li>
&lt;li>사용하는 컴포넌트를 변경하지 않더라도, 재컴파일, 재검증, 재배포를 해야 하는 가능성은 여전히 남아있다.&lt;/li>
&lt;/ul>
&lt;p>따라서 &lt;strong>의존하는 컴포넌트가 있다면 해당 컴포넌트의 모든 클래스에 대해 의존함을 확실히 인지해야한다.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>한 컴포넌트에 속한 클래스들은 더 작게 그룹지을 수 없다.&lt;/li>
&lt;li>그 중 일부 클래스에만 의존하고 다른 클래스와는 독립적일 수 없음을 확실히 인지해야한다.&lt;/li>
&lt;/ul>
&lt;p>CRP는 어떤 클래스를 한데 묶어도 되는지보다는, 어떤 클래스를 한데 묶어서는 안 되는지에 대해 훨씬 더 많은 것을 이야기한다.&lt;/p>
&lt;ul>
&lt;li>강하게 결합되지 않은 클래스들을 동일한 컴포넌트에 위치시켜서는 안된다고 말한다.&lt;/li>
&lt;/ul>
&lt;h2 id="컴포넌트-응집도에-대한-균형-다이어그램">컴포넌트 응집도에 대한 균형 다이어그램&lt;/h2>
&lt;p>응집도 관점으로 세 원칙이 상충된다.&lt;/p>
&lt;ul>
&lt;li>포함 원칙: &lt;strong>REP&lt;/strong>, &lt;strong>CCP&lt;/strong>
&lt;ul>
&lt;li>컴포넌트의 크기를 더욱 크게 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>배제 원칙: &lt;strong>CRP&lt;/strong>
&lt;ul>
&lt;li>컴포넌트를 더욱 작게 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>뛰어난 아키텍트라면 이 원칙들이 균형을 이루는 방법을 찾아야한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/13/img.png"
width="821"
height="556"
srcset="https://codemario318.github.io/post/clean-architecture/13/img_hue86487ac117dcaed641584f80e0bb2e1_143879_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/13/img_hue86487ac117dcaed641584f80e0bb2e1_143879_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="147"
data-flex-basis="354px"
>&lt;/p>
&lt;ul>
&lt;li>REP와 CRP에만 중점을 두면, 사소한 변경이 생겼을 때 너무 많은 컴포넌트에 영향을 미친다.&lt;/li>
&lt;li>CCP와 REP에만 과도하게 집중하면 불필요한 릴리스가 너무 빈번해진다.&lt;/li>
&lt;/ul>
&lt;p>이 균형 삼각형에서 개발팀이 현재 관심을 기울이는 부분을 충족시키는 위치를 찾아야 하며, 시간이 흐르면서 개발팀이 주의를 기울이는 부분 역시 변한다는 사실도 이해하고 있어야 한다.&lt;/p>
&lt;ul>
&lt;li>ex) 프로젝트 초기에는 개발 가능성이 더욱 중요하므로 CCP가 REP보다 훨씬 더 중요하다.&lt;/li>
&lt;/ul>
&lt;p>일반적으로 프로젝트는 삼각형의 오른쪽에서 시작하여 재사용성을 희생한다.&lt;/p>
&lt;p>프로젝트가 성숙하고, 파생된 또 다른 프로젝트가 시작되면, 점차 왼쪽으로 이동해간다.&lt;/p>
&lt;p>즉, 프로젝트의 컴포넌트 구조는 시간과 성숙도에 따라 변하며, 프로젝트가 실제로 수행하는 일 자체보다는 프로젝트가 발전되고 사용되는 방법과 더 관련이 깊다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>과거에는 응집도를 &amp;lsquo;모듈은 단 하나의 기능만 수행해야한다.&amp;lsquo;는 속성 정도로 훌씬 단순했다.&lt;/p>
&lt;p>하지만 컴포넌트 응집도에 관한 세 가지 원칙은 응집도가 가질 수 있는 훨씬 복잡한 다양성을 설명해 준다.&lt;/p>
&lt;p>어느 클래스들을 묶어서 컴포넌트로 만들지 결정할 때, 재사용성과 개발 가능성이라는 상충하는 힘을 고려하여 애플리케이션의 요구에 맞게 균형을 잡는 일은 중요하다.&lt;/p>
&lt;p>이 균형점은 거의 항상 유동적이므로 컴포넌트를 구성하는 방식도 조금씩 흐트러지고 또 진화해야한다.&lt;/p></description></item><item><title>12. 컴포넌트</title><link>https://codemario318.github.io/post/clean-architecture/12/</link><pubDate>Thu, 07 Mar 2024 14:21:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/12/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/12/cover.png" alt="Featured image of post 12. 컴포넌트" />&lt;blockquote>
&lt;p>SOLID 원칙이 벽과 방에 벽돌을 배치하는 방법을 알려준다면, 컴포넌트 원칙은 빌딩에 방을 배치하는 방법을 설명한다.&lt;/p>
&lt;p>큰 빌딩과 마찬가지로 대규모 소프트웨어 시스템은 작은 컴포넌트들로 만들어지므로, 컴포넌트가 무엇인지, 구성하는 요소는 무엇인지 알아보고, 컴포넌트를 결합하여 시스탬을 구성하는 방법에 대해 논의한다.&lt;/p>
&lt;/blockquote>
&lt;p>컴포넌트는 시스템의 구성 요소로 배포할 수 있는 가장 작은 단위다.&lt;/p>
&lt;ul>
&lt;li>java: .jar, ruby: gem, .net: DLL&lt;/li>
&lt;li>컴파일 언어에서는 바이너리 파일의 결합체&lt;/li>
&lt;li>인터프리터 언어의 경우 소스 파일의 결합체&lt;/li>
&lt;/ul>
&lt;p>여러 컴포넌트를 서로 링크하여 실행 가능한 단일 파일로 생성할 수 있다.&lt;/p>
&lt;ul>
&lt;li>단일 아카이브: &lt;code>.war&lt;/code>&lt;/li>
&lt;li>플러그인: &lt;code>.jar&lt;/code>, &lt;code>dll&lt;/code>&lt;/li>
&lt;li>실행 파일: &lt;code>.exe&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>컴포넌트가 마지막에 어떤 형태로 배포되든, 잘 설계된 컴포넌트라면 반드시 독립적으로 배포 가능한, 따라서 독립적으로 개발 가능한 능력을 갖춰야한다.&lt;/p>
&lt;h2 id="컴포넌트의-간략한-역사">컴포넌트의 간략한 역사&lt;/h2>
&lt;p>소프트웨어 개발 초창기에는 메모리에서의 프로그램 위치와 레이아웃을 프로그래머가 직접 제어하여, 프로그램 위치가 결정되면, 재배치가 불가능했다.&lt;/p>
&lt;ul>
&lt;li>라이브러리 함수의 소스 코드를 애플리케이션 코드에 직접 포함시켜 단일 프로그램으로 컴파일했다.&lt;/li>
&lt;li>라이브러리는 바이너리가 아니라 소스 코드 형태로 유지되었다.&lt;/li>
&lt;li>자원이 한정적이었기 때문에 소스코드 전체를 여러번에 걸쳐서 읽어야하지만, 코드 전체를 메모리에 상주시킬 수가 없어 여러차례 읽어야했다.&lt;/li>
&lt;li>컴파일 시간을 단축시키기위해 함수 라이브러리의 소스코드를 애플리케이션 코드로부터 분리했다.
&lt;ul>
&lt;li>개별적으로 컴파일하고, 컴파일된 바이너리를 메모리의 특정 위치에 로드했다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>하지만 애플리케이션은 점점 커졌고, 할당된 공간을 넘어서게 되어 두 개의 주소 세그먼트로 분리하고 함수 라이브라리 공간을 사이에 두고 오가며 동작하게 배치해야했다.&lt;/li>
&lt;li>사용하는 메모리가 늘어날스록 이러한 단편화는 계속될 수밖에 없었기 때문에 지속가능하지 않았다.&lt;/li>
&lt;/ul>
&lt;h3 id="재배치성">재배치성&lt;/h3>
&lt;p>이러한 문제의 해결책은 재배치가 가능한 바이너리(Relocatable binary)였다.&lt;/p>
&lt;ul>
&lt;li>지능적인 로더를 사용해서 메모리에 재배치할 수 있는 형태의 바이너리를 생성하도록 컴파일러를 수정&lt;/li>
&lt;/ul>
&lt;p>함수 라이브러리를 로드할 위치와 애필리케이션을 로드할 위치를 로더에게 지시할 수 있게 되었다.&lt;/p>
&lt;p>이를 통해 오직 필요한 함수만을 로드할 수 있게 되었다.&lt;/p>
&lt;p>컴파일러는 재배치 가능한 바이너리 안의 함수 이름을 메타데이터 형태로 생성하도록 수정되었다.&lt;/p>
&lt;ul>
&lt;li>프로그램이 라이브러리 함수를 호출한다면 컴파일러는 라이브러리 함수 이름을 외부 참조(External reference)&lt;/li>
&lt;li>라이브러리 함수를 정의하는 프로그램이라면 외부 정의(External definition)&lt;/li>
&lt;/ul>
&lt;p>이렇게 함으로써 외부 정의를 로드할 위치가 정해지만 하면 로더가 외부 참조를 외부 정의에 링크시킬 수 있게 되었고, 이렇게 링킹 로더(Linking Loader)가 탄생했다.&lt;/p>
&lt;h3 id="링커">링커&lt;/h3>
&lt;p>링킹 로더의 등장으로 프로그래머는 프로그램을 개별적으로 컴파일하고 로드할 수 있는 단위로 분할할 수 있게 되었다.&lt;/p>
&lt;p>하지만 프로그램도 훨씬 커지게 되며 링킹 로더의 성능으로 감당할 수 없는 수준이 되었다.&lt;/p>
&lt;p>이에 따라 로드와 링크가 두 단계로 분리되었다.&lt;/p>
&lt;ul>
&lt;li>링커라는 별도의 애플리케이션으로 링크가 완료된 재배치 코드를 만들어주어 로딩 과정이 아주 빨라졌다.&lt;/li>
&lt;li>한번 만들어둔 실행 파일은 언제라도 빠르게 로드할 수 있게 되었다.&lt;/li>
&lt;/ul>
&lt;p>이후 C와 같은 고수준 언어를 사용하기 시작하며 소스 모듈은 &lt;code>.c&lt;/code>파일에서 &lt;code>.o&lt;/code> 파일로 컴파일된 후, 링커로 전달되어 바르게 로드될 수 있는 형태의 실행 파일로 만들어졌다.&lt;/p>
&lt;p>하지만 프로그램의 규모가 커지며 전체 모듈을 컴파일 하는데 꽤 시간이 걸렸고, 이후에 링크에서는 더 많은 시간이 소요되었다.&lt;/p>
&lt;blockquote>
&lt;p>로드 시간은 여전히 빨랐지만, &lt;strong>컴파일-링크 시간&lt;/strong>이 병목 구간이었다.&lt;/p>
&lt;/blockquote>
&lt;p>하지만 자원의 성능이 비약적으로 향상되며 프로그램을 성장시키는 속도보다 링크 시간이 줄어드는 속고가 더 빨라지기 시작했고, 소규모 작업이라면 링킹 로더마저도 다시금 사용할 만하게 되었다.&lt;/p>
&lt;p>이렇게 액티브 X와 공유 라이브러리 시대가 열렸고 &lt;code>.jar&lt;/code> 파일도 등장하기 시작했다.&lt;/p>
&lt;p>다수의 &lt;code>.jar&lt;/code> 파일 또는 다수의 공유 라이브러리를 순식간에 서로 링크한 후, 링크가 끝난 프로그램을 실행할 수 있게 되었고, 이렇게 **컴포넌트 플러그인 아키텍쳐(Component Plugin Architecture)**가 탄생했다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>런타임에 플러그인 형태로 결합할 수 있는 동적 링크 파일이 이 책에서 말하는 소프트웨어 컴포넌트에 해당한다.&lt;/p>
&lt;p>과거에는 초인적인 노력을 들여아만 컴포넌트 플러그인 아키텍처를 적용할 수 있었지만, 이제는 기본으로 쉽게 사용할 수 있는 지점까지 다다랐다.&lt;/p></description></item><item><title>11. DIP: 의존성 역전 원칙</title><link>https://codemario318.github.io/post/clean-architecture/11/</link><pubDate>Sun, 03 Mar 2024 10:17:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/11/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/11/cover.png" alt="Featured image of post 11. DIP: 의존성 역전 원칙" />&lt;p>의존성 역전 원칙에서 말하는 &amp;lsquo;유연성이 극대화된 시스템&amp;rsquo;이란 &lt;strong>소스 코드 의존성이 추상(Abstraction)에 의존하며 구체(Concretion)에는 의존하지 않는 시스템&lt;/strong>이다.&lt;/p>
&lt;p>자바와 같은 정적 타입 언어에서 이 말은 &lt;code>use&lt;/code>, &lt;code>import&lt;/code>, &lt;code>include&lt;/code> 구분은 오직 &lt;strong>인터페이스나 추상 클래스 같은 추상적인 선언만을 참조해야 한다&lt;/strong>는 뜻이다.&lt;/p>
&lt;p>마찬가지로 동적 타입 언어에서도 소스 코드 의존 관계에서 구체 모듈은 참조해서는 안된다.&lt;/p>
&lt;p>하지만 구체 모듈이 무엇인지 정의하기 다소 어렵고, 호출할 함수가 구현된 모듈이라면 참조하지 않기가 특히 어렵다.&lt;/p>
&lt;p>소프트웨어 시스템이라면 구체적인 많은 장치에 반드시 의존하기 때문에 규칙으로 보기에 비현실적이다.&lt;/p>
&lt;ul>
&lt;li>ex) 자바 &lt;code>String&lt;/code>은 구체 클래스
&lt;ul>
&lt;li>애써 추상 클래스로 만들려는 시도는 현실성이 없다.&lt;/li>
&lt;li>&lt;code>java.lang.String&lt;/code> 구체 클래스에 대한 소스 코드 의존성은 벗어날 수 없고, 벗어나서도 안된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>String&lt;/code> 클래스는 변경되는 일이 거의 없고, 있더라도 엄격하게 통제되므로 매우 안정적이다.&lt;/p>
&lt;ul>
&lt;li>개발자와 아키텍트는 &lt;code>String&lt;/code> 클래스에서 변경이 자주 발생할 것이라고 염려할 필요가 없다.&lt;/li>
&lt;/ul>
&lt;p>이러한 이유로 DIP를 논할 때 운영체제나 플랫폼 같이 안정성이 보장된 환경에 대해서는 무시하는 편이다.&lt;/p>
&lt;ul>
&lt;li>환경에 대한 의존성을 용납하는 이유는 변경되지 않기 때문이다.&lt;/li>
&lt;/ul>
&lt;p>즉, &lt;strong>변동성이 큰(Volatile) 구체적인 요소&lt;/strong>가 의존하지 않도록 만들어야 하는 목표이며, 구체적인 요소는 지속적인 개발을 통해 계속 변경될 수 밖에 없는 모듈들이다.&lt;/p>
&lt;h2 id="안정된-추상화">안정된 추상화&lt;/h2>
&lt;p>안정된 소프트웨어 아키텍처란 변동성이 큰 구현제에 의존하는 일은 지양하고, 안정된 추상 인터페이스를 선호하는 아키텍처이다.&lt;/p>
&lt;p>인터페이스는 구현체보다 변동성이 낮다.&lt;/p>
&lt;p>따라서 인터페이스를 변경하지 않고도 구현체에 기능을 추가할 수 있는 방법을 통해 인터페이스의 변동성을 낮춰야한다.&lt;/p>
&lt;ul>
&lt;li>변동성이 큰 구체 클래스를 참조하지 말라.
&lt;ul>
&lt;li>추상 인터페이스를 참조하라&lt;/li>
&lt;li>객체 생성 방식을 강하게 제약하며, 일반적으로 추상 팩토리(Abstract Factory)를 사용하도록 강제한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>변동성이 큰 구체 클래스로부터 파생하지 말라.
&lt;ul>
&lt;li>상속은 소스 코드에 존재하는 모든 관계 중에서 가장 강력한 동시에 뻣뻣해서 변경하기 어렵다.&lt;/li>
&lt;li>상속을 아주 신중하게 사용해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구체 함수를 오버라이드 하지 말라.
&lt;ul>
&lt;li>구체 함수는 대체로 소스 코드 의존성을 필요로한다.&lt;/li>
&lt;li>구체 함수를 오버라이드 하면 이러한 의존성을 제거할 수 없게되며, 그 의존성을 상속하게 된다.&lt;/li>
&lt;li>추상 함수로 선언하고 구현체들에서 각자의 용도에 맞게 구현한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구체적이며 변동성이 크다면 절대로 그 이름을 언급하지 말라.&lt;/li>
&lt;/ul>
&lt;h2 id="팩토리">팩토리&lt;/h2>
&lt;p>사실상 모든 언어에서 객체를 생성하려면 해당 객체를 구체적으로 정의한 코드에 대해 소스 코드 의존성이 발생하므로, &lt;strong>변동성이 큰 구체적인 객체는 특별히 주의해서 생성&lt;/strong>해야한다.&lt;/p>
&lt;p>대다수의 객체 지향 언어에서 바람직하지 못한 의존성을 처리할 때 추상 팩토리를 사용할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/11/img.png"
width="1410"
height="712"
srcset="https://codemario318.github.io/post/clean-architecture/11/img_hufd5bb71d9d4dcad5d050da13121b4711_297143_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/11/img_hufd5bb71d9d4dcad5d050da13121b4711_297143_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>소스 코드 의존성&lt;/strong>
&lt;ul>
&lt;li>곡선은 구체적인 것들로부터 추상적인 것들은 분리하고 있다.&lt;/li>
&lt;li>소스 코드 의존성은 해당 곡선과 교차할 때 모두 추상적인 쪽으로 향한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>컴포넌트&lt;/strong>
&lt;ul>
&lt;li>시스템이 곡선을 기준으로 추상 컴포넌트와 구체 컴포넌트로 분리된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>제어흐름은 소스 코드 의존성과는 정반대 방향으로 곡선을 가로지르고 있는데, 소스 코드 의존성은 제어흐름과는 반대 방향으로 역전된다.&lt;/p>
&lt;p>이러한 이유로 이 원칙을 의존성 역전이라고 부른다.&lt;/p>
&lt;h2 id="구체-컴포넌트">구체 컴포넌트&lt;/h2>
&lt;p>위 예제의 경우 &lt;code>ServiceFactoryImpl&lt;/code> 구체 클래스가 &lt;code>ConcreteImpl&lt;/code> 구체 클래스에 의존하고 있으므로 DIP를 위배한다고 볼 수 있다.&lt;/p>
&lt;p>DIP 위배를 모두 없앨수는 없지만, DIP를 위배하는 클래스들은 적은 수의 구체 컴포넌트 내부로 모을 수 있고, 이를 통해 시스템의 나머지 부분과는 분리할 수 있다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>DIP는 고수준의 아키텍처 원칙에서 지속적으로 언급되는 규칙이다.&lt;/p>
&lt;p>DIP는 아키텍처 다이어그램에서 가장 눈에 드라나는 원칙이 될 것이다.&lt;/p>
&lt;p>곡선은 아키텍처의 경계가 되고, 의존성은 곡선을 경계로 더 추상적인 엔티티가 있는 쪽으로만 향한다.&lt;/p></description></item><item><title>10. ISP: 인터페이스 분리 원칙</title><link>https://codemario318.github.io/post/clean-architecture/10/</link><pubDate>Sun, 03 Mar 2024 09:49:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/10/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/10/cover.png" alt="Featured image of post 10. ISP: 인터페이스 분리 원칙" />&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction BT
class User1 {
}
class User2 {
}
class User3 {
}
class OPS {
op1()
op2()
op3()
}
OPS &lt;-- User1
OPS &lt;-- User2
OPS &lt;-- User3
&lt;/pre>
&lt;ul>
&lt;li>다수의 사용자가 &lt;code>OPS&lt;/code> 클래스의 오퍼레이션을 사용함
&lt;ul>
&lt;li>&lt;code>UserN&lt;/code>은 &lt;code>opN&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>OPS&lt;/code>는 정적 타입 언어로 작성된 클래스&lt;/li>
&lt;/ul>
&lt;p>위와 같은 경우 &lt;code>User1&lt;/code>이 &lt;code>op2&lt;/code>, &lt;code>op3&lt;/code>를 전혀 사용하지 않음에도 이 두 메서드에 의존하게되고, 사용하지 않는 소스 코드가 변경되면 다시 컴파일한 후 새로 배포해야한다.&lt;/p>
&lt;p>인터페이스 분리 원칙은 &lt;strong>오퍼레이션을 인터페이스 단위로 분리하여 이러한 의존성을 제거&lt;/strong>한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class User1 {
}
class User2 {
}
class User3 {
}
class U1Ops {
&lt;&lt; interface >>
op1()
}
class U2Ops {
&lt;&lt; interface >>
op2()
}
class U3Ops {
&lt;&lt; interface >>
op3()
}
class OPS {
op1()
op2()
op3()
}
OPS --|> U1Ops
OPS --|> U2Ops
OPS --|> U3Ops
U1Ops &lt;-- User1
U2Ops &lt;-- User2
U3Ops &lt;-- User3
&lt;/pre>
&lt;p>&lt;code>User1&lt;/code>의 소스 코드는 &lt;code>U1Ops&lt;/code>와 &lt;code>op1&lt;/code>에는 의존하지만 &lt;code>OPS&lt;/code>에는 의존하지 않게 되어 &lt;code>OPS&lt;/code> 에서 발생한 변경이 &lt;code>User1&lt;/code>과 전혀 관계없는 변경이라면, &lt;code>User1&lt;/code>을 다시 컴파일하고 새로 배포하는 상황은 초래되지 않는다.&lt;/p>
&lt;h2 id="isp와-언어">ISP와 언어&lt;/h2>
&lt;p>정적 타입 언어는 사용자가 &lt;code>import&lt;/code>, &lt;code>use&lt;/code>, &lt;code>include&lt;/code>와 같은 타입 선언문을 사용하도록 강제한다.&lt;/p>
&lt;p>이러한 &lt;strong>&amp;lsquo;포함된(included)&amp;rsquo;&lt;/strong> 선언문으로 인해 소스 코드 의존성이 발생하고, 이로 인해 재컴파일 도는 재배포가 강제되는 상황이 무조건 초래된다.&lt;/p>
&lt;ul>
&lt;li>동적 타입 언어네서는 소스 코드에 이러한 선언문이 존재하지 않고 런타임에 추론이 발생한다.
&lt;ul>
&lt;li>소스 코드 의존성이 아예 없으며, 재컴파일과 재배포가 필요없다.&lt;/li>
&lt;li>이러한 이유로 동적 타입 언어를 사용하면 정적 타입 언어를 사용할 때보다 유연하며 결합도가 낮은 시스템을 만들 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ISP를 아키텍처가 아니라, 언어와 관련된 문제라고 결론내릴 여지가 있다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="isp와-아키텍처">ISP와 아키텍처&lt;/h2>
&lt;p>ISP를 사용하는 근본적인 동기를 살펴보면, 잠재되어 있는 더 깊은 우려사항을 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>일반적으로 필요 이상으로 많을 걸 포함하는 모듈에 의존하는 것은 해로운 일이다.
&lt;ul>
&lt;li>소스 코드 의존성의 경우 &lt;strong>불필요한 재컴파일과 재배포를 강제&lt;/strong>하기 때문이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>위와 같은 문제는 물론 아키텍처 수준에서도 마찬가지의 상황이 발생한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a[System S]
b[Framework F]
c[Database D]
a --> b --> c
&lt;/pre>
&lt;ul>
&lt;li>&lt;code>S&lt;/code> 시스템을 구축하며 &lt;code>F&lt;/code>라는 프레임워크를 도입하려고한다.&lt;/li>
&lt;li>&lt;code>F&lt;/code> 프레임워크는 &lt;code>D&lt;/code>라는 특정 데이터베이스를 반드시 사용하도록 만들었다.&lt;/li>
&lt;li>&lt;code>S&lt;/code>는 &lt;code>F&lt;/code>에 의존하고, &lt;code>F&lt;/code>는 &lt;code>D&lt;/code>에 의존하게 된다.&lt;/li>
&lt;/ul>
&lt;p>위와 같은 상황에서 &lt;code>F&lt;/code>에서는 불필요한 기능, 즉 &lt;code>S&lt;/code>와는 전혀 관계없는 기능이 &lt;code>D&lt;/code>에 포함되어있다고 가정하면,&lt;/p>
&lt;ul>
&lt;li>불필요한 기능으로 인해 &lt;code>D&lt;/code> 내부가 변경되면, &lt;code>F&lt;/code>를 재배포 해야할 수도 있다.&lt;/li>
&lt;li>&lt;code>D&lt;/code> 내부의 기능 중 &lt;code>F&lt;/code>와 &lt;code>S&lt;/code>에서 불필요한 기능에 문제가 발생해도 &lt;code>F&lt;/code>와 &lt;code>S&lt;/code>에 영향을 준다.&lt;/li>
&lt;/ul>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>불필요한 짐을 실은 무언가에 의존하면 예상치도 못한 문제에 빠진다.&lt;/p></description></item><item><title>9. LSP: 리스코프 치환 원칙</title><link>https://codemario318.github.io/post/clean-architecture/9/</link><pubDate>Sat, 02 Mar 2024 16:20:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/9/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/9/cover.png" alt="Featured image of post 9. LSP: 리스코프 치환 원칙" />&lt;blockquote>
&lt;p>&lt;strong>하위 타입(Subtype)&lt;/strong>&lt;br>
&lt;code>S&lt;/code>타입의 객체 &lt;code>o1&lt;/code> 각각에 대응하는 &lt;code>T&lt;/code>타입 객체 &lt;code>o2&lt;/code>가 있고, &lt;code>T&lt;/code>타입을 이용해서 정의한 모든 프로그램 &lt;code>P&lt;/code>에서 &lt;code>o2&lt;/code>의 자리에 &lt;code>o1&lt;/code>을 치환하더라도 &lt;code>P&lt;/code>의 행위가 변하지 않는다면, &lt;code>S&lt;/code>는 &lt;code>T&lt;/code>의 하위 타입이다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="상속을-사용하도록-가이드하기">상속을 사용하도록 가이드하기&lt;/h2>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Billing {
}
class License {
&lt;&lt; interface >>
calcFee()
}
class PersonalLicense {
}
class BusinessLicense {
users
}
Billing --> License
License &lt;|-- PersonalLicense
License &lt;|-- BusinessLicense
&lt;/pre>
&lt;p>&lt;code>Billing&lt;/code> 애플리케이션의 행위가 &lt;code>License&lt;/code>타입 중 무엇을 사용하는지에 전혀 의존하지 않이 때문에, 이들 하위 타입은 모두 &lt;code>License&lt;/code> 타입을 치환할 수 있으므로 위 설계는 리스코프 치환 원칙을 준수한다.&lt;/p>
&lt;h2 id="정사각형직사각형-문제">정사각형/직사각형 문제&lt;/h2>
&lt;p>리스코프 치환 원칙을 위반하는 전형적인 문제로 유명한 정사각형/직사각형 문제가 있다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class User {
}
class Rectangle {
H, W
setH()
setW()
}
class Square {
setSide()
}
User --> Rectangle
Rectangle &lt;|-- Square
&lt;/pre>
&lt;p>위 예제에서 &lt;code>Rectangle&lt;/code>의 높이와 너비는 서로 독립적으로 변경될 수 있는 반면, &lt;code>Square&lt;/code>의 높이와 너비는 반드시 함께 변경되므로 &lt;code>Square&lt;/code>는 &lt;code>Rectangle&lt;/code>의 하위 타입으로는 부적합하다.&lt;/p>
&lt;p>이러한 경우 &lt;code>User&lt;/code>는 대화하고 있는 상대가 &lt;code>Rectangle&lt;/code> 이라고 생각하므로 혼동이 생길 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Rectangle&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setW&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">area&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위와 같은 경우 &lt;code>...&lt;/code>에 &lt;code>Square&lt;/code>를 생성한다면(치환한다면), &lt;code>assert&lt;/code>문은 실패하게된다.&lt;/p>
&lt;hr>
&lt;p>이러한 형태의 리스코프 치환 원칙 위반을 막기 위한 유일한 방법은 검사하는 메커니즘을 &lt;code>User&lt;/code>에 추가하는 것 인데, &lt;code>User&lt;/code>의 행위가 사용하는 타입에 의존하게 되므로, 결국 타입을 서로 치환할 수 없게 된다.&lt;/p>
&lt;h2 id="lsp와-아키텍처">LSP와 아키텍처&lt;/h2>
&lt;p>LSP는 상속을 사용하도록 가이드하는 방법 정도로 간주 되었으나, 시간이 지나면서 LSP는 &lt;strong>인터페이스와 구현체에도 적용되는 더 광범위한 소프트웨어 설계 원칙으로 변모해왔다.&lt;/strong>&lt;/p>
&lt;p>&lt;strong>인터페이스&lt;/strong>&lt;/p>
&lt;p>위에서 말하는 인터페이스는 여러 의미로 해석 가능하다.&lt;/p>
&lt;ul>
&lt;li>인터페이스 하나와 이를 구현하는 여러 개의 클래스&lt;/li>
&lt;li>동일한 메서드 시그니처를 공유하는 여러 개의 클래스&lt;/li>
&lt;li>동일한 REST 인터페이스에 응답하는 서비스 집단&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>잘 정의된 인터페이스와 그 인터페이스의 구현체끼리의 상호 치환 가능성에 기대는 사용자들이 존재하기 때문에 대부분의 상황에서 LSP를 적용할 수 있다.&lt;/p>
&lt;h2 id="lsp-위배-사례-택시-파견-서비스">LSP 위배 사례: 택시 파견 서비스&lt;/h2>
&lt;p>&lt;strong>요구사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>고객이 어느 택시업체인지는 신경쓰지 않고 자신의 상황에 가장 적합한 택시를 찾는다.&lt;/li>
&lt;li>택시를 결정하면, 시스템은 REST 서비스를 통해 선택된 택시를 고객 위치로 파견한다.
&lt;ul>
&lt;li>URI가 운전기사 데이터베이스에 저장되어 있다.&lt;/li>
&lt;li>URI 정보를 이용하여 해당 기사를 고객 위치로 파견한다.&lt;/li>
&lt;li>ex) Bob의 URI: &lt;code>purplecab.com/driver/Bob&lt;/code>&lt;/li>
&lt;li>요청 예시&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">purplecab.com/driver/Bob
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /picupAddress/24 Maple St.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /pickupTime/153
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /destination/ORD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이러한 서비스를 만들 때 다양한 택시업체에서 동일한 REST 인터페이스를 반드시 준수하도록 만들어야한다.&lt;/p>
&lt;p>만약 택시업체 ACME에서 &lt;code>destination&lt;/code> 필드를 &lt;code>dest&lt;/code>로 축약해서 사용했다고 가정하면, 해당 예외 사항을 처리하는 로직을 추가해야만 한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">driver&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getDispatchUri&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">startWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;acme.com&amp;#34;&lt;/span>&lt;span class="p">))...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&amp;ldquo;acme&amp;quot;라는 단어를 코드 자체에 추가하면, 끔찍할 뿐만 아니라 이해할 수도 없는 온갖 종류의 에러가 발생할 여지를 만들게 된다.&lt;/li>
&lt;li>새로운 택시업체 추가시 또 다른 if문이 필요할 수 있다.&lt;/li>
&lt;li>위와 같은 버그를 방지하기 위해 &lt;strong>설정용 데이터베이스&lt;/strong>를 이용하는 파견 명령 생성 모듈을 만들어야 할 수도 있다.
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>URI&lt;/th>
&lt;th>Dispatch Format&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Acme.com&lt;/td>
&lt;td>/pickupAddress/%s/pickupTime/%s/dest/%s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>*.*&lt;/td>
&lt;td>/pickupAddress/%s/pickupTime/%s/destination/%s&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>REST 서비스들의 인터페이스가 서로 치환 가능하지 않다는 사실을 처리하는 중요하고 복잡한 매커니즘을 추가해야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>LSP는 아키텍처 수준까지 확장할 수 있고, 반드시 확장해야만 한다.&lt;/p>
&lt;p>치환 가능성을 조금이라도 위배하면 시스템 아키텍처가 오염되어 상당량의 별도 메커니즘을 추가해야 할 수 있기 때문이다.&lt;/p></description></item><item><title>8. 개방 폐쇄 원칙</title><link>https://codemario318.github.io/post/clean-architecture/8/</link><pubDate>Fri, 01 Mar 2024 09:06:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/8/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/8/cover.png" alt="Featured image of post 8. 개방 폐쇄 원칙" />&lt;blockquote>
&lt;p>소프트웨어 개체(Artifact)는 확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 한다.&lt;/p>
&lt;/blockquote>
&lt;p>개방 폐쇄 원칙은 소프트웨어 개체의 행위는 확장할 수 있어야 하지만, 이때 개체를 변경해서는 안된다는 원칙이다.&lt;/p>
&lt;p>요구사항을 살짝 확장하는 데 소프트웨어를 많이 수정해야 한다면, 그 소프트웨어 시스템을 설계한 아키텍트는 엄청난 실패에 맞닥뜨린 것이다.&lt;/p>
&lt;p>OCP는 클래스와 모듈을 설계할 때 도움이 되는 원칙으로 알려져 있지만, &lt;strong>아키텍처 컴포넌트 수준에서 고려할 때 훨씬 중요한 의미를 가진다.&lt;/strong>&lt;/p>
&lt;h2 id="사고-실험-재무제표-시스템">사고 실험: 재무제표 시스템&lt;/h2>
&lt;p>&lt;strong>요구사항&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>웹 페이지에 표시되는 데이터는 스크롤할 수 있음&lt;/li>
&lt;li>음수는 빨간색으로 출력&lt;/li>
&lt;li>추가 요구 사항: 동일한 정보를 보고서 형태로 변환해서 흑백 프린터로 출력 가능
&lt;ul>
&lt;li>페이지 번호가 제대로 메겨져 있어야 함&lt;/li>
&lt;li>페이지마다 적절한 머리글과 바닥글 있어야 함&lt;/li>
&lt;li>표의 각 열에는 레이블이 있어야 함&lt;/li>
&lt;li>음수는 괄호로 감싸야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>소프트웨어 아키텍처가 훌륭하다면 추가 요구사항에 따라 변경되는 코드의 양이 가능한 최소화 될 것이다.(이상적인 변경량은 0)&lt;/p>
&lt;p>이러한 경우 &lt;strong>서로 다른 목적으로 변경되는 요소를 적절하게 분리&lt;/strong>하고(단일 책임 원칙), 이들 &lt;strong>요소 사이의 의존성을 체계화&lt;/strong>함으로(의존성 역전 원칙) 변경량을 최소화 할 수 있다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a[재무 데이터]
b((재무 분석기))
c[보고서용 재무 데이터]
d((보고서를 웹에 표시))
e((보고서를 프린터로 출력))
a --> b
b --> c
c --> d
c --> e
&lt;/pre>
&lt;ul>
&lt;li>보고서 생성이 두 개의 책임으로 분리 &amp;gt; 웹, 프린터
&lt;ul>
&lt;li>책임을 분리했다면, 책임 중 하나에서 변경이 발생하더라도 다른 하나는 변경되지 않도록 의존성도 확실히 조직화 해야한다.&lt;/li>
&lt;li>행위가 확장될 때 변경이 발생하지 않음을 보장해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이러한 목적을 달성하려면 &lt;strong>처리과정을 클래스 단위로 분할&lt;/strong>, &lt;strong>컴포넌트 단위로 구분&lt;/strong>해야 한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/8/img_1.png"
width="1596"
height="1320"
srcset="https://codemario318.github.io/post/clean-architecture/8/img_1_hu67afed36bbb285aef637bc2b5de4e81c_785295_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/8/img_1_hu67afed36bbb285aef637bc2b5de4e81c_785295_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="290px"
>&lt;/p>
&lt;ul>
&lt;li>모든 의존성이 소스 코드 의존성을 나타낸다.
&lt;ul>
&lt;li>&lt;code>FinancialDataMapper&lt;/code>는 구현 관계를 통해 &lt;code>FinancialDataGateway&lt;/code>를 알고 있지만, &lt;code>FinancialDataGateway&lt;/code>는 &lt;code>FinancialDataMapper&lt;/code>에 대해 알지 못한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이중선은 화살표와 오직 한 방향으로만 교차한다.
&lt;ul>
&lt;li>모든 컴포넌트 관계는 단 방향으로 이루어진다.&lt;/li>
&lt;li>화살표는 변경으로부터 보호하려는 컴포넌트를 향하도록 그려진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/8/img.png"
width="1734"
height="918"
srcset="https://codemario318.github.io/post/clean-architecture/8/img_hua4d495848552290f72309b8d34290664_326621_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/8/img_hua4d495848552290f72309b8d34290664_326621_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="453px"
>&lt;/p>
&lt;blockquote>
&lt;p>A 컴포넌트에서 발생한 변경으로부터 B 컴포넌트를 보호하려면 반드시 A 컴포넌트가 B 컴포넌트에 의존해야한다.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>Presenter&lt;/code>에서 발생한 변경으로부터 &lt;code>Controller&lt;/code>를 보호&lt;/li>
&lt;li>&lt;code>View&lt;/code>에서 발생한 변경으로부터 &lt;code>Presenter&lt;/code>를 보호&lt;/li>
&lt;li>&lt;code>Interactor&lt;/code>는 다른 모든 것에서 발생한 변경으로부터 보호&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Interactor&lt;/code>는 변경 폐쇄 원칙을 가장 잘 준수하는 곳에 위치하고 있는데, 이는 &lt;code>Interactor&lt;/code>가 애플리케이션에서 가장 높은 수준의 정책, 가장 중요한 문제를 담당하고 있기 때문이다.&lt;/p>
&lt;p>보호의 계층구조는 &lt;strong>수준 level&lt;/strong>이라는 개념을 바탕으로 구성되어야하며, 높은 수준일수록(세부 구현과 멀 수록) 변경에 대해 강력한 보호가 필요하다.&lt;/p>
&lt;p>아키텍처 수준에서 개방 폐쇄 원칙은 아키텍트는 기능이 어떻게, 왜, 언제 발생하는지에 따라서 기능을 분리하고, 분리한 기능을 컴포넌트의 계층구조로 조직화한다.&lt;/p>
&lt;p>컴포넌트 계층구조를 이와 같이 조족화하면 저수준 컴포넌트에서 발생한 변경으로부터 고수준 컴포넌트를 보호할 수 있다.&lt;/p>
&lt;h2 id="방향성-제어">방향성 제어&lt;/h2>
&lt;p>&lt;code>FinancialDataGateway&lt;/code> 인터페이스는 &lt;code>Interactor&lt;/code> 컴포넌트에서 &lt;code>Database&lt;/code> 컴포넌트의 의존성을 역전시키기 위해 &lt;code>FinancialReportGenerator&lt;/code>와 &lt;code>FinancialDataMapper&lt;/code> 사이에 위치한다.&lt;/p>
&lt;p>&lt;code>FinancialDataGateway&lt;/code> 인터페이스가 없었다면 의존성이 &lt;code>Interactor&lt;/code> 컴포넌트에서 &lt;code>Database&lt;/code> 컴포넌트로 바로 향하게된다.&lt;/p>
&lt;h2 id="정보-은닉">정보 은닉&lt;/h2>
&lt;p>&lt;code>FinancialReportRequester&lt;/code> 인터페이스는 &lt;code>FinancialReportController&lt;/code>가 &lt;code>Interactor&lt;/code> 내부에 대해 너무 많이 알지 못하도록 막기 위해서 존재한다.&lt;/p>
&lt;ul>
&lt;li>인터페이스가 없었다면 &lt;code>Controller&lt;/code>는 &lt;code>FinancialEntities&lt;/code>에 대해 추이 종속성(Transitive dependency)을 가지게 된다.&lt;/li>
&lt;li>추이 종속성을 가지게 되면, 소프트웨어 엔티티는 **&amp;lsquo;자신이 직접 사용하지 않는 요소에는 절대로 의존해서는 안 된다.&amp;rsquo;**는 소프트웨어 원칙을 위반하게 된다.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Controller&lt;/code>에서 발생한 변경으로부터 &lt;code>Interactor&lt;/code>를 보호하는 일의 우선순위가 가장 높지만, 반대로 &lt;code>Interactor&lt;/code>에서 발생한 변경으로 부터 &lt;code>Controller&lt;/code>도 보호되길 바라기 때문에 &lt;code>Interactor&lt;/code> 내부를 은닉한다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>추이 종속성(Transitive dependency)&lt;/strong>&lt;/p>
&lt;p>클래스 A가 클래스 B에 의존하고, 클래스 B가 클래스 C에 의존한다면, 클래스 A는 클래스 C에 의존하게 된다.&lt;/p>
&lt;ul>
&lt;li>클래스 이외의 소프트웨어의 모든 엔티티에도 동일하게 적용된다.&lt;/li>
&lt;li>클래스 의존성이 순환적이라면, 모든 클래스가 서로 의존하게 되는 문제가 있다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>개방 폐쇄 원칙은 아키텍처를 떠받치는 원동력 중 하나다. OCP의 목표는 &lt;strong>시스템을 확장하기 쉬운 동시에 변경으로 인해 시스템이 너무 많은 영향을 받지 않도록 하는데 있다.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>시스템을 컴포넌트 단위로 분리한다.&lt;/li>
&lt;li>저수준 컴포넌트에서 발생한 변경으로부터 고수준 컴포넌트를 보호할 수 있는 형태의 의존성 계층구조가 만들어지도록 한다.&lt;/li>
&lt;/ul></description></item><item><title>7. 단일 책임 원칙</title><link>https://codemario318.github.io/post/clean-architecture/7/</link><pubDate>Thu, 29 Feb 2024 16:27:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/7/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/7/cover.png" alt="Featured image of post 7. 단일 책임 원칙" />&lt;h2 id="solid">SOLID&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>SOLID 원칙&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>함수와 데이터 구조를 클래스로 배치하는 방법&lt;/li>
&lt;li>클래스를 서로 결합하는 방법&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>좋은 소프트웨어 시스템은 깔끔한 코드(Clean Code)를 전제한다.&lt;/p>
&lt;p>하지만 깔끔한 코드를 사용한다고 하더라도 아키텍처가 좋지 못하다면 좋은 소프트웨어 시스템을 만들 수 없기 때문에 깔끔한 코드로 좋은 아키텍처를 정의하는 원칙이 필요하다.&lt;/p>
&lt;p>SOLID 원칙의 목적은 &lt;strong>중간 수준의 소프트웨어 구조&lt;/strong>가 아래와 같도록 만드는 것이다.&lt;/p>
&lt;ul>
&lt;li>변경에 유연&lt;/li>
&lt;li>이해하기 쉬움&lt;/li>
&lt;li>많은 소프트웨어 시스템에 사용될 수 있는 컴포넌트의 기반&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>중간 수준&lt;/strong>의미는?&lt;br>
프로그래머가 이들 원칙을 &lt;strong>모듈 수준&lt;/strong>에서 작업할 때 적용할 수 있다.&lt;br>
코드 수준보다는 조금 더 상위에서 적용되며 모듈과 컴포넌트 내부에서 사용되는 소프트웨어 구조를 정의하는 데 도움을 준다.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>SRP: Single Responsibility Principle, 단일 책임 원칙&lt;/strong>
&lt;ul>
&lt;li>콘웨이(Conway) 법칙
&lt;ul>
&lt;li>조직이 설계한 시스템은 해당 조직의 커뮤니케이션 구조를 반영한다.&lt;/li>
&lt;li>조직의 내부 구조와 상호 작용 방식은 그 조직이 개발하는 소프트웨어의 구조와 유사해진다.&lt;/li>
&lt;li>조직 내에 분산된 팀이 서로 간의 교류가 원할하지 않을 경우 개발하는 소프트웨어도 모듈화 인터페이스 설계에 문제가 발생한다.&lt;/li>
&lt;li>따름 정리:
&lt;ul>
&lt;li>특정한 제한을 둔 조직 구조가 특정한 형태의 소프트웨어 아키텍처를 유도한다.&lt;/li>
&lt;li>특정한 형테의 조직 구조가 특정한 형태의 소프트웨어 아키텍처를 촉진하거나 제한할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>따라서 각 소프트웨어의 모듈은 변경의 이유가 하나여야만 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>OCP: Open-Closed Principle, 개방 폐쇠 원칙&lt;/strong>
&lt;ul>
&lt;li>기존 코드를 수정하기보다는 반드시 새로운 코드를 추가하는 방식으로 시스템의 행위를 변경할 수 있도록 설계해야만 시스템을 쉽게 변경할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>LSP: Liskov Substitution Principle, 리스코프 치환 원칙&lt;/strong>
&lt;ul>
&lt;li>상호 대체 가능한 구성요소를 이용해 소프트웨어 시스템을 만들 수 있으려면, 구성요소는 반드시 서로 치환 가능해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>ISP: Interface Segregation Principle, 인터페이스 분리 원칙&lt;/strong>
&lt;ul>
&lt;li>사용하지 않은 것에 의존하지 않아야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>DIP: Dependency Inversion Principle, 의존성 역전 원칙&lt;/strong>
&lt;ul>
&lt;li>고수준 정책을 구현하는 코드는 저수준 세보사항을 구현하는 코드에 절대로 의존해서는 안된다.&lt;/li>
&lt;li>세부사항이 정책에 의존해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="srp-단일-책임-원칙">SRP: 단일 책임 원칙&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>단일 모듈은 변경의 이유가 하나, 오직 하나뿐이어야 한다.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>소프트웨어 시스템은 사용자와 이해관계자를 만족시키기 위해 변경된다.&lt;/p>
&lt;p>따라서 SRP가 말하는 변경의 이유는 **사용자와 이해관계자 집단(액터, Actor)**을 의미하며, 이러한 관점에서 단일 책임 원칙은 다음과 같이 말할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>하나의 모듈은 한의 액터에 대해서만 책임져야 한다&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>모듈이란?&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>소스 파일&lt;/li>
&lt;li>단순히 함수와 데이터 구조로 음집된 집합&lt;/li>
&lt;/ul>
&lt;p>단일 액터를 책임지는 코드르 함께 묶어주는 힘이 바로 &lt;strong>응집성 Cohesion&lt;/strong>이다.&lt;/p>
&lt;h3 id="징후-1-우발적-중복">징후 1: 우발적 중복&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Employee {
calculatePay()
reportHours()
save()
}
&lt;/pre>
&lt;ul>
&lt;li>&lt;code>calculatePay()&lt;/code>
&lt;ul>
&lt;li>회계팀에서 기능을 정의&lt;/li>
&lt;li>CFO 보고를 위해 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>reportHours()&lt;/code>
&lt;ul>
&lt;li>인사팀에서 기능을 정의하고 사용&lt;/li>
&lt;li>COO 보고를 위해 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>save()&lt;/code>
&lt;ul>
&lt;li>DBA가 기능을 정의&lt;/li>
&lt;li>CTO 보고를 위해 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Employee&lt;/code> 클래스는 서로 매우 다른 액터를 책임지기 때문에 SRP를 위반하게 된다.&lt;/p>
&lt;p>&lt;code>Employee&lt;/code>는 단일 클래스 내의 각각 다른 액터를 책임지는 메서드들로 인해 액터간의 결합이 발생하였고, 이러한 결합으로 인해 의존하는 무언가에 영향을 줄 수 있다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart TD
a[calculatePay]
b[reportHours]
c[regularHours]
a --> c
b --> c
&lt;/pre>
&lt;p>위 처럼 &lt;code>calculatePay&lt;/code>와 &lt;code>reportHours&lt;/code> 메소드의 시간 계산 코드 중복을 피하기 위해 &lt;code>regularHours&lt;/code> 메소드를 추가했다고 가정하고, &lt;code>calculatePay&lt;/code>의 정책 변경으로 인해 &lt;code>reqularHours&lt;/code> 메소드를 일부 변경했다.&lt;/p>
&lt;p>이러한 경우 해당 메소드와 연관된 액터가 CFO, COO 둘이지만, CFO의 요구사항으로 변경되었기 때문에 변경을 원하지 않는 COO의 기능에도 영향을 미치게 되는데, 관심사가 달라 의존 관계를 확인하기 어려워 확인이 누락이 될 수 있다.&lt;/p>
&lt;p>(이로인해 &lt;code>reportHours&lt;/code> 메소드에서는 이러한 변경으로 인해 잘못된 결과를 얻을 수 있다.)&lt;/p>
&lt;p>결과적으로 이러한 문제는 &lt;strong>서로 다른 액터가 의존하는 코드를 너무 가까이 배치&lt;/strong>했기 때문에 발생한 문제이며, SRP는 이러한 문제를 &lt;strong>서로 다른 액터가 의존하는 코드를 서로 분리&lt;/strong>하여 예방하라고 말하고 있다.&lt;/p>
&lt;h3 id="징후-2-병합">징후 2: 병합&lt;/h3>
&lt;p>메서드가 서로 다른 액터를 책임진다면 병합이 발생할 가능성이 확실히 더 높아진다.&lt;/p>
&lt;p>많은 사람이 서로 다른 목적으로 동일한 소스 파일을 변경하는 경우에 발생한다.&lt;/p>
&lt;ul>
&lt;li>다른 목적으로 인해 같은 코드를 변경할 가능성이 높아지고 이로인해 변경사항이 충돌할 여지가 많다.&lt;/li>
&lt;/ul>
&lt;p>이러한 문제는 서로 다른 액터를 뒷받침하는 코드를 서로 분리하는 것으로 이러한 문제를 벗어날 수 있다.&lt;/p>
&lt;h3 id="해결책">해결책&lt;/h3>
&lt;p>이 문제의 해결책은 다양하지만, 모두 메서드를 각기 다른 클래스로 이동시키는 것은 공통적으로 포함한다.&lt;/p>
&lt;p>가장 확실한 해결책은 데이터와 메서드를 분리하는 방식으로, 아무런 메서드가 없는 데이터 구조인 &lt;code>EmployeeData&lt;/code> 클래스를 만들어 세 개의 클래스가 공유하도록 만든다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class EmployeeData {
datas...
}
class PayCalculator {
calculatePay()
}
class HourReporter {
reportHours()
}
class EmployeeSaver {
saveEmployee()
}
PayCalculator --> EmployeeData
HourReporter --> EmployeeData
EmployeeSaver --> EmployeeData
&lt;/pre>
&lt;p>세 클래스는 서로의 존재를 모르기 때문에 &lt;strong>우연한 중복&lt;/strong>을 피할 수 있다.&lt;/p>
&lt;p>위 방식은 개발자가 세 가지 클래스를 인스턴스화하고 추적해야 한다는 단점이 있는데, 퍼사드 패턴을 활용하여 개선이 가능하다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class EmployeeFacade {
calculatePay()
reportHours()
save()
}
class EmployeeData {
datas...
}
class PayCalculator {
calculatePay()
}
class HourReporter {
reportHours()
}
class EmployeeSaver {
saveEmployee()
}
EmployeeFacade --> PayCalculator
EmployeeFacade --> HourReporter
EmployeeFacade --> EmployeeSaver
PayCalculator --> EmployeeData
HourReporter --> EmployeeData
EmployeeSaver --> EmployeeData
&lt;/pre>
&lt;p>중요한 업무 규칙을 데이터와 가깝게 배치하는 방식을 원한다면 아래와 같이 구성할 수도 있다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class Employee {
employeeData
calculatePay()
reportHours()
save()
}
class HourReporter {
reportHours()
}
class EmployeeSaver {
saveEmployee()
}
Employee --> HourReporter
Employee --> EmployeeSaver
&lt;/pre>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>단일 책임 원칙은 &lt;strong>메서드와 클래스 수준의 원칙&lt;/strong>이다.&lt;/p>
&lt;p>하지만 이보다 상위 두 수준에서도 다른 형태로 다시 등장한다.&lt;/p>
&lt;ul>
&lt;li>컴포넌트 수준: 공통 폐쇄 원칙(Common Closure Principle)&lt;/li>
&lt;li>아키텍처 수준: 아키텍쳐 경계(Architectural Boundaray)의 생성을 책임지는 변경의 축(Axis of Change)&lt;/li>
&lt;/ul></description></item><item><title>6. 함수형 프로그래밍</title><link>https://codemario318.github.io/post/clean-architecture/6/</link><pubDate>Sun, 25 Feb 2024 20:36:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/6/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/6/cover.png" alt="Featured image of post 6. 함수형 프로그래밍" />&lt;p>함수형 프로그래밍이라는 개념은 프로그래밍 그 자체보다 앞서 등장했다.&lt;/p>
&lt;p>이 패러다임에서 핵심이 되는 기반은 람다(Lambda) 계산법으로 안론조 처치가 1930년대에 발명했다.&lt;/p>
&lt;h2 id="불변성과-아키텍처">불변성과 아키텍처&lt;/h2>
&lt;p>일반적인 언어들과 달리 함수형 언어에서는 변수가 한번 초기화되면 절대로 변경되지 않는다.&lt;/p>
&lt;p>가변 변수로 인해 경합 조건, 교착상태 조건, 동시 업데이트 문제가 발생하는데, 만약 어떠한 변수도 갱신되지 않는다면 경합 조건이나 동시 업데이트 문제가 발생하지 않는다.&lt;/p>
&lt;p>락(lock)이 가변적이지 않다면 교착상태도 일어나지 않는다.&lt;/p>
&lt;p>동시성 애플리케이션에서 마주치는 모든 문제, 즉 다수의 스레드와 프로세스를 사용하는 애플리케이션에서 마주치는 모든 문제는 가변 변수가 없다면 절대로 생기지 않는다.&lt;/p>
&lt;p>불변성은 저장 공간이 무한하고 프로세서의 속도가 무한히 빠르다면 보장 가능하지만 그럴 수 없으므로 어느정도 타협이 필요하다.&lt;/p>
&lt;h2 id="가변셩의-분리">가변셩의 분리&lt;/h2>
&lt;p>불변성과 관련하여 가장 주요한 타협 중 하나는 애플리케이션 또는 애플리케이션 내부의 서비스를 가변 컴포넌트와 불변 컴포넌트로 분리하는 일이다.&lt;/p>
&lt;p>불변 컴포넌트에서는 순수하게 함수형 방식으로만 작업이 처리되며, 어떤 가변 변수도 사용되지 않는다.&lt;/p>
&lt;p>불변 컴포넌트는 변수의 상태를 변경할 수 있는, 죽 순수 함수형 컴포넌트가 아닌 하나 이상의 다른 컴포넌트와 서로 통신한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/6/img.png"
width="574"
height="396"
srcset="https://codemario318.github.io/post/clean-architecture/6/img_hu99e785152b719343990f143a06772634_81872_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/6/img_hu99e785152b719343990f143a06772634_81872_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="상태 변경과 트랜잭션 메모리"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/p>
&lt;p>상태 변경은 컴포넌트를 갖가지 동시성 문제에 노출하는 꼴이므로, 흔히 트랜잭션 메모리와 같은 실천법을 사용하여 동시 업데이트와 경합 조건 문제로부터 가변 변수를 보호한다.&lt;/p>
&lt;p>트랜잭션 메모리는 트랜잭션을 사용하거나 도는 재시도 기법을 통해 변수를 보호한다.&lt;/p>
&lt;p>애플리케이션을 제대로 구조화하려면 변수를 변경하는 컴포넌트와 변경하지 않는 컴포넌트를 분리해야한다.&lt;/p>
&lt;p>그리고 이렇게 분리하려면 가변 변수들을 보호하는 적절한 수단을 동원해 뒷받침해야한다.&lt;/p>
&lt;p>현명한 아키텍트라면 가능한 한 많은 처리를 불변 컴포넌트로 옮겨야 하고, 가변 컴포넌트에서는 가능한 한 많은 코드를 빼내야 한다.&lt;/p>
&lt;h2 id="이벤트-소싱">이벤트 소싱&lt;/h2>
&lt;p>이벤트 소싱은 상태가 아닌 트랜잭션을 저장하자는 전략이다.&lt;/p>
&lt;p>상태가 필요해지면 단순히 상태의 시작점부터 모든 트랜잭션을 처리한다.&lt;/p>
&lt;p>이 전략은 많은 저장 공간을 필요로 하지만 현재는 저장 공간을 충분히 확보할 수 있다.&lt;/p>
&lt;ul>
&lt;li>데이터 저장소에서 삭제되거나 변경되는 것이 하나도 없으므로, 결과적으로 애플리케이션은 CRUD가 아닌 그저 CR만 수행한다.&lt;/li>
&lt;li>데이터 저장소에서 변경과 삭제가 전혀 발생하지 않으므로 동시 없데이트 문제 또한 일어나지 않는다.&lt;/li>
&lt;/ul>
&lt;p>저장 공간과 처리 능력이 충분하면 완전한 불변성을 갖도록 만들 수 있고, 따라서 완전한 함수형으로 만들 수 있다.&lt;/p>
&lt;ul>
&lt;li>버전 관리 시스템이 정확히 이방식으로 동작한다.&lt;/li>
&lt;/ul>
&lt;h2 id="결론">결론&lt;/h2>
&lt;ul>
&lt;li>구조적 프로그래밍은 제어흐름의 직접적인 전환에 부과되는 규율이다.&lt;/li>
&lt;li>객체 지향 프로그래밍은 제어흐름의 간접적인 전환에 부과되는 규율이다.&lt;/li>
&lt;li>함수형 프로그래밍은 변수 할당에 부과되는 규율이다.&lt;/li>
&lt;/ul>
&lt;p>세 패러다임 모두 무언가를 하지 못하게 제한하고 있으며, 코드를 작성하는 방식의 형태를 한정시킨다.&lt;/p>
&lt;p>지난 반세기 동안 우리가 배운 것은 &lt;strong>해서는 안되는 것&lt;/strong>에 대해서이다.&lt;/p>
&lt;p>도구는 달라졌고 소프트웨어도 변했지만, 소프트웨어는 순차, 분기, 반복 참조로 구성된다는 것은 변하지 않았다.&lt;/p></description></item><item><title>5. 객체 지향 프로그래밍</title><link>https://codemario318.github.io/post/clean-architecture/5/</link><pubDate>Sun, 25 Feb 2024 17:46:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/5/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/5/cover.png" alt="Featured image of post 5. 객체 지향 프로그래밍" />&lt;p>좋은 아키텍처를 만드는 일은 객체 지향 설계 원칙을 이해하고 응용하는 데서 출발한다.&lt;/p>
&lt;h2 id="object-oriented란-무엇인가">Object Oriented란 무엇인가?&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>데이터와 함수의 조합&lt;/strong>
&lt;ul>
&lt;li>대체로 이런 방식으로 많이 설명되지만 만족스러운 대답은 아니다.&lt;/li>
&lt;li>&lt;code>o.f()&lt;/code>가 &lt;code>f(o)&lt;/code>와 다르다는 의미를 내포한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>실제 세계를 모델링하는 새로운 방법&lt;/strong>
&lt;ul>
&lt;li>얼버무리는 수준에 지나지 않는다. 의도가 불분명하며, 정의가 너무 모호하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캡슐화, 상속, 다형성
&lt;ul>
&lt;li>세가지 개념을 적절하게 조합한 것&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="캡슐화encapsulation">캡슐화(Encapsulation)?&lt;/h2>
&lt;p>OO를 정의하는 요소 중 하나로 캡슐화를 언급하는 이유는 데이터와 함수를 쉽고 효과적으로 캡슐화하는 방법을 OO 언어가 제공하기 때문이다.&lt;/p>
&lt;p>이를 통해 데이터와 함수가 응집력 있게 구성된 집단을 서로 구분할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>private&lt;/code>, &lt;code>public&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>하지만 이러한 개념은 OO에만 국한된 것은 아니다.&lt;/p>
&lt;p>&lt;strong>point.h&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">makePoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="nf">distance&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>point.c&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;point.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;math.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">makepoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="nf">distance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">dy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dx&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dx&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">dy&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">dy&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>위 예시에서 &lt;code>point.h&lt;/code>를 사용하는 측에서 &lt;code>struct Point&lt;/code>의 멤버에 접근할 방법이 전혀 없다.&lt;/p>
&lt;ul>
&lt;li>사용자는 &lt;code>makePoint()&lt;/code> 함수와 &lt;code>distance()&lt;/code> 함수를 호출할 수는 있지만, &lt;code>Point&lt;/code> 구조체의 데이터 구조와 함수가 어떻게 구현되었는지에 대해서는 조금도 알지 못한다.&lt;/li>
&lt;/ul>
&lt;p>이것이 완벽한 캡슐화이며, OO가 아닌 언어에서도 충분히 가능하다.&lt;/p>
&lt;p>오히려 OO를 지원하는 언어들이 캡슐화를 훼손하고 있는 경우가 많아 언어에 &lt;code>public&lt;/code>, &lt;code>private&lt;/code>, &lt;code>protected&lt;/code> 키워드를 도입하여 불완전한 캡슐화를 보완한다.&lt;/p>
&lt;ul>
&lt;li>C++는 컴파일러가 클래스의 인스턴스 크기를 알아야하는 기술적인 이유로 클래스의 멤버변수를 해당 클래스의 헤더파일에 선언해야하고, 이로인해 사용측에서 멤버변수의 존재를 알게된다.&lt;/li>
&lt;li>자바, C#은 헤더와 구현체를 분리하는 방식을 버렸다. 이로인해 클래스 선언과 정의를 구분하는게 불가능하다.&lt;/li>
&lt;/ul>
&lt;p>이 때문에 OO가 강력한 캡슐화에 의존한다는 정의는 받아들이기 힘들며, 대부분의 OO를 제공하는 언어들이 실제로는 C언어에서 누렸던 완벽한 캡슐화를 약화시켰다.&lt;/p>
&lt;ul>
&lt;li>많은 언어가 캡슐화를 거의 강제하지 않는다.&lt;/li>
&lt;li>OO 프로그래밍은 프로그래머가 캡슐화를 우회하지 않을 것 이라는 믿음을 기반으로 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="상속">상속?&lt;/h2>
&lt;p>OO 언어가 더 나은 캡슐화를 제공하지는 못했지만, 상속만큼은 확실히 제공했다.&lt;/p>
&lt;p>하지만 상속이란 단순히 어떤 변수와 함수를 하나의 유효 범위로 묶어 재정의하는 일에 불과하다.&lt;/p>
&lt;p>&lt;strong>namedPoint.h&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">makeNamedPoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">setName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>namedPoint.c&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;NamedPoint.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">makeNmaedPoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">p&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">setName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">np&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">NmaedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>main.c&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;point.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;namedPoint.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">ac&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">**&lt;/span> &lt;span class="n">av&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">origin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">makeNamedPoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;origin&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">NamedPoint&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">upperRight&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">makeNamedPoint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;upperRight&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;distance=%f&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">distance&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">origin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// namedPoint를 point로 쓰고있음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">Point&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">upperRight&lt;/span> &lt;span class="c1">// namedPoint를 point로 쓰고있음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>main&lt;/code> 프로그램을 살펴보면 &lt;code>NamedPoint&lt;/code> 데이터 구조가 &lt;code>Point&lt;/code> 데이터 구조로부터 파생된 구조인 것 처럼 동작한다는 사실을 볼 수 있다.&lt;/p>
&lt;p>이처럼 눈속임처럼 보이는 방식은 OO가 출현하기 이전부터 프로그래머가 흔히 사용했던 기법이다. 실제로 C++은 이 방법을 이용해 단일 상속을 구현하였다.&lt;/p>
&lt;p>OO 언어가 고안되기 훨씬 이전에도 상속과 비슷한 기법이 사용되었지만, 상속만큼 편리한 방식은 절대 아니다.&lt;/p>
&lt;p>따라서 OO 언어가 완전히 새로운 개념을 만들지는 못했지만, 상당히 편리한 방식으로 제공했다고 볼 수 있다.&lt;/p>
&lt;h2 id="다형성">다형성?&lt;/h2>
&lt;p>OO 언어가 있기 이전에도 다형성을 표현할 수 있었다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">copy&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">getchar&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">EOF&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">putchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>getchar()&lt;/code>는 &lt;code>STDIN&lt;/code>에서 문자를 읽고, &lt;code>putchar()&lt;/code>는 &lt;code>STDOUT&lt;/code>으로 문자를 쓴다.&lt;/p>
&lt;p>&lt;code>STDIN&lt;/code>과 &lt;code>STDOUT&lt;/code>은 다양한 장치가 될 수 있기 때문에 이러한 함수는 다형적(Polymorphic)이다.&lt;/p>
&lt;p>유닉스 운영체제의 경우 모든 입출력 장치 드라이버가 다섯 가지 표준 함수를 제공할 것을 요구한다&lt;/p>
&lt;ul>
&lt;li>&lt;code>open&lt;/code>, &lt;code>close&lt;/code>, &lt;code>read&lt;/code>, &lt;code>write&lt;/code>, &lt;code>seek&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>FILE&lt;/code> 데이터 구조는 이들 다섯 함수를 가리키는 포인터들을 포함한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">seek&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>입출력 드라이버에서는 이들 함수를 아래와 같이 전의하며, &lt;code>FILE&lt;/code> 데이터 구조를 함수에 대한 주소와 함께 로드한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;file.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="cm">/* ... */&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="cm">/* ... */&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="cm">/* ... */&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">seek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">mode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="cm">/* ... */&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="n">console&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">close&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">read&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">write&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">seek&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>STDIN&lt;/code>을 &lt;code>FILE*&lt;/code>로 선언하면 콘솔 데이터 구조를 가리키므로, &lt;code>getchar()&lt;/code>는 아래와 같은 방식으로 구현할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">FILE&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">STDIN&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">getchar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">STDIN&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="nf">read&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>다시말해 &lt;code>getchar()&lt;/code>는 &lt;code>STDIN&lt;/code>으로 참초되는 &lt;code>FILE&lt;/code> 데이터 구조의 &lt;code>read&lt;/code> 포인터가 가르키는 함수를 단순히 호출할 뿐이다.&lt;/p>
&lt;p>이처럼 단순한 기법이 모든 OO가 지는 다형성이 근간이 되며, 즉 함수를 가리키는 포인터를 응용한 것이 다형성이고 OO가 새롭게 만든 개념이 아니다.&lt;/p>
&lt;p>하지만, OO 언어는 좀 더 안전하고 편리하게 사용할 수 있게 해준다.&lt;/p>
&lt;ul>
&lt;li>함수 포인터를 사용하기 위한 관례들을 없애 실수할 위험이 없다.&lt;/li>
&lt;/ul>
&lt;p>OO는 제어흐름을 간접적으로 전환하는 규칙을 부과한다고 결론 지을 수 있다. (??)&lt;/p>
&lt;h3 id="다형성이-가진-힘">다형성이 가진 힘&lt;/h3>
&lt;p>복사 프로그램 예제에서 새로운 입출력 장치가 생겨도 프로그램의 아무런 변경이 필요하지 않다.&lt;/p>
&lt;ul>
&lt;li>복사 프로그램의 소스 코드는 입출력 드라이버의 소스 코드에 의존하지 않기 때문이다.&lt;/li>
&lt;li>입출력 드라이버가 &lt;code>FILE&lt;/code>에 정의된 다섯가지 표준 함수를 구현한다면, 복사 프로그램에서는 어떠한 입출력 드라이버도 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>플러그인 아키텍처(Plugin architecture)&lt;/strong>&lt;/p>
&lt;p>플러그인 아키텍처는 이처럼 입출력 장치 독립성을 지원하기 위해 만들어졌고, 등장 이후 거의 모든 운영체제에서 구현되었다.&lt;/p>
&lt;p>그런데도 대다수의 프로그래머는 함수 포인터의 위험함 때문에 이러한 개념을 확장하여 적용하지 않았는데, OO의 등장으로 언제 어디서든 플러그인 아키텍처를 적용할 수 있게 되었다.&lt;/p>
&lt;h3 id="의존성-역전">의존성 역전&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/5/img_1.png"
width="437"
height="218"
srcset="https://codemario318.github.io/post/clean-architecture/5/img_1_hu9d7ba88c223125c910483171079777bc_7404_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/5/img_1_hu9d7ba88c223125c910483171079777bc_7404_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="소스 코드 의존성 vs. 제어흐름"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="481px"
>&lt;/p>
&lt;p>다형성을 안전하고 편리하게 적용할 수 있기 전에는 &lt;code>main&lt;/code> 함수가 고수준 함수를 호출하고, 고수준 함수는 다시 중간 수준 함수를, 중간 수준 함수는 저수준 함수를 호출한다.&lt;/p>
&lt;p>이로인해 소스 코드 의존성의 방향은 반드시 제어흐름을 따르게 된다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/5/img.png"
width="694"
height="280"
srcset="https://codemario318.github.io/post/clean-architecture/5/img_hu57338117272e8a2dea8d6af8f8d33249_6758_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/5/img_hu57338117272e8a2dea8d6af8f8d33249_6758_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="의존성 역전"
class="gallery-image"
data-flex-grow="247"
data-flex-basis="594px"
>&lt;/p>
&lt;p>하지만 다형성을 활용하면 의존성의 방향이 바뀐다.&lt;/p>
&lt;p>&lt;code>HL1&lt;/code> 모듈은 &lt;code>ML1&lt;/code> 모듈의 &lt;code>F()&lt;/code> 함수를 호출한다. 하지만 &lt;code>ML1&lt;/code>과 &lt;code>I&lt;/code> 인터페이스 사이의 소스 코드 의존성(상속 관계)이 제어흐름과는 반대이다.&lt;/p>
&lt;p>이는 의존성 역전(Dependency inversion)이라고 부르며, 소프트웨어 아키텍처 관점에서 이러한 현상은 &lt;strong>소스 코드 의존성을 어디에서든 역전시킬 수 있다는 뜻&lt;/strong>이기도 하다.&lt;/p>
&lt;p>이러한 접근법을 사용한다면, OO 언어로 개발된 시스템을 다루는 소프트웨어 아키텍트는 시스템의 소스 코드 의존성 전부에 대한 방향을 결정할 수 있는 절대적인 권한을 가지게 된다.&lt;/p>
&lt;ul>
&lt;li>소스 코드 의존성이 제어흐름의 방향과 일치되도록 제한되지 않는다.&lt;/li>
&lt;li>호출하는 모듈이든 호출 받는 모듈이든 관계없이 소스 코드 의존성을 원하는 방향으로 설정할 수 있다.&lt;/li>
&lt;/ul>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a[UI]
b[Business Rules]
c[Database]
a-->b
b-.->a
c-->b
b-.->c
&lt;/pre>
&lt;p>위 와 같은 경우 업무 규칙이 데이터베이스와 UI에 의존하는 대신에, 시스템의 소스코드 의존성을 반대로 배치하여 데이터베이스와 UI가 업무 규칙에 의존하게 만들 수 있다.&lt;/p>
&lt;ul>
&lt;li>UI와 데이터베이스가 업무 규칙의 플러그인이 된다는 뜻이다.&lt;/li>
&lt;li>업무 규칙의 소스 코드에서는 UI나 데이터베이스를 호출하지 않는다.&lt;/li>
&lt;/ul>
&lt;p>결과적으로 업무 규칙, UI, 데이터베이스는 세 가지로 분리된 컴포넌트 또는 배포 가능한 단위로 컴파일할 수 있고, 의존하지 않기 때문에 각 컴포넌트들을 독립적으로 배포할 수 있다.&lt;/p>
&lt;ul>
&lt;li>특정 컴포넌트의 소스 코드가 변경되면, 해당 코드가 포함된 컴포넌트만 다시 배포한다.&lt;/li>
&lt;li>이를 배포 독립성(Independent deployability)이라고 한다.&lt;/li>
&lt;li>시스템의 모듈을 독립적으로 배포할 수 있게 되면, 다른 팀에서 각 모듈을 독립적으로 개발할 수 있고, 이것을 개발 독립성 이라 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>소프트웨어 아키텍트 관점에서 OO란 다형성을 이용하여 전체 시스템의 모든 소스코드 의존성에 대한 절대적인 제어 권한을 획득할 수 있는 능력이다.&lt;/p>
&lt;p>OO를 사용하면 아키텍트는 플러그인 아키텍처를 구성할 수 있고, 이를 통해 고수준의 전책을 포함하는 모듈은 저수순의 세부사항을 포함하는 모듈에 대해 독립성을 보장할 수 있다.&lt;/p>
&lt;p>저수준의 세부사항은 중요도가 낮은 플러그인 모듈로 만들 수 있고, 고수준의 정책을 포함하는 모듈과는 독립적으로 개발하고 배포할 수 있다.&lt;/p></description></item><item><title>4. 구조적 프로그래밍</title><link>https://codemario318.github.io/post/clean-architecture/4/</link><pubDate>Tue, 20 Feb 2024 20:33:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/4/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/4/cover.png" alt="Featured image of post 4. 구조적 프로그래밍" />&lt;p>구조적 프로그래밍(Structured Programming)은 프로그래밍의 한 접근 방법으로, 프로그램을 작성할 때 제어 흐름을 구조화하여 코드를 보다 이해하기 쉽고 유지 보수하기 쉽게 만들려는 것을 중점으로한다.&lt;/p>
&lt;p>구조적 프로그래밍은 프로그래밍 분야에서 중요한 발전 중 하나로, 초기 프로그래밍 방법론이 가진 한계(복잡성, 프로그래밍 실수, 소프트웨어 신뢰성 등)를 극복하고자 탄생하였다.&lt;/p>
&lt;h2 id="goto문의-해로움">&lt;code>goto&lt;/code>문의 해로움&lt;/h2>
&lt;p>구조적 프로그래밍을 발견한 데이크스트라는 프로그래밍은 어렵고, 프로그래머는 프로그래밍을 잘하지 못한다고 생각하였는제 아래와 같은 이유가 원인이라고 생각했다.&lt;/p>
&lt;ul>
&lt;li>모든 프로그램은 단순할지라도 너무 많은 세부사항을 담고 있었다.&lt;/li>
&lt;li>아주 작은 세부사항이라도 간과하면 예상 외의 방식으로 실패하곤 했다.&lt;/li>
&lt;/ul>
&lt;p>데이크스트라는 &lt;strong>증명&lt;/strong>이라는 수학적인 원리를 적용하여 이러한 문제를 해결하려고자 했고, 수학자가 유클리드 계층구조를 사용하여 증명하는 방식을 프로그래머도 사용할 수 있다고 믿었다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>유클리드 계층구조&lt;/strong>&lt;br>
공리(axiom)는 증명 없이 참으로 받아들이는 명제를 뜻한다.&lt;/p>
&lt;p>정리(theorem)는 증명이라는 과정을 통해 참이라는 것이 밝혀진 명제다.&lt;/p>
&lt;p>이러한 정리를 증명하는 데 필요한 정리를 보조정리(lemma)로 부르며, 정리를 통해 자연스럽게 도출되는 정리를 따름정리(corollary)라고 부른다.&lt;/p>
&lt;/blockquote>
&lt;p>이를 위한 연구를 진행하면서 합리적인 증명을 위한 분할 정복 접근법을 적용하려 했는데 &lt;code>goto&lt;/code> 문장을 이용한 제어 흐름 전환이 모듈을 더 작은 단위로 재귀적으로 분해하는 과정에 방해가 된다는 것을 발견하였다.&lt;/p>
&lt;p>반면 &lt;code>goto&lt;/code> 문장을 사용하더라도 모듈을 분해할 때 문제가 되지 않는 경우는 &lt;code>if/then/else&lt;/code>와 &lt;code>do/while&lt;/code> 같은 분기와 반복이라는 단순한 제어 구조에 해당한다는 사실을 발견했다.&lt;/p>
&lt;p>다익스트라는 제어 구조가 순차 실행(Sequential execution)과 결합해야 한다고 깨닳았다.&lt;/p>
&lt;h2 id="structured-program-theoremhttpsenwikipediaorgwikistructured_program_theorem">&lt;a class="link" href="https://en.wikipedia.org/wiki/Structured_program_theorem" target="_blank" rel="noopener"
>Structured program theorem&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/4/img.png"
width="700"
height="117"
srcset="https://codemario318.github.io/post/clean-architecture/4/img_hu2203a586a82df95cc8044769f2a6a61e_7549_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/4/img_hu2203a586a82df95cc8044769f2a6a61e_7549_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="598"
data-flex-basis="1435px"
>&lt;/p>
&lt;p>&lt;strong>Böhm–Jacopini 정리&lt;/strong>라고도 불리는 구조적 프로그래밍 정리는 프로그램을 작성하는 데 사용되는 모든 제어 구조를 표한할 수 있는 최소한의 구조가 있음을 보여준다.&lt;/p>
&lt;ul>
&lt;li>순차(Sequence)
&lt;ul>
&lt;li>프로그램의 각 문장들은 순차적으로 실행&lt;/li>
&lt;li>어떤 작업을 차례대로 수행하는 것을 의미함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>분기(Selection)
&lt;ul>
&lt;li>조건문을 사용하여 프로그램의 흐름을 분기&lt;/li>
&lt;li>조건에 따라 다른 명령문 또는 블록을 실행&lt;/li>
&lt;li>일반적으로 &lt;code>if-else&lt;/code>문이나 &lt;code>switch-case&lt;/code>문을 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>반복(Iteration)
&lt;ul>
&lt;li>루프를 사용하여 특정 조건이 충족될 때까지 특정한 명령문 또는 블록을 반복하여 실행&lt;/li>
&lt;li>대표적으로는 &lt;code>for&lt;/code>루프나 &lt;code>while&lt;/code>루프&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이러한 제어 구조들이 모든 프로그램을 작성하는 데 필요한 최소한의 구조라는 것을 보여주며, 즉 어떤 프로그램이라도 세 가지 구조로 구현할 수 있다는 것을 의미한다.&lt;/p>
&lt;h2 id="기능적-분해">기능적 분해&lt;/h2>
&lt;p>구조적 프로그래밍을 통해 모듈을 증명 가능한 더 작은 단위로 분해할 수 있게 되었다.&lt;/p>
&lt;ul>
&lt;li>이는 결국 모듈을 기능적으로 분해할 수 있음을 뜻하며, 거대한 문제 기술서를 받더라도 문제를 고수준의 기능들로 분해할 수 있다.&lt;/li>
&lt;li>분해한 기능들은 구조적 프로그래밍의 &lt;strong>제한된 제어구조&lt;/strong>를 이용하여 표현할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>이를 토대로 구조적 분석이나 구조적 설계와 같은 기법이 인기를 끌었으며, 개선되어 널리 알려졌다.&lt;/p>
&lt;ul>
&lt;li>대규모 시스템을 모듈과 컴포넌트로 나눌 수 있다.&lt;/li>
&lt;li>모듈과 컴포넌트는 입증할 수 있는 작은 기능들로 세분화할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="과학적-방법scientific-method">과학적 방법(Scientific Method)&lt;/h2>
&lt;blockquote>
&lt;p>테스트는 버그가 있음을 보여줄 뿐, 버그가 없음을 보여줄수는 없다.&lt;/p>
&lt;/blockquote>
&lt;p>소프트웨어 개발이 수학적인 구조를 다루는 듯 보이더라도, 소프트웨어 개발은 수학적인 시도가 아니다.&lt;/p>
&lt;p>오히려 올바르지 않음을 증명하는 데 실패함으로 올바름을 보여주는 과학과 같다.&lt;/p>
&lt;p>이러한 부정확함에 대한 증명은 입증 가능한 프로그램에만 적용할 수 있으며, 구조적 프로그래밍은 프로그램을 증명 가능한 세부 기능 집합으로 재귀적으로 분해할 것을 강요한다.&lt;/p>
&lt;p>그러고 나서 테스트를 통해 증명 가능한 세부 기능들이 거짓인지를 증명하려고 시도하며, 거짓임을 증명하는 테스트가 실패한다면, 충분히 참이라고 여기게 된다.&lt;/p>
&lt;h2 id="현대적-가치">현대적 가치&lt;/h2>
&lt;p>구조적 프로그래밍에 대한 논의는 많은 새로운 언어를 낳았으며, 기존의 언어에 구조적인 면이 추가되는 등 언어의 발전에 도움이 되었다. 그리고 이후에 나온 프로그래밍 패러다임들에도 영향을 끼쳤다.&lt;/p>
&lt;p>구조적 프로그래밍은 프로그래머의 습관을 바꾸었다.&lt;/p>
&lt;p>프로그램의 정확성을 증명하는 문제를 떠나서 데이크스트라가 그의 논문에서 말한 대로 시간에 따라 변하는 동적인 과정을 시각화하는 것은 인간에게 매우 어려운 일이다.&lt;/p>
&lt;p>꼭 &lt;code>GOTO&lt;/code>문만의 문제가 아니라 구조화된 흐름 제어문을 사용한다고 할지라도 너무 복잡하게 중첩되어 있거나 스코프의 길이가 너무 긴 코드를 작성한다거나 너무 긴 길이의 하위프로그램을 작성하는 일을 가급적 피하게 경향이 생겼다.&lt;/p>
&lt;p>그리고 이런 습관은 다른 사람이 작성한 프로그래밍 코드를 쉽게 이해하는 데 도움을 준다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;ul>
&lt;li>구조적 프로그래밍이 가치있는 이유는 프로그래밍에서 반증 가능한 단위를 만들어 낼 수 있는 능력 때문이다.&lt;/li>
&lt;li>가작 작은 기능에서 부터 가장 큰 컴포넌트에 이르기까지 모든 수준에서 소프트웨어는 과학과 같고, 반증 가능성에 의해 주도된다.&lt;/li>
&lt;li>스프트웨어 아키텍트는 모듈, 컴포넌트, 서비스가 쉽게 반증 가능하도록(테스트하기 쉽도록) 만들기위해 노력해야 한다.&lt;/li>
&lt;li>구조적 프로그래밍과 유사한 제한적인 규칙들을 통해 쉽게 반증 가능한 구조를 만들 수 있다.&lt;/li>
&lt;/ul></description></item><item><title>3. 패러다임 개요</title><link>https://codemario318.github.io/post/clean-architecture/3/</link><pubDate>Sun, 18 Feb 2024 19:54:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/3/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/3/cover.png" alt="Featured image of post 3. 패러다임 개요" />&lt;h2 id="구조적-프로그래밍">구조적 프로그래밍&lt;/h2>
&lt;blockquote>
&lt;p>구조적 프로그래밍은 제어흐름의 직접적인 전환에 대해 규칙을 부과한다.&lt;/p>
&lt;/blockquote>
&lt;p>최초로 적용된 패러다임(최초로 만들어진 패러다임은 아님)으로 1968년 에츠허르 비버 데이크스트라가 발견했다.&lt;/p>
&lt;ul>
&lt;li>무분별한 점프(&lt;code>goto&lt;/code> 문장)는 프로그램 구조에 해롭다는 사실을 제시함&lt;/li>
&lt;li>이러한 점프들을 &lt;code>if/then/else&lt;/code>, &lt;code>do/while/until&lt;/code>과 같이 더 익숙한 구조로 대체함&lt;/li>
&lt;/ul>
&lt;h2 id="객체-지향-프로그래밍">객체 지향 프로그래밍&lt;/h2>
&lt;blockquote>
&lt;p>객체 지향 프로그래밍은 제어흐름의 간접적인 전환에 대해 규칙을 부과한다.&lt;/p>
&lt;/blockquote>
&lt;p>두 번째로 도입된 패러다음으로 구조적 프로그래밍보다 2년 앞선 1966년 올레 요한 달과 크리스텐 니가드에 의해 등장했다.&lt;/p>
&lt;p>알골(ALGOL) 언어의 함수 호출 스택 프레임을 힙으로 옮기면, 함수 호출이 반환된 이후에도 함수에서 선언된 지역 변수가 오랫동안 유지될 수 있음을 발견했다.&lt;/p>
&lt;ul>
&lt;li>이러한 함수가 클래스의 생성자가 되었고, 지역 변수는 인스턴스 변수, 중첩 함수는 메서드가 되었다.&lt;/li>
&lt;li>함수 포인터를 특정 규칙에 따라 사용하는 과정을 통해 필연적으로 다형성이 등장하게 되었다.&lt;/li>
&lt;/ul>
&lt;h2 id="함수형-프로그래밍">함수형 프로그래밍&lt;/h2>
&lt;blockquote>
&lt;p>함수형 프로그래밍은 할당문에 대해 규칙을 부과한다.&lt;/p>
&lt;/blockquote>
&lt;p>최근에 들어서야 겨우 도입되기 시작했지만 가장 먼저 만들어졌다.&lt;/p>
&lt;p>알론조 처치는 앨런 튜링도 똑같이 흥미를 느꼈던 수학적 문제를 해결하는 과정에서 람다(Lambda) 계산법을 발명했는데, 함수형 프로그래밍은 이러한 연구 결과에 직접적인 영향을 받아 만들어졌다.&lt;/p>
&lt;p>1958년에 존 매카시가 만든 LISP 언어에 근간이 되는 개념이 바로 이 람다 계산법이다.&lt;/p>
&lt;ul>
&lt;li>람다 계산법의 기초가 되는 개념은 불변성으로, 심볼의 값이 변경되지 않는다는 개념이다.&lt;/li>
&lt;li>이는 함수형 언어에는 할당문이 전혀 없다는 뜻이기도 하다.&lt;/li>
&lt;li>대다수의 함수형 언어가 변수값을 변경할 수 있는 방법을 제공하기는 하지만, 굉장히 까다로운 조건 아래서만 가능하다.&lt;/li>
&lt;/ul>
&lt;h2 id="생각할-거리">생각할 거리&lt;/h2>
&lt;p>각 패러다임은 프로그래머에게서 권한을 박탈한다. 어느 패러다임도 새로운 권한을 부여하지 않는다.&lt;/p>
&lt;ul>
&lt;li>각 패러다임은 추가적인 규칙을 통해 특정 행동들을 하지 못하게 제약한다.&lt;/li>
&lt;li>패러다임은 무엇을 해야 할지를 말하기보다는 무엇을 해서는 안되는지를 말해준다.&lt;/li>
&lt;/ul>
&lt;p>각 패러다임이 우리에게서 무언가를 빼앗는다는 사실을 인지하는 것이다.&lt;/p>
&lt;ul>
&lt;li>구조적 프로그래밍: &lt;code>goto&lt;/code>문&lt;/li>
&lt;li>객체 지향 프로그래밍: 함수 포인터&lt;/li>
&lt;li>함수형 프로그래밍: 할당문&lt;/li>
&lt;/ul>
&lt;p>이 외에 개발자에게 가져갈 수 있는 것이 남아있지 않으므로, 프로그래밍 패러다임은 앞으로도 세 가지 밖에 없을 것이다.&lt;/p>
&lt;ul>
&lt;li>패러다임이 10년 동안 모두 만들어진 이후 수십 년이 지났지만 새롭게 등장한 패러다임은 전혀 없다.&lt;/li>
&lt;/ul>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>패러다임의 역사로부터 얻을 수 있는 이러한 교훈은 아키텍처와 큰 관계가 있다.&lt;/p>
&lt;ul>
&lt;li>아키텍처 경계를 넘나들기 위한 메커니즘으로 다형성을 이용한다.&lt;/li>
&lt;li>함수형 프로그래밍을 이용하여 데이터의 위치와 접근 방법에 대해 규칙을 부과한다.&lt;/li>
&lt;li>모듈 기반 알고리즘으로 구조적 프로그래밍을 사용한다.&lt;/li>
&lt;/ul>
&lt;p>세 가지 패러다임과 아키텍처의 세 가지 큰 관심사(함수, 컴포넌트 분리, 데이터 관리)가 어떻게 서로 연관되는지에 주목하자.&lt;/p></description></item><item><title>2. 두 가지 가치에 대한 이야기</title><link>https://codemario318.github.io/post/clean-architecture/2/</link><pubDate>Sun, 18 Feb 2024 19:03:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/2/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/2/cover.png" alt="Featured image of post 2. 두 가지 가치에 대한 이야기" />&lt;p>모든 소프트웨어 시스템은 이해관계자에게 행위(Behavior)와 구조(Structure)라는 두가지 가치를 제공한다.&lt;/p>
&lt;p>따라서 소프트웨어 개발자는 두 가치를 모두 반드시 높게 유지해야 하는 책임을 진다.&lt;/p>
&lt;p>하지만 한 가지 가치에만 집중하고 나머지 가치는 배제하곤 하며, 대체로 덜 중요한 가치에 집중하여 결국에는 소프트웨어 시스템이 쓸모 없게 만들어버린다.&lt;/p>
&lt;h2 id="행위기능">행위(기능)&lt;/h2>
&lt;p>프로그래머를 고용하는 이유는 이해관계자를 위해 기계가 수익을 창출하거나 비용을 절약하도록 만들기 위해서이다.&lt;/p>
&lt;ul>
&lt;li>이해관계자가 기능 명세서나 요구사항 문서를 구체화할 수 있도록 돕는다.&lt;/li>
&lt;li>이해관계자의 기계가 이러한 요구사항을 만족하도록 코드를 작성한다.
&lt;ul>
&lt;li>요구사항을 위반하면 문제를 고친다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>행위는 개발자가 구현해야하는 기능을 의미하며, 기능을 구현하고 만들어진 기능을 운영하는 것만을 개발자의 역할이라고 생각한다.&lt;/p>
&lt;h2 id="아키텍처">아키텍처&lt;/h2>
&lt;p>소프트웨어라는 단어는 부드러운(soft)과 제품(ware)의 합성어이다.&lt;/p>
&lt;p>소프트웨어는 부드러움을 지니도록 만들어졌으며, 소프트웨어를 만든 이유는 기계의 행위를 쉽게 변경할 수 있도록 하기 위해서이다.&lt;/p>
&lt;p>따라서 소프트웨어가 가진 본연의 목적을 추구하려면 소프트웨어는 반드시 부드러움, 즉 변경이 쉬워야하며 이해관계자가 기능에 대한 생각을 바꾸면 이러한 변경사항을 간단하고 쉽게 적용할 수 있어야 한다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>변경사항을 적용하는 데 드는 어려움은 변경되는 범위에 비례해야하며, 변경사항의 형태와는 관련이 없어야 한다.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>소프트웨어 개발 비용의 증가를 결정짓는 주된 요인은 바로 변경사항의 범위와 형태의 차이에 있다.&lt;/p>
&lt;p>이해관계자는 범위가 비슷한 일련의 변경사항을 제시할 뿐이지만, 개발자 입장에서는 복잡도가 지속적으로 증가하는 퍼즐 판 위에서 이해관계자가 계속해서 퍼즐 조각을 맞추라는 지시를 하는 것처럼 느낀다.&lt;/p>
&lt;p>이는 시스템의 형태와 요구사항의 형태가 서로 맞지 않기 때문인데, 원인은 소프트웨어 아키텍처다.&lt;/p>
&lt;p>아키텍처가 특정 형태를 다른 형태보다 선호하면 할수록, 새로운 기능을 이 구조에 맞추는 게 더 힘들어진다.&lt;/p>
&lt;p>&lt;strong>따라서 아키텍처는 항상 형태에 독립적이어야하고, 그럴수록 더 실용적이다.&lt;/strong>&lt;/p>
&lt;h2 id="더-높은-가치">더 높은 가치&lt;/h2>
&lt;p>기능과 아키텍처 둘 중 어느 것의 가치가 더 높은지 업무 관리자에게 묻는다면, 대다수가 소프트웨어 시스템이 동작하는 것이 더 중요하다고 대답하지만, 개발자는 아키텍처에 더 가치를 둬야한다.&lt;/p>
&lt;p>&lt;strong>양 극단 사례 검토&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>완벽하게 동작하지만 수정이 불가능한 프로그램은 요구사항이 변경될 때 동작하지 않게 되어 쓸모가 없다.&lt;/li>
&lt;li>동작은 하지 않니만 변경이 쉬운 프로그램은 개발자가 돌아가도록 만들 수 있고, 변경사항이 발생하더라도 여전히 동작하여 유용한채로 남는다.&lt;/li>
&lt;/ul>
&lt;p>변경에 드는 비용이 변경으로 창출되는 수익을 초과하는 경우 수정이 현실적으로 불가능하며, 이로 인해 기능 또는 설정 측면에서 만은 시스템이 현실적으로 수정할 수 없는 상황에 빠진다.&lt;/p>
&lt;p>현재의 기능 동작을 위해 미래의 유연성을 희생한다면, 변경에 드는 비용이 높아지게되어 현실적으로 수정할 수 없는 상황에 빠지게되고, 결과적으로 책임은 개발자에게 돌아간다.&lt;/p>
&lt;h2 id="아이젠하워-매트릭스">아이젠하워 매트릭스&lt;/h2>
&lt;p>긴급한 문제가 아주 중요한 문제일 경우는 드물고, 중요한 문제가 몹시 긴급한 경우는 거의 없다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/2/img.png"
width="1440"
height="1476"
srcset="https://codemario318.github.io/post/clean-architecture/2/img_hub52f30903063439618abfbc9fbd0cd5f_559836_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/2/img_hub52f30903063439618abfbc9fbd0cd5f_559836_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="아이젠하워 매트릭스"
class="gallery-image"
data-flex-grow="97"
data-flex-basis="234px"
>&lt;/p>
&lt;ol>
&lt;li>긴급 O, 중요 O&lt;/li>
&lt;li>긴급 X, 중요 O&lt;/li>
&lt;li>긴급 O, 중요 X&lt;/li>
&lt;li>긴급 X, 중요 X&lt;/li>
&lt;/ol>
&lt;p>아이젠하워 매트릭스에서는 위와 같은 우선순위로 문제를 해결할 것을 제안하고 있다.&lt;/p>
&lt;hr>
&lt;p>첫 번째 가치인 행위는 대부분 긴급하지만 매번 높은 중요도를 가지는 것은 아니며, 두 번째 가치인 아키텍처는 중요하지만 즉각적인 긴급성을 필요로 하는 경우는 절대 없다.&lt;/p>
&lt;p>아키텍처는 1, 2를 차지하는 반변, 행위는 1, 3에 위치한다.&lt;/p>
&lt;p>많은 업무 관리자와 개발자가 3번에 위치한 항목을 1번으로 격상시키는 실수를 많이 한다.&lt;/p>
&lt;ul>
&lt;li>긴급하지만 중요하지 않은 기능과 진짜로 긴급하면서 주용한 기능을 구분하지 못한다.&lt;/li>
&lt;/ul>
&lt;p>이러한 실패로 중요도가 높은 아키텍처를 무시한 채 중요도가 떨어지는 기능을 선택하게 된다.&lt;/p>
&lt;h2 id="아키텍처를-위해-투쟁하라">아키텍처를 위해 투쟁하라&lt;/h2>
&lt;p>더 중요한 가치인 아키텍처가 더 낮은 우선순위를 가지게 되는 이유는 대부분의 업무 관리자가 아키텍처의 중요성을 평가하지 못하기 때문이다.&lt;/p>
&lt;p>따라서 개발자, 개발팀은 다른 이해관계자들을 설득해야 할 의무가 있다.&lt;/p>
&lt;ul>
&lt;li>기능의 긴급성이 아닌 아키텍처의 중요성을 설득하는 일은 소프트웨어 개발팀이 책임을 져야한다.&lt;/li>
&lt;li>소프트웨어 개발자도 이해관계자이며, 소프트웨어를 안전하게 보호해야 할 책임이 있다.&lt;/li>
&lt;/ul>
&lt;p>소프트웨어 아키텍트는 시스템이 제공하는 특성이나 기능보다는 시스템의 구조에 더 중점을 둔다. 아키텍트는 이러한 특성과 기능을 개발하기 쉽고, 간편하게 수정할 수 있으며, 확장하기 쉬운 아키텍처를 만들어야 한다.&lt;/p>
&lt;p>개발자가 아키텍처에 더 높은 우선순위를 둘 수 있도록 이해관계자들과 투쟁하는 것은 장기적인 관점에서 더 나은 소프트웨어를 만들 수 있는 가능성을 높힌다.&lt;/p>
&lt;hr>
&lt;p>아키텍처가 후순위가 되면 시스템을 개발하는 비용이 점점 더 많이 들게되고, 결국 일부 또는 전체 시스템에 변경을 가하는 일이 현실적으로 힘들어진다.&lt;/p>
&lt;p>이러한 상황이 발생하도록 용납했다면, 이는 결국 소프트웨어 개발팀이 스스로 옳다고 믿는 가치를 위해 충분히 투쟁하지 않았다는 뜻이다.&lt;/p></description></item><item><title>1. 설계와 아키텍처란?</title><link>https://codemario318.github.io/post/clean-architecture/1/</link><pubDate>Sun, 18 Feb 2024 18:09:13 +0900</pubDate><guid>https://codemario318.github.io/post/clean-architecture/1/</guid><description>&lt;img src="https://codemario318.github.io/post/clean-architecture/1/cover.png" alt="Featured image of post 1. 설계와 아키텍처란?" />&lt;h2 id="설계와-아키텍처의-차이">설계와 아키텍처의 차이&lt;/h2>
&lt;p>설계(Design)와 아키텍처(Architecture)의 정의가 모호하여 오랫동안 많은 혼란이 있었지만 실제로는 둘의 차이는 없다.&lt;/p>
&lt;ul>
&lt;li>아키텍처는 저수준 세부사항과는 분리된 고수준의 무언가를 가릴킬 때 흔히 사용된다.&lt;/li>
&lt;li>설계는 저수준의 구조 또는 결정사항 등을 의미할 때가 많다.&lt;/li>
&lt;/ul>
&lt;p>하지만 아키텍트가 실제로 하는 일을 살펴보면 이러한 구분은 무의미하다.&lt;/p>
&lt;h3 id="새로운-집">새로운 집&lt;/h3>
&lt;p>새로운 집을 설계하는 아키텍트가 있다면 이 집의 아키텍처는 형태, 외관, 입면도, 공간이나 방의 배치등이 포함된다.&lt;/p>
&lt;p>하지만 아키텍트가 만든 도면을 살펴보면 콘센트, 전등 스위치, 전등이 모두 어디에 위치하는 지 등 세부사항도 모두 확인할 수 있으며, 벽, 지붕 기초 공사등이 어떻게 진행될지도 상세히 확인할 수 있다.&lt;/p>
&lt;p>이처럼 모든 고수준의 결정사항을 지탱하는 &lt;strong>모든 세부사항&lt;/strong>과 &lt;strong>고수준의 결정사항&lt;/strong>은 집의 전체 설계의 구성요소가 된다.&lt;/p>
&lt;p>소프트웨어 설계도 마찬가지로, 저수준의 세부사항과 고수준의 구조는 모두 소프트웨어 전체 설계의 구성요소다.&lt;/p>
&lt;p>저수준 세부사항과 고수준 세부사항은 &lt;strong>단절 없이 이어진 직물&lt;/strong>과 같으며, 이를 통해 대상 시스템의 구조를 정의한다.&lt;/p>
&lt;blockquote>
&lt;p>이 둘은 개별로 존재할 수 없으며, 경계 또한 뚜렸하지 않고 &lt;strong>고수준에서 저수준으로 향하는 의사결정의 연속성만이 있을 뿐이다.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="목표는">목표는?&lt;/h2>
&lt;p>이러한 의사결정, 좋은 소프트웨어 설계 즉 소프트웨어 아키텍처의 목표는 &lt;strong>필요한 시스템을 만드록 유지보수하는데 투입되는 인력을 최소화하는 데 있다.&lt;/strong>&lt;/p>
&lt;p>설계 품질의 척도는 고객의 &lt;strong>요구를 만족시키는 데 드는 비용&lt;/strong> 척도와 다름 없다.&lt;/p>
&lt;ul>
&lt;li>비용이 낮을 뿐만 아니라 시스템의 수명이 다할 때까지 &lt;strong>낮게 유지할 수 있다면 좋은 설계&lt;/strong>라고 말할 수 있다.&lt;/li>
&lt;li>새로운 기능을 출시할 때 마다 &lt;strong>비용이 증가&lt;/strong>한다면 나쁜 설계다.&lt;/li>
&lt;/ul>
&lt;h2 id="좋은-설계가-필요한-이유">좋은 설계가 필요한 이유&lt;/h2>
&lt;p>소프트웨어 아키텍처가 나쁘다면 소프트웨어가 진화함에 따라 점점 비용이 증가한다. (생산성이 떨어진다.)&lt;/p>
&lt;ul>
&lt;li>이러한 비용의 상승은 사업 모델의 수익을 고갈시킨다.&lt;/li>
&lt;li>회사의 성장을 멈추게 하거나 심지어는 완전히 망하게 만든다.&lt;/li>
&lt;/ul>
&lt;p>시스템을 급하게 만들거나, 결과물의 총량을 순전히 프로그래머 수만으로 결정하거나, 코드와 설계와 구조를 깔끔하게 만들려는 생각을 전혀 하지 않는다면, 시간이 지남에 따라 비용이 급격히 상승하게되고, 이를 통해 생산성이 바닥을 치게 된다.&lt;/p>
&lt;p>이러한 현상이 발생하게 되면 개발자가 기능 개발보다는 엉망이 된 상황에 대처하는 데 소모되기 시작하며, 개발자들이 쏟은 노력의 가치를 보잘것없게 만든다.&lt;/p>
&lt;h3 id="무엇이-잘못-되었나">무엇이 잘못 되었나?&lt;/h3>
&lt;p>&lt;strong>생산성을 유지할 수 있다는 착각&lt;/strong>&lt;/p>
&lt;p>일부 개발자들은 생산성을 유지할 수 있다고 자신의 능력을 과신한다.(언제든지 돌아가 생산성을 회복시킬 수 있다고 생각한다.)&lt;/p>
&lt;p>현대의 개발자들은 빠른 시장 출시가 경쟁자보다 앞서 가는 것이라 생각하며 &amp;ldquo;코드는 나중에 정리하면 돼. 당장은 시장에 출시하는 게 먼저야!&amp;ldquo;라고 스스로를 속인다.&lt;/p>
&lt;p>하지만 시장의 압박은 절대 수그러들지 않기 때문에 태세를 전환하지 않고 정리하는 일은 매우 드물게 되며, 이로 인해 휼륭하고 깔끔하게 잘 설계된 코드와 점점 더 거리가 멀어지게 된다.&lt;/p>
&lt;p>이러한 상황에서 계속해서 새로운 기능들이 추가가 되어 결국 엉망진창이 되고, 생산성이 0으로 수렴하기 시작한다.&lt;/p>
&lt;p>&lt;strong>지저분한 코드를 작성하면 단기간에 빠르게 갈 수 있다는 착각&lt;/strong>&lt;/p>
&lt;p>지저분한 코드를 작성하면 단 기간에는 빠르게 갈 수 있고, &lt;strong>장기적으로 볼 때만 생산성이 낮아진다는 견해&lt;/strong>는 엉망으로 코드를 짜기위한 자기합리화이며, 진실은 &lt;strong>엉망으로 만들면 깔끔하게 유지할 때보다 항상 더 느리다.&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/clean-architecture/1/img.png"
width="491"
height="355"
srcset="https://codemario318.github.io/post/clean-architecture/1/img_hu97e80447e00e45f30d31a1b6d7350367_79701_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/clean-architecture/1/img_hu97e80447e00e45f30d31a1b6d7350367_79701_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="이터레이션별 걸린 시간과 TDD 적용 여부"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="331px"
>&lt;/p>
&lt;p>제이슨 고먼은 코드를 깔끔하게 유지하는 잘 알려진 방법 중 하나인 TDD를 사용 여부로 생산성을 측정했다.&lt;/p>
&lt;p>TDD를 적용했을때가 훨씬 더 빨랐으며, 심지어 TDD를 적용한 가장 느렸던 날이 적용하지 않은 가장 빨리 작업한 날보다 더 빨랐다.&lt;/p>
&lt;blockquote>
&lt;p>빨리 가는 유일한 방법은 제대로 가는 것이다.&lt;/p>
&lt;/blockquote>
&lt;p>생산성이 감소되고 비용이 증가하는 현상을 되돌릴 수 있는 유일한 방법은 없다.&lt;/p>
&lt;p>이러한 문제를 해결하기 위해 처음부터 다시 시작하더라도 한번 문제를 발생시킨 개발자(팀)는 똑같은 문제를 반복하는 경우가 많으며, 이 때문에 항상 코드와 설계를 깔끔하게 만들려는 노력을 지속해야한다.&lt;/p>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>어떤 경우라도 개발 조직이 할 수 있는 최고의 선택지는 조직에 스며든 과신을 인지하여 방지하고, 소프트웨어 아키텍처의 품질을 심각하게 고민하기 시작하는 것이다.&lt;/p>
&lt;p>소프트웨어 아키텍처를 심각하게 고려할 수 있으려면 좋은 소프트웨어 아키텍처가 무엇인지 이해해야 한다.&lt;/p>
&lt;ul>
&lt;li>비용은 최소화하고 생산성은 최대화 할 수 있는 설계와 아키텍처를 가진 시스템을 만드려면, 시스템 아키텍처가 지닌 속성을 알고 있어야 한다.&lt;/li>
&lt;/ul>
&lt;p>이 책은 훌륭하고 깔끔한 아키텍처와 설계가 무엇인지 설명하고, 이를 통해 소프트웨어 개발자가 장시간에 걸쳐 수익을 창출하는 시스템을 만들 수 있게 하고자 한다.&lt;/p></description></item><item><title>Python - Generator</title><link>https://codemario318.github.io/post/python_cover/</link><pubDate>Tue, 18 Apr 2023 14:31:00 +0900</pubDate><guid>https://codemario318.github.io/post/python_cover/</guid><description>&lt;img src="https://codemario318.github.io/post/python_cover/python_cover.png" alt="Featured image of post Python - Generator" />&lt;p>제너레이터는 제너레이터 함수가 호출될 때 반환되는 이터러블 객체이다. 제네레이터 함수는 일반적인 함수와 비슷하게 생겼지만 &lt;code>yield&lt;/code> 구문을 사용해 데이터를 원하는 시점에 반환하고 처리를 다시 시작할 수 있다. 일반적인 함수는 진입점이 하나라면 제네레이터는 진입점이 여러개라고 생각할 수 있다. 이러한 특성때문에 제네레이터를 사용하면 원하는 시점에 원하는 데이터를 받을 수 있게된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">generator&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">generator&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># &amp;lt;generator object generator at 0x10a47c678&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># &amp;#39;string&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gen&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">Traceback (most recent call last):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">StopIteration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="동작">동작&lt;/h2>
&lt;ol>
&lt;li>&lt;code>yield&lt;/code> 문이 포함된 함수를 실행하면 제너레이터 객체가 반환되는데 이 때는 함수의 내용이 실행되지 않는다.&lt;/li>
&lt;li>&lt;code>next()&lt;/code> 라는 빌트인 메서드를 통해 제네레이터를 실행시킬 수 있으며 next() 메서드 내부적으로 iterator 를 인자로 받아 이터레이터의 &lt;code>__next__()&lt;/code> 메서드를 실행시킨다.&lt;/li>
&lt;li>처음 &lt;code>__next__()&lt;/code> 를 호출하면 함수의 내용을 실행하다 &lt;code>yield&lt;/code> 문을 만났을 때 처리를 중단한다.&lt;/li>
&lt;li>이 때 모든 local state는 유지되는데 변수의 상태, 명령어 포인터, 내부 스택, 예외 처리 상태를 포함한다.&lt;/li>
&lt;li>그 후 제어권을 상위 컨텍스트로 양보(yield)하고 또 &lt;code>__next__()&lt;/code> 가 호출되면 제네레이터는 중단된 시점부터 다시 시작한다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;code>yield&lt;/code> 문의 값은 어떤 메서드를 통해 제네레이터가 다시 동작했는지에 따라 다른데, &lt;code>__next__()&lt;/code> 를 사용하면 None이고 &lt;code>send()&lt;/code> 를 사용하면 메서드로 전달 된 값을 갖게되어 외부에서 데이터를 입력받을 수 있게 된다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="장점">장점&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/python_cover/python_generator_1.png"
width="1272"
height="574"
srcset="https://codemario318.github.io/post/python_cover/python_generator_1_huffa17e204d26514765855512ef8025cc_55547_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/python_cover/python_generator_1_huffa17e204d26514765855512ef8025cc_55547_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Genrator, Iterator, Iterable 간 관계"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="531px"
>&lt;/p>
&lt;p>&lt;code>List&lt;/code>, &lt;code>Set&lt;/code>, &lt;code>Dict&lt;/code> 표현식은 iterable 하기에 &lt;code>for&lt;/code> 표현식 등에서 유용하게 쓰일 수 있다. 하지만 해당 객체들은 &lt;code>Collection&lt;/code> 특성상 가진 데이터를 메모리에 담고 있어야 하기 때문에 큰 값을 다룰 때는 성능상 불리하다. 제너레이터는 &lt;code>yield&lt;/code> 를 통해 필요한 값만 받아 쓰기 때문에 모든 값을 메모리에 들고 있을 필요가 없게 된다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100000&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getsizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#824464&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100000&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getsizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#88&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>리스트가 여러번 사용될 수 있는 반면 &lt;code>b&lt;/code> 제네레이터는 한번 사용된 후 소진된다. 이는 모든 이터레이터가 마찬가지인데 &lt;code>List&lt;/code>, &lt;code>Set&lt;/code> 등은 이터러블하지만 이터레이터는 아니기에 소진되지 않는다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 100000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">list&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># 0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>while True&lt;/code> 구분으로 제공받을 데이터가 무한하거나, 모든 값을 한번에 계산하기엔 시간이 많이 소요되어 그때 그때 필요한 만큼만 받아 계산하고 싶을 때 제네레이터를 활용할 수 있다.&lt;/p></description></item><item><title>검색 엔진</title><link>https://codemario318.github.io/post/search_engine/</link><pubDate>Tue, 18 Apr 2023 14:04:15 +0900</pubDate><guid>https://codemario318.github.io/post/search_engine/</guid><description>&lt;img src="https://codemario318.github.io/post/search_engine/search_engine_cover.jpeg" alt="Featured image of post 검색 엔진" />&lt;p>&lt;img src="https://codemario318.github.io/post/search_engine/search_1.png"
width="1920"
height="1624"
srcset="https://codemario318.github.io/post/search_engine/search_1_hu403bad1118769606b062ea29b7dc1dc8_181102_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/search_engine/search_1_hu403bad1118769606b062ea29b7dc1dc8_181102_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="118"
data-flex-basis="283px"
>
검색 엔진은 컴퓨터 시스템에 저장된 정보를 찾아주는 것을 도와주도록 설계된 정보 검색 시스템이다. 검색 엔진을 사용하여정보를 찾는데 필요한 시간을 최소화할 수 있다.&lt;/p>
&lt;h2 id="웹-검색-엔진">웹 검색 엔진&lt;/h2>
&lt;p>웹 사이트를 검색하기 위한 프로그램이다.&lt;/p>
&lt;p>FTP 서버나 웹 사이트의 파일 검색 결과를 포함하며, 이미지나 토렌트 파일 또는 특정 부류의 웹 사이트에 특화된 웹 검색 엔진도 있다.&lt;/p>
&lt;p>서버에서는 &amp;lsquo;로봇&amp;rsquo;이라 불리는 특별한 프로그램을 이용하 웹 사이트들을 돌아다니며 웹 사이트들에 대한 정보를 미리 자동적으로 수집한다. 이휴 검색 엔진 사이트에서 특정 검색어를 입력하면 검색 엔진이 수집한 정보 중 그에 맞는 결과를 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>로봇이 참조와 어휘를 분헉하는 방식에 따라 검색 품질이 결정됨&lt;/li>
&lt;/ul>
&lt;h3 id="원리">원리&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/search_engine/search_2.png"
width="910"
height="212"
srcset="https://codemario318.github.io/post/search_engine/search_2_hubf6b83db01328e832aa8960bbb3db72a_146347_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/search_engine/search_2_hubf6b83db01328e832aa8960bbb3db72a_146347_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="429"
data-flex-basis="1030px"
>&lt;/p>
&lt;p>검색 엔진은 사용자가 검색 엔진을 사용하기 전에 미리 웹 상에서 정보를 수집하여 색인을 만들어 놓는다. 그리고 나서 사용자가 찾고자 하는 정보의 키워드를 입력하면, 미리 만들어 놓은 색인 중에서 입력된 키워드에 해당하는 정보들을 찾아서 보여준다.&lt;/p>
&lt;h3 id="문서-수집">문서 수집&lt;/h3>
&lt;p>현재 대부분의 검색 엔진에서는 엡상의 방대한 정보들을 검색하고 색인화 하는 과정을 크롤러라고 부르는 정보 수집 프로그램을 사용하여 수행하고 있다.&lt;/p>
&lt;p>크롤러가 주기적으로 웹에 접속된 사이트들을 방문하여 해당 웹 사이트가 가지고 있는 정보에 대해 색인을 작성한 후 그것을 데이터베이스에 저장하여 검색시 활용하게된다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>크롤러&lt;/strong>&lt;br>
웹상의 문서나 이미지, 영상 등을 주기적으로 검색하고 취합하여, 자동으로 데이터베이스화 시키는 프로그램으로 봇(Bot)이라고도 부른다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="검색-엔진의-종류">검색 엔진의 종류&lt;/h2>
&lt;p>수집한 정보를 색인하는 방법에 따라 구분된다.&lt;/p>
&lt;h3 id="로봇-검색-엔진">로봇 검색 엔진&lt;/h3>
&lt;p>크롤라라고 불리는 로봇을 이용하여 웹상의 데이터를 효율적으로 수집하고, 이렇게 수집한 데이터 키워드 색인을 통해 사용자에게 제공하는 검색 엔진&lt;/p>
&lt;ul>
&lt;li>Google, Naver등 현재 사용되는 대부분의 검색 엔진이 이 방식을 채택하고 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="디렉토리-검색-엔진">디렉토리 검색 엔진&lt;/h3>
&lt;p>주제 분류에 의한 검색을 제공하는 검색 엔진이며, 데이터의 분류를 사람이 직접 슈행해야 한다.&lt;/p>
&lt;ul>
&lt;li>현재 주류인 방식은 아니며, 1990년대 Yahoo등에서 사용되었음&lt;/li>
&lt;/ul>
&lt;h3 id="메타-검색-엔진">메타 검색 엔진&lt;/h3>
&lt;p>자체적으로 정보를 보유하고 있지 않으면서 사용자가 입력한 키워드를 복수의 다른 검색 엔진으로 전송하여 결과를 얻고, 그 결과들을 종합하여 표시만 해주는 검색 엔진&lt;/p>
&lt;p>여러 검색 엔진의 결과를 동시에 보여주기 때문에 결과를 한눈에 살펴보기에는 편하지만, 메타 검색이라는 과정을 한 번 더 거쳐야 하므로 속도가 느를 수 있다.&lt;/p>
&lt;h2 id="검색-엔진-최적화search-engine-optimization-seo">검색 엔진 최적화(Search Engine Optimization, SEO)&lt;/h2>
&lt;p>검색 결과의 상위에 자신의 웹 페이지가 노출되기 위해 검색 엔진이 자료를 수집하고 결과를 산출하는 방식에 맞춰 웹 페이지의 구성을 조정하는 것을 의미한다.&lt;/p>
&lt;p>각각의 검색 엔진에 맞처 웹 페이지 내의 키워드나 링크 등을 최적화 하는 작업을 SEO라고 한다.&lt;/p></description></item><item><title>Nginx VS Apache</title><link>https://codemario318.github.io/post/nginx_vs_apache/</link><pubDate>Mon, 17 Apr 2023 19:10:21 +0900</pubDate><guid>https://codemario318.github.io/post/nginx_vs_apache/</guid><description>&lt;img src="https://codemario318.github.io/post/nginx_vs_apache/web_cover.jpeg" alt="Featured image of post Nginx VS Apache" />&lt;h2 id="apache">Apache&lt;/h2>
&lt;p>아파치는 클라이언트 요청을 받으면 MPM(Multi Processing Module : 다중처리모듈) 방식으로 처리한다.&lt;/p>
&lt;h3 id="스레드프로세스-기반-구조-동작">스레드/프로세스 기반 구조 동작&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/nginx_vs_apache/apache_1.png"
width="650"
height="228"
srcset="https://codemario318.github.io/post/nginx_vs_apache/apache_1_hud788ba3048e19a1ebe7d38112e42e6a1_35541_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/nginx_vs_apache/apache_1_hud788ba3048e19a1ebe7d38112e42e6a1_35541_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="684px"
>&lt;/p>
&lt;ol>
&lt;li>ServerSocket으로 request A가 들어오면 Thread를 할당해준다.&lt;/li>
&lt;li>Thread는 해당 socket을 가지고 read, write작업 등을 수행한다.&lt;/li>
&lt;li>수행 도중 ServerSocket으로 request B가 들어오면, context switching이 일어난다.&lt;/li>
&lt;li>새로 들어온 요청에 쓰레드를 배분하고, 또 해당 소켓을 가지고 작업을 수행한다.&lt;/li>
&lt;li>아직 마무리되지 않은 A를 처리하기 위해 일정 기간마다 지속적으로 context switching을 반복하고 모든 작업을 마무리 한다.&lt;/li>
&lt;/ol>
&lt;h3 id="prefork-mpm">Prefork MPM&lt;/h3>
&lt;blockquote>
&lt;p>실행중인 프로세스를 복제하여 처리하는 방식&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://codemario318.github.io/post/nginx_vs_apache/apache_2.png"
width="540"
height="228"
srcset="https://codemario318.github.io/post/nginx_vs_apache/apache_2_hu4aea97f916963e39605fd52709e9d50f_18335_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/nginx_vs_apache/apache_2_hu4aea97f916963e39605fd52709e9d50f_18335_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="236"
data-flex-basis="568px"
>&lt;/p>
&lt;p>각 프로세스는 한번에 한 연결만 처리하고, 요청량이 많아질수록 프로세스를 복제하여 동작한다.&lt;/p>
&lt;p>프로세스를 복제하는 방식이기 떄문에 메모리가 많이 소비된다&lt;/p>
&lt;blockquote>
&lt;p>연결 수 = 프로세스 수&lt;/p>
&lt;/blockquote>
&lt;h3 id="worker-mpm">Worker MPM&lt;/h3>
&lt;p>&lt;code>Prefork&lt;/code> 방식은 한개의 프로세스가 한개의 스레드로 처리되지만, &lt;code>Worker&lt;/code> 방식은 한개의 프로세스가 여러 쓰레드를 사용하여 처리한다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/nginx_vs_apache/apache_3.png"
width="567"
height="306"
srcset="https://codemario318.github.io/post/nginx_vs_apache/apache_3_hue17f6f82a5b8ce67bf262ebdfc3b1f83_23290_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/nginx_vs_apache/apache_3_hue17f6f82a5b8ce67bf262ebdfc3b1f83_23290_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>&lt;/p>
&lt;p>쓰레드를 사용하기 떄문에 &lt;code>Prefork&lt;/code> 방식보다 메모리 소모가 적고, 통신량이 많을 때 유리하다.&lt;/p>
&lt;h3 id="문제점">문제점&lt;/h3>
&lt;p>아파치는 접속마다 프로세스 또는 쓰레드를 생성하는 구조이다.&lt;/p>
&lt;p>동시 접속 요청이 많을수록 그만큰 생성 비용이 들고 대용양 요청을 처리할 수 있는 웹 서버로서 한계가 나타난다.&lt;/p>
&lt;h2 id="nginx">Nginx&lt;/h2>
&lt;p>한개 또는 고정된 프로세스만 생성하고, 프로세스 내부에서 비동기 방식으로 작업을 처리한다. 따라서 동시 접속 요청이 많아도 프로세스 또는 쓰레드 생성 비용이 존재하지 않는다.&lt;/p>
&lt;h3 id="event-driven-방식">Event-Driven 방식&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/nginx_vs_apache/nginx_1.png"
width="650"
height="228"
srcset="https://codemario318.github.io/post/nginx_vs_apache/nginx_1_hub9b084e6dd23334ae771f5e5c2e9549d_33410_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/nginx_vs_apache/nginx_1_hub9b084e6dd23334ae771f5e5c2e9549d_33410_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="285"
data-flex-basis="684px"
>&lt;/p>
&lt;blockquote>
&lt;p>Event-Driven 방식은 Reactor pattern을 사용한다.&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>&lt;code>Reactor&lt;/code>는 이벤트가 들어오면 알맞는 &lt;code>handler&lt;/code>로 &lt;code>dispatch&lt;/code> 해준다.&lt;/li>
&lt;li>&lt;code>Handler&lt;/code>는 &lt;code>dispatch&lt;/code>된 이벤트를 받아서 처리하는 역할을 수행&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>Reactor pattern&lt;/strong>&lt;br>
이벤트 처리(event handling)디자인 패턴으로 하나의 &lt;code>Reactor&lt;/code>가 계속 이벤트를 찾고 이벤트가 발생(trigger)하면 해당 이벤트 처리기(event handler)에게 알린다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="nginx와-apache의-차이점">Nginx와 Apache의 차이점&lt;/h2>
&lt;h3 id="컨텐츠의처리-방식">컨텐츠의처리 방식&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>정적 컨텐츠 처리&lt;/p>
&lt;ul>
&lt;li>Apache: 전통적인 파일기반 방식의 정적 컨텐츠&lt;/li>
&lt;li>Nginx: 이벤트 처리/비동기식/논블로킹 방식 처리로 인해 정적 컨텐츠 제공시 고속 처리 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>동적 컨텐츠 처리&lt;/p>
&lt;ul>
&lt;li>Apache: 서버 내에서 처리
&lt;ul>
&lt;li>기본적으로 유연성과 범용성을 갖추는 방식으로 서버 자체에서 동적 컨텐츠 처리가 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Nginx: 동적 컨텐츠를 처리하지 않음
&lt;ul>
&lt;li>동적 웹 페이지 컨텐츠를 가진 모든 요청을 위해 외부 자원과 연계한다. 따라서 최종적으로 동적 컨텐츠가 다시 돌아올 때까지 기다렸다가 클라이언트에게 전달하는 방식을 가지고 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="os-지원에-대한-범용성">OS 지원에 대한 범용성&lt;/h3>
&lt;ul>
&lt;li>Apache: 리눅스, BSD, UNIX, WINDOW
&lt;ul>
&lt;li>역사가 있는 만큼 지원 범위가 다양하기 때문에 일관성 있는 웹 서비스 아키텍쳐를 구현할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Nginx: LINUX, BSD, UNIX, WIN(부분 지원)
&lt;ul>
&lt;li>다양한 운영체제를 지원하지만 아파치 만큼 완벽히 지원하지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="분산중앙집중식-구성-방식">분산/중앙집중식 구성 방식&lt;/h3>
&lt;ul>
&lt;li>Apache: 분산/중앙집중식 구성 채택
&lt;ul>
&lt;li>.htaccess를 통해 디렉토리별로 추가 구성을 할 수 있다. 단일 기반 뿐만 아니라 분산형 구칙이 가능하므로 대용량 서버 아키텍쳐에서 자원만 충분하다면 여러 웹 서비스를 구현 할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Nginx: 중앙집중식 구성 채택
&lt;ul>
&lt;li>아파치처럼 .htaccess를 지원하지 않는다. 따라서 추가 구성을 할 수 없는 단점이 있다. 하지만 이러한 방식은 가상화, 클라우드, MSA와 같은 아키텍쳐에서는 오히려 경량화와 성능 보장이라는 측면에서 단점이 되지 않을 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="모듈-및-확장성보안">모듈 및 확장성/보안&lt;/h3>
&lt;ul>
&lt;li>Apache
&lt;ul>
&lt;li>60개 이상의 다양한 기능과 모듈을 지원하며, 필요에 따라 활성화 또는 비활성 시킬 수 있다. 동적 모듈을 통해 웹 서버의 사용자 지정도 가능하게 할 수 있는 등 다양한 디자인과 확장이 가능하다.&lt;/li>
&lt;li>보안을 위해 다양한 Web기반 DDoS 방어 기술을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Nginx
&lt;ul>
&lt;li>다른 코어 모듈을 동적으로 로딩할 수 없도록 되어있다. 옵션을 최소화 해서 태생 부터 성능에 포커싱 했다.&lt;/li>
&lt;li>보안에 대한 다양한 기술 문서를 제공하며, 코드 자체가 가볍고 경량화 되어 있어서 보안에 유리한 측면도 있다.&lt;a class="link" href="https://youngmind.tistory.com/entry/Apache-vs-Nginx" target="_blank" rel="noopener"
>https://youngmind.tistory.com/entry/Apache-vs-Nginx&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Web</title><link>https://codemario318.github.io/post/web/</link><pubDate>Mon, 17 Apr 2023 18:28:10 +0900</pubDate><guid>https://codemario318.github.io/post/web/</guid><description>&lt;img src="https://codemario318.github.io/post/web/web_cover.jpeg" alt="Featured image of post Web" />&lt;h2 id="웹-동작-방식">웹 동작 방식&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/web/web_1.png"
width="1480"
height="730"
srcset="https://codemario318.github.io/post/web/web_1_hu7f6c89e951b5c7c2fdb2549d3b17bd79_46991_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/web/web_1_hu7f6c89e951b5c7c2fdb2549d3b17bd79_46991_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="웹 동작 방식"
class="gallery-image"
data-flex-grow="202"
data-flex-basis="486px"
>&lt;/p>
&lt;p>클라이언트(브라우저)가 HTTP(URL)을 통해 요청을 보내면 HTML, CSS, 이미지와 같은 정적 콘텐츠를 응답으로 보내게 되고 그것을 받은 클라이언트가 해석하여 페이지로 보여준다.&lt;/p>
&lt;h2 id="static-pages와-dynamic-pages">Static pages와 Dynamic Pages&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/web/web_2.png"
width="3233"
height="1262"
srcset="https://codemario318.github.io/post/web/web_2_hu118d3ab45ddaa4b1e54aef5407b22c06_339090_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/web/web_2_hu118d3ab45ddaa4b1e54aef5407b22c06_339090_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Static and Dynamic"
class="gallery-image"
data-flex-grow="256"
data-flex-basis="614px"
>&lt;/p>
&lt;h3 id="static-pages">Static Pages&lt;/h3>
&lt;ul>
&lt;li>Web Server는 파일 경로의 이름을 받아 경로와 일치하는 file contents를 반환&lt;/li>
&lt;li>항상 동일한 페이지를 반환&lt;/li>
&lt;li>Ex) image, html, css, javascript 파일과 같이 컴퓨터에 저장되어 있는 파일들&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-pages">Dynamic Pages&lt;/h3>
&lt;ul>
&lt;li>인자의 내용에 맞게 동적인 Contents를 반환&lt;/li>
&lt;li>웹 서버에 의해서 실행되는 프로그램을 통해서 만들어진 결과물(WAS)위에서 돌아가는 프로그램&lt;/li>
&lt;/ul>
&lt;h2 id="web-server와-was의-차이">Web Server와 WAS의 차이&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/web/web_3.png"
width="1917"
height="607"
srcset="https://codemario318.github.io/post/web/web_3_hub574429a97bf680de242b6364e3018eb_132576_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/web/web_3_hub574429a97bf680de242b6364e3018eb_132576_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Web Server와 WAS"
class="gallery-image"
data-flex-grow="315"
data-flex-basis="757px"
>&lt;/p>
&lt;h3 id="web-server">Web Server&lt;/h3>
&lt;p>소프트웨어와 하드웨어로 구분된다.&lt;/p>
&lt;ul>
&lt;li>하드웨어
&lt;ul>
&lt;li>Web 서버가 설치되어 있는 컴퓨터&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>소프트웨어
&lt;ul>
&lt;li>웹 브라우저 클라이언트로 부터 HTTP 요청을 받아 &lt;strong>정적인 컨텐츠&lt;/strong>(.html, .jpeg, .css 등)을 제공하는 컴퓨터 프로그램&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="web-server의-역할">Web Server의 역할&lt;/h4>
&lt;blockquote>
&lt;p>HTTP 프로토콜을 기반으로 하여 클라이언트의 요청을 서비스 하는 기능 담당&lt;/p>
&lt;/blockquote>
&lt;p>요청에 따라 두 가지 기능 중 적절하게 선택하여 수행&lt;/p>
&lt;ol>
&lt;li>정적인 컨텐츠 제공
&lt;ul>
&lt;li>WAS를 거치지 않고 바로 자원을 제공한다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>동적인 컨텐츠 제공을 위한 요청 전달
&lt;ul>
&lt;li>클라이언트의 요청을 WAS에 보내고, WAS가 처리한 결과를 클라이언트에게 전달한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="web-server의-예">Web Server의 예&lt;/h4>
&lt;ul>
&lt;li>Apache Server&lt;/li>
&lt;li>Nginx&lt;/li>
&lt;li>IIS 등&lt;/li>
&lt;/ul>
&lt;h3 id="wasweb-application-server">WAS(Web Application Server)&lt;/h3>
&lt;blockquote>
&lt;p>DB 조회나 다양한 로직 처리를 요구하는 동적인 컨텐츠를 제공하기위해 만들어진 Application Server&lt;/p>
&lt;/blockquote>
&lt;p>HTTP를 통해 컴퓨터나 장치에 어플리케이션을 수행해주는 미들웨어이다.&lt;/p>
&lt;blockquote>
&lt;p>웹 컨테이너(Web Container), 서블릿 컨테이너(Servlet Container)라고도 불림&lt;/p>
&lt;/blockquote>
&lt;h4 id="was의-역할">WAS의 역할&lt;/h4>
&lt;blockquote>
&lt;p>WAS = Web Server + Web Container&lt;/p>
&lt;/blockquote>
&lt;p>웹서버 기능들을 구조적으로 분리하여 처리하고자하는 목적으로 제시됨&lt;/p>
&lt;ul>
&lt;li>분산 트랜잭션&lt;/li>
&lt;li>보안&lt;/li>
&lt;li>메시징&lt;/li>
&lt;li>쓰레드 처리 등&lt;/li>
&lt;/ul>
&lt;p>DB와 서버와 같이 수행됨&lt;/p>
&lt;h4 id="was의-주요-기능">WAS의 주요 기능&lt;/h4>
&lt;ul>
&lt;li>프로그램 실행 환경과 DB 접속 기능 제공&lt;/li>
&lt;li>여러 개의 트랜잭션 관리 기능&lt;/li>
&lt;li>업무를 처리하는 비지니스 로직 수행&lt;/li>
&lt;/ul>
&lt;h4 id="was가-필요한-이유">WAS가 필요한 이유&lt;/h4>
&lt;p>웹 페이지는 정적 컨텐츠와 동적 컨텐츠가 모두 존재한다.&lt;/p>
&lt;ul>
&lt;li>사용자의 요청에 맞게 적절한 동적 컨텐츠를 만들어서 제공해야 한다.&lt;/li>
&lt;li>웹 서버만을 이용하게 되면 그에 맞는 결과가 정적 파일로 존재해야 한다.&lt;/li>
&lt;/ul>
&lt;p>따라서 WAS를 통해 요청에 맞는 데이터를 DB에서 가져와 비즈니스 로직에 맞게 결과를 만들어 제공함으로 자원을 효율적으로 사용할 수 있다.&lt;/p>
&lt;h2 id="was와-web-server를-분리하는-이유">WAS와 Web Server를 분리하는 이유&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>기능 분리를 통한 서버 부하 방지&lt;/strong>&lt;br>
WAS만으로도 웹서비스를 제공 가능하지만 WAS는 DB조회 등 동적인 웹 페이지를 위한 다양한 동작을 하기 때문에 바쁘다. 따라서 웹 서버를 통해 정적인 컨텐츠를 제공하여 부하를 방지한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>물리적으로 분리하여 보안 강화&lt;/strong>&lt;br>
SSL에 대한 암복호화 처리에 웹서버를 사용한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>여러대의 WAS를 연결 가능&lt;/strong>&lt;br>
Load Balancing을 위해 Web Server를 사용 가능하다&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>fail over(장애 극복), fail back 처리에 유리&lt;/li>
&lt;li>여러대의 서버를 사용하는 대용량 웹 어플리케이션의 경우 웹 서버와 WAS를 분리하여 무중단 운영을 위한 장애 극복에 쉽게 대응할 수 있다.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>&lt;strong>여러 웹 어플리케이션 서비스 가능&lt;/strong>&lt;br>
하나의 웹 서버로 다양한 WAS를 이용하게 만들 수 있다.&lt;/li>
&lt;/ol></description></item></channel></rss>