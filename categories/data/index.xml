<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Data on Mario Blog</title><link>https://codemario318.github.io/categories/data/</link><description>Recent content in Data on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Mon, 17 Apr 2023 19:42:33 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/categories/data/index.xml" rel="self" type="application/rss+xml"/><item><title>메시징 시스템이란?</title><link>https://codemario318.github.io/post/messaging_system/</link><pubDate>Mon, 17 Apr 2023 19:42:33 +0900</pubDate><guid>https://codemario318.github.io/post/messaging_system/</guid><description>&lt;img src="https://codemario318.github.io/post/messaging_system/messaging_cover.png" alt="Featured image of post 메시징 시스템이란?" />&lt;h2 id="용어정리">용어정리&lt;/h2>
&lt;ul>
&lt;li>MOM (Message Oriented Middleware, 메시지 지향 미들웨어)
&lt;ul>
&lt;li>독립된 어플리케이션 간에 데이터를 주고받을 수 있도록 하는 시스템 디자인
&lt;ul>
&lt;li>함수 호출, 공유메모리 등이 방식이 아닌, 메시지 교환을 이용하는 중간 계층에 대한 인프라 아키텍쳐 개념&lt;/li>
&lt;li>분산 컴퓨팅이 가능해지며, 서비스간의 결합성이 낮아짐&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>지동기로 메시지를 전달하는 것이 특징&lt;/li>
&lt;li>Queue, Broadcast, Multicast 등의 방식으로 메시지 전달&lt;/li>
&lt;li>Pub/Sub 구조
&lt;ul>
&lt;li>메시지를 발행하는 Publisher(Producer), 메시지를 소비하는 Subscribe(Consumer)로 구성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Message Broker
&lt;ul>
&lt;li>메시지처리 또는 메시지 수신자에게 메시지를 전달하는 시스템이며, 일반적으로 MOM 기반으로 구축됨&lt;/li>
&lt;li>MQ (Message Queue, 메시지 큐)
&lt;ul>
&lt;li>Message bBroker와 MOM을 구현한 소프트웨어 (RabbitMQ, ActiveMQ, Kafka 등)&lt;/li>
&lt;li>MOM은 메시지 전송 보장을 해야하므로 AMQP를 구현함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>AMQP (Advanced Message Queueing Protocol)
&lt;ul>
&lt;li>메시지를 안정적으로 주고박기 위한 인터넷 프로토콜&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>RabbitMQ, Kafka 등은 &lt;strong>AMQP를 구현한 MOM 시스템이다.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h2 id="메시징-시스템이란">메시징 시스템이란?&lt;/h2>
&lt;blockquote>
&lt;p>로그 데이터, 이벤트 메시지 등 API로 호출할 떄 보내는 데이터들을 처리하는 시스템&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://codemario318.github.io/post/messaging_system/messaging_1.png"
width="400"
height="181"
srcset="https://codemario318.github.io/post/messaging_system/messaging_1_hu53fb739e7356313ed742b3b702b5cc38_12763_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/messaging_system/messaging_1_hu53fb739e7356313ed742b3b702b5cc38_12763_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="530px"
>&lt;/p>
&lt;p>예를 들어, 다음과 같이 자동 메일을 발송 시스템이 있다고 가정하면,&lt;/p>
&lt;ul>
&lt;li>회원가입을 했을 때, 이메일을 발송하는 MemberService&lt;/li>
&lt;li>주문완료가 되었을 때, 이메일을 발송하는 OrderService&lt;/li>
&lt;li>메일을 실제 발송하는 MailService&lt;/li>
&lt;/ul>
&lt;p>이렇게 서비스가 분리되었을 때 프로세스는 다음과 같이 처리될 수 있다.&lt;/p>
&lt;ol>
&lt;li>MemberService에서 회원가입, OrderService에서 주문완료 이벤트가 발생&lt;/li>
&lt;li>Messaging Client로 메일 전송에 필요한 데이터( 받는/보내는 사람 이메일 주소, 메시지 제목/내용 등.. )를 API 호출&lt;/li>
&lt;li>Messaging Client에서 MOM을 구현한 소프트웨어(ex. kafka)로 메시지를 생산&lt;/li>
&lt;li>MailService에서 메시지가 존재하는지 구독하고 있다가 메시지가 존재하면 메시지를 소비&lt;/li>
&lt;li>MailService에서 API 정보들을 통해 User에게 메일 발송&lt;/li>
&lt;/ol>
&lt;h2 id="장점">장점&lt;/h2>
&lt;ul>
&lt;li>서비스간의 결합성이 낮아지므로 각자의 비즈니스 로직에만 집중할 수 있다.&lt;/li>
&lt;li>메시지 처리 방식은 Message Broker에 위임
&lt;ul>
&lt;li>각 서비스는 Client를 통해 메시지를 보내고 받기만 하면 됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>각 서비스는 비동기 방식으로 메시지를 보내기만 하면, Message Broker에서 순서 보장, 메시지 전송 보장 등을 처리&lt;/li>
&lt;li>메시징 시스템이 잠깐 다운되어도 각 서비스에는 직접적인 영향을 미치지 않음&lt;/li>
&lt;/ul>
&lt;h2 id="단점">단점&lt;/h2>
&lt;ul>
&lt;li>Message Broker 구축, 예를 들면 kafka 클러스터 구축에 필요한 금전, 인적 자원에 대한 비용&lt;/li>
&lt;li>비동기의 양면성 - 정말 메시지가 잘 전달되었는가?&lt;/li>
&lt;li>함수호출, 공유 메모리 사용 방식보다 메시징 시스템을 사용했을 때 호출 구간이 늘어나므로 네트워크 비용 발생&lt;/li>
&lt;/ul>
&lt;h2 id="mom-메세지-지향-미들웨어message-oriented-middleware">MOM, 메세지 지향 미들웨어(Message-Oriented-Middleware)&lt;/h2>
&lt;ul>
&lt;li>미들웨어: 어플리케이션들을 연결해 이들이 서로 데이터를 교환할 수 있게 해주는 소프트웨어&lt;/li>
&lt;li>메시지 지향(=메시징 시스템): 메시지 API를 통해 각 분산되어 있는 어플리케이션간의 다리 역할을 함으로써 데이터를 교환 할 수 있도록 하는 시스템&lt;/li>
&lt;/ul>
&lt;h3 id="메시지-지향-미들웨어란">메시지 지향 미들웨어란?&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/messaging_system/messaging_1.png"
width="400"
height="181"
srcset="https://codemario318.github.io/post/messaging_system/messaging_1_hu53fb739e7356313ed742b3b702b5cc38_12763_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/messaging_system/messaging_1_hu53fb739e7356313ed742b3b702b5cc38_12763_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="220"
data-flex-basis="530px"
>&lt;/p>
&lt;p>메시지를 통해 여러 분산되어 있는 시스템 간의 Connector 역할로 결합성을 낮추고, 이들이 서로 &lt;strong>실시간 비동기식 데이터&lt;/strong>를 교환할 수 있도록 하는 소프트웨어&lt;/p>
&lt;h3 id="message-queue-기반-패턴">Message Queue 기반 패턴&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/messaging_system/messaging_2.png"
width="976"
height="256"
srcset="https://codemario318.github.io/post/messaging_system/messaging_2_hu622ff7574f5df87fefb41f7d9aad0875_15158_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/messaging_system/messaging_2_hu622ff7574f5df87fefb41f7d9aad0875_15158_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="381"
data-flex-basis="915px"
>&lt;/p>
&lt;p>메시지 대기열 패턴은 일종의 지점 간(peer to peer) 메시징 시스템이다. Queue 대기열의 메시지는 Consumer가 소비하면 지워지는 형태&lt;/p>
&lt;p>소비하면 지워지는 형태라는 의미는 Producer 서버가 메시지를 Queue에 보내고 서버가 다운이 되도 Consumer가 소비하지 않았다면 Queue 대기열에 데이터가 존재한다는 걸 의미한다.&lt;/p>
&lt;h3 id="발행publish-구독subscribe-메시지-패턴">발행(Publish)-구독(Subscribe) 메시지 패턴&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/messaging_system/messaging_3.png"
width="1023"
height="240"
srcset="https://codemario318.github.io/post/messaging_system/messaging_3_hu67aace2a43e43583798959e51b12e062_18305_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/messaging_system/messaging_3_hu67aace2a43e43583798959e51b12e062_18305_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="426"
data-flex-basis="1023px"
>&lt;/p>
&lt;p>메시지 큐와 마찬가지로 메시지를 생산하는 Producer와 메시지를 소비하는 Consumer로 구성되어 있다.&lt;/p>
&lt;p>차이점은 여러 소비자가 하나의 주제에서 각 메시지를 수신할 수 있다는 점. 또한 모든 Consumer가 메시지를 사용하는 경우에만 메시지가 대기열에서 지워진다.&lt;/p>
&lt;blockquote>
&lt;p>kafka와 같은 메시징 시스템에는 메시지가 대기열에 있어야 하는 기간을 지정한 보존 정책이 있다. 따라서 메시지는 모든 Consumer가 소비하더라도 지정된 기간 동안 대기열에 사용할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="언제-쓰이는가">언제 쓰이는가?&lt;/h3>
&lt;ul>
&lt;li>분산 시스템
&lt;ul>
&lt;li>여러 컴퓨터를 분산시켜 네트워크를 연결하여 데이터들을 나눠서 처리하면 서버의 과부하를 분산할 수 있으며, 성는개선과 장애요소를 최소화하기 위해 분산 시스템을 사용함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="과거-분산-시스템의-단점과-웹-api-통신의-한계">과거 분산 시스템의 단점과 웹 API 통신의 한계&lt;/h3>
&lt;h4 id="과거-분산시스템의-단점">과거 분산시스템의 단점&lt;/h4>
&lt;p>수많은 데이터를 처리하기 위하여 분산 시스템을 운영하였지만, 시스템이 거대해질수록 분산 시스템의 설계도의 복잡성 문제가 발생한다. 하나의 응용프로그램이 변경되면, 다른 응용프로그램에도 영향을 미쳐 분산 시스템 간의 결합도가 강한 단점을 가지고 있었다.&lt;/p>
&lt;h4 id="웹-api-통신의-특성">웹 API 통신의 특성&lt;/h4>
&lt;ul>
&lt;li>MSA를 사용한 분산 시스템은 웹 API 서버로 요청 시 응답을 기다려야 한다.&lt;/li>
&lt;li>여러 분산되어있는 서비스 간에는 실시간으로 비동기식으로 데이터를 처리해야 하기 떄문에 웹 API로도 비동기식 구현이 가능하지만 순서가 보장되지 않는다는 특성이 있다.&lt;/li>
&lt;li>메시지를 보내는 A어플리케이션은 메시지를 보낼 때 B라는 어플리케이션의 목적지(도착점)을 알아야 통신할 수 있다.
&lt;ul>
&lt;li>두 어플리케이션간 불필요한 결합도가 발생되고, 응답을 취하는 B어플리케이션이 서버 장애시 요청되었던 데이터 때문에 A어플리케이션에게도 장애가 전파될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="메시징-지향-미들웨어의-필요성">메시징 지향 미들웨어의 필요성&lt;/h3>
&lt;ul>
&lt;li>메시지 API는 비동기 프로토콜을 지원하며, 메시지 순서를 보장합니다.&lt;/li>
&lt;li>메시지가 대기열에 전달되면, 응답을 즉시 할 필요가 없다.
&lt;ul>
&lt;li>메시지 대기열에 전달 된 상황이라면 메시지는 시스템에 보존되어 있어, 다른 어플리케이션간의 의존성이 낮게 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="message-broker">Message Broker&lt;/h2>
&lt;blockquote>
&lt;p>송신자와 수신자 사이에서 메시지의 전달을 중재하는 컴퓨터 프로그램 모듈&lt;/p>
&lt;/blockquote>
&lt;p>메시지 브로커는 정형화된 메시지의 교환을 통해 어플리케이션간의 소통이 이뤚디는 네트워크 엘리먼드이다.&lt;/p>
&lt;h3 id="목적">목적&lt;/h3>
&lt;p>메시지의 유효성, 정송, 라우팅을 위한 아키텍처 패턴&lt;/p>
&lt;ul>
&lt;li>어플리케이션 사이의 커뮤니케이션 중재&lt;/li>
&lt;li>어플리케이션간의 메시지 전달을 위한 상호 인식(mutal awareness)를 줄여 어플리케이션간의 결합성을 낮춘다(decoupling)&lt;/li>
&lt;/ul>
&lt;h3 id="기능">기능&lt;/h3>
&lt;ul>
&lt;li>엔드 포인트 분리&lt;/li>
&lt;li>NFR(non-functional requirement) 충조&lt;/li>
&lt;li>중재함수 (intermediary function)의 간편한 재사용&lt;/li>
&lt;li>하나이상의 목적지로의 메시지 라우팅&lt;/li>
&lt;li>메시지의 형태 변형&lt;/li>
&lt;li>메시지를 수집하여 여러 메시지로 분해하고 대상으로 보내 응답을 하나의 메시지로 재구성하여 사용자에게 반환&lt;/li>
&lt;li>메시지 양 증가 또는 저장을 위한 외부 저장소와 상호작용&lt;/li>
&lt;li>데이터 검색을 위한 웹 서비스 호출&lt;/li>
&lt;li>이벤트 또는 에러의 응담&lt;/li>
&lt;li>발행-구독 패턴을 활용한 컨텐츠와 토픽 기반 메시지 라우팅 제공&lt;/li>
&lt;/ul>
&lt;h3 id="설계">설계&lt;/h3>
&lt;ul>
&lt;li>허브 앤 스포크(hub and spoke)&lt;br>
중앙 서버가 통합 서비스를 제공하는 메커니즘으로 작동&lt;/li>
&lt;li>메시지 버스(message bus)&lt;br>
메시지 브로커가 버스에서 작동하는 통신 백본 또는 분산 서비스&lt;/li>
&lt;/ul></description></item><item><title>NoSQL이란?</title><link>https://codemario318.github.io/post/nosql/</link><pubDate>Mon, 17 Apr 2023 19:24:48 +0900</pubDate><guid>https://codemario318.github.io/post/nosql/</guid><description>&lt;img src="https://codemario318.github.io/post/nosql/nosql_cover.png" alt="Featured image of post NoSQL이란?" />&lt;p>Not Only SQL: SQL만을 사용하지 않는 데이터베이스 관리 시스템을 지칭하는 단어.
&lt;strong>&amp;lsquo;데이터를 저장하는 데에는 SQL 외에 다른 방법들도 있다.&amp;rsquo;&lt;/strong>&lt;/p>
&lt;h2 id="정의">정의&lt;/h2>
&lt;p>NoSQL에 내려진 구체적인 정의는 없으나 공통적인 성향을 가지고 있다.&lt;/p>
&lt;ul>
&lt;li>대부분 클러스터에서 실행할 목적으로 만들어졌기 때문에 관계형 모델을 사용하지 않는다.&lt;/li>
&lt;li>오픈 소스이다.&lt;/li>
&lt;li>스키마 없이 동작하며, 구조에 대한 정의를 변경할 필요 없이 데이터베이스 레코드에 자유롭게 필드를 추가할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>21세기 초반에 개발 된 SQL을 사용하지 않는 Schema-less 데이터베이스&lt;/p>
&lt;blockquote>
&lt;p>클러스터&lt;br>
저렴한 상용 제품 여러 대를 조합하여 더 빠르고 안정적인 시스템을 목표로 만들어진 방법&lt;/p>
&lt;/blockquote>
&lt;h2 id="등장배경">등장배경&lt;/h2>
&lt;p>여러 대의 컴퓨터에 데이터를 분산 저장하는 것을 목표로 등장했다.&lt;/p>
&lt;p>기존에는 안정적인 데이터 관리가 가장 중요했기 때문에, 트랙잭션을 통한 관리가 가능한 RDBMS가 많이 이용되었지만 웹 2.0 환경과 빅데이터가 등장하면서 RDBMS는 &lt;strong>데이터와 트래픽 양이 기하급수적으로 증가&lt;/strong>함에 따라 한 대에서 실행되도록 설계된 RDBMS를 사용하는 데 필요한 &lt;strong>비용 증가 이슈&lt;/strong>가 생겨났다.&lt;/p>
&lt;p>NoSQL은 데이터의 일관성을 약간 포기한 대신 여러 대의 컴퓨터에 데이터를 분산하여 저장하는 것을 목표로 등장하였고, NoSQL의 등장으로 작고 값싼 장비 여러 대로 대량의 데이터와 컴퓨팅 부하를 처리하는 것이 가능하게 되었다.&lt;/p>
&lt;h2 id="특징">특징&lt;/h2>
&lt;ol>
&lt;li>일관성과 확장성 사이의 Trade-off&lt;br>
일관성이 데이터베이스의 절대적인 요소가 아님을 주장하는 움직임이 생기기 시작했다.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>다수가 동시에 읽고 쓰는 상황에서의 성능 향상을 위해서.&lt;/li>
&lt;li>분산 환경에서 노드들이 잘 작동하고 있음에도, 시스템의 일부가 고장나면 데이터베이스를 사용할 수 없게 되는 문제를 해결하기 위해서.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>분산 저장&lt;br>
데이터와 트래픽이 증가함에 따라 기존의 장비로는 원할한 데이터의 처리가 어려워졌다.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>이를 해결하기 위한 방법으로 장비의 성능을 키우는 수직적 확장과 처리하는 장비 수를 늘리는 수평적 확장이 있다. 수직적 확장은 큰 비용적인 문제가 발생하므로 수평적 확장을 고려했지만, &lt;strong>RDBMS가 클러스터 상에서 효율적으로 동작하도록 설계되지 않았다&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>샤딩(Sharding)&lt;br>
샤드키를 기준으로 하나의 테이블을 수평 분할하여 서로 다른 클러스터에 분산 저장하고 질의할 수 있는 기법.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>RDBMS에서도 사용 가능하지만 어플리케이션 레벨에서 모든 샤딩을 제어해야 한다.(어떤 데이터를 어느 클러스터에서 처리해야 하는지 등) 또한 여러 샤드에 걸치는 쿼리나 참조 정합성, 트랜잭션, 일관성 문제가 발생할 수 있다.&lt;/li>
&lt;li>분산 저장을 지원하는 NoSQL 데이터베이스의 경후, 집합-지향(Aggregtae-oriented) 모델을 사용하여 이러한 문제를 해결한다. 연관된 데이터들이 함께 분산되므로, 관계형 모델에서처럼 복잡한 제어가 필요하지 않게 된다.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>데이터 일치&lt;br>
RDBMS에서 관계형 튜플 안의 값은 단순해야 하며 중첩된 레코드나 리스트 등 다른 구조를 포함할 수 없느 반면, 메모리 내 데이터 구조에서는 이런 제약이 없어 훨씬 복잡한 구조를 사용한다.(리스트, 딕셔너리, 중첩된 객체 구조)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>그 결과 복잡한 메모리내 데이터 구조를 데이터베이스에 저장하려면 먼저 관계형 표현으로 변환해야 한다. (ORM 프레임워크등을 이용)&lt;/li>
&lt;li>NoSQL은 메모리 내의 데이터가 어떤 구조이든지 상관하지 않고 하나의 Aggregation으로 취급하여 저장하기 때문에 자유롭다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Impedance mismatch&lt;/strong>&lt;br>
관계형 모델과 메모리 내 데이터 구조 간의 불일치&lt;/p>
&lt;/blockquote>
&lt;ol start="5">
&lt;li>Schema-less&lt;br>
NoSQL 데이터베이스의 공통적인 특징은 스키마 없이 동작한다는 점이다.&lt;/li>
&lt;/ol>
&lt;h2 id="장점">장점&lt;/h2>
&lt;ul>
&lt;li>데이터 구조를 미리 정의할 필요가 없다.&lt;/li>
&lt;li>시간이 지나더라도 언제든지 바꿀 수 있기 때문에 비형식적인 데이터를 저장하는 데 용이하다.&lt;/li>
&lt;/ul>
&lt;h2 id="단점">단점&lt;/h2>
&lt;ul>
&lt;li>단일 값에 대한 데이터 타입에서 불일치가 발생할 수 있다.
&lt;ul>
&lt;li>데이터베이스가 스키마를 직접 관리하지 않는 것을 의미할 뿐, 데이터 타입에 따른 암묵적인 스키마는 여전히 존재하기 때문&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="종류">종류&lt;/h2>
&lt;p>네 가지 모델로 나눌 수 있다.&lt;/p>
&lt;ul>
&lt;li>key-value&lt;/li>
&lt;li>Document&lt;/li>
&lt;li>Column-family&lt;/li>
&lt;li>Graph&lt;/li>
&lt;/ul>
&lt;p>이 중 그래프 모델을 제외한 나머지 세 모델은 집합-지향(Aggregate-orented)모델이다.&lt;/p>
&lt;h3 id="집합-지향-agregate-orented-모델">집합-지향 (Agregate-orented) 모델&lt;/h3>
&lt;p>집합 지향 데이터베이스는 집합 자료구조로 이루어져 있다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>집합&lt;/strong>&lt;br>
연산의 한 단위로 취급되는 연관된 객체들의 집합.&lt;/p>
&lt;/blockquote>
&lt;p>관계형 모델처람 하나의 엔티티에 대한 ACID 트랜잭션을 지원하지는 않지만, 하나의 집합에 대한 연산에서는 트랜잭션을 지원한다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>장점&lt;/p>
&lt;ul>
&lt;li>집합 지향 데이터베이스는 여러 대의 클러스터로 이루어진 시스템에서 사용하기 적합하다.
&lt;ul>
&lt;li>수평적 확장이 용이하다. 이는 관계형 데이터베이스와는 달리 연관된 데이터들이 함께 움직이기 떄문이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메모리 내의 자료구조와 집합 간 데이터가 잘 일치하므로, 관계형 데이터베이스처럼 객체-관계 매핑 프레임워크가 필요하지 않다.&lt;/li>
&lt;li>데이터의 검색도 아주 쉬운편으로, key나 ID를 사용하면 쉽게 집합 레코드를 찾아낼 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>단점&lt;/p>
&lt;ul>
&lt;li>집합 지향 데이터베이스는 조인 연산이 불가능
&lt;ul>
&lt;li>MongoDB나 Cassandra등의 데이터베이스에서는 맵리듀스(MapReduce) 기능을 제공함으로써 조인과 유사한 연산을 가능하도록 설계했지만 사용법이 어렵고 Hadoop의 맵 리듀스에 비하면 속도도 매우 느리다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="key-value">Key-Value&lt;/h3>
&lt;p>키 값 저장소는 가장 단순한 형태의 NoSQL&lt;/p>
&lt;ul>
&lt;li>
&lt;p>장점&lt;/p>
&lt;ul>
&lt;li>수평적 확장이 용이하다.&lt;/li>
&lt;li>아주 간단한 API만을 제공하기 떄문에 배우는 것이 어렵지 않다.&lt;/li>
&lt;li>간단한 API를 제공하는 만큼 질의의 속도가 굉장히 빠른편&lt;/li>
&lt;li>어떠한 형태의 데이터라도 담을 수 있다.
&lt;ul>
&lt;li>이미지나 비디오도 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>단점&lt;/p>
&lt;ul>
&lt;li>값의 내용을 사용한 쿼리가 불가능하다.
&lt;ul>
&lt;li>키를 사용해 값을 읽어들인 뒤, 어플리케이션 레벨에서 적절히 처리해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="document">Document&lt;/h3>
&lt;p>데이터가 키와 문서 형태로 저장되는 키-값 모델의 개선 형태&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>키-값 모델과의 차이점&lt;/strong>&lt;br>
Value가 계층적인 형태인 도큐먼트로 저장된다. 객체지향의 객체와 유사하며, 하나의 단위로 취급되어 저장된다.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>장점&lt;/p>
&lt;ul>
&lt;li>하나의 객체를 여러 테이블에 나눠 저장할 필요가 없다.&lt;/li>
&lt;li>도큐먼트 내의 item을 이용한 쿼리가 가능하다.
&lt;ul>
&lt;li>단, Xquery나 다른 도큐먼트 질의 언어가 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>객체-관계 매핑이 필요하지 않다.
&lt;ul>
&lt;li>객체를 도큐먼트의 형태로 바로 저장 가능하기 떄문&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>검색에 최적화 되어있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>단점&lt;/p>
&lt;ul>
&lt;li>사용이 번거롭고 쿼리가 SQL과 다르다.&lt;/li>
&lt;li>질의의 결과가 JSON이나 XML 형태로 출력되기 때문에 사용방법이 RDBMS와 다르다.&lt;/li>
&lt;li>질의 언어가 SQL과 다르기 떄문에 사용에 익숙해지기까지 다소 어려움이 있을 수 있음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="종류-1">종류&lt;/h2>
&lt;h3 id="mongodb">MongoDB&lt;/h3>
&lt;p>도큐먼트 지향 데이터 베이스이다.&lt;/p>
&lt;ul>
&lt;li>bson 데이터 구조로 저장&lt;/li>
&lt;li>문서를 기본 저장 단위로 이용하면서 내장 문서와 배열을 이용하여 복잡한 계층구조를 하나의 레코드로 표현한다.&lt;/li>
&lt;li>스키마가 없다.&lt;/li>
&lt;li>필드 추가 제거는 자유로우며 필요할 때 마다 자유자재로 변경 가능하다.&lt;/li>
&lt;li>RDBMS 보다 매우 빠르다.&lt;/li>
&lt;li>조인과 트랜잭션을 지원하지 않으며 여러 제약조건에 대한 처리도 없다.
→버전에 따라 다름&lt;/li>
&lt;/ul>
&lt;h3 id="redisremote-dictionary-server">Redis(REmote DIctionary Server)&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/nosql/redis_1.png"
width="640"
height="533"
srcset="https://codemario318.github.io/post/nosql/redis_1_hufb6bac17b4ca4009d276a8b15380e506_182417_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/nosql/redis_1_hufb6bac17b4ca4009d276a8b15380e506_182417_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Redis 구조"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="288px"
>&lt;/p>
&lt;p>메모리 기반의 &amp;ldquo;Key-Value&amp;rdquo; 구조 데이터 관리 시스템이며, 모든 데이터를 메모리에 저장하고 조회하기에 빠른 Read, Write 속도를 보장하는 비 관계형 데이터베이스이다.&lt;/p>
&lt;ul>
&lt;li>String, set, Sorted Set, Hash, List 데이터 형식을 지원한다.&lt;/li>
&lt;/ul>
&lt;p>Redis는 빠른 오픈 소스인 메모리 키-값 데이터 구조 스토어이며, 다양한 인메모리 데이터 구조 집합을 제공하므로 사용자 정의 어플리케이션을 손쉽게 생성 할 수 있다.&lt;/p>
&lt;h4 id="특징-1">특징&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>영속성을 지원하는 인메모리 데이터 저장소&lt;/p>
&lt;/li>
&lt;li>
&lt;p>읽기 성능 증대를 위한 서버측 복제 지원&lt;/p>
&lt;ul>
&lt;li>Redis가 실행중인 서버가 충돌하는 경우 장애 조치 처리와 함께 더 높은 읽기 성능을 지원하기 위해 슬레이브가 마스터에 연결하고 전체 데이터베이스의 초기 복사본을 받는 마스터/ 슬레이브 복제를 지원.
마스터에서 쓰기가 수행되면 슬레이브 데이터 세트를 실시간으로 업데이트 하기 위해 연결된 모든 슬레이브로 전송됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>쓰기 성능 증대를 위한 클라이언트&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>