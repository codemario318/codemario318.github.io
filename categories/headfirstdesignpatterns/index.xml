<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>헤드 퍼스트 디자인 패턴 on Mario Blog</title><link>https://codemario318.github.io/categories/headfirstdesignpatterns/</link><description>Recent content in 헤드 퍼스트 디자인 패턴 on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Fri, 29 Dec 2023 10:22:08 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/categories/headfirstdesignpatterns/index.xml" rel="self" type="application/rss+xml"/><item><title>11. 객체 접근 제어하기 - 프록시 패턴</title><link>https://codemario318.github.io/post/gof/11/</link><pubDate>Fri, 29 Dec 2023 10:22:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/11/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/11/cover.png" alt="Featured image of post 11. 객체 접근 제어하기 - 프록시 패턴" />&lt;blockquote>
&lt;p>프록시 패턴은 특정 객체로의 접근을 제어하는 대리인(특정 객체를 대변하는 객체)를 제공한다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="프록시-패턴이란">프록시 패턴이란?&lt;/h2>
&lt;p>프록시 패턴은 한 객체가 다른 객체에 대한 인터페이스 역할을 수행하여 접근을 제어하거나 대리 역할을 수행하는 디자인 패턴이다.&lt;/p>
&lt;p>접근을 제어하는 방법을 달리하여 여러 변형이 존재한다.&lt;/p>
&lt;ul>
&lt;li>원격 프록시(Remote Proxy)
&lt;ul>
&lt;li>원격 객체에 대한 로컬 표현을 제공하여, 원격 서버에 있는 객체에 쉽게 접근할 수 있도록 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가상 프록시(Virtual Proxy)
&lt;ul>
&lt;li>객체의 생성 및 초기화에 비용이 많이 들 때, 객체가 실제로 필요한 시점까지 생성을 지연시키는 가상 객체를 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보호 프록시(Protection Proxy)
&lt;ul>
&lt;li>객체에 대한 접근을 제어하여, 특정 사용자나 클라이언트에 대한 권한 검사를 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐싱 프록시(Caching Proxy)
&lt;ul>
&lt;li>이전에 수행한 연산 결과를 캐시하여 동일한 요청에 대한 성능을 향상시킨다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>프록시 패턴을 사용하면 원격 객체, 생성하기 힘든 객체, 보안이 중요한 객체와 같은 다른 객체로의 접근을 제어하는 대리인 객체를 만들 수 있다.&lt;/p>
&lt;p>이를 통해 복잡한 시스템에서 객체 간의 통신과 상호작용을 조절하고 향상시키는 데 유용하게 사용될 수 있다.&lt;/p>
&lt;h3 id="구조">구조&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Subject {
&lt;&lt; interface >>
request()*
}
class RealSubject {
request()
}
class Proxy {
request()
}
Subject &lt;|.. RealSubject
Subject &lt;|.. Proxy
Proxy --> RealSubject : subject
&lt;/pre>
&lt;ul>
&lt;li>&lt;code>Subject&lt;/code>(주체)
&lt;ul>
&lt;li>실제 서비스를 제공하는 객체를 나타내는 인터페이스를 정의한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>RealSubject&lt;/code>(실제 주체)
&lt;ul>
&lt;li>&lt;code>Subject&lt;/code>의 실제 구현을 제공하는 클래스&lt;/li>
&lt;li>이 객체에 대한 접근을 제어하거나 비용이 많이 드는 작업을 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Proxy&lt;/code>(프록시)
&lt;ul>
&lt;li>&lt;code>Subject&lt;/code>와 동일한 인터페이스를 구현하며, &lt;code>RealSubject&lt;/code>에 대한 참조를 가지고 있다.&lt;/li>
&lt;li>실제 서비스 객체에 대한 접근을 제어하거나 추가적인 기능을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>RealSubject&lt;/code>와 &lt;code>Proxy&lt;/code>는 &lt;code>Subject&lt;/code> 인터페이스를 구현하므로 &lt;code>RealSubject&lt;/code>가 들어가야 할 자리에 &lt;code>Proxy&lt;/code>를 대신 넣을 수 있다.&lt;/p>
&lt;p>진짜 작업은 &lt;code>RealSubject&lt;/code> 객체가 처리하며, &lt;code>Proxy&lt;/code>는 이 객체의 대변인 역할을 하면서 &lt;code>RealSubject&lt;/code>로의 접근을 제어하게된다.&lt;/p>
&lt;p>&lt;code>Proxy&lt;/code>는 &lt;code>RealSubject&lt;/code>의 레퍼런스를 포함하며(직법 생성하거나 제거하기도 함) 클라이언트는 항상 &lt;code>Proxy&lt;/code>를 통해 데이터를 주고받게 된다.&lt;/p>
&lt;h2 id="원격-프록시">원격 프록시&lt;/h2>
&lt;p>원격 프록시는 대리인의 어떤 메소드를 호출하면 원격 객체에게 해당 메소드 호출을 전달하는 원격 객체의 &lt;strong>로컬 대리인&lt;/strong> 역할을 하게된다.&lt;/p>
&lt;blockquote>
&lt;p>클라이언트 객체는 원격 객체의 메소드 호출을 하는 것처럼 행동하지만 실제로는 로컬 힙에 들어있는 프록시 객체의 메소드를 호출하며, 프록시에서 네트워크 통신과 관련된 저수준 작업을 처래히준다.&lt;/p>
&lt;/blockquote>
&lt;p>원격 프록시(Remote Proxy)는 클라이언트와 서버 사이에서 객체에 대한 원격 액세스를 제공하며, 객체의 메서드 호출을 원격으로 전달하여 실행하는 데 중접을 둔다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
subgraph 원격
a((클라이언트)) -- "request()" -->
b((프록시))
end
subgraph 실제
c((RealSubject))
end
b -. "request()" .-> c
&lt;/pre>
&lt;ol>
&lt;li>원격 객체 엑세스
&lt;ul>
&lt;li>클라이언트가 로컬이 아닌 다른 컴퓨터에 위치한 객체에 액세스해야 할 때, 원격 프록시를 사용하여 해당 객체에 접근한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 및 권한 제어
&lt;ul>
&lt;li>원격 프록시를 사용하여 원격 객체에 대한 접근을 제어하고, 보안 및 권한 검사를 수행할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>프록시 패턴의 응용
&lt;ul>
&lt;li>일반적인 프록시 패턴에서 원격 프록시를 사용하여 클라이언트와 실제 객체 사이의 중각 매개체로서 동작하게 할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="java-rmiremote-method-invocation">Java RMI(Remote Method Invocation)&lt;/h3>
&lt;p>원격 프록시는 &lt;code>Java&lt;/code>의 &lt;strong>RMI&lt;/strong>와 같은 기술을 사용하여 구현될 수 있다.&lt;/p>
&lt;p>클라이언트는 로컬에서 마치 객체를 다루는 것처럼 원격 프록시를 사용하여 원격 객체의 메서드를 호출할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 예시: 원격 프록시 인터페이스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.rmi.Remote&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.rmi.RemoteException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 표식용(Maker) Remote 인터페이스를 확장하여 인터페이스가 원격 호출을 지원한다는 사실을 알린다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">MyRemoteInterface&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Remote&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 모든 원격 메소드 호출은 위험이 따르며 모든 메소드에 RemoteException을 선언하여 클라이언트에서 예외를 처리할 수 있도록 한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">myRemoteMethod&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">RemoteException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 원격 메소드의 인자와 리턴값은 반드시 원시 형식(primitive) 또는 Serializable 형식으로 선언해야한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">sayHello&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">RemoteException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 예시: 원격 프록시 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.rmi.RemoteException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.rmi.server.UnicastRemoteObject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyRemoteObject&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">UnicastRemoteObject&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MyRemoteInterface&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="nf">MyRemoteObject&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">RemoteException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">super&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">myRemoteMethod&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">RemoteException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 실제 원격 메서드 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Executing remote method&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="가상-프록시">가상 프록시&lt;/h2>
&lt;p>가상 프록시는 프록시 패턴의 한 종류로, 객체의 생성 및 초기화에 비용이 많이 들 때, 실제로 객체가 필요한 시점까지 객체를 생성하지 않고 대리 객체를 사용하는 패턴이다.&lt;/p>
&lt;p>이를 통해 성능 향상 및 자원 절약이 가능하며, 사용자는 가상 프록시를 통해 실제 객체에 접근할 수 있다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a((클라이언트)) -- "request()" -->
b((프록시)) -->
c((RealSubject))
&lt;/pre>
&lt;ol>
&lt;li>비용이 많이 드는 객체 생성&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>객체의 생성이나 초기화에 많은 비용이 들 때, 해당 객체를 실제로 사용하기 직전까지 객체를 생성하지 않고 대리 객체를 사용하여 필요한 경우에만 생성한다.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>느린 초기화 작업
&lt;ul>
&lt;li>객체의 초기화 작업이 느리게 수행되는 경우, 초기화 작업이 완료된 후에만 실제 객체를 생성하도록 하는 가상 프록시를 사용하여 지연 로딩을 구현할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>자원 소모 최적화
&lt;ul>
&lt;li>자원을 효율적으로 관리하기 위해 필요할 때만 실제 객체를 생성하고 사용하는 경우, 가상 프록시를 적용하여 자원 소모를 최적화 할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>가상 프록시는 실제 객체를 나타내는 인터페이스를 정의하고, 이 인터페이스를 구현하는 가상 프록시 클래스를 만들어 사용하게 된다.&lt;/p>
&lt;p>이를 통해 실제 객체의 생성 및 초기화를 지연시킨다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 예시: 가상 프록시 인터페이스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">RealObject&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">performOperation&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 예시: 실제 객체 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RealObjectImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">RealObject&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">RealObjectImpl&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 객체 생성 및 초기화 작업
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">performOperation&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 실제 객체의 동작
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Performing operation&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 예시: 가상 프록시 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">VirtualProxy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">RealObject&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">RealObjectImpl&lt;/span> &lt;span class="n">realObject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">performOperation&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 필요할 때만 실제 객체 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">realObject&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">realObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RealObjectImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 가상 프록시를 통해 실제 객체의 동작 호출
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">realObject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">performOperation&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="원격-프록시와-가상-프록시의-차이">원격 프록시와 가상 프록시의 차이&lt;/h2>
&lt;p>원격 프록시와 가상 프록시는 둘 다 프록시 패턴의 변셩으로, 객체 간의 통신을 지원하거나 객체의 생성 및 초기화를 최적화하기 위해 상용된다.&lt;/p>
&lt;p>그러나 각각의 주된 목적과 사용 시나리오가 다르기 때문에 차이가 있다.&lt;/p>
&lt;ol>
&lt;li>목적
&lt;ul>
&lt;li>원격 프록시:
&lt;ul>
&lt;li>분산 시스템에서 객체 간의 통신을 가능케 하는 것이 목적이다.&lt;/li>
&lt;li>클라이언트와 서버 간의 통신을 원활하게 하기 위해 객체를 원격으로 호출하고 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가상 프록시:
&lt;ul>
&lt;li>객체의 생성 및 초기화에 대한 비용을 최적화한다.&lt;/li>
&lt;li>필요한 시점까지 실제 객체를 생성하지 않고 가상적인 대리 객체를 사용함으로 성능을 향상시키는 것이 목적이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>활용
&lt;ul>
&lt;li>원격 프록시
&lt;ul>
&lt;li>객체가 서로 다른 주소 공간에 위치해 있을 때 사용된다.&lt;/li>
&lt;li>객체의 메서드를 원격으로 호출하여 분산 시스템에서 투명한 원격 접근을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가상 프록시
&lt;ul>
&lt;li>객체의 생성이나 초기화에 비용이 많이 들거나, 초기화를 지연시켜야 할 때 사용된다.&lt;/li>
&lt;li>필요한 시점에만 실제 객체를 상성하여 자원을 효율적으로 활용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구현 방식
&lt;ul>
&lt;li>원격 프록시
&lt;ul>
&lt;li>원격 객체 간의 통신을 위해 원격 메서드 호출을 지원하는 기술을 활용한다.&lt;/li>
&lt;li>ex) Java RMI&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가상 프록시
&lt;ul>
&lt;li>객체의 생성 및 초기화를 지연시키는 방식으로 구현된다.&lt;/li>
&lt;li>필요할 때만 실제 객체를 생성하고 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주요 특징
&lt;ul>
&lt;li>원격 프록시
&lt;ul>
&lt;li>분산 환경에서의 통신에 중점을 두고, 보안, 효율성 투명성 등을 고려해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가상 프록시
&lt;ul>
&lt;li>객체의 생성 및 초기화 비용을 최적화한다.&lt;/li>
&lt;li>필요한 시점까지 실제 객체를 생성하지 않고 가상적인 대리 객체를 사용하여 성능을 개선한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>원격 프록시는 주로 분산 시스템에서의 객체 간 통신을 위해 사용되고, 가상 프록시는 객체의 생성과 초기화에 대한 비용을 최적화하기 위해 사용한다.&lt;/p>
&lt;h2 id="보호-프록시">보호 프록시&lt;/h2>
&lt;p>보호 프록시는 주로 객체에 대한 접근을 제어하고 보호하는 데 사용된다.&lt;/p>
&lt;p>이 패턴은 객체에 대한 클라이언트의 엑세스를 제한하거나, 특정한 권한 검사를 수행하여 보안을 강화할 수 있다.&lt;/p>
&lt;ol>
&lt;li>접근 제어
&lt;ul>
&lt;li>특정 객체에 대한 접근을 제한하거나 허용하기 위해 클라이언트의 요청을 검사하고 필요한 권한 검사를 수행한다.&lt;/li>
&lt;li>ex) 파일, 데이터베이스 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>보안 강화
&lt;ul>
&lt;li>객체에 직접적으로 접근하는 것을 방지하여 보안을 강화한다.&lt;/li>
&lt;li>실제 객체에 직접 접근하는 대신, 보호 프록시를 통해 간접적으로만 객체에 접근할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐싱 및 성능 최적화
&lt;ul>
&lt;li>객체에 대한 엑세스를 제어하는 동시에, 캐싱과 같은 성능 최적화 기법을 적용하여 불필요한 작업을 줄일 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Subject {
&lt;&lt; interface >>
*request()
}
class RealSubject {
request()
}
class Proxy {
request()
}
class InvocationHandler {
&lt;&lt; interface >>
*invoke()
}
class ConcreteInvocationHandler {
invoke()
}
Subject &lt;|-- RealSubject
Subject &lt;|-- Proxy
InvocationHandler &lt;|-- ConcreteInvocationHandler
&lt;/pre>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 보호 프록시 인터페이스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Subject&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 실제 객체
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RealSubject&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Subject&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;RealSubject: Handling request.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 보호 프록시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Proxy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Subject&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">RealSubject&lt;/span> &lt;span class="n">realSubject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">accessCode&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 예시로 권한 코드를 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Proxy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">accessCode&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">accessCode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">accessCode&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">request&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">authenticate&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">realSubject&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">realSubject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RealSubject&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">realSubject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">request&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Access denied. Authentication failed.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">authenticate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 권한 검사 로직
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;1234&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">accessCode&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>프록시 패턴
&lt;ul>
&lt;li>특정 객체로의 접근을 제어하는 대리인을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>프록시 패턴을 사용하면 어떤 객체의 대리인을 내세워서 클라이언트의 접근을 제어할 수 있다.&lt;/li>
&lt;li>원격 프록시는 클라이언트와 원격 객체 사이의 데이터 전달을 관리해준다.&lt;/li>
&lt;li>가상 프록시는 인스턴스를 만드는 데 많은 비용이 드는 객체로의 접근을 제어한다.&lt;/li>
&lt;li>보호 프록시는 호출하는 족의 권한에 따라서 객체에 있는 메소드로의 접근을 제어한다.&lt;/li>
&lt;li>그 외에도 캐싱 프록시, 동기화 프록시, 방화벽 프록시, 지연 복사 프록시와 같이 다양한 변형된 프록시 패턴이 있다.&lt;/li>
&lt;li>프록시 패턴의 구조는 데코레이터 패턴의 구조와 비슷하지만 그 용도는 다르다.&lt;/li>
&lt;li>데코레이터 패턴은 객체에 행동을 추가하지만 프록시 패턴은 접근을 제어한다.&lt;/li>
&lt;li>자바에 내장된 프록시 지원 기능을 사용하면 동적 프록시 클래스를 만들어서 원하는 핸들러에서 호출을 처리하도록 할 수 있다.&lt;/li>
&lt;li>다른 래퍼를 쓸 때와 마찬가지로 프록시를 쓰면 디자인에 포함되는 클래스와 객체의 수가 늘어난다.&lt;/li>
&lt;/ul></description></item><item><title>10. 객체의 상태 바꾸기 - 상태 패턴</title><link>https://codemario318.github.io/post/gof/10/</link><pubDate>Tue, 05 Dec 2023 15:48:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/10/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/10/cover.png" alt="Featured image of post 10. 객체의 상태 바꾸기 - 상태 패턴" />&lt;blockquote>
&lt;p>전략 패턴과 상태 패턴은 쌍둥이이다.&lt;br>
전략 패턴은 알고리즘을 바꾸어 사용하는 반면 상태 패턴은 내부 상태를 바꿈으로써 객체가 행동을 바꿀 수 있도록 도와준다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="상태-기계">상태 기계&lt;/h2>
&lt;p>상태 기계(State Machine)는 객체나 시스템이 다양한 상태를 가지고 있고, 특정 이벤트에 의해 이 상태가 변하는 시스템을 나타내는 모델이다.&lt;/p>
&lt;p>상태 기계는 상태, 이벤트, 전이(Transition), 동작(Action) 등의 개념을 포함하며, 객체나 시스템이 특정 상태에서 다른 상태로 전환되는 것을 관리한다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>상태(State)&lt;/strong>: 시스템이나 객체가 가질 수 있는 다양한 상태를 나타낸다.
&lt;ul>
&lt;li>각 상태는 특정 시점에서 시스템이 어떤 동작을 수행하고 있는지를 표현한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>이벤트(Event)&lt;/strong>: 상태 전이를 유발하는 외부나 내부에서 발생하는 사건이나 신호를 나타낸다.
&lt;ul>
&lt;li>이벤트는 특정 상태에서만 발생하거나 처리될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>전이(Transition)&lt;/strong>: 상태 간 전환을 정의한다.
&lt;ul>
&lt;li>특정 상태에서 특정 이벤트가 발생하면 어떤 다음 상태로 전환되어야 하는지를 정의한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>동작(Action)&lt;/strong>: 상태 전이가 발생할 때 수행되는 특정 동작이나 처리를 나타낸다.
&lt;ul>
&lt;li>각 전이에는 연관된 동작이 정의될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>상태 기계는 주로 시스템의 복잡한 동작을 모델링하고 이해하기 쉽게 만들기 위해 사용된다.&lt;/p>
&lt;p>소프트웨어 개발에서는 상태 기계를 사용하여 객체의 동작을 상태에 따라 효과적으로 제어할 수 있다.&lt;/p>
&lt;p>상태 기계는 **유한 상태 기계(Finite State Machine, FSM)**로 불리기도 하며, 이는 상태의 수가 유한하다는 특성을 강조한 용어이다.&lt;/p>
&lt;h3 id="뽑기-기계-상태-다이어그램">뽑기 기계 상태 다이어그램&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
s([시작])
a((동전 있음))
b((동전 없음))
c((알맹이 판매))
d((알맹이 매진))
e{알맹이 개수 > 0}
s-->a
a-- 동전 반환 -->b
b-- 동전 투입 -->a
a-- 손잡이 돌림 --> c
c-- 알맹이 내보냄 -->e
e-- Y -->b
e-- N --> d
&lt;/pre>
&lt;ul>
&lt;li>동전 있음, 없음, 알맹이 판매, 매진이 상태&lt;/li>
&lt;li>손잡이 돌임, 동전 투입, 알맹이 내보냄, 동전 반환 행동을 인터페이스라고 할 수 있음&lt;/li>
&lt;li>행동들을 실행할 때 상태가 변경됨&lt;/li>
&lt;li>알맹이를 꺼내는 행동은 기계 내에서 자체적으로 진행하는 행동에 가까움&lt;/li>
&lt;/ul>
&lt;h2 id="상태-패턴">상태 패턴&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>상태 패턴&lt;/strong>을 사용하면 객체의 내부 상태가 바뀜에 따라 객체의 행동을 바꿀 수 있다.&lt;br>
&amp;ldquo;마치 객체의 클래스가 바뀌는 것과 같이&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>상태 패턴은 상태를 별도의 클래스로 캡슐화한 다음 현재 상태를 나타내는 객체에게 행동을 위임하므로 내부 상태가 바뀔 때 행동이 달라진다.&lt;/p>
&lt;p>또한 클래스가 구성으로 여러 상태 객체를 바꿔가며 사용하게되므로, 클라이언트 관점에서 현재 사용하는 객체의 행동이 완전히 달라져 마치 객체의 클래스가 바뀌는 것과 같은 결과를 얻을 수 있다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Context {
request()
}
class State {
&lt;&lt; interface >>
handle()*
}
class ConcreteStateA {
handle()
}
class ConcreteStateB {
handle()
}
Context --> State
State &lt;|-- ConcreteStateA
State &lt;|-- ConcreteStateB
&lt;/pre>
&lt;ul>
&lt;li>&lt;code>Context&lt;/code>: &lt;code>request()&lt;/code>를 통해 상태의 &lt;code>handle()&lt;/code>을 호출한다.&lt;/li>
&lt;li>&lt;code>State&lt;/code>: 모든 구상 상태 클래스의 공통 인터페이스를 정의한다.
&lt;ul>
&lt;li>모든 상태 클래스에서 같은 인터페이스를 구현하므로 바뀌 가면서 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ConcreteState&lt;/code>: &lt;code>Context&lt;/code>로 부터 전달된 요청을 자기 나름의 방식으로 구현하여 처리한다.
&lt;ul>
&lt;li>이를 통해 &lt;code>Context&lt;/code>에서 상태를 바꿀 때마다 행동도 바뀌게 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>상태 패턴은 객체의 내부 상태에 따라 수행되는 객체의 행위를 상태 객체로 캡슐화하여 객체의 상태를 표현하고 있는 클래스를 정의하고 상태에 따라 객체의 행동을 변경할 수 있도록 한다.&lt;/p>
&lt;p>이를 통해 객체의 상태를 변경할 때마다 직접 조건문이다 &lt;code>switch&lt;/code>문을 사용하는 대신, 상태에게 해당 행동을 위임하여 코드의 유지보수성과 확장성을 향상시킨다.&lt;/p>
&lt;h3 id="특징">특징&lt;/h3>
&lt;p>&lt;strong>장점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>새로운 상태를 추가하거나 상태를 변경할 때 기존 코드를 건드리지 않고 확장이 가능하다.&lt;/li>
&lt;li>상태와 관련된 코드가 상태 객체에 캡슐화되어 있어 코드가 더 간결하고 읽기 쉬워진다.&lt;/li>
&lt;li>상태 전환 로직이 각 상태에 캡슐화 되어있어 유지보수가 용이하다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>단점&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>상태가 많을 경우 클래스의 수가 급격히 증가할 수 있고, 상태 간의 전이 로직이 복잡해질 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="전략-패턴과의-차이점">전략 패턴과의 차이점&lt;/h3>
&lt;p>전략 패턴과 상태 패턴 모두 객체 간의 알고리즘을 정의하고, 이를 동적으로 교환할 수 있게 하는 구조적 디자인 패턴이지만, 목적과 사용 시나리오에서 차이가 있다.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>목적&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>전략 패턴
&lt;ul>
&lt;li>알고리즘의 변형이나 여러 알고리즘 중 하나를 선택해야할 때 사용&lt;/li>
&lt;li>주로 알고리즘이나 전략 간의 상호 교환이 필요한 경우 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 패턴
&lt;ul>
&lt;li>객체의 내부 상태에 따라 행동이 달라져야 할 때 사용&lt;/li>
&lt;li>객체가 상태에 따라 직접적으로 행동을 변경해야 하는 경우 유용함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;strong>관리 대상&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>전략 패턴
&lt;ul>
&lt;li>알고리즘, 전략, 행동을 캡슐화&lt;/li>
&lt;li>객체가 특정 행동을 수행하는 데 사용되는 알고리즘을 변경하고 싶을 때 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 패턴
&lt;ul>
&lt;li>객체의 내부 상태를 캡슐화&lt;/li>
&lt;li>객체가 내부 상태에 따라 행동을 변경하고 싶을 때 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;strong>구조적 차이&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>전략 패턴
&lt;ul>
&lt;li>&lt;code>Context&lt;/code>는 &lt;code>Strategy&lt;/code> 인터페이스를 가지며, 여러 &lt;code>ConreteStrategy&lt;/code>를 가진다.&lt;/li>
&lt;li>&lt;code>Context&lt;/code>는 전략을 동적으로 교환할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 패턴
&lt;ul>
&lt;li>&lt;code>Context&lt;/code>는 &lt;code>State&lt;/code> 인터페이스를 가지며, 여러 &lt;code>ConcreteState&lt;/code>를 가진다.&lt;/li>
&lt;li>&lt;code>Context&lt;/code>는 전략을 동적으로 교환할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>&lt;strong>전이&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>전략 패턴
&lt;ul>
&lt;li>전략이 변경되면 &lt;code>Context&lt;/code>는 완전히 다른 알고리즘으로 전환된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 패턴
&lt;ul>
&lt;li>상태가 변경되면 &lt;code>Context&lt;/code>의 행동이 변경되지만, 전체 시스템이 완전히 다른 상태로 이동하는 것은 아니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>&lt;strong>예시&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>전략 패턴
&lt;ul>
&lt;li>정렬 알고리즘을 선택하는 경우&lt;/li>
&lt;li>결제 시스템에서 여러 결제 전략 중 하나를 선택하는 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상태 패턴
&lt;ul>
&lt;li>자동판매기의 동작을 모델링하는 경우&lt;/li>
&lt;li>객체가 다양한 상태에 있을 때 각 상태에 따라 다른 행동을 하는 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>상태 패턴: 클래스에서 상태를 관리해야 한다면 상태 패턴을 써서 상태를 캡슐화 할 수 있다.
&lt;ul>
&lt;li>내부 상태가 바뀜에 따라 객체의 행동이 바뀔 수 있도록 해준다&lt;/li>
&lt;li>마치 객체의 클래스가 바뀌는 것 같은 결과를 얻을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>상태 패턴을 사용하면 내부 상태를 바탕으로 여러 가지 서로 다른 행동을 사용할 수 있다.&lt;/li>
&lt;li>상태 패턴을 사용하면 프로시저형 상태 기계를 쓸 때와는 달리 각 상태를 클래스로 표현한다.&lt;/li>
&lt;li>&lt;code>Context&lt;/code> 객체는 형재 상태에게 행동을 위임한다.&lt;/li>
&lt;li>각 상태를 클래스로 캡슐화해서 나중에 변경해야 하는내용을 국지화할 수 있다.&lt;/li>
&lt;li>상태 패턴과 전략 패턴의 클래스 다이어그램은 똑같지만 용도는 다르다.&lt;/li>
&lt;li>전략 패턴에서 &lt;code>Context&lt;/code>의 내부 상태가 바뀜에 따라 객체가 알아서 행동을 바꿀 수 있도록 할 수 있다.&lt;/li>
&lt;li>상태 전환은 &lt;code>State&lt;/code> 클래스로 제어할 수도 있고, &lt;code>Context&lt;/code> 클래스로 제어할 수도 있다.&lt;/li>
&lt;li>&lt;code>State&lt;/code> 클래스를 여러 &lt;code>Context&lt;/code> 객체의 인스턴스에서 공유하도록 디자인할 수도 있다.&lt;/li>
&lt;/ul></description></item><item><title>9. 컬렉션 잘 관리하기 - 반복자 패턴과 컴포지트 패턴</title><link>https://codemario318.github.io/post/gof/9/</link><pubDate>Fri, 01 Dec 2023 11:42:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/9/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/9/cover.png" alt="Featured image of post 9. 컬렉션 잘 관리하기 - 반복자 패턴과 컴포지트 패턴" />&lt;blockquote>
&lt;p>객체를 컬렉션에 추가하는 방법은 정말 다양하고, 클라이언트가 컬렉션에 들어있는 모든 객체에 일일이 접근하고 싶어하는 날이 올 것이다.&lt;br>
그런 날이 오더라도 클라이언트에게 전부 보여 줄 필요는 없으며, 객체 저장 방식을 보여 주지 않으면서도 클라이언트가 객체에 일일이 접근할 수 있게 해줄 수 있다.&lt;br>
그리고 한 방에 멋진 자료 구조를 만들 수 있는, 객체들로 구성된 슈퍼 컬렉션을 제공할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="반복자-패턴">반복자 패턴&lt;/h2>
&lt;p>반복자(iterator) 패턴은 컬렉션의 요소를 순차적으로 접근할 수 있는 방법을 제공하여 반복을 캡슐화한다.&lt;/p>
&lt;p>이 패턴을 통해 컬렉션의 내부 표현 방식에 독립적으로 요소에 접근할 수 있으며, 클라이언트 코드는 컬렉션 내부 구조의 세부 사항을 알 필요가 없게된다.&lt;/p>
&lt;p>&lt;strong>효과&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>컬렉션 객체의 모든 항목에 접근하는 방식이 통일되므로 종류에 관계 없이 모든 집합체에 사용할 수 있는 다형적인 코드를 만들 수 있다.&lt;/li>
&lt;li>모든 항목에 일일이 접글ㄴ하는 작업을 컬렉션 객체가 아닌 반복자 객체가 맡게된다.
&lt;ul>
&lt;li>집합체의 인터페이스와 구현이 간단해지고 집합체는 객체 컬렉션 관리에만 전념할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="구조-알아보기">구조 알아보기&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class Aggregate {
&lt;&lt; interface >>
createIterator()* Iterator
}
class ConcreateAggregate {
createIterator()
}
class Iterator {
&lt;&lt; interface >>
hasNext()* Boolean
next()* Object
remove()* void
}
class ConcreateIterator {
hasNext()
next()
remove()
}
class Client {
}
Aggregate &lt;|.. ConcreateAggregate
Iterator &lt;|.. ConcreateIterator
Aggregate &lt;|-- Client
Client --|> Iterator
ConcreateAggregate --|> ConcreateIterator
&lt;/pre>
&lt;ul>
&lt;li>&lt;code>Aggregate&lt;/code>
&lt;ul>
&lt;li>인터페이스를 통해 클라이언와 객체 컬렉션의 구현을 분리할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Iterator&lt;/code>
&lt;ul>
&lt;li>모든 반복자가 구현해야 하는 인터페이스를 제공한다.&lt;/li>
&lt;li>컬렉션에 들어있는 원소에 돌아가면서 접근할 수 있게 해 주는 메소드를 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ConcreteAggregate&lt;/code>
&lt;ul>
&lt;li>객체 컬렉션이 들어있다.&lt;/li>
&lt;li>그 안에 들어있는 컬렉션을 &lt;code>Iterator&lt;/code>로 리턴하는 메소드를 구현한다.&lt;/li>
&lt;li>모든 &lt;code>ConcreteAggregate&lt;/code>는 그 안에 있는 객체 컬렉션을 대상으로 돌아가며 반복 작업을 처리할 수 있게 해주는 &lt;code>ConcreteIterator&lt;/code>의 인스턴스를 만들 수 있어야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>ConcreteIterator&lt;/code>
&lt;ul>
&lt;li>반복 작업 중에 현재 위치를 관리를 담당한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="단일-역할-원칙">단일 역할 원칙&lt;/h3>
&lt;blockquote>
&lt;p>어떤 클래스에서 맡고 있는 모든 역할은 나중에 코드 변화를 불러올 수 있다.&lt;br>
즉 역할이 2개 이상 있으면 바뀔 수 있는 부분이 2개 이상이 된다는 의미이다.&lt;/p>
&lt;/blockquote>
&lt;p>집합체 내부 컬렉션 관련 기능과 반복자용 메소드 관련 기능을 전부 구현한다면 2가지 이유로 클래스가 바뀔 수 있다.&lt;/p>
&lt;ul>
&lt;li>컬렉션이 어떤 이유로 변경&lt;/li>
&lt;li>반복자 관련 기능이 변경&lt;/li>
&lt;/ul>
&lt;p>이러한 이유로 &lt;strong>어떤 클래스가 바뀌는 이유는 하나 뿐이어야 한다&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>응집도(cohesion)&lt;/strong>&lt;br>
클래스 또는 모듈이 특정 목적이나 역할을 얼마나 일관되게 지원하는지를 나타내는 척도이다.&lt;/p>
&lt;ul>
&lt;li>응집도가 높다는 것은 서로 연관된 기능이 묶여있다는 것을 의미&lt;/li>
&lt;li>응집도가 낮다는 것은 서로 상관없는 기능들이 묶여있다는 것을 의미&lt;/li>
&lt;/ul>
&lt;h3 id="java-iterable-인터페이스-알아보기">Java Iterable 인터페이스 알아보기&lt;/h3>
&lt;p>자바의 모든 컬렉션 유형에서 &lt;code>Iterable&lt;/code> 인터페이스르 구현한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Iterable {
&lt;&lt; interface >>
iterator()* Iterator
+forEach()*
+spliterator()*
}
class Iterator {
&lt;&lt; interface >>
hasNext()* Boolean
next()* Object
+remove()* void
}
class Collection {
&lt;&lt; interface >>
add()*
addAll()*
clear()*
contains()*
containsAll()*
equals()*
hashCode()*
isEmpty()*
iterator()*
remove()*
removeAll()*
retainAll()*
size()*
toArray()*
}
Iterable &lt;|-- Collection
&lt;/pre>
&lt;ul>
&lt;li>어떤 클래스에서 &lt;code>Iterable&lt;/code>을 구현한다면 그 클래스는 &lt;code>iterator()&lt;/code> 메소드르 구현한다.&lt;/li>
&lt;li>메소드는 &lt;code>Iterator&lt;/code> 인터페이스를 구현하는 반복자를 반환한다.&lt;/li>
&lt;li>이 인터페이스는 컬렉션에 있는 항목을 대상으로 반복 작업을 수행하는 방법을 제공하는 &lt;code>forEach()&lt;/code> 메소드가 기본으로 포함된다.&lt;/li>
&lt;/ul>
&lt;h2 id="컴포지트-패턴">컴포지트 패턴&lt;/h2>
&lt;p>컴포지트 패턴(Composite Pattern)은 객체들을 트리 구조로 구성하여 개별 객체와 복합 객체(그룹화된 객체)를 동일하게 다룰 수 있도록 하는 구조적인 디자인 패턴 중 하나이다.&lt;/p>
&lt;p>이 패턴을 사용하면 클라이언트 코드가 단일 객체와 복합 객체를 구별하지 않고 일관된 방식으로 다룰 수 있다.&lt;/p>
&lt;ul>
&lt;li>객체의 구성과 개별 객체를 노드로 가지는 트리 형태의 객체 구조를 만들 수 있다.&lt;/li>
&lt;li>이런 복합 구조를 사용하면 복합 객체와 개별 객체를 대상으로 똑같은 작업을 적용할 수 있다.
&lt;ul>
&lt;li>복합 객체와 개별 객체를 구분할 필요가 거의 없어진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Client {
}
class Component {
&lt;&lt; abstract >>
operation()*
add(Component)*
remove(Component)*
getChild(int)*
}
class Leaf {
operation()
}
class Composite {
operation()
add(Component)
remove(Component)
getChild(int)
}
Client --> Component
Component &lt;|-- Leaf
Component &lt;|-- Composite
Component &lt;-- Composite
&lt;/pre>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. Component 인터페이스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Component&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operation&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2. Leaf 클래스 (단일 객체)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Leaf&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Component&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Leaf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operation&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Leaf &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; operation&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 3. Composite 클래스 (복합 객체)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Composite&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Component&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Component&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Composite&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Component&lt;/span> &lt;span class="n">component&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">component&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Component&lt;/span> &lt;span class="n">component&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">children&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">component&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">operation&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Composite &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; operation&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Component&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">children&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">child&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">operation&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 클라이언트 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Client&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Leaf 객체 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Leaf&lt;/span> &lt;span class="n">leaf1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Leaf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Leaf 1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Leaf&lt;/span> &lt;span class="n">leaf2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Leaf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Leaf 2&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Composite 객체 생성 및 Leaf 객체 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Composite&lt;/span> &lt;span class="n">composite&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Composite&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Composite 1&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composite&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">leaf1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composite&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">leaf2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 두 개의 Leaf와 Composite를 모두 동일한 방식으로 다룸
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">composite&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">operation&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>컴포지트 패턴은 한 클래스에서 계층구조를 관리하는 일과 관련 작업을 처리하는 일 2가지 역할을 수행한다.&lt;/p>
&lt;p>컴포지트 패턴은 단일 역할 원칙을 깨는 대신 투명성을 확보하는 패턴이라고 할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>투명성(transparency)&lt;/strong>&lt;br>
&lt;code>Component&lt;/code> 인터페이스에 자식들을 관리하는 기능과 잎으로써의 기능을 전부 넣어서 클라이언트가 복합 객체와 잎을 똑같은 방식으로 처리할 수 있도록 만들 수 있다.&lt;br>
이를 통해 어떤 원소가 복합 객체인지 잎인지가 클라이언트에게 투명하게 보인다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Component&lt;/code> 클래스에는 두 종류의 기능이 모두 들어있다 보니 안전성은 약간 떨어진다.&lt;/p>
&lt;p>이런 문제는 디자인상의 결정 사항에 속하며, 다른 방향으로 디자인해서 여러 역할을 서로 다른 인터페이스로 분리할 수도 있다.&lt;/p>
&lt;ul>
&lt;li>어떤 원소에 부적절한 메소드를 호출하는 일이 일어나지 않을 것이고, 컴파일 중 혹은 실행 중 문제가 생기는 일을 예방할 수 있다.&lt;/li>
&lt;li>그 대신 투명성이 떨어지게 되고, 코드에서 조건문이라든가 &lt;code>instanceof&lt;/code> 연산자 같은 걸 써야한다.&lt;/li>
&lt;/ul>
&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>반복자 패턴
&lt;ul>
&lt;li>컬렉션의 구현 방법을 노출하지 않으면서 집합체 내의 모든 항복에 접근하는 방법을 제공한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>컴포지트 패턴
&lt;ul>
&lt;li>객체를 트리 구조로 구성해서 부분-전체 계층 구조를 구현한다.&lt;/li>
&lt;li>클라이언트에서 개별 객체와 복합 객체를 똑같은 방법으로 다룰 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>반복자를 사용하면 내부 구조를 드러내지 않으면서도 클라이언트가 컬렉션 안에 들어있는 모든 원소에 접근하도록 할 수 있다.&lt;/li>
&lt;li>반복자 패턴을 사용하면 집합체를 대상으로 하는 반복 작업을 별도의 객체로 캡슐화할 수 있다.&lt;/li>
&lt;li>반복자 패턴을 사용하면 컬렉션에 있는 모든 데이터를 대상으로 반복 작업을 하는 역할을 컬렉션에서 분리할 수 있다.&lt;/li>
&lt;li>반복자 패턴을 쓰면 반복 작업에 똑같은 인터페이스를 적용할 수 있으므로 집합체에 있는 객체를 활용하는 코드를 만들 때 다형성을 활용할 수 있다.&lt;/li>
&lt;li>한 클래스에는 될 수 있으면 한가지 역할만 부여하는 것이 좋다.&lt;/li>
&lt;li>컴포지트 패턴은 개별 객체와 복합 객체를 모두 담아 둘 수 있는 구조를 제공한다.&lt;/li>
&lt;li>컴포지트 패턴을 사용하면 클라이언트가 개별 객체와 복합 객체를 똑같은 방법으로 다룰 수 있다.&lt;/li>
&lt;li>복합 구조에 들어있는 것을 구성 요소라고 부른다.
&lt;ul>
&lt;li>구성 요소에는 복합 객체와 잎 객체가 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>컴포지트 패턴을 적용할 때는 여러 장단점을 고려해야 한다.
&lt;ul>
&lt;li>상황에 따라 투명성과 안정성 사이에서 적절한 균형을 찾아야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>8. 알고리즘 캡슐화하기 - 탬플릿 메소드 패턴</title><link>https://codemario318.github.io/post/gof/8/</link><pubDate>Tue, 21 Nov 2023 06:37:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/8/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/8/cover.png" alt="Featured image of post 8. 알고리즘 캡슐화하기 - 탬플릿 메소드 패턴" />&lt;blockquote>
&lt;p>탬플랫 메소드 패턴(Template Method Pattern)은 알고리즘의 골격을 정의한다.&lt;br>
템플릿 메소드를 사용하면 알고리즘의 일부 단계를 서브클래스에서 구현할 수 있으며, 알고리즘의 구조는 그대로 유지하면서 알고리즘의 특정 단계를 서브클래스에서 재정의할 수도 있다.&lt;/p>
&lt;/blockquote>
&lt;p>템플릿 메소드 패턴은 알고리즘의 &lt;strong>템플릿&lt;/strong>을 만든다.&lt;/p>
&lt;p>&lt;strong>템플릿이란?&lt;/strong>&lt;/p>
&lt;p>일련의 단계로 알고리즘을 정의한 메소드이다.&lt;/p>
&lt;p>여러 단계 가운데 하나 이상의 단계가 추상 메소드로 정의되며, 그 추상 메소드는 서브클래스에서 구현된다.&lt;/p>
&lt;ul>
&lt;li>이러한 방식을 통해 서브클래스가 일부분의 구현을 처리하면서도 알고리즘의 구조는 바뀌지 않는다.&lt;/li>
&lt;/ul>
&lt;h2 id="구성-요소">구성 요소&lt;/h2>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class AbstractClass {
&lt;&lt; abstract >>
templeteMethod()
primitiveOpertion1()*
primitiveOpertion2()*
}
class ConcreteClass {
primitiveOperation1()
primitiveOperation2()
}
class templateMethod {
primtiveOperation1()
primitiveOpertion2()
}
AbstractClass &lt;|-- ConcreteClass
AbstractClass .. templateMethod
&lt;/pre>
&lt;ul>
&lt;li>&lt;code>AbstractClass&lt;/code>: 알고리즘의 구조를 정의하며, 일부 단계는 추상 메소드로 선언하여 하위 클래스에게 위임한다.&lt;/li>
&lt;li>&lt;code>ConcreteClass&lt;/code>: 추상 클래스에서 정의된 추상 메소드르 구현하여 알고리즘의 일부를 구체화한다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CaffeineBeverage&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">prepareRecipe&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">boilWater&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">brew&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pourInCup&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addCondiments&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">brew&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addCondiments&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">boilWater&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 메소드 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">pourInCup&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 메소드 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>템플릿 메소드는 알고리즘의 각 단계를 정의하며, 서브클래스에서 일부 단계를 구현할 수 있도록 유도하는데, 위 예시에서 카페인 음료를 만드는 알고리즘 템플릿 메소드는 &lt;code>prepareRecipe()&lt;/code>이다.&lt;/p>
&lt;ul>
&lt;li>탬플릿 내에서 알고리즘의 각 단계가 메소드로 표현된다.&lt;/li>
&lt;li>어떤 메소드는 &lt;code>CaffeineBerverage&lt;/code>에서 처리된다.&lt;/li>
&lt;li>어떠한 메소드는 서브클래스에서 처리된다.&lt;/li>
&lt;li>서브클래스에서 구현해야 하는 메소드는 &lt;code>abstract&lt;/code>로 선언해야한다.&lt;/li>
&lt;/ul>
&lt;h2 id="템플릿-메소드-후크">템플릿 메소드 후크&lt;/h2>
&lt;p>후크(hook)는 추상 클래스에서 선언되지만 기본적인 내용만 구현되어 있거나 아무 코드도 들어있지 않은 메소드이다.&lt;/p>
&lt;p>이러한 방식으로 서브클래스는 다양한 위치에서 알고리즘에 끼어들 수 있다.(무시하고 넘어갈 수도 있다.)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CaffeineBeverageWithHook&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">final&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">prepareRecipe&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">boilWater&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">brew&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pourInCup&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">customerWantsCondiments&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">addCondiments&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">brew&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addCondiments&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">boilWater&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 메소드 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">pourInCup&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 메소드 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">customerWantsCondiments&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="후크-활용하기">후크 활용하기&lt;/h3>
&lt;p>후크를 사용하려면 서브클래스에서 후크를 오버라이드해야 한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CoffeeWithHook&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">CaffeineBeverageWithHook&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">brew&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">&amp;#39;커피&lt;/span> &lt;span class="err">우리기&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">addCondiments&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;이것 저것 추가&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">customerWantsCondiments&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">answer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getUserInput&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">answer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toLowerCase&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">startsWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getUserInput&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">answer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">&amp;#39;이것&lt;/span> &lt;span class="err">저것&lt;/span> &lt;span class="err">추가&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BufferedReader&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BufferedReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">InputStreamReader&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">in&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">answer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">in&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readLine&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ioe&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;IO Error!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">answer&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">answer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;no&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">answer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>템플릿을 만들 때 추상 메소드를 써야할 때와 후크를 써야할 때를 어떻게 구분할 수 있는가?
&lt;ul>
&lt;li>서브클래스가 알고리즘이 특정 단계를 제공해야 한다면 추상 메소드를 써야한다.&lt;/li>
&lt;li>알고리즘의 특정 단계가 선택적으로 적용된다면 후크를 쓴다.&lt;/li>
&lt;li>후크를 쓰면 서브클래스에서 필요할 때 후크를 구현할 수도 있지만, 꼭 구현하지 않아도 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>후크의 용도
&lt;ul>
&lt;li>알고리즘에서 필수적이지 않은 부분을 서브클래스에서 구현하도록 만들고 싶을 때&lt;/li>
&lt;li>템플릿 메소드에서 앞으로 일어날 일이나 막 일어난 일에 서브클래스가 반응할 수 있도록 기회를 제공하는 용도로
&lt;ul>
&lt;li>내부적으로 특정 목록을 재정렬한 후에 서브 클래스에서 특정 작업을 수행하도록 하고 싶은 때 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서브클래스가 추상 클래스에서 진행되는 작업을 처리할 지 말지 결정하게 하는 기능을 부여하는 용도 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모든 서브클래스에서 모든 추상 메소드를 정의해야한다.
&lt;ul>
&lt;li>템플릿 메소드에 있는 알고리즘의 단계 중에서 정의되지 않은 부분을 모두 채워줘야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>추상 메소드가 너무 많아지면 서브클래스에서 일일이 추상 메소드를 구현해야 하므로 좋지 않을 수 있다.
&lt;ul>
&lt;li>알고리즘의 단계를 너무 잘게 쪼개지 않는 것도 한 가지 방법이 도리 수 있다.&lt;/li>
&lt;li>하지만 알고리즘을 큼직한 몇 가지 단계로만 나눠 놓으면 유연성이 떨어질 수 있다.&lt;/li>
&lt;li>모든 단계가 필수는 아니므로 필수가 아닌 부분을 후크로 구현하면 추상 클래스의 서브클래스를 만들 때 부담이 줄 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="할리우드-원칙">할리우드 원칙&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>할리우드 원칙(Hollywood Principle)&lt;/strong>&lt;br>
먼저 연락하지 마세요. 저희가 연락 드리겠습니다.&lt;/p>
&lt;/blockquote>
&lt;p>할리우드 원칙을 활용하면 의존성 부패(Dependency rot)를 방지할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>의존성 부패?&lt;/strong>&lt;br>
어떤 고수준 구성 요소가 저수준 구성 요소에 의존하고, 그 저수준 구성 요소는 다시 고수준 구성 요소에 의존하게 되어 의존성의 복잡하게 꼬여있는 상황&lt;/p>
&lt;p>의존성이 부패하면 시스템 디자인이 어떤 식으로 되어있는지 알아보기 힘드므로, 저수준 구성 요소가 시스템에 접속할 수는 있지만 언제, 어떻게 구성 요소를 사용할지는 고수준 구성 요소가 결정해야한다.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>할리우드 원칙과 템플릿 메소드 패턴&lt;/strong>&lt;/p>
&lt;p>템플릿 메소드 패턴을 써서 디자인하면 고수준 요소에서 저수준 요소를 필요할 때만 호출하는 형식으로 구현되기 때문에 할리우드 원칙을 적용하게 된다.&lt;/p>
&lt;p>&lt;strong>할리우드 원칙과 의존성 뒤집기 원칙&lt;/strong>&lt;/p>
&lt;p>의존성 뒤집기 원칙은 될 수 있으면 구상 클래스 사용을 줄이고 추상화된 것을 사용해야 한다는 원칙이라면, 할리우드 원칙은 저수준 구성 요소가 컴퓨테이션에 참여하면서도 저수준 구성 요소와 고수준 계층 간 의존을 없애도록 프레임워크나 구성 요소를 구축하는 기법이다.&lt;/p>
&lt;p>따라서 객체를 분리한다는 하나의 목표를 공유하지만, 의존성을 피하는 방법에 있어서 의존성 뒤집기 윈칙이 훨씬 더 강하고 일반적인 내용을 담고 있다.&lt;/p>
&lt;p>할리우드 원칙은 저수준 구성 요소를 다양하게 사용할 수 있으면서도 다른 클래스가 구성 요소에 너무 의존하지 않게 만들어 주는 디자인 구현 기법을 제공한다.&lt;/p>
&lt;h2 id="템플릿-메소드-패턴과-전략-패턴의-차이점">템플릿 메소드 패턴과 전략 패턴의 차이점&lt;/h2>
&lt;p>템플릿 메소드 패턴과 전략 패턴 모두 알고리즘을 대상으로 하고있지만 다른 접근 방식을 취하고있다.&lt;/p>
&lt;p>템플릿 메소드 패턴은 알고리즘의 구조를 정의하고 일부 단계를 하위 클래스에 위임하여 확장성을 제공하며, 전략 패턴은 알고리즘을 캡슐화하고 동적으로 변경할 수 있도록 하는 데 중점을 둔다.&lt;/p>
&lt;h3 id="목적">목적&lt;/h3>
&lt;ul>
&lt;li>템플릿 메소드 패턴
&lt;ul>
&lt;li>주로 알고리즘의 구조를 정의하고 일부 단계를 하위 클래스에게 위임하여 확정성을 제공한다.&lt;/li>
&lt;li>상위 클래스에서 알고리즘의 틀(템플릿)을 제공하고 하위 클래스에서 구체적인 단계를 구현한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전략 패턴
&lt;ul>
&lt;li>알고리즘을 캡슐화하고 해당 알고리즘을 동적으로 변경할 수 있도록 하는 데 사용된다.&lt;/li>
&lt;li>알고리즘을 각각의 전략으로 정의하고 이를 동적으로 교체하여 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="구현-방식">구현 방식&lt;/h3>
&lt;ul>
&lt;li>템플릿 메소드 패턴
&lt;ul>
&lt;li>상위 클래스에는 알고리즘의 템플릿이 존재하며, 일부 단계는 추상 메소드로 선언되어 하위 클래스에서 구현된다.&lt;/li>
&lt;li>하위 클래스에서는 알고리즘의 일부를 결정할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전략 패턴
&lt;ul>
&lt;li>알고리즘은 전략 인터페이스를 통해 정의도고, 각 전략은 해당 인터페이스를 구현한다.&lt;/li>
&lt;li>인터페이스를 사용하므로 실행 시에 원하는 전략으로 교체할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="확장성">확장성&lt;/h3>
&lt;ul>
&lt;li>템플릿 메소드 패턴
&lt;ul>
&lt;li>알고리즘의 구조를 확장하는 데 적합하며, 새로운 알고리즘을 추가하거나 기존 알고리즘을 변경할 때 유용하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전략 패턴
&lt;ul>
&lt;li>새로운 전략을 추가하거나 기존 전략을 변경할 때 확장성이 뛰어나다.&lt;/li>
&lt;li>런타인에 동적으로 전략을 변경할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="의존성">의존성&lt;/h3>
&lt;ul>
&lt;li>템플릿 메소드 패턴
&lt;ul>
&lt;li>상위 클래스와 하위 클래스 간에 강한 의존성이 있다.&lt;/li>
&lt;li>하위 클래스에서는 상위 클래스의 구조를 따라야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전략 패턴
&lt;ul>
&lt;li>컨텍스트와 전략 간에는 느슨한 결합이 있으며, 각 전략은 독립적으로 교체될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="java-api-속-템플릿-메소드-패턴">Java API 속 템플릿 메소드 패턴&lt;/h2>
&lt;p>템플릿 메소드 패턴은 정말 많이 쓰이는 패턴이므로 쉽게 발견할 수 있다.&lt;/p>
&lt;p>하지만 교과서적인 구현과는 다른 템플릿 메소드도 많이 있어 주의 깊게 살펴보지 않으면 템플릿 메소드 패턴이 적용되어 있다는 사실도 모르고 넘어가기 쉽다.&lt;/p>
&lt;h3 id="arrays-정렬">&lt;code>Arrays&lt;/code> 정렬&lt;/h3>
&lt;p>자바의 &lt;code>Arrays&lt;/code> 클래스에는 정렬할 때 쓸 수 있는 편리한 템플릿 메소드가 포함되어 있다.&lt;/p>
&lt;p>&lt;code>Arrays&lt;/code>에 있는 정렬용 템플릿 메소드에서 알고리즘을 제공하지만, 특정 요소 비교 방법은 &lt;code>compareTo()&lt;/code> 메소드로 구현해야한다.&lt;/p>
&lt;p>&lt;code>compareTo()&lt;/code> 메소드를 구현하기만 하면 템플릿 메소드 패턴으로 구현 된 정렬 알고리즘을 이용하여 배열의 항목들을 정렬해준다.&lt;/p>
&lt;h3 id="jframe">&lt;code>JFrame&lt;/code>&lt;/h3>
&lt;p>&lt;code>JFrame&lt;/code>은 가장 기본적인 스윙 컨테이너로 &lt;code>paint()&lt;/code> 메소드를 상속받는 컨테이너이다.&lt;/p>
&lt;p>&lt;code>paint()&lt;/code> 메소드는 후크 메소드라서 아무 일도 하지 않지만, 오버라이드하여 특정 화면 영역에 특정 내용을 표시하는 &lt;code>JFrame&lt;/code>의 알고리즘에 사용자가 원하는 그래픽을 추가할 수 있다.&lt;/p>
&lt;h3 id="abstractlist">AbstractList&lt;/h3>
&lt;p>&lt;code>ArrayList&lt;/code>, &lt;code>LinkedList&lt;/code> 같은 자바의 리스트 컬렉션은 리스트에서 필요한 기능을 구현해 주는 &lt;code>AbstractList&lt;/code> 클래스를 확장한다.&lt;/p>
&lt;p>&lt;code>AbstarctList&lt;/code>에는 &lt;code>get()&lt;/code>, &lt;code>size()&lt;/code> 추상 메소드에 의존하는 &lt;code>subList()&lt;/code> 템플릿 메소드가 있어, &lt;code>AbstarctList&lt;/code>를 확장해서 나만의 리스트를 만들 때는 이 메소드를 구현해야 한다.&lt;/p>
&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>템플릿 메소드 패턴
&lt;ul>
&lt;li>알고리즘의 골격을 정의한다.&lt;/li>
&lt;li>알고리즘의 일부 단계를 서브클래스에서 구현할 수 있다.&lt;/li>
&lt;li>알고리즘의 구조는 그대로 유지하면서 알고리즘의 특정 단계를 서브클래스에서 재정의할 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>템플릿 메소드 패턴은 코드 재사용에 큰 도움이 된다.&lt;/li>
&lt;li>템플릿 메소드가 들어있는 추상 클래스는 구상 메소드, 추상 메소드, 후크를 정의할 수 있다.&lt;/li>
&lt;li>추상 메소드는 서브클래스에서 구현한다.&lt;/li>
&lt;li>후크는 추상 클래스에 들어있는 메소드로 아무 일도 하지 않거나 기본 행동만을 정의한다.&lt;/li>
&lt;li>서브 클래스에서 후크를 오버라이드 할 수 있다.&lt;/li>
&lt;li>할리우드 원칙에 의하면, 저수준 모듈을 언제 어떻게 호출할지는 고수준 모듈에서 결정하는 것이 좋다.&lt;/li>
&lt;li>템플릿 메소드 패턴은 실전에서 자수 쓰이지만 교과서적인 방식으로 적용되진 않는다.&lt;/li>
&lt;li>전략 패턴과 템플릿 메소드 패턴은 모두 알고리즘을 캡슐화하지만, 전략 패턴은 구성을, 템플릿 메소드 패턴은 상속을 사용한다.&lt;/li>
&lt;li>팩토리 메소드 패턴은 특화된 템플릿 메소드 패턴이다.&lt;/li>
&lt;/ul></description></item><item><title>7. 어댑터 패턴과 퍼사드 패턴</title><link>https://codemario318.github.io/post/gof/7/</link><pubDate>Thu, 16 Nov 2023 09:55:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/7/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/7/cover.png" alt="Featured image of post 7. 어댑터 패턴과 퍼사드 패턴" />&lt;blockquote>
&lt;p>특정 인터페이스가 필요한 디자인을 다른 인터페이스를 구현하는 클래스에서 필요할 때(호환되지 않는 인터페이스를 사용해야 할 때), 어댑터 패턴을 이용하면 실제와 다른 인터페이스를 가진 것 처럼 보이게 만들 수 있다.&lt;/p>
&lt;p>여기에 더해 퍼사드 패턴을 이용하면 객체를 감싸서 인터페이스를 단순화할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="어댑터-패턴">어댑터 패턴&lt;/h2>
&lt;h3 id="왜-어댑터-패턴일까">왜 어댑터 패턴일까?&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/gof/7/img_2.png"
width="800"
height="800"
srcset="https://codemario318.github.io/post/gof/7/img_2_huc80e37d3d0f5cf4565d390d280862a1a_85635_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/gof/7/img_2_huc80e37d3d0f5cf4565d390d280862a1a_85635_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="US Standard Socket AC"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>
&lt;img src="https://codemario318.github.io/post/gof/7/img.png"
width="600"
height="600"
srcset="https://codemario318.github.io/post/gof/7/img_huaf94fd04b2f1b9ec15deb9bc444237f1_196342_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/gof/7/img_huaf94fd04b2f1b9ec15deb9bc444237f1_196342_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="JAJU 여행용 멀티 어댑터(그레이)"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;p>어댑터 패턴에서 의미하는 어댑터(Adaptor)는 흔히 볼 수 있는 AC 전원 어댑터에 사용되는 의미와 같다.&lt;/p>
&lt;p>AC 전원 어댑터는 다른 규격의 플러그를 필요로하는 소켓에 사용할 수 있게 해주는 역할을 하는데, 객체지향 어댑터는 클라이언트에서 사용해야하는 인터페이스를(플러그)를 사용할 수 있는 인터페이스(소켓)에 맞는 형태로 적응시키는 역할을 수행한다.&lt;/p>
&lt;h3 id="어댑터-패턴의-정의">어댑터 패턴의 정의&lt;/h3>
&lt;blockquote>
&lt;p>**어댑터 패턴(Adapter Pattern)**은 인터페이스가 호환되지 않아 같이 쓸 수 없었던 클래스를 특정 클래스 인터페이스를 클라이언트에서 요구하는 다른 인터페이스로 변환하여 사용할 수 있게 도와준다.&lt;/p>
&lt;/blockquote>
&lt;p>어댑터 패턴을 사용하면 호환되지 않는 인터페이스를 사용하는 클라이언트를 그대로 활용할 수 있다.&lt;/p>
&lt;ul>
&lt;li>클라이언트와 구현된 인터페이스를 분리할 수 있다.&lt;/li>
&lt;li>변경 내역이 어댑터에 캡슐화되므로 나중에 인터페이스가 바뀌더라도 클라이언트를 바꿀 필요가 없다.&lt;/li>
&lt;/ul>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class Client { }
class Target {
&lt;&lt; interface >>
request()*
}
class Adapter {
request()
}
class Adaptee {
specificRequest()
}
Client-->Target
Target&lt;..Adapter
Adapter-->Adaptee
&lt;/pre>
&lt;ul>
&lt;li>클라이언트는 타깃 인터페이스만 볼 수 있다.&lt;/li>
&lt;li>어댑터에서 타깃 인터페이스를 구현한다.&lt;/li>
&lt;li>어댑터는 어댑티로 &lt;strong>구성&lt;/strong>되어있다.&lt;/li>
&lt;li>모든 요청은 어댑티에 위임된다.&lt;/li>
&lt;/ul>
&lt;p>어댑터는 여러 객체지향 원칙을 반영하고 있다.&lt;/p>
&lt;ul>
&lt;li>어댑티를 새로 바뀐 인터페이스로 감쌀 때는 객체 구성(composition)을 사용한다.
&lt;ul>
&lt;li>이러한 접근으로 어댑티의 모든 서브클래스에 어댑터를 쓸 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>클라이언트를 특정 구현이 아닌 인터페이스에 연결한다.
&lt;ul>
&lt;li>서로 다른 백엔드 클래스로 변환시키는 여러 어댑터를 사용할 수도 있다.&lt;/li>
&lt;li>인터페이스를 기준으로 구현하므로 타깃 인터페이스만 제대로 유지한다면 나중에 다른 구현을 추가하는 것도 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="클래스-어댑터">클래스 어댑터&lt;/h3>
&lt;p>어댑터 패턴은 객체 어댑터와 클래스 어댑터로 두 종류가 있다.&lt;/p>
&lt;ul>
&lt;li>클래스 어댑터는 다중 상속이 가능해야 구현할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>클래스 어댑터는 타깃과 어댑티 모두 &lt;strong>서브클래스&lt;/strong>로 만들어서 사용하고, 객체 어댑터는 &lt;strong>구성&lt;/strong>으로 어댑티에 요청을 전달한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class Client { }
class Target {
request()
}
class Adapter {
request()
}
class Adaptee {
specificRequest()
}
Client-->Target
Adapter--|>Target
Adapter--|>Adaptee
&lt;/pre>
&lt;p>&lt;strong>객체 어댑터&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>구성을 사용하므로 어댑티 클래스와 그 서브클래스에 대해서도 어댑터 역할을 할 수 있다.&lt;/li>
&lt;li>구성을 사용하므로 어댑티한테 필요한 일을 시키는 코드만 만들면 되므로 코드를 많이 쓸 필요가 없다.&lt;/li>
&lt;li>구성을 사용하므로 유연성을 최대한 확보할 수 있다.&lt;/li>
&lt;li>어댑터 코드에 어떤 행동을 추가하면 그 어댑터 코드는 어댑티 클래스와 더불어 모든 서브클래스에 그대로 적용된다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>클래스 어댑터&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>특정 어댑티 클래스에만 적용할 수 있지만, 어댑티 전체를 다시 구현하지 않아도 된다는 장점이 있다.&lt;/li>
&lt;li>서브클래스라서 어댑티의 행동을 오버라이드할 수 있으므로 코드 분량을 줄일 수 있다.&lt;/li>
&lt;li>메소드를 빠르게 오버라이드 할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="enumeration을-iterator에-적응시키기">Enumeration을 Iterator에 적응시키기&lt;/h3>
&lt;p>&lt;strong>Enumeration&lt;/strong>&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Enumeration {
&lt;&lt; interface >>
hasMoreElements()*
nextElement()*
}
&lt;/pre>
&lt;p>자바의 초기 컬렉션 형식(Vector, Stack, Hashtable)은 &lt;code>Enumeration&lt;/code>을 반환하는 &lt;code>elements()&lt;/code> 메소드가 구현되어 있었는데, &lt;code>Enumeration&lt;/code> 인터페이스를 사용하면 컬렉션의 각 항목이 어떻게 관리되는지 신경 쓸 필요 없이 컬렉션의 모든 항목에 접근할 수 있다.&lt;/p>
&lt;p>&lt;strong>Iterator&lt;/strong>&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Iterator {
&lt;&lt; interface >>
hasNext()*
next()*
remove()*
}
&lt;/pre>
&lt;p>최근에는 컬렉션에 있는 일련의 항목에 접근하고, 그 항목을 제거할 수 있게 해주는 &lt;code>Iterator&lt;/code> 인터페이스를 사용하기 시작했다.&lt;/p>
&lt;p>&lt;code>Enumeration&lt;/code> 인터페이스를 사용하는 구형 코드를 다뤄야 할 때도 있지만 새로운 코드를 만들 때는 &lt;code>Iterator&lt;/code>만 사용하는 게 좋다. 이럴 때 어댑터 패턴을 사용할 수 있다.&lt;/p>
&lt;p>&lt;strong>어댑터 디자인하기&lt;/strong>&lt;/p>
&lt;p>타깃 인터페이스를 구현하고, 어댑티 객체로 구성된 어댑터를 구현해야한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction TB
class Enumeration {
&lt;&lt; interface >>
hasMoreElements()*
nextElement()*
}
class EnumerationIterator {
hasNext()
next()
remove()
}
class Iterator {
&lt;&lt; interface >>
hasNext()*
next()*
remove()*
}
Iterator &lt;|.. EnumerationIterator
Enumeration &lt;|-- EnumerationIterator
&lt;/pre>
&lt;p>&lt;code>hasNext()&lt;/code>와 &lt;code>next()&lt;/code> 메소드는 타깃에서 어댑티로 바로 연결되지만 &lt;code>remove()&lt;/code> 메소드는 제공하지 않으므로 별도 구현이 필요하다.&lt;/p>
&lt;p>&lt;strong>&lt;code>remove()&lt;/code> 메소드 처리하기&lt;/strong>&lt;/p>
&lt;p>결론적으로 어댑터 차원에서 완벽하게 작동하는 &lt;code>remove()&lt;/code> 메소드 구현 방법은 없다.&lt;/p>
&lt;p>그나마 가장 좋은 방법은 런타임 예외를 던지는 것 이다.&lt;/p>
&lt;p>이러한 상황을 대비하여 &lt;code>Iterator&lt;/code> 인터페이스를 디자인 한 사람들은 &lt;code>UnsupportedOperationExcetpion&lt;/code>을 지원하도록 구현하였다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EnumerationIterator&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">EnumerationIterator&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">enumeration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">EnumerationIterator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Enumeration&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">enumeration&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">enumeration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">enumeration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">hasNext&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">enumeration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hasMoreElements&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">enumeration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">nextElement&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">remove&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">UnsupportedOperationException&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="데코레이터-패턴과-어댑터-패턴">데코레이터 패턴과 어댑터 패턴&lt;/h3>
&lt;p>데코레이터 패턴과 어댑터 패턴은 모두 구조적 패턴(Structural pattern)에 속하는데, 기존 클래스들을 조합하여 새로운 기능을 제공하거나 인터페이스를 맞추는 데 사용할 수 있지만, 목적과 사용되는 상황에서 차이가 있다.&lt;/p>
&lt;p>&lt;strong>데코레이터 패턴&lt;/strong>&lt;/p>
&lt;p>데코레이터 패턴은 객체에 동적으로 새로운 책임을 추가하거나 객체를 감싸서 행동을 확장하는 패턴이다.&lt;/p>
&lt;ul>
&lt;li>상속을 통해 기능을 확장하는 대신 객체를 감싸는 방식으로 기능을 추가하게된다.&lt;/li>
&lt;li>클라이언트에게는 원래의 객체와 데코레이터로 감싼 객체를 동일하게 다루도록 한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>어댑터 패턴&lt;/strong>&lt;/p>
&lt;p>어댑터 패턴은 서로 다른 인터페이스를 가진 두 클래스를 함께 동작하도록 만들어주는 패턴이다.&lt;/p>
&lt;ul>
&lt;li>기존의 코드를 수정하지 않고 새로운 인터페이스를 제공한다.&lt;/li>
&lt;li>클라이언트 코드가 새로운 인터페이스를 사용할 수 있게 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="퍼사드-패턴">퍼사드 패턴&lt;/h2>
&lt;blockquote>
&lt;p>퍼사드 패턴은 서브시스템에 있는 일련의 인터페이스를 통합 인터페이스로 묶어준다.&lt;br>
또한 고수준 인터페이스도 정의하므로 서브시스템을 더 편리하게 사용할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;p>퍼사드 패턴은 하나 이상의 클래스 인터페이스를 깔끔하면서도 효과적인 퍼사드(facade)로 덮어 인터페이스를 단순하게 바꾸기 위해 인터페이스를 변경한다.&lt;/p>
&lt;ul>
&lt;li>쓰기 쉬운 인터페이스를 제공하는 퍼사드 클래스를 구현함으로써 복잡한 시스템을 훨씬 편리하게 사용할 수 있다.&lt;/li>
&lt;li>퍼사드는 인터페이스를 단순하게 만들고 클라이언트와 구성 요소로 이루어진 서브시스템을 분리하는 역할도 수행할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>퍼사드와 어댑터는 모두 여러 개의 클래스를 감쌀 수 있지만 퍼사드는 인터페이스를 단순하게 만드는 용도로 쓰이는 반면, 어댑터는 인터페이스를 다른 인터페이스로 변환하는 용도로 쓰인다.&lt;/p>
&lt;h3 id="활용">활용&lt;/h3>
&lt;p>퍼사드 패턴을 사용하려면 어떤 서브시스템에 속한 일련의 복잡한 클래스를 단순하게 바꿔서 통합한 클래스를 만들어야 한다.&lt;/p>
&lt;ul>
&lt;li>다른 패턴과 달리 퍼사드 패턴은 복잡한 추상화가 필요 없으므로 상당히 단순한 편이다.&lt;/li>
&lt;/ul>
&lt;p>퍼사드 패턴을 사용하면 클라이언트와 서브시스템이 서로 긴밀하게 연결되지 않아도 되고, 다음 최소 지식 원칙을 준수하는데도 도움을 준다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 서브시스템 클래스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">CPU&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">processData&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Processing data by CPU&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Memory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">load&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Loading data into memory&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">HardDrive&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">readData&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Reading data from hard drive&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 퍼사드 클래스
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ComputerFacade&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">CPU&lt;/span> &lt;span class="n">cpu&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">Memory&lt;/span> &lt;span class="n">memory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="n">HardDrive&lt;/span> &lt;span class="n">hardDrive&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">ComputerFacade&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cpu&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CPU&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">memory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Memory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">hardDrive&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HardDrive&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Starting computer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cpu&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">processData&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">memory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">load&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">hardDrive&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readData&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Computer started&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">shutDown&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Shutting down computer&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 여러 서브시스템을 종료하는 로직
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Computer shut down&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 클라이언트 코드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ComputerFacade&lt;/span> &lt;span class="n">computer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ComputerFacade&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">computer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 클라이언트는 퍼사드를 통해서만 컴퓨터를 다룰 수 있음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">computer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">shutDown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="최소-지식-원칙">최소 지식 원칙&lt;/h2>
&lt;blockquote>
&lt;p>객체 사이의 상호작용은 될 수 있으면 아주 가까운 &lt;strong>친구&lt;/strong>사이에만 허용하는 편이 좋다.&lt;/p>
&lt;/blockquote>
&lt;p>시스템을 디자인할 때 어떤 객체든 그 객체와 상호작용을 하는 클래스의 개수와 상호작용 방식에 주의를 기울여야 한다.&lt;/p>
&lt;ul>
&lt;li>이 원칙을 잘 따르면 여러 클래스가 복잡하게 얽혀 있어 시스템의 한 부분을 변경했을 때 다른 부분까지 줄줄이 고쳐야 하는 상황을 미리 방지할 수 있다.&lt;/li>
&lt;li>여러 클래스가 서로 복잡하게 의존하고 있다면 관리하기도 힘들고, 이해하기 어려운 불안정한 시스템이 만들어진다.&lt;/li>
&lt;/ul>
&lt;h3 id="친구를-만들지-않고-다른-객체에-영향력-행사하기">친구를 만들지 않고 다른 객체에 영향력 행사하기&lt;/h3>
&lt;p>최소 지식 원칙은 친구를 만들지 않는 4개의 가이드라인을 제시한다.&lt;/p>
&lt;ul>
&lt;li>객체 자체&lt;/li>
&lt;li>메소드에 매개변수로 전달된 객체&lt;/li>
&lt;li>메소드를 생성하거나 인스턴스를 만든 객체&lt;/li>
&lt;li>객체에 속하는 구성 요소&lt;/li>
&lt;/ul>
&lt;p>메소드를 호출한 결과로 리턴받은 객체에 들어있는 메소드를 호출하면 다른 객체의 일부분에 요청하게되고, 직접적으로 알고 지내는 객체의 수가 늘어난다.&lt;/p>
&lt;p>이 상황에서 최소 지식 원칙을 따르려면 객체가 대신 요청하도록 만드러야하며, 이를 통해 객체의 한 구성 요소를 알고 지낼 필요가 없어진다.&lt;/p>
&lt;p>&lt;strong>원칙을 따르지 않는 경우&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nf">getTemp&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Thermometer&lt;/span> &lt;span class="n">thermometer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">station&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getThermometer&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">thermometer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTemperature&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>원칙을 따르는 경우&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="nf">getTemp&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">station&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTemperature&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>최소 지식 원칙을 적용해서 &lt;code>thermometer&lt;/code>에게 요청을 전달하는 메소드를 &lt;code>station&lt;/code> 클래스에 추가하여 의존해야하는 클래스의 개수를 줄일 수 있다.&lt;/p>
&lt;h3 id="절친에게만-메소드-호출하기">절친에게만 메소드 호출하기&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Car&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 구성 요소의 메소드는 호출해도 좋음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Engine&lt;/span> &lt;span class="n">engine&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Car&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 새로운 객체를 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 이 객체의 메소드는 호출해도 좋음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Doors&lt;/span> &lt;span class="n">doors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Doors&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 매개변수로 전달된 객체의 메소드는 호출해도 좋음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">authorized&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">turns&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">authorized&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 구성 요소의 메소드를 호출해도 좋음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">engine&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 객체 내의 있는 메소드는 호출해도 좋음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">updateDashboardDisplay&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 직접 생성하거나 인스턴스를 만든 객체의 메소드는 호출해도 좋음
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">doors&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lock&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">updateDashboardDisplay&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 디스플레이 갱신
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>최소 지식 원칙을 잘 따르면 객체 사이의 의존성을 줄일 수 있으며 소프트웨어 관리가 더 편해진다.&lt;/p>
&lt;p>하지만 적용하다 보면 메소드 호출을 처리하는 래퍼 클래스를 더 만들어야 할 수도 있으며 이에 따라 시스템이 복잡해지고, 개발 시간도 늘어나고, 성능도 떨어질 수 있다.&lt;/p>
&lt;h3 id="퍼사드-패턴과-최소-지식-원칙">퍼사드 패턴과 최소 지식 원칙&lt;/h3>
&lt;ul>
&lt;li>퍼사드 패턴에서 클라이언트의 친구는 퍼사드 클래스 하나 뿐이다.&lt;/li>
&lt;/ul>
&lt;h2 id="정리">정리&lt;/h2>
&lt;p>&lt;strong>어댑터 패턴&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>특정 클래스 인터페이스를 클라이언트에서 요구하는 다른 인터페이스로 변환한다.&lt;/li>
&lt;li>인터페이스가 호환되지 않아 같이 쓸 수 없었던 클래스를 사용할 수 있게 도와준다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>퍼사드 패턴&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>서브시스템에 있는 일련의 인터페이스를 통합 인터페이스로 묶어준다.&lt;/li>
&lt;li>고수준 인터페이스도 정의하므로 서브시스템을 더 편리하게 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>기존 클래스를 사용하려고 하는데 인터페이스가 맞지 않으면 어댑터를 쓴다.&lt;/li>
&lt;li>큰 인터페이스와 여러 인터페이스를 단순하게 바꾸거나 통합해야 하면 퍼사드를 쓴다.&lt;/li>
&lt;li>어댑터는 인터페이스를 클라이언트에서 원하는 인터페이스로 바꾸는 역할을 한다.&lt;/li>
&lt;li>퍼사드는 클라이언트를 복잡한 서브시스템과 분리하는 역할을 한다.&lt;/li>
&lt;li>어댑터를 구현할 때는 타깃 인터페이스의 크기와 구조에 따라 코딩해야 할 분량이 결정된다.&lt;/li>
&lt;li>퍼사드 패턴에서는 서브시스템으로 퍼사드를 만들고 진짜 작업은 서브클래스에 맡긴다.&lt;/li>
&lt;li>어댑터 패턴에는 객체 어댑터 패턴과 클래스 어댑터 패턴이 있으며, 클래스 어댑터를 쓰러면 다중 상속이 가능해야 한다.&lt;/li>
&lt;li>한 서브시스템에 퍼사드를 여러개 만들어도 된다.&lt;/li>
&lt;li>어댑터는 객체를 감싸서 인터페이스를 바꾸는 용도로, 데코레이터는 객체를 감싸서 새로운 행동을 추가하는 용도로, 퍼사드는 일련의 객체를 감싸서 단순하게 만드는 용도로 쓰인다.&lt;/li>
&lt;/ul></description></item><item><title>6. 커맨드 패턴 - 호출 캡슐화하기</title><link>https://codemario318.github.io/post/gof/6/</link><pubDate>Sun, 12 Nov 2023 14:01:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/6/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/6/cover.png" alt="Featured image of post 6. 커맨드 패턴 - 호출 캡슐화하기" />&lt;blockquote>
&lt;p>메소드호출을 캡슐화하면 계산 과정의 각 부분을 결정화할 수 있기에 계산하는 코드를 호출한 객체는 그 일이 어떤 식으로 처리되는지 전혀 신경 쓸 필요가 없어진다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="커맨드-패턴">커맨드 패턴&lt;/h2>
&lt;blockquote>
&lt;p>커맨드 패턴을 사용하면 요청 내역을 객체로 캡슐화해서 객체를 서로 다른 요청 내역에 따라 매개변수화할 수 있다. 이러면 요청을 큐에 저장하거나 로그로 기록하거나 작업 취소 기능을 사용할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>커맨드 객체는 일련의 행동을 특정 리시버와 연결함으로써 요청을 캡슐화한것이다.&lt;/p>
&lt;ul>
&lt;li>이를 위해 행동과 리시버를 한 객체에 넣고, &lt;code>excute()&lt;/code>라는 메소드 하나만 외부에 공개하는 방법을 써야 한다.&lt;/li>
&lt;li>이 메소드 호출에 따라 리시버에서 일련의 작업을 처리하며, 밖에서 볼 때는 어떤 객체가 리시버 역할을 하는지, 그 리시버가 어떤 일을 하는지 알 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>명령으로 객체를 매개변수화 할 수 있다.&lt;/p>
&lt;ul>
&lt;li>특정 인터페이스만 구현되어 있다면 그 커맨드 객체에서 실제로 어떤 일을 하는지 신경 쓸 필요가 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>기본적인 커맨드 패턴을 조금만 확장하면 큐와 로그를 구현하거나 작업 취소 하는 방법으로 활용될 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>기본적인 커맨드 패턴을 제대로 사용할 수 있다면 메타 커맨드 패턴(Meta Command Pattern)도 어렵지 않게 구현할 수 있다.&lt;/p>
&lt;ul>
&lt;li>메타 커맨드 패턴을 사용하면 여러 개의 명령을 매크로로 한번에 실행할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>커맨드 패턴은 어떤 것을 요구하는 객체와 그 요구를 받아들이고 처리하는 객체를 분리하는 객체지향 디자인 패턴의 한 모델이라고 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>어떤 작업을 요청하는 쪽과 그 작업을 처리하는 쪽을 분리할 수 있다.&lt;/li>
&lt;li>커맨드 객체는 특정 객체에 관한 특정 작업 요청을 캡슐화해준다.&lt;/li>
&lt;li>그렇게 객체를 분리하면 패턴이 실제로 어떻게 돌아가는지 파악하기가 조금 어려울 수 있다.&lt;/li>
&lt;/ul>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a(("클라이언트&lt;/br>createCommandObject()"))
b(("커맨드&lt;/br>excute()"))
c(("인보커&lt;/br>setCommand()"))
d(("커맨드&lt;/br>execute()"))
e(("리시버&lt;/br>action1()&lt;/br>action2()"))
a-- 1. createCommandObject() --> b
b-- 2. setCommand() --> c
a-. 3 .-> c
c-- excute() --> d
d-- action1(), action2() --> e
&lt;/pre>
&lt;ul>
&lt;li>클라이언트는 커맨드 객체를 생성해야 한다.
&lt;ul>
&lt;li>커맨드 객체는 리시버에 전달할 일련의 행동으로 구성된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>커맨드 객체에는 행동과 리시버(Receiver)의 정보가 같이 들어있다.&lt;/li>
&lt;li>커맨드 객체에서 제공하는 메소드는 &lt;code>excute()&lt;/code> 하나 뿐이다.
&lt;ul>
&lt;li>이 메소드는 행동을 캡슐화하며, 리시버에 있는 특정 행동을 처리한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>클라이언트는 인보커(Invoker) 객체의 &lt;code>setCommand()&lt;/code> 메소드를 호출하는데, 이때 커맨드 객체를 넘겨준다.
&lt;ul>
&lt;li>그 커맨드 객체는 나중에 쓰이기 전까지 인보커 객체에 보관된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>인보커에서 커맨드 객체의 &lt;code>excute()&lt;/code> 메소드를 호출하면 리시버에 있는 행동 메소드가 호출된다.&lt;/li>
&lt;/ul>
&lt;h3 id="인보커-로딩">인보커 로딩&lt;/h3>
&lt;ol>
&lt;li>클라이언트에서 커맨드 객체 생성&lt;/li>
&lt;li>&lt;code>setCommand()&lt;/code>를 호출해서 인보커에 커맨드 객체를 저장&lt;/li>
&lt;li>나중에 클라이언트에서 인보커에게 그 명령을 실행하라고 요청&lt;/li>
&lt;/ol>
&lt;p>일단 어떤 명령을 인보커에 로딩한 다음 한번만 작업을 처리하고 커맨드 객체를 지우도록 할 수도 있고, 저장해 둔 명령을 여러 번 수행하게 할 수도 있다.&lt;/p>
&lt;h3 id="기본-구조">기본 구조&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class Client
class Invoker {
setCommand()
}
class Receiver {
action()
}
class Command {
&lt;&lt; interface >>
excute()*
undo()*
}
class ConcreteCommand {
execute()
undo()
}
Client --> Invoker
Client --> Receiver
Client --> ConcreteCommand
Invoker --> Command
Receiver &lt;-- ConcreteCommand
Command &lt;.. ConcreteCommand
&lt;/pre>
&lt;h2 id="커맨드-패턴-활용하기">커맨드 패턴 활용하기&lt;/h2>
&lt;p>커맨드로 컴퓨테이션(computation)의 한 부분(리시버와 일련의 행동)을 패키지로 묶어서 일급 객체 형태로 전달할 수 있다.&lt;/p>
&lt;ul>
&lt;li>클라이언트 애플리케이션에서 커맨드 객체를 생성한 뒤 오랜 시간이 지나도 그 컴퓨테이션을 호출할 수 있게 된다.&lt;/li>
&lt;li>다른 스레드에서 호출할 수도 있다.&lt;/li>
&lt;/ul>
&lt;p>이러한 특성을 활용하여 커맨드 패턴을 수케줄러나 스레드 풀, 작업 큐와 같은 다양한 작업에 적용할 수 있다.&lt;/p>
&lt;h3 id="작업-큐">작업 큐&lt;/h3>
&lt;p>큐 한 쪽 끝은 커맨드를 추가할 수 있도록 되어있고, 다른 쪽 끝에는 커맨드를 처리하는 스레드들이 대기하고 있다.&lt;/p>
&lt;p>각 스레드는 우선 &lt;code>execute()&lt;/code> 메소드를 호출하고 호출이 완료되면 커맨드 객체를 버리고 새로운 커맨드 객체를 가져온다.&lt;/p>
&lt;p>작업 큐 클래스는 계산 작업을 하는 객체들과 완전히 분리되어 있고, 한 스레드가 처리를 하다 네트워크로 뭔가를 내려받을 수도 있다고 하더라도, 큐에 커맨드 패턴을 구현하는 객체를 넣으면 그 객체를 처리하는 스레드가 생기고 자동으로 &lt;code>excute()&lt;/code>가 호출되므로 작업 큐 객체는 전혀 신경쓸 필요가 없다.&lt;/p>
&lt;h2 id="커맨드-패턴-더-활용하기">커맨드 패턴 더 활용하기&lt;/h2>
&lt;p>어떤 어플래케이션은 모든 행동을 기록해 두었다가 어플리케이션이 다운되었을 때 그 행동을 다시 호출해서 복구할 수 있어야 한다.&lt;/p>
&lt;ul>
&lt;li>스프레드시트 등&lt;/li>
&lt;/ul>
&lt;p>커맨드 패턴을 사용하면 store()와 load() 메소드를 추가해서 이런 기능을 구현할 수 있다.&lt;/p>
&lt;ul>
&lt;li>자바에서는 직렬화로 구현할 수도 있지만 관련된 제약 조건으로 인해 쉽지 않다.&lt;/li>
&lt;/ul>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Command {
&lt;&lt; interface >>
execute()*
undo()*
store()*
load()*
}
&lt;/pre>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a((Invoker))
b((Command1))
c((Command2))
d((Command3))
e[(storage)]
a-- 1. execute() -->b
a-- 2. execute() -->c
a-- 3. execute() -->d
b-- store -->e
c-- store -->e
d-- store -->e
&lt;/pre>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
e[(storage)]
b((Command1))
c((Command2))
d((Command3))
a((Invoker))
e-- load -->b
e-- load -->c
e-- load -->d
b-. "1. execute()" .-a
c-. "2. execute()" .-a
d-. "3. execute()" .-a
&lt;/pre>
&lt;h2 id="만능-iot-리모컨">만능 IOT 리모컨&lt;/h2>
&lt;h3 id="커맨드-인터페이스-구현">커맨드 인터페이스 구현&lt;/h3>
&lt;p>커맨드 객체는 모두 같은 인터페이스를 구현해야 한다.&lt;/p>
&lt;p>그 인터페이스에는 메소드가 하나 뿐이며 일반적으로 &lt;code>excute()&lt;/code>라는 이름을 쓴다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Command&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">excute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="커맨드-클래스-구현">커맨드 클래스 구현&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Light {
on()
off()
}
&lt;/pre>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LightOnCommand&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Light&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">LightOnCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Light&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">light&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">light&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">excute&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">on&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="커맨드-객체-사용하기">커맨드 객체 사용하기&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SimpleRemoteControl&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 커맨드를 저장할 슬롯이 1개 있다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 이 슬롯으로 1개의 기기를 제어한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span> &lt;span class="n">slot&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">SimpleRemoteControl&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 슬롯을 가지고 제어할 명령을 설정한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 리모컨 버튼의 기능을 바꾸고 싶다면 해당 메소드를 사용해서 얼마든지 바꿀 수 있다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Command&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">slot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">command&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 버튼을 누르면 메소드가 호출되며, 슬롯에 연결된 커맨드 객체의 excute() 메소드만 호출하면 된다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">buttonWasPressed&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">slot&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="간단한-테스트-클래스">간단한 테스트 클래스&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 커맨드 패턴에서 클라이언트에 해당하는 부분
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RemoteControlTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * remote 변수가 인보커 역할을 한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 필요한 작업을 요청할 때 사용할 커맨드 객체를 인자로 전달받는다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SimpleRemoteControl&lt;/span> &lt;span class="n">remote&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SimpleRemoteControl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 요청을 받아서 처리할 리시버인 Light 객체를 생성한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Light&lt;/span> &lt;span class="n">light&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Light&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 커맨드 객체를 생서한다. 이때 리시버를 전달해준다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LightOnCommand&lt;/span> &lt;span class="n">lightOn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LigthOnCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">light&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 커맨드 객체를 인보커에게 전달해준다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">remote&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">lightOn&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">remote&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">buttonWasPressed&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="리모컨-코드-만들기">리모컨 코드 만들기&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RemoteControl&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">offCommands&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">RemoteControl&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onCommands&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Command&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">offCommands&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Command&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span> &lt;span class="n">noCommand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NoCommand&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">noCommand&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">offCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">noCommand&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">slot&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="n">onCommand&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="n">offCommand&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">onCommand&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">offCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">offCommand&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onButtonWasPushed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">slot&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">offButtonWasPushed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">slot&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">offCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">StringBuffer&lt;/span> &lt;span class="n">stringBuff&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringBuffer&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stringBuff&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;\n----- 리모컨 -----\n&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">stringBuff&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">append&lt;/span>&lt;span class="o">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;[slot &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;] &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">offCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">stringBuff&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="nocommand-객체">NoCommand 객체&lt;/h3>
&lt;p>&lt;code>NoCommand&lt;/code> 객체는 일종의 널 객체이다.&lt;/p>
&lt;p>널 객체는 딱히 리턴할 객체도 없고 클라이언트가 null을 처리하지 않게 하고 싶을때 활용할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NoCommand&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RemoteControl&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * NoCommand 객체가 없는 경우 처리 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onButtonWasPushed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">slot&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">onCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>만능 IOT 리모컨의 경우 명령이 아직 할당되지 않은 부분에 NoCommand 객체를 넣어 &lt;code>execute()&lt;/code> 메소드가 호출되어도 문제가 생기지 않도록 했다.&lt;/p>
&lt;h3 id="작업-취소-기능-추가하기">작업 취소 기능 추가하기&lt;/h3>
&lt;p>Command 클래스에 상태를 추가하여 작업을 취소 기능을 쉽게 추가할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Command&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undo&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 새로 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LightOnCommand&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undo&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">off&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LightOffCommand&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undo&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">light&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">on&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RemoteControlWithUndo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="n">undoCommand&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">RemoteControlWithUndo&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">undoCommand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">noCommand&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">onButtonWasPushed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">slot&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">undoCommand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">onCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">offButtonWasPushed&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">slot&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">offCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">undoCommand&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">offCommands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">slot&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undoButtonWasPushed&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">undoCommand&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">undo&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="상태를-활용한-작업-취소-기능">상태를 활용한 작업 취소 기능&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class CeilingFan {
high()
medium()
low()
off()
getSpeed()
}
&lt;/pre>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CeilingFan&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">HIGH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">MEDIUM&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">LOW&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">OFF&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">location&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">speed&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">CeilingFan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">location&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">location&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OFF&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">high&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">HIGH&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">medium&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MEDIUM&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">low&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LOW&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">off&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">speed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">OFF&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getSpeed&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">speed&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CeilingFanHighCommand&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CeilingFan&lt;/span> &lt;span class="n">ceilingFan&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">prevSpeed&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">CeilingFanHighCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CeilingFan&lt;/span> &lt;span class="n">ceilingFan&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ceilingFan&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prevSpeed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ceilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getSpeed&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ceilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">high&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">undo&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">prevSpeed&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">CeilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">HIGH&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ceilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">high&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">prevSpeed&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">CeilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MEDIUM&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ceilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">medium&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">prevSpeed&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">CeilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">LOW&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ceilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">low&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">prevSpeed&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">CeilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">OFF&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ceilingFan&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">off&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="매크로-커맨드로-여러-동작-한번에-처리하기">매크로 커맨드로 여러 동작 한번에 처리하기&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MacroCommand&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Command&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Command&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">commands&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">MacroCommand&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Command&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">commands&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">commands&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">commands&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">commands&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">commands&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>커맨드패턴
&lt;ul>
&lt;li>요청 내역을 객체로 캡슐화해서 객체를 서로 다른 요청 내역에 따라 매개변수화 할 수 있다.&lt;/li>
&lt;li>이러면 요청을 큐에 저장하거나 로그로 기록하거나 작업 취소 기능을 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>커맨드 패턴을 사용하면 요청하는 객체와 요청을 수행하는 객체를 분리할 수 있다.&lt;/li>
&lt;li>분리하는 과정의 중심에는 커맨드 객체가 있으며, 객체가 행동이 들어있는 리시버를 캡슐화한다.&lt;/li>
&lt;li>인보커는 무언가 요청할 때 커맨드 객체의 &lt;code>execute()&lt;/code> 메소드를 호출하면된다.
&lt;ul>
&lt;li>&lt;code>execute()&lt;/code> 메소드는 리시버에 있는 행동을 호출한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>커맨드는 인보커를 매개변수화 할 수 있다.
&lt;ul>
&lt;li>실행 중 동적으로 매개변수화를 설정할 수도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>execute()&lt;/code> 메소드가 마지막으로 호출되기 전의 상태로 되돌리는 작업 취소 메소드를 구현하면 커맨드 패턴으로 작업 취소 기능을 구현할 수도 있다.&lt;/li>
&lt;li>매크로 커맨드는 커맨드를 확장해서 여러 개의 커맨드를 한 번에 호출할 수 있게 해주는 가장 간편한 방법이다.
&lt;ul>
&lt;li>매크로 커맨드로도 어렵지 않게 작업 취소 기능을 구현할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>프로그래밍을 하다 보면 요청을 스스로 처리하는 &amp;lsquo;스마트&amp;rsquo; 커맨드 객체를 사용하는 경우도 있다.&lt;/li>
&lt;li>커맨드 패턴을 활용해서 로그 및 트랜잭션 시스템을 구현할 수 있다.&lt;/li>
&lt;/ul></description></item><item><title>5. 싱글턴 패턴</title><link>https://codemario318.github.io/post/gof/5/</link><pubDate>Sun, 05 Nov 2023 18:01:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/5/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/5/cover.png" alt="Featured image of post 5. 싱글턴 패턴" />&lt;p>싱글턴 패턴은 특정 클래스에 객체 인스턴스가 하나만 만들어지도록 해 주는 패턴이다.&lt;/p>
&lt;ul>
&lt;li>객체를 쓸 때 인스턴스가 2개 이상이면 프로그램이 이상하게 돌아가는 경우&lt;/li>
&lt;li>자원을 불필요하게 사용하는 경우&lt;/li>
&lt;li>결과에 일관성이 없어지는 경우&lt;/li>
&lt;/ul>
&lt;p>특정 상황에서는 객체가 1개만 있어도, 혹은 1개만 있어야 문제없이 수행되는 경우 활용하는 패턴이다.&lt;/p>
&lt;ul>
&lt;li>스레드 풀&lt;/li>
&lt;li>캐시&lt;/li>
&lt;li>대화상자&lt;/li>
&lt;li>사용자 설정&lt;/li>
&lt;li>레지스트리 설정을 처리하는 객체&lt;/li>
&lt;li>로그 기록용 객체&lt;/li>
&lt;li>디바이스 드라이버&lt;/li>
&lt;/ul>
&lt;p>전역 변수에 객체를 대입하면 애플리케이션이 시작될 때 객체가 생성되는데 그 객체가 자원을 많이 차지하면서 사용하지 않는 경우에도 제어할 수 없다.&lt;/p>
&lt;p>하지만 싱글턴 패턴을 활용하면 필요할 때만 객체를 만들 수 있다.&lt;/p>
&lt;h2 id="고전적인-싱글턴-패턴-구현법">고전적인 싱글턴 패턴 구현법&lt;/h2>
&lt;p>생성자를 &lt;code>private&lt;/code>로 만들고 &lt;code>static&lt;/code> 메소드를 통해 인스턴스를 얻도록 구현하기 때문에 생성자를 통해서 새로운 인스턴스를 얻을 수 있는 방법이 없다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">uniqueInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Singleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">uniqueInstance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniqueInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">uniqueInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>아직 인스턴스가 만들어지지 않았다면 &lt;code>private&lt;/code>으로 선언된 생성자를 사용하여 &lt;code>Singleton&lt;/code> 객체를 만든 다음 &lt;code>uniqueInstance&lt;/code>에 그 객체를 대입한다.&lt;/p>
&lt;p>이렇게 처리한다면 인스턴스가 필요한 상황이 닥치기 전까지 아예 인스턴스를 생성하지 않게 된다.&lt;/p>
&lt;p>이러한 방법을 **게으른 인스턴스 생성(lazyinstantation)**이라고 부른다.&lt;/p>
&lt;h2 id="싱글턴-패턴의-정의">싱글턴 패턴의 정의&lt;/h2>
&lt;blockquote>
&lt;p>**싱글턴 패턴(Singleton Pattern)**은 클래스 인스턴스를 하나만 만드록, 그 인스턴스로의 전역 접근을 제공한다.&lt;/p>
&lt;/blockquote>
&lt;p>싱글턴 패턴을 실제로 정용할 때는 클래스에서 하나뿐인 인스턴스를 관리하도록 만들면 된다.&lt;/p>
&lt;ul>
&lt;li>그리고 다른 어떤 클래스에서도 자신의 인스턴스를 추가로 만들지 못하게 해야한다.&lt;/li>
&lt;/ul>
&lt;p>어디서든 해당 인스턴스에 접근할 수 있도록 전역 접근 지점을 제공한다.&lt;/p>
&lt;ul>
&lt;li>언제든 해당 인스턴스가 필요하면 클래스에 요청할 수 있게 만들어 놓고, 요청이 들어오면 하나뿐인 인스턴스를 건네주도록 한다.&lt;/li>
&lt;li>자원을 많이 잡아먹는 인스턴스가 있다면 고전적인 싱글턴 처럼 게으른 방식으로 생성되도록 구현할 경우 유용할 수 있다.&lt;/li>
&lt;/ul>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Singleton {
static uniqueInstance: Singleton
static getInstance() Singleton
}
&lt;/pre>
&lt;p>싱글턴 패턴을 사용할 때는 일반적인 클래스를 만들 때와 마찬가지로 다양한 데이터와 메소드를 사용할 수 있다.&lt;/p>
&lt;h2 id="멀티-스레딩-문제">멀티 스레딩 문제&lt;/h2>
&lt;p>싱글턴 패턴을 사용할 때 인스턴스를 동시에 요청하는 상황에서 독립적인 인스턴스를 제공하지 못해 문제가 발생한다.&lt;/p>
&lt;p>이러한 문제는 자바는 &lt;code>getInstance&lt;/code>에 &lt;code>synchronized&lt;/code> 연산자를 추가하면, 메소드 사용 완료 후 요청하기 때문에 쉽게 해결이 가능하다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">uniqueInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Singleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">uniqueInstance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniqueInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">uniqueInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="더-효율적으로-멀티스레딩-문제-해결하기">더 효율적으로 멀티스레딩 문제 해결하기&lt;/h2>
&lt;p>&lt;code>synchronized&lt;/code> 연산자를 &lt;code>getInstance&lt;/code>에 적용하는 방법은 동기화로 인해 성능 저하가 발생할 수 있고, 싱글턴 패턴에서 멀티스레딩 문제가 발생하는 시점은 메소드가 시작되는 때 뿐이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>uniqueInstance&lt;/code> 변수에 할당이 완료되면, 항상 새로운 인스턴스를 생성하지 않기 때문에 동기화 처리는 불필요한 오버헤드를 증가시킨다.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>getInstance&lt;/code> 메소드의 성능이 중요하지 않다면 큰 문제가 이닐 수 있지만 메소드를 동기화하면 성능이 100배 정도 저하된다. 따라서 병목이 된다면 별도의 처리가 필요하다.&lt;/p>
&lt;h3 id="인스턴스-처음부터-만들기">인스턴스 처음부터 만들기&lt;/h3>
&lt;p>애플리케이션에서 &lt;code>Singleton&lt;/code>의 인스턴스를 생성하고 계속 사용하거나 인스턴스를 실행 중에 수시로 만들고 관리하기가 번거롭다면 아래와 같은 방식으로 처음부터 인스턴스를 만들 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">uniqueInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Singleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">uniqueInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이 방법은 클래스가 로딩될 때 JVM에서 &lt;code>Singleton&lt;/code>의 하나뿐인 인스턴스를 생성해주며, JVM에서 하나뿐인 인스턴스를 생성하기 전까지 그 어떤 스레드도 &lt;code>uniqueInstance&lt;/code> 정적 변수에 접근할 수 없다.&lt;/p>
&lt;h3 id="dcl을-통한-동기화-줄이기">DCL을 통한 동기화 줄이기&lt;/h3>
&lt;p>**DCL(Double-Checked Locking)**을 사용하면 인스턴스가 생서오디어 있는지 확인한 다음 생성되어 있지 않았을 때만 동기화 할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">uniqueInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Singleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">uniqueInstance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Singleton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">uniqueInstance&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uniqueInstance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">uniqueInstance&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>volatile&lt;/code> 키워드를 사용하면 멀티 스레딩을 쓰더라도 초기화되는 과정이 올바르게 진행된다.&lt;/li>
&lt;li>DCL은 자바 5보다 낮은 버전을 사용한다면 동기화가 제대로 안될 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="싱글턴-패턴의-문제">싱글턴 패턴의 문제&lt;/h2>
&lt;ul>
&lt;li>모든 메소드와 변수가 static으로 선언된 클래스를 만들어도 결과적으로 같지만 자바의 정적 초기화를 처리하는 방법으로 인해 디버깅이 어려울 수 있다.&lt;/li>
&lt;li>다른 이름의 클래스 로더가 2개 이상이라면 같은 클래스르 ㄹ여러 번 로딩하게되어 싱글턴에 적용 시 인스턴스가 여러개 만들어 질 수 있다.&lt;/li>
&lt;li>리플렉션, 직렬화, 역직렬화도 싱글턴에서 문제가 될 수 있다.&lt;/li>
&lt;li>Singleton에 의존하는 객체는 전부 하나의 객체에 단단하게 결합되므로 느슨한 결합 원칙에 위배된다.&lt;/li>
&lt;/ul>
&lt;h3 id="enum-활용하기">enum 활용하기&lt;/h3>
&lt;p>언급된 동기화 문데, 클래스 로딩 문제, 리플렉션, 직렬화와 역질렬화 문제 등은 enum으로 싱글턴을 생성해서 해결할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Singleton&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UNIQUE_INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SingletonClient&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Singleton&lt;/span> &lt;span class="n">singleton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Singleton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">UNIQUE_INSTANCE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>싱글턴 패턴은 클래스 인스턴스를 하나만 만들고 그 인스턴스로의 전역 접근을 제공하는 방법.&lt;/li>
&lt;li>어떤 클래스에 싱글턴 패턴을 적용하면 그 클래스의 인스턴스가 1개만 있도록 할 수 있다.&lt;/li>
&lt;li>싱글턴 패턴을 사용하면 하나뿐인 인스턴스를 어디서든지 접근할 수 있도록 할 수 있다.&lt;/li>
&lt;li>자바에서 싱글턴 패턴을 구현할 때는 private 생성자와 정적 메소드, 정적 변수를 사용한다.&lt;/li>
&lt;li>멀티 스레드를 사용하는 애플리케이션에서는 속도와 자원 문제를 파악해보고 적절한 구현법을 사용한다.
&lt;ul>
&lt;li>사실 모든 애플리케이션에서 멀티스레딩을 쓸 수 있다고 생각해야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DCL을 써서 구현하면 자바 5 이전에 나온 버전에서는 스레드 관련 문제가 생길 수 있다.&lt;/li>
&lt;li>클래스 로더가 여러 개 있으면 싱글턴이 제대로 작동하지 않고, 여러개의 인스턴스가 생길 수 있다.&lt;/li>
&lt;li>자바의 enum을 쓰면 간단하게 싱글턴을 구현할 수 있다.&lt;/li>
&lt;/ul></description></item><item><title>4. 팩토리 패턴</title><link>https://codemario318.github.io/post/gof/4/</link><pubDate>Sun, 29 Oct 2023 13:29:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/4/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/4/cover.png" alt="Featured image of post 4. 팩토리 패턴" />&lt;blockquote>
&lt;p>느슨한 결합으로 객체지향 디자인을 만들어봅시다.&lt;/p>
&lt;/blockquote>
&lt;p>팩토리 패턴은 객체를 생성하는 부분을 분리하여 캡슐화 하는 방식으로 유연성과 확장성이 뛰어난 구조를 제공한다.&lt;/p>
&lt;h2 id="팩토리">팩토리&lt;/h2>
&lt;p>객체의 인스턴스를 만드는 작업이 항상 공개되어야 하는 것은 아니며, 오히려 모든 것을 공개했을때 결합 문제가 발생할 수 있다.&lt;/p>
&lt;p>팩토리 패턴은 불필요한 의존성을 없애서 결합 문제를 해결하는데 도움을 줄 수 있다.&lt;/p>
&lt;hr>
&lt;p>&lt;code>new&lt;/code>를 사용하면 구상 클래스의 인스턴스가 만들어진다.&lt;/p>
&lt;p>인터페이스나 추상클래스 같은 상위 개념으로 타입을 선언한다고 하더라도, 결과적으로 구상클래스(하위 개념)을 할당하기 때문에 특정 구현에 의존된다고 볼 수 있다.&lt;/p>
&lt;ul>
&lt;li>구상 클래스를 바탕으로 코딩하면 나중에 코드를 수정해야 할 가능성이 커지고, 유연성이 떨어진다.&lt;/li>
&lt;/ul>
&lt;p>여러 구상 클래스가 있고 특정 상황에서 선택하여 만들어야 할 상황이라면 아래와 같은 코드를 만들어야한다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* 1장 예시 SimDuck 참조 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Duck&lt;/span> &lt;span class="n">duck&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">picnic&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">duck&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MallardDuck&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">hunting&lt;/span>&lt;span class="o">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">duck&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DecoyDuck&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">inBathTub&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">duck&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RubberDuck&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>이런 코드를 변경하거나 확장해야 할 때는 코드를 다시 확인하고 새로운 코드를 추가하거나 기존 코드를 제거해야 한다.&lt;/p>
&lt;p>따라서 이런한 방식으로 만들면 관리와 갱신이 어려워지고 오류가 생길 가능성도 커진다.&lt;/p>
&lt;h3 id="근본-원인">근본 원인&lt;/h3>
&lt;p>&lt;code>new&lt;/code> 연산자로 오브젝트를 만들때 문제가 발생하는 근본적인 원인은 &lt;strong>변화&lt;/strong> 때문이다.&lt;/p>
&lt;p>인터페이스에 맞춰 코딩하면 시스템에서 일어날 수 있는 여러 변화에 대응할 수 있는 이유는 어떤 클래스든 특정 인터페이스만 구현하면 사용할 수 있는 &lt;strong>다형성&lt;/strong> 덕뿐이다.&lt;/p>
&lt;p>이와 반대로 구상 클래스를 많이 사용하면 &lt;strong>변경에 닫혀있기 때문에&lt;/strong> 새로운 구상 클래스가 추가될 때마다 즉, 변화할 때마다 코드를 고쳐야 하므로 많은 문제가 생길 수 있다.&lt;/p>
&lt;p>이 때문에 새로운 구상 형식을 써서 확장해야 할 때는 어떻게 해서든 다시 &lt;strong>열 수 있게 만들어야 하며&lt;/strong>, 결과적으로 구상 클래스의 인스턴스 생성 부분을 분리해야 한다.&lt;/p>
&lt;p>이렇게 분리되어 &lt;strong>객체 생성을 전담하는 영역을 팩토리&lt;/strong>라고 한다.&lt;/p>
&lt;h2 id="의존성-뒤집기-원칙">의존성 뒤집기 원칙&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>디자인 원칙&lt;/strong>&lt;br>
추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다.&lt;/p>
&lt;/blockquote>
&lt;p>의존성 뒤집기 원칙은 고수준 구성 요소가 저수준 구성 요소에 의존하면 안되며, 항상 추상화에 의존하게 만들어야 한다는 것을 의미한다.&lt;/p>
&lt;ul>
&lt;li>구현보다는 인터페이스에 맞춰 프로그래밍한다라는 원칙과 유사한 점이 많지만 의존성 뒤집기 원칙에서는 추상화를 더 많이 강조한다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>개발에서 고수준과 저수준의 기준은 기계가 이해할 수 있는가를 기준으로 설명하며, 기계쪽에 가까울수록 저수준을 의미한다.&lt;/p>
&lt;ul>
&lt;li>즉, 추상 클래스와 인터페이스 등을 이용한 추상화된 개념일수록 고수준이고, 컴퓨터가 해석해서 실행하게되는 코드 부분(구상 클래스)에 가까울수록 저수준이다.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;pre class="mermaid" style="text-align: center;">flowchart
a([특정 기능을 선택해야하는 요소])
a --> b([기능 A])
a --> c([기능 B])
a --> d([기능 C])
a --> e([기능 D])
&lt;/pre>
&lt;p>팩토리 형식의 구현에서 위와 같이 고수준 구성 요소에서 분기를 통해 특정 구상 클래스를 직접 선택하는 형태는 저수준 요소에 의존하고 있기 때문에 구상 클래스의 종류가 추가되거나, 구상 클래스의 구현이 바뀐다면 의존하고있는 고수준 요소의 수정이 필요하다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart BT
a([특정 기능을 선택해야하는 요소])
f([기능 추상화])
b([기능 A]) --> f
c([기능 B]) --> f
d([기능 C]) --> f
e([기능 D]) --> f
f &lt;--> a
&lt;/pre>
&lt;p>따라서 분기를 통해 특정 구상 클래스를 선택해야 하는 구현을 피할 수 없다면 의존성 뒤집기를 통해 구상 클래스들의 공통되는 부분들을 모아 상위 요소(인터페이스, 추상 클래스)를 만들어 의존하게 팩토리를 구성하고, 해당 기능이 필요한 요소에서 만들어진 팩토리를 의존하도록 하는 방식을 제안하고 있다.&lt;/p>
&lt;h3 id="의존성-뒤집기-원칙을-지키는-방법">의존성 뒤집기 원칙을 지키는 방법&lt;/h3>
&lt;p>다음 가이드라인을 따르면 의존성 뒤집기 원칙에 위배되는 객체지향 디자인을 피하는데 도움이된다.&lt;/p>
&lt;ul>
&lt;li>변수에 구상 클래스의 레퍼런스를 저장하지 않는다.
&lt;ul>
&lt;li>&lt;code>new&lt;/code> 연산자를 사용하면 구상 클래스의 레퍼런스를 사용하게된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구상 클래스에서 유도된 클래스를 만들지 않는다.
&lt;ul>
&lt;li>구상클래스에서 유도된 클래스를 만들면 특정 구상 클래스에 의존하게된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>베이스 클래스에 이미 구현되어 있는 메소드를 오버라이드하지 않는다.
&lt;ul>
&lt;li>베이스 클래스가 제대로 추상화되지 않는다. 모든 서브클래스에서 공유할 수 있는 것만 정리가 필요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="간단한-팩토리">간단한 팩토리&lt;/h2>
&lt;blockquote>
&lt;p>간단한 팩토리(Simple Factory)는 디자인 패턴이라기 보다는 프로그래밍에서 자주 쓰이는 &lt;strong>관용구&lt;/strong>에 가깝다.&lt;/p>
&lt;/blockquote>
&lt;p>간단한 팩토리는 단순히 객체 생성 부분을 전담한다.&lt;/p>
&lt;ul>
&lt;li>객체 생성 부분은 공통으로 사용될 수 있기 때문에 팩토리로 캡슐화해 놓으면 구현을 변경할 때 팩토리 하나만 고치면 된다.&lt;/li>
&lt;/ul>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Client {
useProduct()
}
class SimpleProductFactory {
createProduct()
}
class Product {
&lt;&lt; interface >>
action()*
}
class ConcreteProductA {
action()
}
class ConcreteProductB {
action()
}
class ConcreteProductC {
action()
}
Client ..|> SimpleProductFactory
SimpleProductFactory ..> Product
Product &lt;|-- ConcreteProductA
Product &lt;|-- ConcreteProductB
Product &lt;|-- ConcreteProductC
&lt;/pre>
&lt;ul>
&lt;li>Client: 팩토리를 사용하는 클라이언트
&lt;ul>
&lt;li>팩토리를 통해 Product의 구상 클래스 오브젝트를 받음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SimplePizzaFactory: Product 객체를 참조하는 팩토리
&lt;ul>
&lt;li>유일하게 구상 Product 클래스를 직접 참조함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Product: 팩토리에서 생산하는 구상 클래스들의 인터페이스&lt;/li>
&lt;li>ConcreteProduct: 팩토리에서 생산하는 제품에 해당하는 구상 클래스
&lt;ul>
&lt;li>Product 인터페이스를 구현해야 한다.&lt;/li>
&lt;li>구상 클래스여야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="최첨단-피자-가게의-문제">최첨단 피자 가게의 문제&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Pizza&lt;/span> &lt;span class="nf">orderPizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pizza&lt;/span> &lt;span class="n">pizza&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 인스턴스를 만드는 구상 클래스를 선택
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cheese&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CheesePizza&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;greek&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">GreekPizza&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;pepperoni&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PepperoniPizza&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepare&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bake&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cut&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">box&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">pizza&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>orderPizza()&lt;/code>에서 가장 문제가 되는 부분은 &lt;strong>인스턴스를 만드는 구상 클래스를 선택하는 부분&lt;/strong>이다.&lt;/p>
&lt;ul>
&lt;li>위 코드에서 피자 가게의 메뉴를 변경하려면 직접 코드를 수정해야한다. 즉 변경에 닫혀있지 않다.&lt;/li>
&lt;/ul>
&lt;p>변경되는 부분인 객체 생성 영역을 별도로 분리할 수 있다.&lt;/p>
&lt;h3 id="최첨단-피자-가게에-적용">최첨단 피자 가게에 적용&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SimplePizzaFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Pizza&lt;/span> &lt;span class="nf">createPizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cheese&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">CheesePizza&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;greek&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">GreekPizza&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;pepperoni&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PepperoniPizza&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">Exeption&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PizzaStore&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SimplePizzaFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Pizza&lt;/span> &lt;span class="nf">orderPizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pizza&lt;/span> &lt;span class="n">pizza&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createPizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepare&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bake&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cut&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">box&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">pizza&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="팩토리-메소드-패턴">팩토리 메소드 패턴&lt;/h2>
&lt;blockquote>
&lt;p>팩토리 메소드 패턴(Factory Method Pattern)에서는 객체를 생성할 때 필요한 인터페이스를 만든다.&lt;br>
어떤 클래스의 인스턴스를 만들지는 서브 클래스에서 결정하기 때문에 클래스 인스턴스 만드는 일을 서브 클래스에게 맡기게 된다.&lt;/p>
&lt;/blockquote>
&lt;p>모든 팩토리 패턴은 객체 생성을 캡슐화한다.&lt;/p>
&lt;p>팩토리 메소드 패턴은 팩토리를 별도 클래스로 분리하지 않고 &lt;strong>생산 클래스 내부에 인터페이스로 팩토리 형식을 구현하도록 하여 객체 생성을 전담하는 방식으로 캡슐화를 수행&lt;/strong>한다.&lt;/p>
&lt;ul>
&lt;li>팩토리가 필요한 요소에서 자신의 메소드를 이용하여 팩토리를 구성하는 방식&lt;/li>
&lt;/ul>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Creator {
&lt;&lt; abstract >>
factoryMethod()*
anOperation()
}
class ConcreteCreator {
factoryMethod()
}
class Product {
&lt;&lt; abstract >>
}
class ConcreteProduct
Product &lt;|-- ConcreteProduct
Creator &lt;|-- ConcreteCreator
ConcreteCreator ..|> ConcreteProduct
&lt;/pre>
&lt;ul>
&lt;li>Creator: 추상 클래스로 제품으로 원하는 일을 할 때 필요한 모든 메소드가 구현됨
&lt;ul>
&lt;li>하지만 제품을 만들어 주는 팩토리 메소드는 추상 메소드로 정의되어 있을 뿐 구현되어 있지 않음.&lt;/li>
&lt;li>추상 메소드인 &lt;code>factoryMethod()&lt;/code>을 서브클래스에서 직접 구현해야함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ConcreteCreator: 실제로 제품을 생산하는 &lt;code>factoryMetFhod()&lt;/code>를 구현
&lt;ul>
&lt;li>구상 클래스 인스턴스를 만드는 일을 책임진다.&lt;/li>
&lt;li>실제 제품을 만드는 방법을 알고 있는 클래스는 이 클래스 뿐이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Product: 제품 클래스로 모두 똑같은 인터페이스를 구현해야 함
&lt;ul>
&lt;li>그 제품을 사용할 클래스에서 구상 클래스가 아닌 인터페이스의 레퍼런스로 객체를 참조하게 만들 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Creator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Product&lt;/span> &lt;span class="nf">anOperation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Product&lt;/span> &lt;span class="n">product&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">product&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">factoryMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* somethimg */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">product&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="n">Product&lt;/span> &lt;span class="nf">factoryMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Creator 추상 클래스에서 추상 메소드로 팩토리 메소드용 인터페이스(&lt;code>factoryMethod()&lt;/code>)를 제공한다.&lt;/p>
&lt;p>Creator 추상 클래스에 구현되어 있는 다른 메소드는 팩토리 메소드에 의해 생산된 제품으로 필요한 작업을 처리한다. 팩토리 메소드가 추상 메소드로 선언되었기 때문에 실제 팩토리 메소드를 구현하고 객체 인스턴스를 만드는 일은 서브클래스에서만 할 수 있다.&lt;/p>
&lt;ul>
&lt;li>팩토리 메소드를 추상 메소드로 선언해서 서브클래스가 객체 생성을 책임지도록 한다.
&lt;ul>
&lt;li>팩토리 메소드는 클라이언트에서 실제로 생성되는 구상 객체가 무엇인지 알 수 없게 만드는 역할도 겸하게된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>팩토리 메소드는 특정 객체를 리턴하며, 그 객체는 보통 슈퍼클래스가 정의한 메소드 내에서 쓰인다.&lt;/li>
&lt;li>매개변수로 만들 객체의 종류를 선택하게 할 수 있다.&lt;/li>
&lt;/ul>
&lt;p>생산자 추상 클래스가 실제 생산될 인스턴스를 전혀 알 수 없고, 사용하는 서브클래스에 따라 생산되는 객체 인스턴스가 정해지기 때문에, 어떤 클래스의 인스턴스를 만들지를 서브클래스에서 결정한다고 표현한다.&lt;/p>
&lt;h3 id="병렬-클래스-계층구조">병렬 클래스 계층구조&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction TD
namespace 생산자 클래스 {
class Creator {
&lt;&lt; abstract >>
create()* Product
useProduct()
}
class ConcreteCreatorA {
create() Product
}
class ConcreteCreatorB {
create() Product
}
}
namespace 제품 클래스 {
class Product {
&lt;&lt; abstract >>
}
class ConcreteProductA1
class ConcreteProductA2
class ConcreteProductB1
class ConcreteProductB2
}
Creator &lt;|-- ConcreteCreatorA
Creator &lt;|-- ConcreteCreatorB
Product &lt;|-- ConcreteProductA1
Product &lt;|-- ConcreteProductB1
ConcreteProductA1 .. ConcreteProductA2
ConcreteProductB1 .. ConcreteProductB2
ConcreteCreatorA &lt;--> ConcreteProductA1
ConcreteCreatorB &lt;--> ConcreteProductB1
ConcreteCreatorA &lt;--> ConcreteProductA2
ConcreteCreatorB &lt;--> ConcreteProductB2
&lt;/pre>
&lt;ul>
&lt;li>Creator: 서브클래스에서 객체를 생산하려고 구현하는 팩토리 메소드의 추상 클래스
&lt;ul>
&lt;li>제품 클래스의 객체는 클래스의 서브클래스로 만들어지므로 생산자 자체는 어떤 구상 제품 클래스가 만들어질지 미리 알 수 없다.&lt;/li>
&lt;li>생산자 클래스에 추상 제품 크래스에 의존하는 코드가 들어있을 때도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ConcreteCreator: 팩토리 메소드로 해당 메소드에서 객체를 생산하는 구상 생산자.&lt;/li>
&lt;li>Product: 팩토리가 생산하게 될 제품의 인터페이스&lt;/li>
&lt;li>ConcreteProduct: 팩토리가 생산하게 될 제품&lt;/li>
&lt;/ul>
&lt;p>구상 제품은 구상 생산자가 만들어야 할 많은 제품들이고, 구상 생산자 팩토리 메소드를 이용해 많은 구상 제품들 중 필요한 제품을 선택하게 된다.&lt;/p>
&lt;p>이처럼 특정 구상 생산자가 팩토리 메소드로 특정 제품군을 만드는 모든 방법을 캡슐화 되어있게되는 병렬 클래스 계층 구조를 가지게 된다.&lt;/p>
&lt;h3 id="간단한-팩토리와-차이점">간단한 팩토리와 차이점&lt;/h3>
&lt;p>간단한 팩토리는 특정 생산자에서만 사용할 수 있는 반면, 팩토리 메소드 패턴은 더 유연하고 재사용 가능한 설계를 할 수 있다.&lt;/p>
&lt;ul>
&lt;li>생산자 클래스의 서브 클래스로 어떤 구상 제품을 만들지 결정하기 때문에 생성하는 제품을 마음대로 변경하기 쉽다.&lt;/li>
&lt;li>추상 클래스의 내부 메소드 구현을 통해 동작을 일반화하여 여러 번 재사용이 가능한 프레임워크를 만들 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="피자-가게-프레임워크-만들기">피자 가게 프레임워크 만들기&lt;/h3>
&lt;p>팩토리 메소드 패턴을 통해 다양한 팩토리를 구성할 수 있고, 이를 통해 특색있는 피자 가게 지점을 만들 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;span class="lnt">87
&lt;/span>&lt;span class="lnt">88
&lt;/span>&lt;span class="lnt">89
&lt;/span>&lt;span class="lnt">90
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Pizza&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">dough&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">sauce&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">toppings&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">prepare&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;준비중: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;도우 만들기...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;소스 뿌리기...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;토핑 올리기:&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">topping&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">toppings&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">topping&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">bake&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;굽기&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">cut&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;자르기&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">box&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;담기&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NYStyleCheesePizza&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Pizza&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">NYStyleCheesePizza&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;뉴욕 스타일 치즈 피자&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dough&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;씬 크러스트&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sauce&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;마리나라&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">toppings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;레지아노 치즈&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ChicagoStyleCheesePizza&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Pizza&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">NYStyleCheesePizza&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;시카고 스타일 치즈 피자&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dough&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;두꺼운 크러스트&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sauce&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;플럼 토마토&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">toppings&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;모짜렐라 치즈&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@java.lang.Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">cut&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;네모난 모양으로 자르기&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PizzaStore&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Pizza&lt;/span> &lt;span class="nf">orderPizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pizza&lt;/span> &lt;span class="n">pizza&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cratePizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">prepare&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bake&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cut&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pizza&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">box&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">pizza&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">protected&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="n">Pizza&lt;/span> &lt;span class="nf">createPizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">NYPizzaStore&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">PizzaStore&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pizza&lt;/span> &lt;span class="nf">createPizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cheese&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">NYStyleCheesePizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cheese&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ChicagoPizzaStore&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">PizzaStore&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Pizza&lt;/span> &lt;span class="nf">createPizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cheese&amp;#34;&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ChicagoStyleCheesePizza&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;cheese&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="추상-팩토리-패턴">추상 팩토리 패턴&lt;/h2>
&lt;blockquote>
&lt;p>구상 클래스에 의존하지 않고도 서로 연관되거나 의존적인 객체로 이루어진 제품군을 생산하는 인터페이스를 제공한다.&lt;br>
구상 클래스는 서브클래스에서 만들게된다.&lt;/p>
&lt;/blockquote>
&lt;p>추상 팩토리 패턴을 사용하면 클라이언트에서 추상 인터페이스로 일련의 제품을 공급받을수 있다.&lt;/p>
&lt;p>이때, 실제로 어떤 제품이 생산되는지는 전혀 알 필요가 없다. 따라서 클라이언트와 팩토리에서 생산되는 제품을 분리할 수 있게된다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction TD
class Client {
}
class AbstractFactory {
&lt;&lt; interface >>
CreateProductA()*
CreateProductB()*
}
class ConcreteFactory1 {
CreateProductA()
CreateProductB()
}
class ConcreteFactory2 {
CreateProductA()
CreateProductB()
}
class AbstractProductA {
&lt;&lt; interface >>
}
class ProductA1 {
}
class ProductA2 {
}
class AbstractProductB {
&lt;&lt; interface >>
}
class ProductB1 {
}
class ProductB2 {
}
Client --> AbstractFactory
Client --> AbstractProductA
Client --> AbstractProductB
AbstractFactory &lt;|-- ConcreteFactory1
AbstractFactory &lt;|-- ConcreteFactory2
AbstractProductA &lt;|-- ProductA1
AbstractProductA &lt;|-- ProductA2
AbstractProductB &lt;|-- ProductB1
AbstractProductB &lt;|-- ProductB2
ConcreteFactory1 --> ProductA1
ConcreteFactory1 --> ProductB1
ConcreteFactory2 --> ProductA2
ConcreteFactory2 --> ProductB2
&lt;/pre>
&lt;p>추상 팩토리가 일련의 제품을 만드는 데 쓰이는 인터페이스를 정의하려고 만들어졌기 때문에 추상 팩토리 패턴의 메소드가 팩토리 메소드로 구현되는 경우도 종종 있다.&lt;/p>
&lt;p>해당 인터페이스에 있는 각 메소드는 구상 제품을 생산하는 일을 맡고, 추상 팩토리의 서브클래스를 만들어서 각 메소드의 구현을 제공하게된다.&lt;/p>
&lt;h2 id="팩토리-패턴-활용법">팩토리 패턴 활용법&lt;/h2>
&lt;p>어떤 패턴을 쓰든 객체 생성을 캡슐화해서 애플리케이션의 결함을 느슨하게 만드록, 특정 구현에 덜 의존하도록 만들 수 있다.&lt;/p>
&lt;p>팩토리 메소드 패턴, 추상 팩토리 패턴 모두 애플리케이션을 특정 구현으로부터 분리하는 역할을 하지만 방법이 다르기때문에 용도에 맞게 활용한다.&lt;/p>
&lt;ul>
&lt;li>팩토리 메소드 패턴: 클라이언트 코드와 인스턴스를 만들어야 할 구상 클래스를 분리시켜야 할 때 유용하다.
&lt;ul>
&lt;li>클래스를 써서 제품을 만든다.
&lt;ul>
&lt;li>상속을 이용하여 객체를 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>서브클래스로 객체를 만들기 위해 클래스를 확장하고 팩토리 메소드를 오버라이드해야 한다.
&lt;ul>
&lt;li>자신이 사용할 추상 형식만 알면 되므로 클라이언트와 구상 형식을 분리하게된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>한 가지 제품만 생산하므로 복잡한 인터페이스도 필요하지 않고 메소드도 하나만 있으면 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>추상 팩토리 패턴: 클라이언트에서 서로 연관된 일련의 제품을 만들어야 할 때, 즉 제품군을 만들어야 할 때 활용하기 좋다.
&lt;ul>
&lt;li>객체를 써서 제품을 만든다.
&lt;ul>
&lt;li>객체 구성(composition)을 이용하여 객체를 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>제품군을 만드는 추상 형식을 제공하고 제품이 생상되는 방법을 이 형식의 서브클래스에서 정의한다.
&lt;ul>
&lt;li>팩토리를 사용하려면 인스턴스를 만든 다음 추상 형식을 써서 만든 코드에 전달하는 방식으로 클라이언트와 구상 제품을 분리한다.&lt;/li>
&lt;li>제품군에 제품을 추가하는 등의 관련 제품을 확대해야 할 경우에 인터페이스를 바꿔야한다.&lt;/li>
&lt;li>많은 제품들을 포함하는 제품 군을 생성하기 때문에 인터페이스가 아주 큰 편이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="디자인-도구상자-안에-들어가야할-도구들">디자인 도구상자 안에 들어가야할 도구들&lt;/h2>
&lt;ul>
&lt;li>객체지향 원칙
&lt;ul>
&lt;li>추상화된 것에 의존하게 만드록 구상 클래스에 의존하지 않게 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>추상 팩토리 패턴
&lt;ul>
&lt;li>구상 클래스에 의존하지 않고도 서로 연관되거나 의존적인 객체로 이루어진 제품군을 생성하는 인터페이스를 제공한다.&lt;/li>
&lt;li>구상 클래스는 서브클래스에서 만든다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>팩토리 메소드 패턴
&lt;ul>
&lt;li>객체를 생성할 때 필요한 인터페이스를 만든다.&lt;/li>
&lt;li>어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정한다.&lt;/li>
&lt;li>팩토리 메소드를 사용하면 인스턴스 만드는 일을 서브클래스에 맡길 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="핵심-정리">핵심 정리&lt;/h2>
&lt;ul>
&lt;li>팩토리를 쓰면 객체 생성을 캡슐화할 수 있다.&lt;/li>
&lt;li>간단한 팩토리는 엄밀하게 말해서 디자인 패턴은 아니지만, 클라이언트와 구상 클래스를 분리하는 간단한 기법으로 활용할 수 있다.&lt;/li>
&lt;li>팩토리 메소드 패턴은 상속을 활용한다.
&lt;ul>
&lt;li>객체 생성을 서브클래스에게 맡기고, 서브클래스는 팩토리 메소드를 구현해서 객체를 생산한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>추상 팩토리 패턴은 객체 구성을 활용한다.
&lt;ul>
&lt;li>팩토리 인터페이스에서 선언한 메소드에서 객체 생성이 구현된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>모든 팩토리 패턴은 애플리케이션의 구상 클래스 의존성을 줄여줌으로써 느슨한 결합을 도와준다.&lt;/li>
&lt;li>팩토리 메소드 패턴은 특정 클래스에서 인스턴스를 만드는 일을 서브클래스에게 넘긴다.&lt;/li>
&lt;li>추상 팩토리 패턴은 구상 클래스에 직접 의존하지 않고도 서로 관련된 객체로 이루어진 제품군을 만드는 용도로 쓰인다.&lt;/li>
&lt;li>의존성 뒤집기 윈칙을 따르면 구상 형식 의존을 피하고 추상화를 지향할 수 있다.&lt;/li>
&lt;li>팩토리는 구상 클래스가 아닌 추상 클래스와 인터페이스에 맞춰서 코딩할 수 있게 해주는 강력한 기법이다.&lt;/li>
&lt;/ul></description></item><item><title>3. 데코레이터 패턴</title><link>https://codemario318.github.io/post/gof/3/</link><pubDate>Mon, 02 Oct 2023 14:29:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/3/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/3/cover.png" alt="Featured image of post 3. 데코레이터 패턴" />&lt;p>데코레이터 패턴은 객체 작성이라는 형식으로 실행 중에 클래스를 꾸미는 방법이다.&lt;/p>
&lt;p>데코레이터 패턴을 활용하면 기존 클래스 코드를 바꾸지 않고도 객체에 새로운 임무를 추가할 수 있다.&lt;/p>
&lt;h2 id="데코레이터-패턴">데코레이터 패턴&lt;/h2>
&lt;p>데코레이터 패턴은 기존 코드를 건드리지 않고 확장으로 새로운 행동을 추가하는 것이 목적이다. 이를 통해 새로운 기능을 추가할 때 급변하는 주변 환경에 작 적응하는 유연하고 튼튼한 디자인을 만들 수 있다.&lt;/p>
&lt;h3 id="ocpopen-close-principle-살펴보기">OCP(Open-Close Principle) 살펴보기&lt;/h3>
&lt;blockquote>
&lt;p>클래스는 확장에는 열려있어야 하지만 변경에는 닫혀 있어야 한다.&lt;/p>
&lt;/blockquote>
&lt;p>확정에는 열려있고 변경에는 닫혀있다는 것은 모순처럼 보일 수 있으나 코드를 변경하지 않아도 시스템을 확장하게 해 주는 객체지향 기법은 많다.(ex. 옵저버 패턴)&lt;/p>
&lt;p>데코레이터 패턴도 이 중 하나로 확장하려고 코드를 직접 수정하는 일을 방지하는 방법을 제공한다.&lt;/p>
&lt;blockquote>
&lt;p>모든 부분에서 OCP를 준수하는 것은 불가능하다.&lt;br>
OCP를 준수하는 객체지향 디자인을 만들려면 많은 노력이 필요하고, 디자인의 모든 부분을 깔끔하게 정돈할 만큼 여유가 있는 상황도 흔치 않다(굳이 그렇게 할 필요가 없다).&lt;br>
따라서 디자인한 것 중에서 가장 바뀔 가능성이 높은 부분을 중점적으로 살펴보고 OCP를 적용하는 방법이 가장 좋다.&lt;/p>
&lt;/blockquote>
&lt;p>코드에서 확장해야 할 부분을 선택할 때는 세심한 주의가 필요하다.&lt;/p>
&lt;ul>
&lt;li>무조건 OCP를 적용한다면 쓸데없는 일을 하며 시간을 낭비할 수 있다.&lt;/li>
&lt;li>필요 이상으로 복잡하고 이해하기 힘든 코드를 만드렉 될 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="데코레이터-패턴-살펴보기">데코레이터 패턴 살펴보기&lt;/h3>
&lt;p>이후 예시에서 설명할 스타버즈에서 음료 가격과 첨가물 가격을 합해 총 가격을 산출하는 방법은 좋은 방법이 아니었다.&lt;/p>
&lt;ul>
&lt;li>클래스가 매우 많아진다.&lt;/li>
&lt;li>일부 서브클래스에는 적합하지 않은 기능을 추가해야 한다.&lt;/li>
&lt;/ul>
&lt;p>일단 기본 단위에서 시작하여 추가되는 요소들로 최소 단위를 장식(decorate)하는 방법을 고려할 수 있다.&lt;/p>
&lt;ol>
&lt;li>가장 기본이 되는 객체를 가져온다.&lt;/li>
&lt;li>추가되는 요소들로 장식한다.&lt;/li>
&lt;li>최종 결과물을 만들어내는 메소드를 호출한다.
&lt;ul>
&lt;li>추가 요소들의 결과를 만드는 일은 해당 객체에게 위임한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>데코레이터 패턴은 위와 같은 방식을 추가되는 요소 객체로 래핑하는 방식으로 구현한다.&lt;/p>
&lt;ul>
&lt;li>데코레이터의 슈퍼클래스는 자신이 장식하고 있는 객체의 슈퍼클래스와 같다.&lt;/li>
&lt;li>한 객체를 여러개의 데코레이터로 감쌀 수 있다.&lt;/li>
&lt;li>데코레이터는 자신이 감싸고 있는 객체와 같은 슈퍼클래스를 가지고 있기에 원래 객체가 들어갈 자리에 데코레이터 객체를 넣어도 상관없다.&lt;/li>
&lt;li>&lt;strong>데코레이터는 자신이 장식하고 있는 객체에게 어떤 행동을 위임하는 일 말고도 추가 작업을 수행할 수 있다.&lt;/strong>&lt;/li>
&lt;li>객체는 언제든 감쌀 수 있으므로 실행 중에 필요한 데코레이터를 마음대로 적용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="데코레이터-패턴의-정의">데코레이터 패턴의 정의&lt;/h3>
&lt;blockquote>
&lt;p>데코레이터 패턴으로 객체에 추가 요소를 동적으로 더할 수 있다.&lt;br>
데코레이터를 사용하면 서브클래스를 만들 때보다 훨씬 유연하게 기능을 확장할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Component {
methodA()
methodB()
}
class ConcreteComponent {
methodA()
methodB()
}
class Decorator {
Component wrappedObj
methodA()
methodB()
}
class ConcreteDecoratorA {
methodA()
methodB()
newBehavior()
}
class ConcreteDecoratorB {
Object newState
methodA()
methodB()
newBehavior()
}
Component &lt;-- ConcreteComponent
Component &lt;-- Decorator
Component &lt;.. Decorator : 구성 요소
Decorator &lt;-- ConcreteDecoratorA
Decorator &lt;-- ConcreteDecoratorB
&lt;/pre>
&lt;ul>
&lt;li>Component: 각 구성 요소는 직접 쓰일 수 있고 데코레이터에 감싸여 쓰일 수도 있다.&lt;/li>
&lt;li>ConcreteComponent: 새로운 행동을 동적으로 추가한다.&lt;/li>
&lt;li>Decorator: 자신이 장식할 구성 요소와 같은 인터페이스 또는 추상 클래스를 구현한다.
&lt;ul>
&lt;li>각 데코레이터 안에는 Component 객체가 들어있어야 하므로 구성 요소의 레퍼런스를 포함한 인스턴스 변수가 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ConcreteDecorator: 데코레이터가 감싸고 있는 Component 객체용 인스턴스 변수가 있으며 Component의 상태를 확장할 수 있다.
&lt;ul>
&lt;li>데코레이터가 사로운 메소드를 추가할 수도 있으나 일반적으로 새로운 메소드를 추가하는 대신 Component에 원래 있던 메소드를 별도의 작업으로 처리하여 새로운 기능을 추가한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="데코레이터의-상속과-구성">데코레이터의 상속과 구성&lt;/h3>
&lt;p>데코레이터에서는 전략 패턴처럼 구성을 이용하여 행동을 분리하지 않고, 데코레이터로 감싸는 객체의 형식과 같게 구성하여, 상속을 통해 형식을 맞추게 된다.&lt;/p>
&lt;ul>
&lt;li>상속으로 행동을 물려받지 않고, 어떠한 구성 요소를 가지고 데코레이터를 만들 때 새로운 행동을 추가한다.
&lt;ul>
&lt;li>추상 클래스, 인터페이스 등으로 형식을 맞추고 상속을 통해 행동을 구현하도록 하여 구성을 이용하게 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데코레이터를 감싸기 위해 만든 인스턴스 변수에 저장되는 데코레이터에 행동을 구현하여 할당하는 방식으로 구성을 이용한다.&lt;/li>
&lt;li>객체의 구성(인스턴스 변수로 다른 객체를 저장하는 방식)을 이용하고 있으므로, 데코레이터가 다양하게 추가되어도 유연성을 잃지 않을 수 있게 된다.
&lt;ul>
&lt;li>상속만 써야 했다면 행동이 컴파일 시 슈퍼클래스에서 받은 것과 코드로 오버라이드 한 것만 쓸수 있게 정적으로 결정되어 버린다.&lt;/li>
&lt;li>데코레이터가 감싼 데코레이터의 동작을 구현하는 것으로 구성을 활용하면 실행 중에 원하는 데코레이터를 마음대로 조합해서 사용할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="데코레이터의-단점">데코레이터의 단점&lt;/h3>
&lt;p>&lt;strong>java.io 패키지&lt;/strong>&lt;/p>
&lt;p>&lt;code>java.io&lt;/code> 패키지는 파일에서 데이터를 읽어오는 스트림에 기능을 더하는 데코레이터를 사용하는 객체로 구성되어 있어 굉장히 많은 클래스가 있다.&lt;/p>
&lt;p>추상 데코레이터 클래스(추상 구성 요소) 역할을 수행하는 &lt;code>InputStream&lt;/code>을 꾸미는 &lt;code>FilterInputStream&lt;/code>와 &lt;code>FilterInputStream&lt;/code>를 꾸미는 &lt;code>BufferedInputStream&lt;/code>, &lt;code>ZipInputStream&lt;/code> 을 꾸미는 형식으로 계속 확장하는 방식으로 설계되어 있다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart BT
a[InputStream]
aa[FileInputStream]
b[StringBufferInputStream]
c[ByteArrayInputStream]
d[FilterInputStream]
e[PushbackInputStream]
f[BufferedInputStream]
g[DataInputStream]
h[InflatorInputStream]
i[ZipInputStream]
i --> h
e --> d
f --> d
g --> d
h --> d
aa --> a
b --> a
c --> a
d --> a
&lt;/pre>
&lt;p>결과적으로 만들어져 있는 많은 클래스들이 &lt;code>InputSteram&lt;/code>을 감싸 주는 래퍼 클래스로 작동하게 된다.&lt;/p>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>잡다한 클래스가 너무 많아진다.&lt;/p>
&lt;ul>
&lt;li>데코레이터가 어떤 식으로 작동하는지 이해하면 다른 사람이 구현한 데코레이터 패턴을 활용해도 개발하기 쉽다.
&lt;ul>
&lt;li>잘 모든다면 활용하기 어렵다.&lt;/li>
&lt;li>클래스가 어떤 식으로 구성되어 있는지를 먼저 파악해야 사용하기 쉽다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>특정 형식에 의존하는 코드에 데코레이터 패턴을 적용하면 엉망이 될 수 있다.&lt;/p>
&lt;ul>
&lt;li>데코레이터의 장점인 &lt;strong>데코레이터를 끼워 넣어도 클라이언트는 데코레이터를 사용하고 있다는 사실을 전혀 알 수 없다&lt;/strong>는 장점을 누릴 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>구성 요소를 초기화하는 데 필요한 코드가 훨씬 복잡해진다.&lt;/p>
&lt;ul>
&lt;li>구성 요소 인스턴스만 만든다고 끊나지 않고 많은 데코레이터로 감싸야 하는 경우가 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>구상 구성 요소로 어떤 작업을 처리하는 코드에 데코레이터 패턴을 적용하면 코드가 제대로 작동하지 않고, 반대로 추상 구성 요소로 돌아가는 코드에는 데코레이터 패턴을 적용해야만 제대로된 결과를 얻을 수 있다.&lt;/p>
&lt;ul>
&lt;li>구상 구성 요소로 돌아가는 코드를 만들어야 한다면 데코레이터 패턴 사용을 다시 한번 생각해봐야한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>데코레이터 패턴을 쓰면 관리해야 할 객체가 늘어나므로 실수할 가능성도 높아질 수 있다.&lt;/p>
&lt;ul>
&lt;li>실제로는 팩토리나 빌더 같은 다른 패턴으로 데코레이터를 만들고 사용하게된다.&lt;/li>
&lt;li>이러한 패턴을 배운다면 데코레이터로 장식된 구상 구성 요소는 캡슐화가 잘 되므로 실수할 가능성을 줄이게된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="초대형-커피-전문점-스타버즈">초대형 커피 전문점, 스타버즈&lt;/h2>
&lt;h3 id="최초-주문-시스템">최초 주문 시스템&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Beverage {
description
getDescription()
cost()
}
class HouseBlend {
cost()
}
class DarkRoast {
cost()
}
class Decaf {
cost()
}
class Espresso {
cost()
}
Beverage &lt;-- HouseBlend
Beverage &lt;-- DarkRoast
Beverage &lt;-- Decaf
Beverage &lt;-- Espresso
&lt;/pre>
&lt;ul>
&lt;li>Beverage: 음료를 나타내는 추상 클래스
&lt;ul>
&lt;li>매장에서 판매되는 모든 음료는 이 클래스의 서브클라스임&lt;/li>
&lt;li>description: 각 서브클래스에서 설정되는 음료 설명&lt;/li>
&lt;li>cost(): 추상메소드로서 서브클래스에서 구현해야함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="상속을-이용한-개선">상속을 이용한 개선&lt;/h3>
&lt;p>고객이 커피를 주문할 때 우유나 두유, 모카 등 추가 항목을 얹기도 하므로 그때마다 가격이 올라가야한다.&lt;/p>
&lt;p>각각에 대응하는 서브클래스를 만드는 방법도 있지만, 인스턴스 변수와 슈퍼클래스 상속을 통해 개선될 수 있다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Beverage {
description
+milk
+soy
+mocha
+whip
getDescription()
cost()
+has...()
+set...()
}
class HouseBlend {
cost()
}
class DarkRoast {
cost()
}
class Decaf {
cost()
}
class Espresso {
cost()
}
Beverage &lt;-- HouseBlend
Beverage &lt;-- DarkRoast
Beverage &lt;-- Decaf
Beverage &lt;-- Espresso
&lt;/pre>
&lt;h3 id="상속을-이용한-개선의-문제점">상속을 이용한 개선의 문제점&lt;/h3>
&lt;p>각각 옵션에 대응하는 서브클래스를 만드는 방법보다는 나은 방법이지만 여전히 문제점은 존재한다.&lt;/p>
&lt;ul>
&lt;li>첨가물 가격이 바뀔 때마다 기존 코드를 수정해야한다.&lt;/li>
&lt;li>첨가물의 종류가 많아지면 새로운 메소드를 추가해야 하고, 슈퍼클래스의 cost() 메소드도 고쳐야한다.&lt;/li>
&lt;li>특정 첨가물이 들어가면 안되는 음료가 추가된다면 막는 작업이 필요하다. 등&lt;/li>
&lt;/ul>
&lt;h3 id="데코레이터-패턴-적용하기">데코레이터 패턴 적용하기&lt;/h3>
&lt;p>다크로스트에 모카, 휘핑 추가를 수행하게 될 경우 아래와 같은 과정을 거쳐야한다.&lt;/p>
&lt;ol>
&lt;li>DarkRoast 객체에서 시작한다.&lt;/li>
&lt;li>Mocha 객체를 만들고 그 객체로 DarkRoast 객체를 감싼다.&lt;/li>
&lt;li>Whip 데코레이터를 만들어 Mocha를 감싼다.&lt;/li>
&lt;li>가격을 계산한다.
&lt;ul>
&lt;li>가장 바깥쪽에 있는 데코레이터인 Whip의 cost()를 호출한다.&lt;/li>
&lt;li>Whip은 장식하고 있는 객체에게 가격 계산을 위임하고, 가격이 구해지면 계산된 가격에 휘핑크림의 가격을 더한 다음 결과값을 리턴한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="berverage-클래스-장식하기">Berverage 클래스 장식하기&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Beverage {
description
getDescription()
cost()
}
class HouseBlend {
cost()
}
class DarkRoast {
cost()
}
class Decaf {
cost()
}
class Espresso {
cost()
}
Beverage &lt;-- HouseBlend
Beverage &lt;-- DarkRoast
Beverage &lt;-- Decaf
Beverage &lt;-- Espresso
class CondimentDecorator {
getDescription()
}
Beverage &lt;-- CondimentDecorator
Beverage &lt;.. CondimentDecorator : 구성 요소
class Milk {
Beverage beverage
cost()
getDescription()
}
class Mocha {
Beverage beverage
cost()
getDescription()
}
class Soy {
Beverage beverage
cost()
getDescription()
}
class Whip {
Beverage beverage
cost()
getDescription()
}
CondimentDecorator &lt;-- Milk
CondimentDecorator &lt;-- Mocha
CondimentDecorator &lt;-- Soy
CondimentDecorator &lt;-- Whip
&lt;/pre>
&lt;h3 id="커피-주문-시스템-코드-만들기">커피 주문 시스템 코드 만들기&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Beverage&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">String&lt;/span> &lt;span class="n">description&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;제목 없음&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getDescription&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">cost&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Beverage 객체가 들어갈 자리에 들어갈 수 있어야 하므로 Beverage 클래스를 확장한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">CondimentDecorator&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Beverage&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 데코레이터가 감쌀 음료를 나타내는 Beverage 객체를 지정한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 음료를 지정할 때는 데코레이터에서 어떤 음료든 감쌀 수 있도록 슈퍼 클래스 유형을 이용한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Beverage&lt;/span> &lt;span class="n">beverage&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getDescription&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Beverage 객체를 확장하여 기본 음료를 만든다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Espresso&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Beverage&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Espresso&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">description&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;에스프레소&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@java.lang.Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">cost&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mf">1.99&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * CondimentDecorator를 확장하여 데코레이터를 만든다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Mocha&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">CondimentDecorator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 감싸고자 하는 음료를 저장하는 데코레이터 인스턴스 변수를 초기화 한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param beverage
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Mocha&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Beverage&lt;/span> &lt;span class="n">beverage&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">beverage&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">beverage&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@java.lang.Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getDescription&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">beverage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDescription&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, 모카&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@java.lang.Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="nf">cost&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">beverage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">cost&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">.20&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="핵심-정리">핵심 정리&lt;/h2>
&lt;ul>
&lt;li>객체지향 원칙
&lt;ul>
&lt;li>+ 클래스는 확장에는 열려있어야 하지만 변경에는 닫혀 있어야 한다(OCP).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>객체지향 패턴
&lt;ul>
&lt;li>+ 데코레이터 패턴
&lt;ul>
&lt;li>객체에 추가 요소를 동적으로 더할 수 있다.&lt;/li>
&lt;li>서브클래스를 만들 때보다 훨씬 유연하게 기능을 확장할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>디자인의 유연성 면에서 보면 상속으로 확장하는 일은 별로 좋은 선택은 아니다.&lt;/li>
&lt;li>기존 코드 수정 없이 행동을 확장해야 하는 상황도 있다.&lt;/li>
&lt;li>구성과 위임으로 실행 중에 새로운 행동을 추가할 수 있다.&lt;/li>
&lt;li>상속 대신 데코레이터 패턴으로 행동을 확장할 수 있다.&lt;/li>
&lt;li>데코레이터 패턴은 구상 구성 요소를 감싸 주는 데코레이터를 사용한다.&lt;/li>
&lt;li>데코레이터 클래스의 형식은 그 클래스가 감싸는 클래스 형식을 반영한다.
&lt;ul>
&lt;li>상속이나 인터페이스 구현으로 자신이 감쌀 클래스와 같은 형식을 가진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데코레이터는 자기가 감싸고 있는 구성 요소의 새로운 기능을 더함으로써 행동을 확장한다.&lt;/li>
&lt;li>구성 요소를 감싸는 데코레이터의 개수에는 제한이 없다.&lt;/li>
&lt;li>구성 요소의 클라이언트는 데코레이터의 존재를 알 수 없다.
&lt;ul>
&lt;li>클라이언트가 구성 요소의 구체적인 형식에 의존하는 경우는 예외&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데코레이터 패턴을 사용하면 자잘한 객체가 매우 많이 추가될 수 있다.
&lt;ul>
&lt;li>데코레이터를 너무 많이 사용하면 코드가 필요 이상으로 복잡해진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>2. 옵저버 패턴</title><link>https://codemario318.github.io/post/gof/2/</link><pubDate>Wed, 27 Sep 2023 13:09:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/2/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/2/cover.png" alt="Featured image of post 2. 옵저버 패턴" />&lt;p>옵저버 패턴은 중요한 일이 일어났을 때 객체에게 새 소식을 알려 줄 수 있는 패턴이다.&lt;/p>
&lt;p>일대 다 관계나 느슨한 결합같은 개념을 통해 구성되며 자주 사용되는 패턴 중 하나이다.&lt;/p>
&lt;h2 id="옵저버-패턴">옵저버 패턴&lt;/h2>
&lt;blockquote>
&lt;p>옵저버 패턴은 주제(Subject), 옵저버(observer)로 구성된다.&lt;/p>
&lt;/blockquote>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a((주제 객체))
subgraph 옵저버 객체
b((객체 1))
c((객체 2))
d((객체 3))
end
a-.->b
a-.->c
a-.->d
&lt;/pre>
&lt;p>이 책에서는 옵저버 패턴을 신문 구독을 예시로 들고 있다.&lt;/p>
&lt;ol>
&lt;li>신문사가 신문을 찍어낸다.&lt;/li>
&lt;li>독자가 특정 신문사에 구독 신청을 하면 구독 해지 전까지 새로운 신문이 나올 때마다 배달을 받을 수 있다.&lt;/li>
&lt;li>신문을 보고싶지 않으면 구독 해지 신청을 한다.&lt;/li>
&lt;li>신문사가 망하지 않는 이상 여러 구독자들은 신문을 구독하거나 해지하는 것을 반복한다.&lt;/li>
&lt;/ol>
&lt;h3 id="옵저버-패턴의-정의">옵저버 패턴의 정의&lt;/h3>
&lt;blockquote>
&lt;p>옵저버 패턴은 일련의 객체 사이에서 일대다 관계를 정의하고, 한 객체의 상태가 변경되면 그 객체에 의존하는 모든 객체에 연락이 간다.&lt;/p>
&lt;/blockquote>
&lt;p>옵저버 패턴은 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체에게 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-two-many) 의존성을 정의한다.&lt;/p>
&lt;ul>
&lt;li>옵저버는 주제에 딸려 있으며 주제의 상태가 바뀌면 옵저버에게 정보가 전달된다.&lt;/li>
&lt;li>보통 주제 인터페이스와 옵저버 인터페이스가 들어있는 클래스 디자인으로 구현한다.&lt;/li>
&lt;/ul>
&lt;h3 id="옵저버-패턴의-구조">옵저버 패턴의 구조&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class Subject {
&lt;&lt; interface >>
registerObserver()
removeObserver()
notifyObservers()
}
class Observer {
&lt;&lt; interface >>
update()
}
class ConcreteSubject {
registerObserver()
removeObserver()
notifyObservers()
getState()
setState()
}
class ConcreteObserver {
update()
}
Subject --> Observer : 옵저버
ConcreteObserver ..> Observer
ConcreteSubject &lt;-- ConcreteObserver : 주제
Subject &lt;.. ConcreteSubject
&lt;/pre>
&lt;ul>
&lt;li>Subject
&lt;ul>
&lt;li>주제를 나타내는 인터페이스로 객체에서 옵저버로 등록하거나 옵저버 목록에서 탈퇴하고 싶을 때 해당 인터페이스의 메소드를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Observer
&lt;ul>
&lt;li>옵저버가 될 가능성이 있는 객체는 만드시 Observer 인터페이스를 구현해야 한다.&lt;/li>
&lt;li>주제의 상태가 바뀌었을 때 호출되는 &lt;code>update()&lt;/code> 메소드로만 구성된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ConcreteSubject
&lt;ul>
&lt;li>주제 역할을 하는 구상 클래스는 항상 Subject 인터페이스를 구현해야 한다.&lt;/li>
&lt;li>주제 클래스에는 등록 및 해지용 메소드와 상태가 바뀔 때마다 모든 옵저버에게 연락하는 &lt;code>notifyObservers()&lt;/code> 메소드도 구현해야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Concreteobserver
&lt;ul>
&lt;li>Observer 인터페이스만 구현한다면 무엇이든 옵저버 클래스가 될 수 있다.&lt;/li>
&lt;li>각 옵저버는 특정 주제에 등록해서 연략 받을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>출판-구독(publish-Subscribe) 패턴과의 차이점&lt;/p>
&lt;p>출판-구독 패턴은 구독자가 서로 다른 유형의 메시지에 관심을 가질 수 있고, 출판사와 구독자를 더 세세하게 분리할 수 있는 복잡한 패턴이다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="느슨한-결합의-위력">느슨한 결합의 위력&lt;/h3>
&lt;p>느슨한 결합(Loose Coupling)은 객체들이 상호작용할 수는 있지만, 서로 잘 모르는 관계를 의미한다.&lt;/p>
&lt;ul>
&lt;li>느슨한 결합을 활용하면 유연성이 좋아진다.&lt;/li>
&lt;li>옵저버 패턴은 느슨한 결합의 좋은 예시이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>옵저버 패턴의 느슨한 결합&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>주제는 옵저버가 특정 인터페이스(Observer)를 구현한다는 사실만 알고있다.&lt;/li>
&lt;li>옵저버는 언제든지 추가할 수 있다.
&lt;ul>
&lt;li>주제는 Observer 인터페이스를 구현하는 객체의 목록에만 의존하므로 엔제든지 새로운 옵저버를 추가할 수 있다.&lt;/li>
&lt;li>실행 중에 하나의 옵저버를 다른 옵저버로 바꿔도 주제는 계속해서 다른 옵저버에게 데이터를 보낼 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>새로운 형식의 옵저버를 추가할 때도 주제를 변경할 필요가 없다.
&lt;ul>
&lt;li>새로운 옵저버 클래스를 추가할 때 변경 없이 Observer 인터페이스만 구현한다면 어떤 객체에도 연락할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주제와 옵저버는 서로 독립적으로 재사용 할 수 있다.
&lt;ul>
&lt;li>둘이 서로 단단하게 결합되어 있지 않기 때문에 손쉽게 재사용 할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주제나 옵저버가 달라져도 서로에게 영향을 미치지는 않는다.
&lt;ul>
&lt;li>느슨하게 결합되어 있으므로 주제나 옵저버 인터페이스를 구현한다는 조건만 만족한다면 어떻게 고쳐도 문제가 생기지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>+디자인 원칙: 상호작용하는 객체 사이에는 가능하면 느슨한 결합을 사용해야 한다.&lt;/p>
&lt;p>느슨하게 결합하는 디자인을 사용하면 상호의존성을 최소화 할 수 있기 때문에 변경 사항이 생겨도 무난히 처리할 수 있는 유연한 객체지향 시스템을 구축할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="풀-방식">풀 방식&lt;/h3>
&lt;p>기본적인 옵저버 패턴은 주제가 변경되었을 때 옵저버에게 알리는 방식(푸시)으로 처리되었다. 하지만 이러한 방식은 변경 반영이 필요없는 옵저버에게도 알리게 된다.&lt;/p>
&lt;p>이러한 문제가 존재한다면 옵저버가 필요할 때마다 데이터를 끌어오는 풀 방식을 통해 개선될 수 있다.&lt;/p>
&lt;p>값이 변했다는 알림을 옵저버가 받았을 때 주제에 있는 게터 메소드를 호출해서 필요한 값을 당겨오도록 변경한다.&lt;/p>
&lt;p>푸시와 풀은 구현 방법의 문제이지만 시간이 지남에 따라 애플리케이션이 계속 바뀌고 복잡해지므로, 대체로 옵저버가 필요한 데이터를 골라서 가져가도록 만드는 방법이 더 좋다.&lt;/p>
&lt;p>&lt;strong>주제에서 알림 보내기&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Subject&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">notifyObservers&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Observer&lt;/span> &lt;span class="n">observer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">observers&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">observer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">update&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>옵저버에서 알림 받기&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;code>Observer&lt;/code> 인터페이스에서 &lt;code>update()&lt;/code> 메소드에 매개변수가 없도록 서명을 바꾼다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Observer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>update()&lt;/code> 메소드의 서명을 바꾸고 &lt;code>Subject&lt;/code> 구상 주제 메소드의 게터로 날씨를 받아오도록 &lt;code>Observer&lt;/code> 구상 클래스를 수정한다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">ExtendObserver&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Observer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">item&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ExtendSubject&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getItem&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">이후&lt;/span>&lt;span class="n">_&lt;/span>&lt;span class="err">동작&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="디자인-원칙">디자인 원칙&lt;/h3>
&lt;ul>
&lt;li>달라지는 부분을 찾아내고 달라지지 않는 부분과 분리한다.
&lt;ul>
&lt;li>옵저버 패턴에서 변하는 것은 주제의 상태와 옵저버의 개수, 형식이다.&lt;/li>
&lt;li>옵저버 패턴에서는 주제를 바꾸지 않고도 주제의 상태에 의존하는 객체들을 바꿀 수 있다.&lt;/li>
&lt;li>나중에 바뀔 것을 대비해 두면 편하게 작업할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>구현보다는 인터페이스에 맞춰 프로그래밍한다.
&lt;ul>
&lt;li>주제와 옵저버에서 모두 인터페이스를 사용했다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>상속보다는 구성을 활용한다.
&lt;ul>
&lt;li>옵저버 패턴에서는 구성을 활용해서 옵저버들을 관리한다.&lt;/li>
&lt;li>주제와 옵저버 사이의 관계가 상속이 아닌 구성으로 이루어진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="기상-모니터링-애플리케이션">기상 모니터링 애플리케이션&lt;/h2>
&lt;h3 id="요구-사항-분석">요구 사항 분석&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a((습도 센서))
b((온도 센서))
c((기압 센서))
d([기상 스테이션])
e((WeatherData 객체))
f[[디스플레이 장비]]
a-.->d
b-.->d
c-.->d
d&lt;-.데이터 취득.-e
e-.화면에 표시.->f
&lt;/pre>
&lt;ul>
&lt;li>WatherData 객체를 바탕으로 만들어짐
&lt;ul>
&lt;li>현재 기상 조건(온도, 습도 기압) 추적&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WatherData 객체를 바탕으로 3개 항목을 화면에 표시함
&lt;ul>
&lt;li>현재 조건, 기상 통계, 간단한 기상 예보&lt;/li>
&lt;li>해당 항목들이 최신 측정치를 수집할 때마다 실시간으로 갱신&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다른 개발자가 직접 날씨 디스플레이를 만덜어 바로 넣을 수 있도록 확장 가능해야 함&lt;/li>
&lt;li>정보가 화면에 표시되는 횟수로 고객에가 요금 부과&lt;/li>
&lt;/ul>
&lt;h3 id="구현-목표">구현 목표&lt;/h3>
&lt;p>디스플레이를 구현하고 새로운 값이 들어올 때마다(&lt;code>measurementsChanged()&lt;/code> 호출 시) &lt;code>WeatherData&lt;/code>에서 디스플레이를 업데이트 해야한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction RL
class WeatherData {
getTemperature()
getHumidity()
getPressure()
measurementsChanged()
}
note for WeatherData "기상 관측값 갱신시 measurementsChanged() 호출"
&lt;/pre>
&lt;ul>
&lt;li>&lt;code>WeatherData&lt;/code> 클래스에는 3가지 측정값(온도, 습도 기압)의 게터 메소드가 있다.&lt;/li>
&lt;li>새로운 기상 측정 데이터가 들어올 때마다 &lt;code>measurementsChanged()&lt;/code> 메소드가 호출됨
&lt;ul>
&lt;li>이 메소드가 어떤 식으로 호출되는지 모른다(알 필요도 없다)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가상 데이터를 사용하는 디스플레이 요소 3가지를 구현해야 한다.
&lt;ul>
&lt;li>현재 조건, 기상 통계, 기상 예보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>디스플레이를 업데이트하도록 &lt;code>measurementsChanged()&lt;/code>에 코드를 추가해야 한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>추가 목표&lt;/strong>&lt;/p>
&lt;p>기상 스테이션이 성공하면 디스플레이가 더 늘어날 수도 있고, 디스플레이를 추가할 수 있는 마켓플레이스가 만들어질지도 모른다. 따라서 확장성을 고려한다면 좋을 수 있다.&lt;/p>
&lt;h3 id="가상-스테이션용-코드-추가">가상 스테이션용 코드 추가&lt;/h3>
&lt;p>1차적으로 다음과 같이 구현될 수 있다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">WeatherData&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 인스턴스 변수 선언
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">measurementsChanged&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 최신 측정값 가져오기
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">float&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getTemperature&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">humidity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getHumidity&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">pressure&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getPressure&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 각 디스플레이 업데이트
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">currentConditionsDisplay&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">pressure&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">statisticsDisplay&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">pressure&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">forecastDisplay&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">update&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">temp&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">humidity&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">pressure&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 기타 메소드
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="원칙으로-추가-코드-살펴보기">원칙으로 추가 코드 살펴보기&lt;/h3>
&lt;ul>
&lt;li>구체적인 구현(Bad)
&lt;ul>
&lt;li>각 디스플레이를 업데이트 하는 로직이 구체적인 구현에 맞춰져 있으므로 프로그램을 고치지 않고는 다른 디스플레이를 추가, 제거할 수 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캡슐화 부재(Bad)
&lt;ul>
&lt;li>디스플에이를 업데이트 하는 로직은 바뀔 수 있는 부분으로 캡슐화가 필요함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>공통된 인터페이스(Good)
&lt;ul>
&lt;li>&lt;code>{객체}.update&lt;/code> 메소드를 호출하는 것으로 업데이트를 하는 공통적인 인테페이스를 구성했음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="기상-스테이션-설계하기">기상 스테이션 설계하기&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
direction LR
class Subject {
&lt;&lt; interface >>
registerObserver()
removeObserver()
notifyObservers()
}
class Observer {
&lt;&lt; interface >>
update()
}
class DisplayElement {
&lt;&lt; interface >>
display()
}
class WeatherData {
registerObserver()
removeObserver()
notifyObservers()
getTemperature()
getHumidity()
getPressure()
measurementsChanged()
}
class CurrentConditionsDisplay {
update()
display()
}
class StatisticsDisplay {
update()
display()
}
class ThirdPartyDisplay {
update()
display()
}
class ForecastDisplay {
update()
display()
}
Subject --> Observer : 옵저버
WeatherData ..> Subject
CurrentConditionsDisplay --> WeatherData : 주제
CurrentConditionsDisplay ..> Observer
StatisticsDisplay ..> DisplayElement
StatisticsDisplay ..> Observer
ThirdPartyDisplay ..> DisplayElement
ThirdPartyDisplay ..> Observer
ForecastDisplay ..> DisplayElement
ForecastDisplay ..> Observer
&lt;/pre>
&lt;ul>
&lt;li>Subject: 주제 인터페이스&lt;/li>
&lt;li>Observer: 옵저버 인터페이스, 주제에서 옵저버에게 갱신된 정보를 전달하는 방법 제공&lt;/li>
&lt;li>DisplayElement: 모든 디스플레이 요소의 구현 인터페이스&lt;/li>
&lt;li>WeatherData: Subject 인터페이스를 구현할 기상 정보&lt;/li>
&lt;li>CurrentConditionsDisplay: WatherData 객체로부터 얻은 현재 측정값을 보여줄 옵저버 이면서 디스플레이 요소&lt;/li>
&lt;li>StatisticsDisplay: 측정치의 통계치를 표시할 옵저버 이면서 디스플레이 요소&lt;/li>
&lt;li>ForecastDisplay: 측정치를 바탕으로 기상 예보를 화면에 보여줄 디스플레이 요소&lt;/li>
&lt;li>ThirdPartyDisplay: 새롭게 구현될 디스플레이 요소&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="디자인-도구상자-안에-들어가야-할-도구들">디자인 도구상자 안에 들어가야 할 도구들&lt;/h2>
&lt;ul>
&lt;li>객체지향 기초
&lt;ul>
&lt;li>추상화&lt;/li>
&lt;li>캡슐화&lt;/li>
&lt;li>다형성&lt;/li>
&lt;li>상속&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>객체지향 원칙
&lt;ul>
&lt;li>바뀌는 부분은 캡슐화힌다.&lt;/li>
&lt;li>상속보다는 구성을 활용한다.&lt;/li>
&lt;li>구현보다는 인터페이스에 맞춰 프로그래밍한다.&lt;/li>
&lt;li>+ 상호작용을 하는 객체 사이에는 가능하면 느슨한 결합을 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>객체지향 패턴
&lt;ul>
&lt;li>전략패턴&lt;/li>
&lt;li>+ 옵저버 패턴
&lt;ul>
&lt;li>한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체에게 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다 의존성을 정의한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="핵심-정리">핵심 정리&lt;/h2>
&lt;ul>
&lt;li>옵저버 패턴은 객체들 사이에 일대다 관계를 정의한다.&lt;/li>
&lt;li>주제는 동일한 인터페이스를 써서 옵저버에게 연락한다.&lt;/li>
&lt;li>Observer 인터페이스를 구현하기만 하면 어떤 구상 클래스의 옵저버라도 패턴에 참여할 수 있다.&lt;/li>
&lt;li>주제는 옵저버들이 Observer 인터페이스를 구현한다는 것을 제외하면 옵저버에 관해 전혀 모른다.(느슨한 결합)&lt;/li>
&lt;li>옵저버 패턴을 사용하면 주제가 데이터를 보내거나(푸시) 옵저버가 데이터를 가져올(풀) 수 있다.
&lt;ul>
&lt;li>일반적으로 풀 방식을 옳은 방식으로 간주함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>옵저버 패턴은 여러 개의 주제와 메시지 유형이 있는 복잡한 상황에서 사용하는 출판-구독 패턴과 친척이다.&lt;/li>
&lt;li>옵저버 패턴은 자주 쓰이는 패턴으로 모델-뷰-컨트롤러(MVC)를 배울 때 다시 볼 수 있을것이다.&lt;/li>
&lt;li>GUI 프레임 워크들이 옵저버 패턴을 많이 사용한다.&lt;/li>
&lt;li>RxJava, 자바빈, RMI 외 코코아, 스위프트, JS 같은 다른 언어의 프레임워크에서도 옵저버 패턴을 많이 사용한다.&lt;/li>
&lt;/ul></description></item><item><title>1. 디자인 패턴 소개와 전략 패턴</title><link>https://codemario318.github.io/post/gof/1/</link><pubDate>Wed, 20 Sep 2023 15:25:08 +0900</pubDate><guid>https://codemario318.github.io/post/gof/1/</guid><description>&lt;img src="https://codemario318.github.io/post/gof/1/cover.png" alt="Featured image of post 1. 디자인 패턴 소개와 전략 패턴" />&lt;h2 id="디자인-패턴-만나기">디자인 패턴 만나기&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>누군가가 이미 우리의 문제를 해결해 놓았다.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>디자인 패턴은 다른 개발자가 똑같은 문제를 경험하고 해결하면서 익혔던 지혜와 교훈이 담겨있다.&lt;/p>
&lt;p>디자인 패턴은 코드가 아닌 경험을 재사용 하는 것과 같다.&lt;/p>
&lt;h3 id="디자인-원칙">디자인 원칙&lt;/h3>
&lt;p>&lt;strong>애플리케이션에서 달리지는 부분을 찾아내고, 달라지지 않는 부분과 분리한다.&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>달라지는 부분을 찾아 나머지 코드에 영향을 주지 않도록 캡슐화 한다.&lt;/li>
&lt;li>이로 인해 코드를 변경하는 과정에서 의도치 않게 발생하는 일을 줄이며 시스템의 유연성을 향상시킬 수 있다.&lt;/li>
&lt;/ul>
&lt;p>코드에 새로운 요구 사항이 있을 때마다 바뀌는 부분이 있다면 분리해야한다.&lt;/p>
&lt;p>이 디자인 원칙은 다음과 같이 해석할수도 있다.&lt;/p>
&lt;blockquote>
&lt;p>바뀌는 부분은 따로 뽑아 캡슐화한다. 그러면 나중에 바뀌지 않는 부분에는 영향을 미치치 않고 그 부분만 고치거나 확장할 수 있다.&lt;/p>
&lt;/blockquote>
&lt;p>이 개념은 매우 간단하지만 다른 모든 디자인 패턴의 기반을 이루는 원칙이다.&lt;/p>
&lt;p>모든 패턴은 &lt;strong>시스템의 일부분을 다른 부분과 독립적으로 변화시킬 수 있는 방법&lt;/strong>을 제공한다.&lt;/p>
&lt;h3 id="패턴과-전문-용어">패턴과 전문 용어&lt;/h3>
&lt;p>패턴으로 소통하면 일상어로 구구절절 말할 때보다 훨씬 효율적인 의사소통을 할 수 있다.&lt;/p>
&lt;p>디자인 패턴은 개발자 사이에서 서로 모두 이해할 수 있는 용어를 제공한다.&lt;/p>
&lt;p>용어를 이애하고 나면 다른 개발자와 더 쉽게 대화할 수 있고, 패턴을 아직 모르는 사람들에게는 패턴을 배우고 싶은 생각이 들도록 자극을 수 있다.&lt;/p>
&lt;p>또한 자질구레한 객체 수준에서의 생각이 아닌, 패턴 수준에서 생각할 수 있기에 아키텍처를 생각하는 수준도 끌어올릴 수 있다.&lt;/p>
&lt;ul>
&lt;li>패턴으로 의사소통하면 패턴 이름과 그 패턴에 담겨있는 모든 내용, 특성, 제약조건 등을 함께 이야기 할 수 있다.
&lt;ul>
&lt;li>전략 패턴을 사용했다는 말은, 대상의 동작을 쉽게 확장하거나 변경할 수 있는 클래스들의 집합으로 캡슐화 했다는 내용을 간략하게 설명할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>패턴을 사용하면 간단한 단어로 많은 얘기를 할 수 있다.
&lt;ul>
&lt;li>뭔가를 설명할 때 패턴을 사용하면 생각하고 있는 디자인을 다른 개발자가 빠르고 정확하게 파악할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>패턴 수준에서 이야기하면 디자인에 더 오랫동안 집중할 수 있다.
&lt;ul>
&lt;li>패턴을 사용하여 객체와 클래스를 구현하는 것과 관련된 자질구레한 내용에 시간을 버릴 필요가 없어 디자인 수준에서 초점을 맞출 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전문 용어를 사용하면 개발팀의 능력을 극대화 할 수 있다.
&lt;ul>
&lt;li>디자인 패턴 용어를 모든 팀원이 잘 알고 있다면 오해의 소지가 줄어 작업을 빠르게 진행할 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전문 용어는 신입 개발자에게 훌륭한 자극제가 될 수 있다.
&lt;ul>
&lt;li>선배가 디자인 패턴을 사용하면 디자인 패턴을 배울 동기가 부여될 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="디자인-패턴-사용법">디자인 패턴 사용법&lt;/h3>
&lt;p>라이브러리와 프레임워크는 개발 모델 전반에 걸쳐서 많은 영향을 미친다. 하지만 라이브러리와 프레임워크를 사용한다는 것이 이해하기 쉽고, 관리하기 쉬운 유연한 방법으로 애플리케이션의 구조를 만드는 데 도움을 주지는 못한다.&lt;/p>
&lt;blockquote>
&lt;p>디자인 패턴은 라이브러리보다 더 높은 단계에 속한다.&lt;br>
디자인 패턴은 클래스와 객체를 구성해서 어떤 문제를 해결하는 방법을 제공하는데, 그런 디자인을 특정 애플리케이션에 맞게 적용하는 일은 개발자의 몫이다.&lt;/p>
&lt;/blockquote>
&lt;p>디자인 패턴은 라이브러리나 프레임워크가 도와주지 못하는 부분을 해결하는데 도움을 줄 수 있다.&lt;/p>
&lt;ul>
&lt;li>패턴을 완전히 익혀 두면 어떤 코드가 유연성 없이 엉망으로 꼬여있는 스파게티 코드라는 사실을 금방 깨닳을 수 있다.&lt;/li>
&lt;li>코드를 수정할 때 패턴을 적용하여 코드를 개선할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="객체지향-디자인-원칙과-디자인-패턴">객체지향 디자인 원칙과 디자인 패턴&lt;/h3>
&lt;p>캡슐화, 추상화, 상속, 다형성을 잘 알고 있고 활용할 수 있다고 하더라도 유연하고, 재사용이 용이하고, 관리하기 쉬운 시스템을 쉽게 만들기는 어려운 일이다.&lt;/p>
&lt;p>디자인 패턴은 간단하지만은 않은 객체지향 시스템 구축 방법들을 모아서 정의한 말그대로 패턴이다.&lt;/p>
&lt;p>따라서 디자인 패턴을 잘 알고 있다면, 비교적 적은 수고로 제대로 작동하는 디자인을 만들 수 있게된다.&lt;/p>
&lt;blockquote>
&lt;p>디자인은 예술이다.&lt;br>
장점이 있으면 단점도 있지만, 많은 사람이 오랜 시간 동안 고민해서 찾아낸 디자인 패턴을 잘 따른다면 훨씬 좋은 디자인을 만들 수 있다.&lt;/p>
&lt;/blockquote>
&lt;p>또한 패턴의 밑바탕에는 객체지향 패턴이 있으므로 원칙을 알고 있다면 문제에 딱 맞는 패턴을 찾을 수 없을 때에 적절한 디자인을 만드는데 도움을 줄 수 있다.&lt;/p>
&lt;h3 id="디자인-도구상자-안에-들어가야-할-도구들">디자인 도구상자 안에 들어가야 할 도구들&lt;/h3>
&lt;ol>
&lt;li>객체지향 기초
&lt;ul>
&lt;li>추상화&lt;/li>
&lt;li>캡슐화&lt;/li>
&lt;li>다형성&lt;/li>
&lt;li>상속&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>객체지향 원칙
&lt;ul>
&lt;li>바뀌는 부분은 캡슐화 한다.&lt;/li>
&lt;li>상속보다는 구성을 활용한다.&lt;/li>
&lt;li>구현보다는 인터페이스에 맞춰서 프로그래밍한다. 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>객체지향 패턴
&lt;ul>
&lt;li>전략패턴 등&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="시나리오">시나리오&lt;/h2>
&lt;p>시스템을 처음 디자인 할때 표준 객체지향 기법을 사용하여 슈퍼클래스를 만든 다음, 그 클래스를 확장하여 서로 다른 종류의 클래스를 만들었다.&lt;/p>
&lt;p>이후 새로운 기능을 요구하는 상황이 발생하여 슈퍼클래스에 해당 기능을 수행하는 메소드를 추가하였으나, 슈퍼클래스를 상속받는 모든 클래스들이 메소드가 적용됨에 따라 해당 기능이 필요없는 모든 클래스에서 해당 기능이 적용되 결국 오류를 만들게 되었다.&lt;/p>
&lt;p>이에 따라 해당 기능이 필요없는 서브 클래스의 추가된 슈퍼클래스의 메소드를 오버라이드하여 사용할 수 없게 막았다.&lt;/p>
&lt;p>하지만 이런 상황으로 인해 서브클래스에서 중복이 많이 발생할 수 있었고, 지속적으로 새로운 기능을 추가하기로 함에 따라 특정한 기능을 묶어 인터페이스를 설계하였다.&lt;/p>
&lt;h3 id="문제">문제&lt;/h3>
&lt;p>서브클래스에 새로운 기능을 추가할 때 모든 서브클래스에 필요한 기능이 아니므로 상속으로 처리하는 것은 올바른 방법이 아니다.&lt;/p>
&lt;ul>
&lt;li>서브클래스에서 인터페이스를 구현하여 일부 문제점은 해결할 수 있지만, 코드를 재사용하지 않으므로 코드 관리에 커다란 문제가 생긴다.&lt;/li>
&lt;li>서브클래스에 필요한 모든 기능들에 대해서 인터페이스를 만드는 방식도 서브클래스마다 구현이 필요하므로 좋은 해결방법이 아니다.&lt;/li>
&lt;/ul>
&lt;p>이러한 문제는 디자인 패턴의 적용으로 해결할 수 있다.&lt;/p>
&lt;h3 id="문제를-명확하게-파악하기">문제를 명확하게 파악하기&lt;/h3>
&lt;p>위 시나리오에서 새로운 기능 추가를 위해 상속을 활용하는 것은 모든 서브클래스에서 한 가지 기능만 사용하도록 하는 방법이기 때문에 최선의 해결책이 아니다.&lt;/p>
&lt;p>또한 인테페이스를 사용하는 방법은 괜찮아 보이지만, 인터페이스에는 구현된 코드가 없으므로 코드를 재사용할 수 없다는 문제점이 있다.&lt;/p>
&lt;ul>
&lt;li>한가지 행동을 바꿀때마다 그 행동이 정의되어 있는 서로 다른 서브 클래스를 전부 찾아서 코드를 일일이 고쳐야한다.&lt;/li>
&lt;li>그 과정으로 인해 새로운 버그가 생길 가능성이 높다.&lt;/li>
&lt;/ul>
&lt;h3 id="바뀌는-부분과-그렇지-않은-부분-분리하기">바뀌는 부분과 그렇지 않은 부분 분리하기&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>변화하는 부분과 그대로 있는 부분&lt;/strong>을 분리하려면 2개의 클래스 집합을 만든다.&lt;/li>
&lt;li>각 클래스의 집합에는 각각의 행동을 구현한 것을 전부 집어넣는다.&lt;/li>
&lt;/ol>
&lt;p>변화하는 기능을 슈퍼클래스에서 모두 분리하여 각 행동을 나타낼 클래스 집합을 새로 만들어야 한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">flowchart LR
a((슈퍼클래스))-->b
a-->c
subgraph 달라지는 기능
b([메소드 구현 1])
c([메소드 구현 2])
end
&lt;/pre>
&lt;h3 id="달라지는-기능을-디자인하는-방법">달라지는 기능을 디자인하는 방법&lt;/h3>
&lt;p>달라지는 기능을 구현하는 클래스 집합은 최대한 유연하게 만들고, 인스턴스에 기능을 할당할 수 있어야 한다. 이를 위해 각 행동은 인터페이스로 표현하고 인테페이스를 사용해 행동을 구현한다.&lt;/p>
&lt;ul>
&lt;li>시나리오에서는 슈퍼클래스에서 구체적으로 구현하거나 서브클래스 자체에서 별도로 구현하는 방법에서 항상 특정 구현에 의존한다.&lt;/li>
&lt;li>서브클래스는 인터페이스로 표현되는 행동을 사용하기 때문에 실제 행동 구현이 슈퍼클래스를 활용하는 서브클래스에게만 국한되지 않는다.
&lt;ul>
&lt;li>인터페이스로 인해 서브클래스마다 해당 기능을 구현해야하는 문제점이 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>실제 실행 시에 쓰이는 객체가 코드에 고정되지 않도록 상속이 아닌 상위 형식(super type)에 맞춰 프로그래밍해서 다형성을 활용해야 한다는 점에서 인터페이스에 맞춰서 프로그래밍한다는 말은 사실 상위 형식에 맞춰 프로그래밍한다는 의미이다.&lt;/p>
&lt;ul>
&lt;li>변수를 선언할 때 보통 추상 클래스나 인테페이스 같은 상위 형식으로 선언해야 한다.&lt;/li>
&lt;li>객체를 변수에 대입할 때 상위 형식을 구체적으로 구현한 형식이라면 어떤 객체든 넣을 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="행동-통합하기">행동 통합하기&lt;/h3>
&lt;p>특정 행동을 슈퍼클래스 또는 서브클래스에서 정의한 메소드를 써서 구현하지 않고 다른 클래스에 위임한다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Duck {
+ FlyBehavior flyBehavior
+ QuackBehavior quackBehavior
+ performQuack()
- quack()
swim()
display()
+ performFly()
- performFly()
}
&lt;/pre>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Duck&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">QuackBehavior&lt;/span> &lt;span class="n">quackBehavior&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">performQuack&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">quackBehavior&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">quack&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>특정 행동을 해고 싶을땐 인테페이스에 의해 참조되는 객체에서 동작하는 방식으로 위임할 수 있다.&lt;/p>
&lt;h3 id="동적으로-행동-지정하기">동적으로 행동 지정하기&lt;/h3>
&lt;p>Setter를 이용하여 위임한 다른 클래스를 설정한다면 동적으로 변경될 수 있다.&lt;/p>
&lt;h2 id="전략-패턴">전략 패턴&lt;/h2>
&lt;p>알고리즘군을 정의하고 캡슐화하여 각각의 알고리즘군을 수정해서 쓸 수 있게 해준다. 전략패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있다.&lt;/p>
&lt;ul>
&lt;li>여러 알고리즘 또는 동작을 동적으로 선택하고 사용해야 할 때&lt;/li>
&lt;li>클래스의 행동을 변경하고 확장하기 쉬운 구조를 갖추고자 할 때&lt;/li>
&lt;li>코드 중복을 방지하고 재사용성을 높힐때&lt;/li>
&lt;/ul>
&lt;h3 id="구조">구조&lt;/h3>
&lt;ol>
&lt;li>전략(Strategy): 다양한 알고리즘 또는 동작을 나타내는 인터페이스 또는 추상 클래스
&lt;ul>
&lt;li>이 인터페이스를 구현하는 여러 전략 클래스가 존재함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전략 컨텍스트(Strategy Context): 전략 객체를 사용하는 클래스로, 전략을 변경하고 실행하는 역할을 수행
&lt;ul>
&lt;li>컨텍스트 객체는 전략 객체를 가지며 필요에 따라 전략을 바꿀 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>전략 구체 클래스(Concrete Strategy): 전략 인터페이스를 구현한 구체 클래스들
&lt;ul>
&lt;li>각 클래스는 특정한 알고리즘이나 동작을 구현&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="캡슐화된-행동-살펴보기">캡슐화된 행동 살펴보기&lt;/h3>
&lt;pre class="mermaid" style="text-align: center;">classDiagram
class Duck {
FlyBehavior flyBehavior
QuackBehavior quackBehavior
swim()
display()
performQuack()
performFly()
setFlyBehavior()
setQuackBehavior()
}
class MallardDuck {
display()
}
class RedheadDuck {
display()
}
class RubberDuck {
display()
}
class DecoyDuck {
display()
}
Duck &lt;|-- MallardDuck
Duck &lt;|-- RedheadDuck
Duck &lt;|-- RubberDuck
Duck &lt;|-- DecoyDuck
class ImpFlyBehavior {
fly()
}
class FlyWithWings {
fly() // 나는 행동 구현
}
class FlyNoWay {
fly() // 아무것도 하지 않음
}
ImpFlyBehavior&lt;|--Duck
ImpFlyBehavior&lt;|--FlyWithWings
ImpFlyBehavior&lt;|--FlyNoWay
class ImpQuackBehavior {
quack()
}
class Quack {
quack() // 소리 내는 행동 구현
}
class Squeak {
quack() // 고무 오리 소리 구현
}
class MuteQuack {
quack() // 아무 소리 내지 못함
}
ImpQuackBehavior&lt;|--Duck
ImpQuackBehavior&lt;|--Quack
ImpQuackBehavior&lt;|--Squeak
ImpQuackBehavior&lt;|--MuteQuack
&lt;/pre>
&lt;p>행동들을 알고리즘군(family of algorithms)으로 생각하고 위처럼 행동을 상속받는 대신 올바른 행동 객체로 구성되는 행동을 부여받기 위해 두 클래스를 합치는 것을 &lt;strong>구성을 이용한다&lt;/strong>라고 표현한다.&lt;/p>
&lt;h2 id="정리">정리&lt;/h2>
&lt;ul>
&lt;li>객체지향 기초 지식만 가지고는 휼륭한 객체지향 디자이너가 될 수 없다.&lt;/li>
&lt;li>휼륭한 객체지향 디자인이라면 재사용성, 확장성, 관리의 용이성을 갖출 줄 알아야 한다.&lt;/li>
&lt;li>패턴은 훌륭한 객체지향 디자인 품질을 갖추고 있는 시스템을 만드는 방법을 제공한다.&lt;/li>
&lt;li>패턴은 검증받은 객체지향 경험의 산물이다.&lt;/li>
&lt;li>패턴이 코드를 바로 제공하는 것은 아니나, 디자인 문제의 보편적인 해법을 제공한다.&lt;/li>
&lt;li>패턴은 발명되는 것이 아니라 발견되는 것이다.&lt;/li>
&lt;li>대부분의 패턴과 원칙은 소프트웨어의 변경 문제와 연관되어 있다.&lt;/li>
&lt;li>대부분 패턴은 시스템의 일부분을 나머지 부분과 무관하게 변경하는 방법을 제공한다.&lt;/li>
&lt;li>많은 경우에 시스템에서 바뀌는 부분을 골라내서 캡슐화해야 한다.&lt;/li>
&lt;li>패턴은 다른 개발자와의 의사소통을 극대화하는 전문 용어 역할을 한다.&lt;/li>
&lt;/ul></description></item></channel></rss>