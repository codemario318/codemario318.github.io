<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Backend on Mario Blog</title><link>https://codemario318.github.io/categories/backend/</link><description>Recent content in Backend on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 18 Apr 2023 16:24:22 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/categories/backend/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM - Garbage Collection</title><link>https://codemario318.github.io/post/jvm_gc/</link><pubDate>Tue, 18 Apr 2023 16:24:22 +0900</pubDate><guid>https://codemario318.github.io/post/jvm_gc/</guid><description>&lt;img src="https://codemario318.github.io/post/jvm_gc/jvm_cover.jpeg" alt="Featured image of post JVM - Garbage Collection" />&lt;p>&lt;img src="https://codemario318.github.io/post/jvm_gc/jvm_gc_1.png"
width="1444"
height="758"
srcset="https://codemario318.github.io/post/jvm_gc/jvm_gc_1_huffa1b0b04f7aa5fa473d93e9bbf2fa2a_361840_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jvm_gc/jvm_gc_1_huffa1b0b04f7aa5fa473d93e9bbf2fa2a_361840_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;h2 id="stop-the-world">Stop-the-world&lt;/h2>
&lt;p>GC를 실행하기 위해 JVM이 애플리케이션 실행을 멈추는 것이다.&lt;/p>
&lt;ul>
&lt;li>stop-the-world가 발생하면 GC를 실행하는 쓰레드를 제외한 나머지 쓰레드는 모두 작업을 멈춘다.&lt;/li>
&lt;li>GC작업을 완료한 이후에야 중단했던 작업을 다시 시작한다.&lt;/li>
&lt;li>어떤 GC 알고리즘을 사용하더라도 Stop-the-world는 발생한다.&lt;/li>
&lt;li>대개의 경우 GC 튜닝이란 이 Stop-the-world 시간을 줄이는 것이다.&lt;/li>
&lt;/ul>
&lt;h2 id="gc-필요성">GC 필요성&lt;/h2>
&lt;p>Java의 경우 (대부분의 언어) 프로그램 코드에서 메모리를 명시적으로 지정하여 헤제하지 않는다. 따라서
가비지 컬렉터가 더이상 필요 없는 객체를 찾아 지우는 작업을 수행하여 메모리 공간을 확보한다.&lt;/p>
&lt;blockquote>
&lt;p>가끔 명시적으로 해제하려고 해당 객체를 &lt;code>null&lt;/code>로 지정하거나 &lt;code>System.gc()&lt;/code> 메서드를 호출하는 경우가 있다.
&lt;code>null&lt;/code>로 지정하는 것은 큰 문제가 안되지만, &lt;code>System.gc()&lt;/code> 메서드를 호출하는 것은 시스템의 매우 큰 영향을 끼치므로 &lt;code>System.gc()&lt;/code> 메서드는 절대 사용하면 안된다.&lt;/p>
&lt;/blockquote>
&lt;h2 id="garbage-collector">Garbage Collector&lt;/h2>
&lt;p>가비지 컬렉터는 두 가지 가설 하에 만들어졌다.(가정 또는 전제 조건이라 표현하는 것이 맞다.)&lt;/p>
&lt;h3 id="weak-generational-hypothesis">Weak generational hypothesis&lt;/h3>
&lt;ul>
&lt;li>대부분의 객체는 금방 접근 불가능 상태(Unreachable)가 된다.&lt;/li>
&lt;li>오래된 객체에서 젊은 객체로의 참조는 아주 적게 존재한다.&lt;/li>
&lt;/ul>
&lt;h3 id="young-영역과-old-영역">Young 영역과 Old 영역&lt;/h3>
&lt;p>이 가설의 장점을 최대한 살리기 위해 HotSpot VM 에서는 크게 2개로 물리적 공간을 나누었다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Young 영역&lt;/strong>&lt;br>
새롭게 생성한 객체의 대부분이 여기에 위치한다. 대부분의 객체가 금방 접근 불가능 상태가 되기 때문에 매우 많은 객체가 young 영역에 생성되었다가 사라진다.
이 영역에서 객체가 사라질 때 Minor GC가 발생한다고 말한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Old 영역&lt;/strong>&lt;br>
접근 불가능 상태로 되지 않아 Young 영역에서 살아남은 객체가 여기로 복사된다. 대부분 Young 영역보다 크게 할당하며, 크기가 큰 만큼 Young 영역보다 GC는 적게 발생한다. 이 영역에서 객체가 사라질 때 Major GC(Full GC)가 발생한다고 말한다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="minor-gc">Minor GC&lt;/h3>
&lt;p>새로 생성된 대부분의 객체는 Eden 영역에 위치한다. Eden 영역에서 GC가 한 번 발생한 후 살아남은 객체는 Survivor 영역 중 하나로 이동된다.&lt;/p>
&lt;p>이 과정을 반복하다가 계속해서 살아남아 있는 객체는 일정시간 참조되고 있다는 뜻이므로 Old 영역으로 이동시킨다.&lt;/p>
&lt;h3 id="major-gc">Major GC&lt;/h3>
&lt;p>Old 영역에 있는 모든 객체들을 검사하여 참조되지 않은 객체들을 한꺼번에 삭제한다.&lt;/p>
&lt;h2 id="가비지-컬렉션은-어떤-원리로-소멸시킬-대상을-선정하는가">가비지 컬렉션은 어떤 원리로 소멸시킬 대상을 선정하는가?&lt;/h2>
&lt;p>알고리즘에 따라 동작 방식이 매우 다양하지만 공통적인 원리가 있다.&lt;/p>
&lt;p>가비지 컬렉터는 힙 내의 객체 중에서 가비지를 찾아내고 찾아낸 가비지를 처리해서 힙의 메모리를 회수한다.&lt;/p>
&lt;p>참조되고 있지 않은 객체를 가비지라고 하며 객체가 가비지인지 아닌지 판단하기 위해서 reachablitiy라는 개념을 사용한다.&lt;/p>
&lt;blockquote>
&lt;p>어떤 힙 영역에 할당된 객체가 유효한 참조가 있으면 reachability, 없다면 unreachability로 판단한다. 하나의 객체는 다른 객체를 참조하고, 다른 객체는 또 다른 객체를 참조할 수 있기 때문에 참조 사슬이 형성되는데, 이 참조 사슬 중 최초에 참조한 것을 Root Set이라고 칭한다.&lt;/p>
&lt;/blockquote>
&lt;p>힙 영역에 있는 객체들은 총 4가지 경우에 대하여 참조를 가지게 된다.&lt;/p>
&lt;ol>
&lt;li>힘 내의 다른 객체에 의한 참조&lt;/li>
&lt;li>Java스택, 즉 Java 메서드 실행 시에 사용하는 지역변수와 파라미터들에 의한 참조&lt;/li>
&lt;li>네이티브 스택에 의해 생성된 객체에 대한 참조&lt;/li>
&lt;li>메서드 영역의 정적 변수에 의한 참조&lt;/li>
&lt;/ol>
&lt;p>2, 3, 4는 Root set이다. 즉 참조 사슬 중 최초에 참조한 것이다.&lt;/p>
&lt;p>인스턴스가 가비지 컬렉션의 대상이 되었다고 해서 바로 소멸이 되는 것은 아니다. 빈번한 가비지 컬렉션의 실행은 시스템에 부담이 될 수 있기에 성능에 영향을 미치지 않도록 가비지 컬렉션 실행 타이밍은 별도의 알고리즘을 기반으로 계산이 되며, 이 계산 결과를 기반으로 가비지 컬렉션이 수행된다.&lt;/p>
&lt;h3 id="serial-gc">Serial GC&lt;/h3>
&lt;p>적은 메모리와 CPU 코어 개수가 적을 때 적합한 방식으로 위에서 언급한 방식으로 동작&lt;/p>
&lt;h3 id="parallel-gc">Parallel GC&lt;/h3>
&lt;p>기본적인 GC 알고리즘은 Serial GC와 동일하지만 Parallel GC는 GC를 처리하는 스레드가 여러 개라서 보다 빠른 GC를 수행할 수 있다.&lt;/p>
&lt;p>메모리가 충분하고 코어의 개수가 많을 때 유리하다.&lt;/p>
&lt;h3 id="parallel-old-gc-parallel-compacting-gc">Parallel Old GC (Parallel Compacting GC)&lt;/h3>
&lt;p>별도로 살아있는 객체를 식별한다는 부분에서 보다 복잡한 단계로 수행된다.&lt;/p></description></item><item><title>JVM</title><link>https://codemario318.github.io/post/jvm/</link><pubDate>Tue, 18 Apr 2023 16:07:19 +0900</pubDate><guid>https://codemario318.github.io/post/jvm/</guid><description>&lt;img src="https://codemario318.github.io/post/jvm/jvm_cover.jpeg" alt="Featured image of post JVM" />&lt;h2 id="jvm-이란">JVM 이란?&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/jvm/jvm_1.png"
width="700"
height="525"
srcset="https://codemario318.github.io/post/jvm/jvm_1_huea2d8947db1d744557cd7bfccb927a97_54912_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jvm/jvm_1_huea2d8947db1d744557cd7bfccb927a97_54912_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="JVM 구조"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>JVM이란 Java Virtual Machine, 자바 가상 머신의 약자를 따서 줄여 부르는 용어이다. JVM의 역할은 자바 애플리케이션을 클래스 로더를 통해 읽어 들여 자바 API와 함께 실행하는 것이다.&lt;/p>
&lt;ul>
&lt;li>JVM은 Java와 OS 사이에서 중개자 역할을 수행하여 JAVA가 OS에 구애받지 않고 재사용을 가능하게 해준다.&lt;/li>
&lt;li>메모리 관리, Garbage collction을 수행한다.&lt;/li>
&lt;li>스택기반의 가상머신이다.&lt;/li>
&lt;/ul>
&lt;p>ARM 아키텍쳐 같은 하드웨어는 레지스터 기반으로 동작하는데 비해 JVM은 스택 기반으로 동작한다.&lt;/p>
&lt;h2 id="자바프로그램-실행과정">자바프로그램 실행과정&lt;/h2>
&lt;ol>
&lt;li>프로그램이 실행되면 JVM은 OS로 부터 프로그램이 필요로 하는 메모리를 할당받는다.
JVM은 이 메모리를 용도에 따라 여러 영역으로 나누어 관리한다.&lt;/li>
&lt;li>자바 컴파일러(&lt;code>javac&lt;/code>)가 자바 소스코드(&lt;code>.java&lt;/code>)를 읽어들여 자바 바이트 코드(&lt;code>.class&lt;/code>)로 변환시킨다.&lt;/li>
&lt;li>&lt;code>Class Loader&lt;/code>를 통해 &lt;code>class&lt;/code> 파일들을 JVM으로 로딩한다.&lt;/li>
&lt;li>로딩된 &lt;code>class&lt;/code> 파일들은 Execution engine을 통해 해석된다.&lt;/li>
&lt;li>해석된 바이트 코드는 Runtime Data Areas에 배치되어 실질적인 수행이 이루어지게 된다.&lt;/li>
&lt;/ol>
&lt;p>이러한 실행 과정속에서 JVM은 필요에 따라 Thread Synchronizeation과 GC같은 관리작업을 수행한다.&lt;/p>
&lt;h2 id="jvm-구성">JVM 구성&lt;/h2>
&lt;h3 id="클래스-로더-class-loader">클래스 로더 Class Loader&lt;/h3>
&lt;p>JVM 내로 클래스 파일을 로드하고, 링크를 통해 배치하는 작업을 수행하는 모듈이다. Runtime시에 동적으로 클래스를 로드한다. &lt;code>jar&lt;/code>파일 내 저장된 크래스들을 JVM위에 탑재하고 사용하지 않는 클래스들은 메모리에서 삭제한다. (컴파일러 역할)&lt;/p>
&lt;p>자바는 동적코드, 컴파일 타임이 아니라 런타임에 참조한다. 즉, 클래스를 처음으로 참조할 때, 해당 클래스를 로드하고 링크한다. 그 역할을 클래스 로더가 수행한다.&lt;/p>
&lt;h3 id="실행-엔진-execution-engine">실행 엔진 Execution Engine&lt;/h3>
&lt;p>클래스를 실행시킨다. 클래스 로더가 JVM내의 런타임 데이터 영역에 바이트 코드를 배치하면 실행엔진에 의해 실행된다. 자바 바이트코드는 기계가 바로 수행할 수 있는 언어보다는 비교적 인간이 보기 편한 형태로 기술된 것이다.&lt;/p>
&lt;p>그래서 실행엔진은 이와 같은 바이트코드를 실제로 JVM내부에서 기계가 실행할 수 있는 형태로 변경한다. 이 때 두가지 방식을 사용하게 된다.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>인터프리터 Interpreter&lt;/strong>&lt;br>
실행 엔진은 자바 바이트 코드를 명령어 단위로 읽어서 실행한다.&lt;/p>
&lt;ul>
&lt;li>인터프리터 언어의 단점을 그대로 갖고 있다.
&lt;ul>
&lt;li>한 줄 씩 수행하기 때문에 느리다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>JIT Just-In-Time&lt;/strong>&lt;br>
인터프리터 방식의 단점을 보완하기 위해 도입된 JIT 컴파일러이다. 인터프리터 방식으로 실행하다가 적절한 시점에 바이트 코드 전체를 컴파일하여 네이트브 코드로 변경하고, 이후에는 해당 코드를 더이상 인터프리팅 하지 않고 네이티브 코드로 직접 실행한다.&lt;/p>
&lt;ul>
&lt;li>네이티브 코드는 캐시에 보관하기 때문에 한 번 컴파일 된 코드는 빠르게 수행하게 된다.&lt;/li>
&lt;li>JIT 컴파일러가 컴파일 하는 과정은 바이트코드를 인터프리팅하는 것보다 훨씬 오래걸리므로 한 번만 실행되는 코드라면 컴파일하지 않고 인터프리팅 하는 것이 유리하다.&lt;/li>
&lt;li>JIT 컴파일러를 사용하는 JVM들은 내부적으로 해당 메서드가 얼마나 자주 수행되는지 체크하고, 일정 정도를 넘을 때에만 컴파일을 수행한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="garbage-collector">Garbage Collector&lt;/h3>
&lt;p>GC를 수행하는 모듈 (쓰레드)를 가진다.&lt;/p>
&lt;h3 id="runtime-data-area">Runtime Data Area&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/jvm/jvm_2.png"
width="820"
height="467"
srcset="https://codemario318.github.io/post/jvm/jvm_2_hu5c0880ba25ae8fa3d1b0789effaf6907_96473_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jvm/jvm_2_hu5c0880ba25ae8fa3d1b0789effaf6907_96473_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="421px"
>&lt;/p>
&lt;p>프로그램을 수행하기 위해 OS에서 할당받은 메모리 공간&lt;/p>
&lt;h3 id="pc-register">PC Register&lt;/h3>
&lt;p>Thread가 시작될 때 생성되며 생성될 때마다 생성되는 공간으로 스레드마다 하나씩 존재한다.&lt;/p>
&lt;p>쓰레드가 어떤 부분을 어떤 명령으로 실행해야할 지에 대한 기록을 하는 부분으로 현재 수행중인 JVM 명령의 주소를 갖는다.&lt;/p>
&lt;h3 id="jvm-스택-영역">JVM 스택 영역&lt;/h3>
&lt;p>프로그램 실행과정에서 임시로 할당되었다가 메소드를 빠져나가면 바로 소멸되는 특성의 데이터를 저장하기 위한 영역이다.&lt;/p>
&lt;ul>
&lt;li>각종 형태의 변수나 임시 데이터, 스레드나 메소드의 정보를 저장한다.&lt;/li>
&lt;li>메소드 호출 시마다 각각의 스택 프레임(그 메서드 만을 위한 공간)이 생성된다. 메서드 수행이 끝나면 프레임 별로 삭제를 한다.&lt;/li>
&lt;li>메소드 안에서 사용되는 값들(local variable)을 저장한다.&lt;/li>
&lt;li>호출된 메소드의 매개변수, 지역변수, 리턴 값 및 연산 시 일어나는 값들을 임시로 저장한다.&lt;/li>
&lt;/ul>
&lt;h3 id="native-method-stack">Native method stack&lt;/h3>
&lt;p>자바 프로그램이 컴파일 되어 생성되는 바이트 코드가 아닌 실제 실행할 수 있는 기계어로 작성된 프로그램을 실행시키는 영역이다.&lt;/p>
&lt;ul>
&lt;li>자바가 아닌 다른 언어로 작성된 코드를 위한 공간이다.&lt;/li>
&lt;li>Java Native Interface를 통해 바이트 코드로 전환하여 저장하게 된다.&lt;/li>
&lt;li>일반 프로그램처럼 커널이 스택을 잡아 독자적으로 프로그램을 실행시키는 영역이다.&lt;/li>
&lt;li>이 부분을 통해 C code를 실행시켜 Kernel에 접근할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="method-area--class-area--static-area">Method Area (= Class area = Static area)&lt;/h3>
&lt;p>클래스 정보를 처음 메모리 공간에 올릴 때 초기화되는 대상을 저장하기 위한 메모리 공간.&lt;/p>
&lt;ul>
&lt;li>올라가게 되는 메소드의 바이트코드는 프로그램의 흐름을 구성하는 바이트 코드이다.
&lt;ul>
&lt;li>자바 프로그램은 메인 메소드의 호출에서 부터 계속된 메소드의 호출로 흐름을 이어가기 때문이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>대부분 인스턴스의 생성도 메소드 내에서 명령하고 호출한다.
&lt;ul>
&lt;li>사실상 컴파일 된 파이트코드의 대부분이 메소드 바이트코드이기 때무넹 거의 모든 바이트코드가 올라간다고 봐도 상관없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Runtime Constat Pool이라는 별도의 관리 영역도 함께 존재하여, 상수 자료형을 저장하여 참조하고 중복을 막는 역할을 수행한다.&lt;/li>
&lt;/ul>
&lt;h4 id="올라가는-정보의-종류">올라가는 정보의 종류&lt;/h4>
&lt;ol>
&lt;li>Feild Information
&lt;ul>
&lt;li>멤버 변수의 이름&lt;/li>
&lt;li>데이터 타입&lt;/li>
&lt;li>접근 제어자에 대한 정보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Method Information
&lt;ul>
&lt;li>메소드의 이름,&lt;/li>
&lt;li>리턴타입,&lt;/li>
&lt;li>매개변수,&lt;/li>
&lt;li>접근 제어자에 대한 정보&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Type Information
&lt;ul>
&lt;li>Class인지 interface인지의 여부 저장&lt;/li>
&lt;li>Type의 속성&lt;/li>
&lt;li>전체 이름&lt;/li>
&lt;li>Super class의 전체 이름 (interface이거나 object인 경우 제외)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="heap">Heap&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/jvm/jvm_3.png"
width="1444"
height="758"
srcset="https://codemario318.github.io/post/jvm/jvm_3_huffa1b0b04f7aa5fa473d93e9bbf2fa2a_361840_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/jvm/jvm_3_huffa1b0b04f7aa5fa473d93e9bbf2fa2a_361840_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="190"
data-flex-basis="457px"
>&lt;/p>
&lt;p>객체를 저장하는 가상 메모리 공간&lt;/p>
&lt;ul>
&lt;li>생성된 객체와 배열을 저장한다.&lt;/li>
&lt;li>class area영역에 올라온 클래스들만 객체로 생성할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="permanent-generation">Permanent Generation&lt;/h4>
&lt;p>생성된 객체들의 정보 주소값이 저장된 공간이다. class loader에 의해 load되는 class, method 등에 대한 meta 정보가 저장되는 영역이고, JVM에 의해 사용된다.&lt;/p>
&lt;p>Reflection을 사용하여 동적으로 클래스가 로딩되는 경우에 사용된다. 내부적으로 Reflection 기능을 자주 사용하는 Spring Framework를 이용할 경우 이 영역에 대한 고려가 필요하다.&lt;/p>
&lt;h3 id="newyoung-영역">New/Young 영역&lt;/h3>
&lt;ul>
&lt;li>Eden
객체들이 최초로 생성되는 공간&lt;/li>
&lt;li>Survivor 0 / 1
Eden에서 참조되는 객체들이 저장되는 공간&lt;/li>
&lt;/ul>
&lt;h3 id="old-영역">Old 영역&lt;/h3>
&lt;p>New area에서 일정 시간 참조되고 있는, 살아남은 객체들이 저장되는 공간&lt;/p>
&lt;p>Eden 영역에 객체가 가득차게 되면 첫번째 GC(minor GC)가 발생한다. Eden 영역에 있는 값들을 Survivor 1 영역에 복사하고 이 영역을 제외한 나머지 영역의 객체를 삭제한다.&lt;/p>
&lt;p>인스턴스는 소멸 방법과 소멸 시점이 지역 변수와는 다리기에 힙이라는 별도의 영역에 할당된다. 자바 가상머신은 매우 합리적으로 인스턴스를 소멸시킨다. 더이상 인스턴스의 존재 이유가 없을 때 소멸시킨다.&lt;/p></description></item><item><title>Elasticsearch</title><link>https://codemario318.github.io/post/elasticsearch/</link><pubDate>Tue, 18 Apr 2023 14:13:19 +0900</pubDate><guid>https://codemario318.github.io/post/elasticsearch/</guid><description>&lt;img src="https://codemario318.github.io/post/elasticsearch/elasticsearch_cover.png" alt="Featured image of post Elasticsearch" />&lt;p>&lt;img src="https://codemario318.github.io/post/elasticsearch/elasticsearch_1.png"
width="548"
height="222"
srcset="https://codemario318.github.io/post/elasticsearch/elasticsearch_1_hu202029bfbb17dd9712dbc236d4de0749_13131_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/elasticsearch/elasticsearch_1_hu202029bfbb17dd9712dbc236d4de0749_13131_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="246"
data-flex-basis="592px"
>&lt;/p>
&lt;p>엘라스틱서치는 검색 엔진인 아파치 루씬 (Apache Lucene)으로 구현한 RESTful API 기반의 검색 엔진이다.
엘라스틱서치 아키텍쳐는 클러스터 기반으로 구성되어 있다.&lt;/p>
&lt;h2 id="클러스터-기본-특징">클러스터 기본 특징&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>수평 확장&lt;/strong>&lt;br>
클러스터를 사실상 무한으로 확장할 수 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>인덱스 샤딩&lt;/strong>&lt;br>
엘라스틱서치는 인덱스를 조각내서 &amp;ldquo;샤드 (shard)&amp;ldquo;라는 조각난 데이터로 만든다. 때문에 나누어진 데이터를 편하게 각 호스트에 분리해서 보관할 수 있다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="엘라스틱서치-특징">엘라스틱서치 특징&lt;/h2>
&lt;h3 id="schemaless와-문서지향">Schemaless와 문서지향&lt;/h3>
&lt;p>엘라스틱 서치는 JSON 구조를 사용하여 기존 RDBMS와 같은 엄격한 구조를 적용하지 않는다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>스키마가 다이나믹하게 변할 수 있다&lt;/strong>&lt;br>
전통적인 관계형 구조로 구성할 경우 프로젝트 막바지에 모든 스키마르 ㄹ변경하고, 데이터를 다시 구성하는 문제에 봉착할 수 있는데 JSON 구조는 이런 문제들을 사전에 막을 수 있다.&lt;/li>
&lt;li>&lt;strong>데이터 공간을 절약할 수 있다.&lt;/strong>&lt;br>
컬럼을 동적으로 정의하여, 필요한 데이터만 넣게 되어 데이터 공간 및 CPU 사용량, 네트워크 트래픽도 줄일 수 이쓴 효과를 볼 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="검색능력searching">검색능력(Searching)&lt;/h3>
&lt;p>기본적인 검색 기능 뿐만 아니라 특히 Full-text 검색 능력이라는 강력한 기능을 탑재하고 있다.&lt;/p>
&lt;p>관계형 데이터베이스의 문자열 컬럼에 대해 실행되는 단순한 SQL 질의와는 다르다.&lt;/p>
&lt;p>기본적으로 엘라스틱은 검색을 할 수 있는 Term(의미의 최소한위)로 단어의 형태소 분석을 수행하고, 이 단어들과 연관된 문서를 매핑하여 검색을 시켜주는 개념으로 문서를 통쨰로 like 검색하는 DB와는 구조적으로 다르다.&lt;/p>
&lt;h3 id="분석analytics">분석(Analytics)&lt;/h3>
&lt;p>엘라스틱 서치를 탑재하여 만든 사이트에 접속하는 사람들의 OS가 무엇인지, 어느나라에서 접속했는지 등을 알고 싶을 때 분석 기능을 사용하면 편리하게 알 수 있다.&lt;/p>
&lt;h3 id="풍부한-api와-rest-지원">풍부한 API와 REST 지원&lt;/h3>
&lt;p>기본적으로 20개의 프로그래밍 언어를 지원하며, 기본적으로 REST API를 제공하여 REST API를 사용하는 모든 언어에서 HTTP 형식으로 사용할 수 있다.&lt;/p>
&lt;h3 id="쉬운-작동-쉬운-확장">쉬운 작동, 쉬운 확장&lt;/h3>
&lt;p>Single Node Instance로 작동하며, 수백개의 스케일 아웃을 쉽게 할 수 있다. 대부분의 빅데이터 플랫폼들이 그러하듯 Horizontal Scaling을 사용한다.&lt;/p>
&lt;h3 id="near-real-time근접-실시간">Near real-time(근접 실시간)&lt;/h3>
&lt;p>검색엔진은 기본적으로 형태소를 분석하고 색인을 해야 하는 시간이 다른 DBMS보다 오래 걸린다. 엘라스틱 역시 데이터를 삽입한 순간 약 몇 초 정도는 이 단계를 거친 후 검색을 할 수 있다.&lt;/p>
&lt;h3 id="lightning-fast-빠른-속도">Lightning-fast (빠른 속도)&lt;/h3>
&lt;p>엘라스틱 서치의 DNA는 루씬이기 떄문에 단어 입력후 문서를 찾는 속도가 다른 NoSQL들에 비해 매우 빠르다.&lt;/p>
&lt;h3 id="fault-tolerant내고장성">Fault-tolerant(내고장성)&lt;/h3>
&lt;p>노드 실패시 replicate된 다른 노드에서 데이터를 가져오며, 네트워크 실패 시 다른 마스터 복제본으로 선택한다.&lt;/p>
&lt;h2 id="엘라스틱서치-데이터-구조">엘라스틱서치 데이터 구조&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/elasticsearch/elasticsearch_2.png"
width="505"
height="121"
srcset="https://codemario318.github.io/post/elasticsearch/elasticsearch_2_hu2937dba10a5c76bd51c9cb65441839c6_5697_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/elasticsearch/elasticsearch_2_hu2937dba10a5c76bd51c9cb65441839c6_5697_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="417"
data-flex-basis="1001px"
>&lt;/p>
&lt;p>엘라스틱서치는 위와 같이 문서를 엘라스틱 인덱스로 만든 뒤, 샤드로 분리하여 보관한다.&lt;/p>
&lt;p>샤드는 논리적/물리적으로 분할 된 인덱스인데, 각각의 엘라스틱서치 샤드는 루씬 인덱스이기도 하다.&lt;/p>
&lt;p>루씬은 새로운 문서를 엘라스틱서치 인덱스에 저장할 때 &amp;ldquo;세그먼트&amp;quot;를 생성하는데, 루씬의 인덱스 조각인 이 세그먼트를 조합해 저장한 데이터의 검색을 할 수 있다.&lt;/p>
&lt;p>색인 처리량이 매우 중요할 때는 세그먼트를 더 생성하기도 한다. 루씬은 순차적으로 세그먼트를 검색하므로 세그먼트 수가 많아지면 검색속도도 따라서 느려지게 된다.&lt;/p>
&lt;h2 id="엘라스틱서치-데이터-설명">엘라스틱서치 데이터 설명&lt;/h2>
&lt;h3 id="인덱스색인">인덱스(색인)&lt;/h3>
&lt;p>데이터를 저장 및 색인 하는 곳으로, 관계형 DB의 데이터베이스 개념과 유사하다.&lt;/p>
&lt;ul>
&lt;li>실제로는 각 샤드를 가리키고 있는 논리적인 네임스페이스&lt;/li>
&lt;/ul>
&lt;h3 id="shard">Shard&lt;/h3>
&lt;p>샤드는 엘라스틱서치에서 사용하는 검색 엔진인 루씬의 인스턴스.&lt;/p>
&lt;ul>
&lt;li>인덱스를 한 개의 샤드로 구성할 수도 있지만, 인덱스 사이즈가 증가할 경우 여러개의 물리서버에 나누어 보관하기 위해 보통은 여러개의 샤드로 구성함.&lt;/li>
&lt;/ul>
&lt;h3 id="segment">Segment&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/elasticsearch/elasticsearch_3.png"
width="966"
height="422"
srcset="https://codemario318.github.io/post/elasticsearch/elasticsearch_3_hu86978e4c499b5b65ae6f680b7d5eecac_98101_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/elasticsearch/elasticsearch_3_hu86978e4c499b5b65ae6f680b7d5eecac_98101_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="549px"
>&lt;br>
각 샤드는 다수의 세그먼트를 가지고 있고, 샤드에서 검색 시, 먼저 각 세그먼트를 검색하여 결과를 조합한 최종 결과를 해당 샤드의 결과로 리턴하게 된다.&lt;/p>
&lt;p>&lt;strong>searchable&lt;/strong>&lt;/p>
&lt;p>엘라스틱서치에 데이터(문서)를 저장하면, 엘라스틱서치는 이것을 메모리에 모아두고 새로운 세그먼트를 디스크에 기록하여 검색을 리프레시함. 이로 인해 새로운 검색 가능한 세그먼트가 만들어지게 된다.&lt;/p>
&lt;p>&lt;strong>commited&lt;/strong>&lt;/p>
&lt;p>그러나 세그먼트가 fsync되지 않았으므로 여전히 데이터 손실의 위험이 남아있다.
그래서 엘라스틱서치는 세그먼트를 fsync하는 &amp;ldquo;flush&amp;quot;를 주기적으로 진행하고, 불필요한 트랜젝션 로그를 비운다.&lt;/p>
&lt;p>&lt;strong>merge process&lt;/strong>&lt;/p>
&lt;p>세그먼트는 불변임, 데이터(document)가 업데이트되면 실제로는 그저 삭제되었다고 마크하고 새로운 데이터(document)를 가리킬 뿐이다.
이러한 오래된 삭제된 데이터를 지우는 것&lt;/p>
&lt;h2 id="엘라스틱서치-클러스터-구조">엘라스틱서치 클러스터 구조&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/elasticsearch/elasticsearch_4.png"
width="810"
height="471"
srcset="https://codemario318.github.io/post/elasticsearch/elasticsearch_4_huece77bd1d46ff2d4db8b3e1ff9625602_47102_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/elasticsearch/elasticsearch_4_huece77bd1d46ff2d4db8b3e1ff9625602_47102_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;p>위 다이어그램은 3개의 엘라스틱서치 인스턴스 환경에서, 4개의 샤드를 2개의 복제본으로 구성했을 때의 구조이다.&lt;/p>
&lt;p>엘라스틱서치는 클러스터 구조로 구성되어 있으며 샤드와 복제본의 수를 설정해두면 스스로 각 노드에 샤드를 분배하여 장애발생 시 데이터 손실을 최소화한다.&lt;/p>
&lt;p>프라이머리 샤드가 손실되었을 경우에는 레플리카를 프라이머리로 승격시켜 데이터 손실을 방지한다.&lt;/p></description></item></channel></rss>