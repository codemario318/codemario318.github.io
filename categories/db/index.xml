<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DB on Mario Blog</title><link>https://codemario318.github.io/categories/db/</link><description>Recent content in DB on Mario Blog</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Tue, 22 Apr 2025 13:58:49 +0900</lastBuildDate><atom:link href="https://codemario318.github.io/categories/db/index.xml" rel="self" type="application/rss+xml"/><item><title>B-Tree VS LSM Tree</title><link>https://codemario318.github.io/post/db/rdbms-nosql/</link><pubDate>Tue, 22 Apr 2025 13:58:49 +0900</pubDate><guid>https://codemario318.github.io/post/db/rdbms-nosql/</guid><description>&lt;img src="https://codemario318.github.io/post/db/rdbms-nosql/cover.png" alt="Featured image of post B-Tree VS LSM Tree" />&lt;p>최근 &amp;ldquo;&lt;strong>데이터 중심 애플리케이션 설계&lt;/strong>&amp;ldquo;을 읽으면서 데이터베이스의 저장소 엔진의 처리 방식이 성능에 미치는 영향에 대해 구체적으로 알게 되었습니다.&lt;/p>
&lt;p>책에서 해당 부분의 도입부를 읽으며, &amp;ldquo;&lt;strong>데이터를 처리하는 방식에 따라 유리한 형태는 다르고 적절한 방법을 선택 해야 한다&lt;/strong>&amp;ldquo;와 같은 조언으로 마무리 될 것으로 예상했었는데요&lt;/p>
&lt;p>실제로는 각 스토리지 엔진 구조의 장단점을 설명하면서 최근 인기를 끌고 있는것은 로그 구조화 스토리지 엔진이지만, B-Tree 계열은 오랜 기간 발전하면서 많은 작업 부하에도 대응할 수 있다는 내용이 언급하며, 실제 사용 사례에 적합한지 실제로 테스트 해보는 것도 좋은 방법이라는 언급이 있었습니다.&lt;/p>
&lt;p>그런 의미로 이 글에서는 &lt;strong>페이지 지향 계열 저장소 엔진&lt;/strong>(B-Tree)과 &lt;strong>로그 구조 계열 저장소 엔진&lt;/strong>(LSM Tree) 두 가지 주요 저장 구조를 비교 해보고, 어떤 식으로 약점을 개선했는지 자세히 살펴보려고 합니다.&lt;/p>
&lt;h2 id="두-저장-구조의-기본-원리">두 저장 구조의 기본 원리&lt;/h2>
&lt;p>책에서는 B-Tree와 로그 구조 계열 저장소 엔진(대표적으로 LSM Tree)의 쓰기 방식의 차이 주목하고 있습니다.&lt;/p>
&lt;h3 id="b-tree-구조">B-Tree 구조&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> [루트 페이지]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> / | \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[페이지1] [페이지2] [페이지3]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> / \ / \ / \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">... ... ... ... ... ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>B-Tree는 MySQL InnoDB와 같은 대부분의 관계형 데이터베이스에서 사용하는 색인 구조입니다. MySQL의 InnoDB 스토리지 엔진은 기본키(PK)를 B-Tree로 관리하는 클러스터드 인덱스 방식을 사용합니다. B-Tree는 다음과 같은 특징을 가집니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>균형 잡힌 트리 구조&lt;/strong>:
&lt;ul>
&lt;li>모든 리프 노드가 같은 깊이에 위치하여 어떤 키에 대해서도 &lt;code>O(log n)&lt;/code> 시간 복잡도로 검색 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>페이지 단위 저장&lt;/strong>:
&lt;ul>
&lt;li>데이터를 고정 크기의 페이지 단위로 디스크에 저장&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>제자리 갱신(in-place update)&lt;/strong>:
&lt;ul>
&lt;li>데이터를 삽입, 삭제, 수정할 때 해당 페이지의 내용을 직접 덮어쓰는 방식 사용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>이러한 특성으로 인해 InnoDB 에서 처리되는 쓰기 작업(&lt;code>INSERT&lt;/code>, &lt;code>UPDATE&lt;/code> , &lt;code>DELETE&lt;/code>)은 B-Tree의 리프 노드에 달려있는 PK를 통해, 물리 기억 장치의 저장된 위치의 내용을 찾고, 해당 내용을 직접 덮어쓰는 방식으로 처리됩니다.&lt;/p>
&lt;h3 id="lsm-tree-구조">LSM Tree 구조&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[MemTable(메모리)] → [SS테이블1(디스크)] → [SS테이블2(디스크)] → ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓ ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [컴팩션 프로세스] [컴팩션 프로세스]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ↓ ↓
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [병합된 SS테이블] [병합된 SS테이블]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>LSM Tree(Log-Structured Merge Tree)는 Cassandra, RocksDB, MongoDB의 WiredTiger 등 여러 NoSQL 데이터베이스에서 사용하는 저장 구조입니다. 주요 특징은 다음과 같습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>로그 기반 쓰기&lt;/strong>:
&lt;ul>
&lt;li>데이터 변경 사항을 로그처럼 디스크에 순차적으로 추가&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>쓰기 버퍼링&lt;/strong>:
&lt;ul>
&lt;li>새로운 데이터를 먼저 메모리 내의 멤테이블(MemTable)에 버퍼링&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>컴팩션 프로세스&lt;/strong>:
&lt;ul>
&lt;li>주기적으로 데이터를 병합하고 압축하는 백그라운드 프로세스 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>로그 기반 쓰기 특성으로 인해 값을 갱신하는 것이 아닌 최신 내용을 디스크에 추가만 하도록 처리되고, 백그라운드 컴팩션 작업을 통해 최신 내용만 남게되는 방식으로 처리됩니다.&lt;/p>
&lt;h2 id="성능-특성-비교">성능 특성 비교&lt;/h2>
&lt;p>쓰기 방식의 차이로 인해 데이터를 관리하는 방식도 달라지게되고, 이에 따라 요청하는 데이터를 처리하는 방식에도 차이가 있습니다.&lt;/p>
&lt;h3 id="읽기-성능">읽기 성능&lt;/h3>
&lt;p>&lt;strong>B-Tree의 읽기 성능&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>균형 잡힌 트리 구조로 인해 어떤 키든 일정한 시간 내에 조회 가능 (&lt;code>O(log n)&lt;/code>)&lt;/li>
&lt;li>실제 환경에서는 대부분 3-4단계 내에 데이터 접근 가능&lt;/li>
&lt;li>데이터가 정렬된 상태로 유지되어 범위 쿼리와 정렬된 스캔에 효율적&lt;/li>
&lt;li>인덱스가 메모리에 캐시될 경우 매우 빠른 접근 가능&lt;/li>
&lt;/ul>
&lt;p>위 설명처럼 어떤 키 값도 &lt;code>O(log n)&lt;/code> 시간 복잡도로 조회가 가능하고, 정렬된 상태로 키 값이 관리되기 때문에 B+Tree를 사용하게 되는 경우 Range Scan 작업도 빠르게 처리될 수 있습니다.&lt;/p>
&lt;p>특히 인덱스가 조회하려는 데이터를 모두 가지고 있는 Covering Index로 처리될 수 있다면, 읽기가 메모리 내에서만 처리될 수 있기 때문에 매우 빠르게 처리될 수 있습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>LSM Tree의 읽기 성능&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>특정 키를 찾기 위해 여러 SS테이블을 차례로 검색해야 할 수 있음&lt;/li>
&lt;li>메모리의 멤테이블부터 최신 SS테이블까지 순차적으로 확인 필요&lt;/li>
&lt;li>블룸 필터(Bloom Filter)와 같은 최적화를 통해 불필요한 SS테이블 검색을 줄일 수 있음&lt;/li>
&lt;li>컴팩션 작업 중에는 일시적으로 읽기 성능이 저하될 수 있음&lt;/li>
&lt;/ul>
&lt;p>같은 키를 가지는 새로운 데이터를 갱신하는 것이 아닌 파일에 추가하는 방식으로 처리되기 때문에, 메모리 상의 멤테이블에 데이터가 없다면, 가장 최신 SS테이블부터 해당 키를 가지는 데이터를 찾을 때 까지 모든 SS테이블을 확인해야합니다.&lt;/p>
&lt;p>이런 상황은 해당 키를 가지는 데이터가 존재하지 않는 경우 모든 SS테이블에 데이터가 없다는 것을 확인해야하기 때문에 성능이 많이 떨어질 수 있습니다.&lt;/p>
&lt;p>이런 경우를 대비하여 블룸 필터를 통해 최악의 경우는 회피하는 방식으로 최적화가 되어있습니다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>블룸 필터 Bloom filter&lt;/strong>&lt;br>
원소가 집합에 속하는지 여부를 검사하는데 사용되는 확률적 자료구조.&lt;br>
어떤 원소가 집합에 속한다고 판단된 경우 실제로는 원소가 집합에 속하지 않는 긍정 오류가 발생하는 것은 가능하지만, 원소가 집합에 속하지 않는 것으로 판단되었는데 실제로 원소가 집합에 속하는 부정 오류는 절대 발생하지 않는다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="쓰기-성능">쓰기 성능&lt;/h3>
&lt;p>&lt;strong>B-Tree의 쓰기 성능&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>데이터 수정 시 해당 페이지를 직접 덮어써야 함 (무작위 I/O 발생)&lt;/li>
&lt;li>균형 유지를 위한 페이지 분할 작업이 발생할 수 있음&lt;/li>
&lt;li>인덱스가 여러 개인 경우 모든 관련 인덱스 업데이트 필요&lt;/li>
&lt;li>WAL(Write-Ahead Log)을 통한 안전한 데이터 변경으로 추가적인 I/O 발생&lt;/li>
&lt;/ul>
&lt;p>위에서 살짝 언급한 것 처럼 데이터 수정이 필요할 경우 PK를 통해서 해당 페이지를 찾고 직접 덮어 써야 하기 때문에 무작위 I/O가 많이 발생하게 됩니다.&lt;/p>
&lt;p>그리고 데이터베이스에 따라 테이블에 여러 개의 보조 인덱스를 추가하는 경우 해당 인덱스(B-Tree) 갱신을 위해 추가적인 작업이 발생할 수 있습니다.&lt;/p>
&lt;p>또한 데이터 갱신 중 비정상적인 처리(종료)로 인해 데이터 변경 요청이 손실되는 것을 막기 위해 추가적인 쓰기 작업이 추가되는 경우도 있습니다(WAL).&lt;/p>
&lt;hr>
&lt;p>&lt;strong>LSM Tree의 쓰기 성능&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>데이터를 순차적으로 추가하므로 디스크 쓰기 효율이 높음&lt;/li>
&lt;li>메모리 버퍼링을 통해 디스크 I/O 횟수를 크게 줄임&lt;/li>
&lt;li>기존 데이터를 덮어쓰지 않으므로 페이지 분할 같은 구조 재조정이 필요 없음&lt;/li>
&lt;li>백그라운드 컴팩션이 필요하지만 쓰기 성능에 직접적인 영향은 적음&lt;/li>
&lt;/ul>
&lt;p>기본적으로 데이터 순차 쓰기 방식으로 처리되기 때문에 운영체제 수준에서 최적화가 잘 되어 Random I/O보다 훨씬 빠르게 처리될 수 있습니다.&lt;/p>
&lt;p>그리고 경우에 따라서 이 마저도 효과적으로 수행할 수 있도록 버퍼링을 통해 데이터를 모아 처리하는 방식으로 최적화 하기도 합니다.&lt;/p>
&lt;h2 id="실제-구현에서의-최적화-기법">실제 구현에서의 최적화 기법&lt;/h2>
&lt;p>지금까지의 내용만 본다면, B-Tree 기반 데이터베이스는 쓰기에 불리하고 로그 기반 데이터베이스는 읽기에 불리한 것 처럼 느껴집니다. (사실 일반적으로 그렇게 생각되는 경우가 많은 것 같습니다.)&lt;/p>
&lt;p>그렇지만 불리한 성능을 개선하기 위해 여러 최적화가 적용되어 있습니다.&lt;/p>
&lt;h3 id="b-tree-기반-시스템의-주요-최적화-innodb-사례">B-Tree 기반 시스템의 주요 최적화 (InnoDB 사례)&lt;/h3>
&lt;p>MySQL의 InnoDB 스토리지 엔진은 데이터를 갱신해야함으로 발생하는 Random I/O로 인한 병목을 개선하기 위해 여러 아이디어를 적용했습니다.&lt;/p>
&lt;p>&lt;img src="https://codemario318.github.io/post/db/rdbms-nosql/img.png"
width="856"
height="667"
srcset="https://codemario318.github.io/post/db/rdbms-nosql/img_hue3e0905a4663bd838b952fb1b242c93f_73721_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/db/rdbms-nosql/img_hue3e0905a4663bd838b952fb1b242c93f_73721_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="InnoDB 아키텍처"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>기본적으로 InnoDB 스토리지 엔진은 버퍼풀을 통해 메모리 영역에 당장 활용되어야 하는 데이터들을 캐싱하고, 변경 내용들을 버퍼링(더티 페이지)하여 주기적인 플러싱(flushing)으로 백그라운드 작업을 통해 디스크에 실제로 반영하게 됩니다.&lt;/p>
&lt;p>이러한 내용들을 요약해보면 아래와 같습니다.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>버퍼링과 지연 쓰기&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>버퍼풀&lt;/strong>:
&lt;ul>
&lt;li>자주 접근하는 데이터 페이지를 메모리에 캐싱하여 I/O 감소&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>변경 버퍼(Change Buffer)&lt;/strong>:
&lt;ul>
&lt;li>보조 인덱스 변경 사항을 메모리에 버퍼링하여 나중에 적용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>쓰기 지연&lt;/strong>:
&lt;ul>
&lt;li>변경 사항을 즉시 디스크에 쓰지 않고 더티 페이지로 유지하다가 효율적으로 일괄 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>로깅과 복구 최적화&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>리두 로그&lt;/strong>:
&lt;ul>
&lt;li>변경 사항을 순차적인 로그에 먼저 기록하여 I/O 효율성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>그룹 커밋&lt;/strong>:
&lt;ul>
&lt;li>여러 트랜잭션의 커밋을 묶어 처리하여 I/O 오버헤드 감소&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>이중 쓰기 버퍼&lt;/strong>:
&lt;ul>
&lt;li>데이터 무결성을 보장하면서도 순차적 쓰기를 통해 I/O 효율성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>동시성 향상 기법&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>MVCC(다중 버전 동시성 제어)&lt;/strong>:
&lt;ul>
&lt;li>읽기 작업이 쓰기 작업을 차단하지 않도록 하여 전반적인 동시성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>버퍼풀 인스턴스 분할&lt;/strong>:
&lt;ul>
&lt;li>내부 잠금 경합을 줄이고 병렬 처리 효율 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>백그라운드 처리&lt;/strong>:
&lt;ul>
&lt;li>페이지 클리너 스레드가 더티 페이지를 비동기적으로 디스크에 기록&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="lsm-tree-기반-시스템의-주요-최적화-cassandra-사례">LSM Tree 기반 시스템의 주요 최적화 (Cassandra 사례)&lt;/h3>
&lt;p>&lt;img src="https://codemario318.github.io/post/db/rdbms-nosql/img_1.png"
width="1355"
height="854"
srcset="https://codemario318.github.io/post/db/rdbms-nosql/img_1_hub64386be61c9330102f53e13d81bc75b_321472_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/db/rdbms-nosql/img_1_hub64386be61c9330102f53e13d81bc75b_321472_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="LSM Tree 기반 시스템 처리"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>카산드라는 아래와 같은 순서로 쓰기 작업이 수행됩니다.&lt;/p>
&lt;ul>
&lt;li>커밋 로그에 데이터 기록하기&lt;/li>
&lt;li>멤테이블에 데이터 쓰기&lt;/li>
&lt;li>멤테이블에서 데이터 플러시하기&lt;/li>
&lt;li>SSTables의 디스크에 데이터 저장&lt;/li>
&lt;/ul>
&lt;p>처음 커밋 로그에 데이터를(내구성 보장을 위해) 기록하고 멤테이블에 데이터를 쓰게되는데, 멤테이블은 쓰기를 버퍼링하고 데이터 파티션을 캐싱하는 역할도 함께 수행하게 됩니다.&lt;/p>
&lt;p>멤테이블은 지정한 크기에 도달할 때 까지 정렬된 순서를 유지하며 쓰기를 캐싱하고, 한계에 도달하면 디스크에 플러시되어 SS테이블로 저장됩니다.&lt;/p>
&lt;p>SS테이블은 변경 불가능하므로 데이터가 업데이트되거나 삭제될 때 이전 데이터를 삽입 또는 업데이트로 덮어쓰거나 SS테이블에서 제거하지 않습니다.&lt;/p>
&lt;p>대신 새 타임스탬프가 있는 업데이트된 데이터로 새 SS테이블이 만들어지고 이전 SS테이블은 삭제 표시가 됩니다. (삭제된 데이터 조각을 툼스톤이라고 함)&lt;/p>
&lt;hr>
&lt;p>&lt;strong>컴팩션 전략 최적화&lt;/strong>&lt;/p>
&lt;p>이러한 특성으로 인해 여러 버전의 행을 여러 SS테이블에 기록할 수 있고, SS테이블이 많아지면 전체 행을 검색하기 위해 점점 더 많은 SS테이블에 액세스해야 할 수 있습니다.&lt;/p>
&lt;p>이로 인해 읽기 성능이 떨어지는 것을 막기 위해 주기적으로 SS테이블을 병합하고 오래된 데이터를 폐기하는데, 이를 컴팩션이라고 합니다.&lt;/p>
&lt;p>컴팩션은 백그라운드로 수행되긴 하지만 쓰기 작업을 발생시키므로 이를 최적화하는 방법들이 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>레벨 컴팩션(Leveled Compaction)&lt;/strong>:
&lt;ul>
&lt;li>데이터를 여러 레벨로 구성하여 컴팩션 비용 분산&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>사이즈 단계별 컴팩션(Size-Tiered Compaction)&lt;/strong>:
&lt;ul>
&lt;li>비슷한 크기의 SS테이블끼리 병합하여 효율성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>컴팩션 스로틀링&lt;/strong>:
&lt;ul>
&lt;li>컴팩션이 다른 작업에 미치는 영향을 제한하여 일관된 성능 유지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>읽기 성능 향상 기법&lt;/strong>&lt;/p>
&lt;p>컴팩션 외에도 읽기 성능을 향상시키는 기법들도 존재합니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>블룸 필터&lt;/strong>:
&lt;ul>
&lt;li>특정 키가 SS테이블에 없다는 것을 효율적으로 확인하여 불필요한 디스크 접근 감소&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>파티셔닝&lt;/strong>:
&lt;ul>
&lt;li>데이터를 파티션으로 나누어 병렬 처리 및 검색 범위 축소&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>인덱스 요약(Index Summary)&lt;/strong>:
&lt;ul>
&lt;li>각 SS테이블의 키 범위 정보를 메모리에 유지하여 검색 효율 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>쓰기 최적화&lt;/strong>&lt;/p>
&lt;p>아래와 같은 방법들이 도움이 될 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>WAL 최적화&lt;/strong>:
&lt;ul>
&lt;li>로그 압축, 그룹 커밋 등을 통한 로깅 효율성 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>멤테이블 구현 최적화&lt;/strong>:
&lt;ul>
&lt;li>효율적인 자료구조(스킵 리스트 등) 사용으로 메모리 내 작업 속도 향상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>직접 I/O&lt;/strong>:
&lt;ul>
&lt;li>운영체제 캐시를 우회하여 데이터베이스가 자체적으로 메모리 관리 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="어떤-상황에-어떤-저장-구조가-적합한가">어떤 상황에 어떤 저장 구조가 적합한가?&lt;/h2>
&lt;p>완벽하게 적합한지 결정하기는 어렵지만, 일반적으로 아래와 같은 상황에 맞는 저장 구조를 활용하면 좋다고 알려져 있습니다.&lt;/p>
&lt;h3 id="b-tree가-적합한-상황">B-Tree가 적합한 상황&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>복잡한 트랜잭션이 필요한 경우&lt;/strong>:
&lt;ul>
&lt;li>ACID 속성이 중요한 금융, 전자상거래 애플리케이션&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>다양한 인덱싱과 복잡한 쿼리가 필요한 경우&lt;/strong>:
&lt;ul>
&lt;li>다중 인덱스, 조인, 집계 함수 등을 활용하는 분석 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>읽기 작업이 쓰기보다 훨씬 많은 경우&lt;/strong>:
&lt;ul>
&lt;li>데이터 변경이 적고 조회가 빈번한 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>데이터 크기가 메모리에 대부분 캐싱될 수 있는 경우&lt;/strong>:
&lt;ul>
&lt;li>데이터셋이 상대적으로 작은 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="lsm-tree가-적합한-상황">LSM Tree가 적합한 상황&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>대규모 쓰기 워크로드&lt;/strong>:
&lt;ul>
&lt;li>로그 수집, IoT 센서 데이터, 클릭스트림 추적 등 초당 수만에서 수십만 건의 삽입이 필요한 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>스키마리스 데이터 모델이 필요한 경우&lt;/strong>:
&lt;ul>
&lt;li>빠르게 변화하는 비즈니스 요구사항에 대응해야 하는 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>수평적 확장성이 중요한 경우&lt;/strong>:
&lt;ul>
&lt;li>샤딩을 통해 쉽게 확장해야 하는 분산 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>압축률이 중요한 경우&lt;/strong>:
&lt;ul>
&lt;li>저장 공간 효율성이 중요한 대용량 데이터 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="선택-시-고려사항">선택 시 고려사항&lt;/h2>
&lt;p>적합한 저장 구조를 선택할 때 아래와 같은 내용을 고려한다면 조금 더 쉽게 결정할 수 있습니다.&lt;/p>
&lt;h3 id="워크로드-특성">워크로드 특성&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>읽기/쓰기 비율&lt;/strong>:
&lt;ul>
&lt;li>읽기가 주로 필요하면 B-Tree, 쓰기가 많으면 LSM Tree 고려&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>쿼리 패턴&lt;/strong>:
&lt;ul>
&lt;li>복잡한 조인과 트랜잭션이 필요하면 B-Tree, 단순 키-값 조회가 주된 작업이면 LSM Tree 적합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>데이터 크기와 성장 속도&lt;/strong>:
&lt;ul>
&lt;li>대용량 데이터와 빠른 성장이 예상되면 LSM Tree의 압축률과 확장성이 유리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="하드웨어-환경">하드웨어 환경&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>스토리지 유형&lt;/strong>:
&lt;ul>
&lt;li>HDD 환경에서는 순차적 I/O에 최적화된 LSM Tree가 유리, SSD에서는 차이가 줄어듦&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>메모리 용량&lt;/strong>:
&lt;ul>
&lt;li>대용량 메모리가 가능한 환경에서는 B-Tree의 캐싱 효과가 극대화됨&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>CPU 자원&lt;/strong>:
&lt;ul>
&lt;li>LSM Tree의 컴팩션은 추가 CPU 리소스를 소모하므로 CPU 제한 환경에서는 고려 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="실제-벤치마크-테스트의-중요성">실제 벤치마크 테스트의 중요성&lt;/h3>
&lt;p>이론적인 성능 특성은 중요한 지침이 되지만, 실제 운영 환경에서는 예상과 다른 결과가 나올 수 있습니다.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>실제 데이터와 패턴 사용&lt;/strong>:
&lt;ul>
&lt;li>실제 애플리케이션의 데이터 분포와 쿼리 패턴을 반영한 벤치마크 수행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>확장성 테스트&lt;/strong>:
&lt;ul>
&lt;li>현재 데이터 크기뿐만 아니라 예상되는 미래 데이터 크기에서도 테스트&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>장기 실행 테스트&lt;/strong>:
&lt;ul>
&lt;li>시간이 지남에 따른 성능 변화(단편화, 컴팩션 오버헤드 등) 평가&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="결론">결론&lt;/h2>
&lt;p>B-Tree와 LSM Tree는 각각 고유한 장단점을 가진 저장 구조입니다. 전통적으로 B-Tree는 읽기에, LSM Tree는 쓰기에 최적화되어 있다고 여겨지고 일반적으로 그렇지만, 현대적인 데이터베이스 엔진들은 다양한 최적화를 통해 이러한 문제들을 보완하고 있습니다.&lt;/p>
&lt;p>이전 직장에서도 다양한 유형의 워크로드를 RDBMS 만으로도 처리했었고, 쓰기 작업이 불리하다고 여겨지는 RDBMS가 실제 사용했을 때 큰 문제가 발생하지 않는 이유를 살펴보니, 극단적으로 많은 처리가 필요한 상황이 아니라면 &amp;ldquo;적합한 데이터베이스 선택&amp;quot;과 같은 문제는 사소한 문제인걸까? 라는 생각도 들었습니다.&lt;/p>
&lt;p>더 나아가서 새로운 기술들을 적용하는 것 자체가 대부분의 상황에서 불필요할 수도 있겠다는 회의감도 새삼스럽게 드는 것 같습니다.&lt;/p>
&lt;p>이러한 고민을 적용해 볼 수 있는 곳에서 꼭 일해보고 싶네요! 끝까지 읽어주셔서 감사합니다😊&lt;/p></description></item><item><title>OUTER JOIN의 WHERE, ON 처리에 대한 오해와 진실</title><link>https://codemario318.github.io/post/db/where-on/</link><pubDate>Tue, 25 Jul 2023 11:52:14 +0900</pubDate><guid>https://codemario318.github.io/post/db/where-on/</guid><description>&lt;img src="https://codemario318.github.io/post/db/where-on/cover.png" alt="Featured image of post OUTER JOIN의 WHERE, ON 처리에 대한 오해와 진실" />&lt;p>스터디를 위해 Real MySQL 8.0를 주제로 학습을 진행중 &lt;strong>11.4.7.3 OUTER JOIN의 성능과 주의사항&lt;/strong> 부분에서 &lt;strong>&amp;quot;&lt;code>OUTER JOIN&lt;/code>을 사용할 때 드리븐 테이블에 &lt;code>WHERE&lt;/code> 조건 적용 시 &lt;code>INNER JOIN&lt;/code>으로 변경되어 실행되니 주의해야 한다.&amp;quot;&lt;/strong> 라는 내용과 예시가 있었는데, 해당 부분이 이해가 잘 안되었습니다.&lt;/p>
&lt;p>관련 자료를 찾아보았으나, 실행 계획에서 &lt;code>OUTER JOIN&lt;/code>이 &lt;code>INNER JOIN&lt;/code>으로 변경되는 이유를 설명한 자료는 못 찾았고, 확인한 모든 글에서 &lt;strong>&lt;code>WHERE&lt;/code>, &lt;code>ON&lt;/code>절 조건을 처리하는 순서가 또는 범위가 다르다.&lt;/strong> 라는 간략한 설명만 하고 있어 더 정확한 내용들을 알려드릴 수 있을까 싶어 제가 이해한 내용을 기록합니다.&lt;/p>
&lt;p>책의 예시 쿼리와 &lt;a class="link" href="https://github.com/wikibook/realmysql80/tree/main" target="_blank" rel="noopener"
>Real MySQL 8.0 학습 자료&lt;/a>를 바탕으로 확인해보겠습니다.&lt;/p>
&lt;h2 id="테이블-구조">테이블 구조&lt;/h2>
&lt;p>예시로 사용되는 테이블의 구조는 아래와 같습니다.&lt;/p>
&lt;pre class="mermaid" style="text-align: center;">erDiagram
EMPLOYEES ||--o{ DEPT_MANAGER: ""
EMPLOYEES {
emp_no int pk
birth_date date
first_name varchar
last_name varchar
gender enum
hire_date date
}
DEPARTMENTS ||--o{ DEPT_MANAGER: ""
DEPARTMENTS {
dept_no char pk
dept_name varchar
emp_count int
}
DEPT_MANAGER {
dept_no char pk, fk
emp_no int pk, fk
from_date date
to_date date
}
&lt;/pre>
&lt;h2 id="조인-처리-과정">조인 처리 과정&lt;/h2>
&lt;p>조인 작업은 드라이빙 테이블을 스캔하고, 스캔한 드라이빙 테이블 레코드의 조인 컬럼으로 드리븐 테이블의 레코드에 대해 탐색 작업을 수행하게 됩니다.&lt;/p>
&lt;p>인덱스는 이미 정렬된 값을 가지기 때문에 빠른 속도를 보장하지만, 인덱스를 활용할 수 있는 경우라고 하더라도 여러 레코드를 가져오는 상황에서는 인덱스의 특정 범위를 가져오는 인덱스 스캔 작업 보다, 인덱스 값을 하나씩 비교해서 반복적으로 가져오는 탐색 작업이 상대적으로 부하가 높습니다.&lt;/p>
&lt;p>이러한 이유로 옵티마이저는 테이블의 인덱스 사용 가능 여부나 테이블 레코드 개수 같은 통계 정보를 활용하여 더 빠르게 처리될 수 있는 테이블을 드리븐 테이블로 선택하는 방식으로 최적화를 수행합니다.&lt;/p>
&lt;h2 id="이너-조인과-아우터-조인의-차이">이너 조인과 아우터 조인의 차이&lt;/h2>
&lt;p>옵티마이저에서 이너 조인은 옵티마이저에 의해 드라이빙, 드리븐 테이블이 변경될 수 있는 반면 아우터 조인(&lt;code>LEFT JOIN&lt;/code>, &lt;code>RIGHT JOIN&lt;/code>)은 대상 테이블을 기준으로 조회될 레코드들이 결정되므로 테이블의 조인 순서를 변경할 수 없으므로(이미 결정된 순서이므로) 테이블 조인 순서에 의한 최적화는 발생하지 않게 됩니다.&lt;/p>
&lt;p>즉, 이너 조인은 여러 상황을 고려하여 더 효율적인 테이블을 드리븐 테이블로 결정하지만, 아우터 조인은 대상 테이블을 기준으로 레코드를 선택하기 때문에 드라이빙 테이블이 결정되므로 테이블 조인 순서에 의한 최적화를 진행할 수 없습니다.&lt;/p>
&lt;h2 id="쿼리-분석">쿼리 분석&lt;/h2>
&lt;p>아우터 조인을 사용하는 쿼리에서 드리븐 테이블에 대한 조건을 &lt;code>WHERE&lt;/code> 절에 명시하면 &lt;code>INNER JOIN&lt;/code>으로 변경되어 처리된다고 하는데, &lt;code>EXPLAIN ANALYZE&lt;/code> 명령으로 예시 쿼리가 어떤식으로 처리되는지 살펴보겠습니다.&lt;/p>
&lt;h3 id="left-join--where-조건">LEFT JOIN + WHERE 조건&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ANALYZE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dept_manager&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mgr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mgr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emp_no&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emp_no&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mgr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dept_no&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;d001&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">-&amp;gt; Nested loop inner join (cost=2.89 rows=2) (actual time=0.196..0.207 rows=2 loops=1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> -&amp;gt; Filter: (mgr.emp_no is not null) (cost=0.7 rows=2) (actual time=0.0439..0.0504 rows=2 loops=1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> -&amp;gt; Index lookup on mgr using PRIMARY (dept_no=&amp;#39;d001&amp;#39;) (cost=0.7 rows=2) (actual time=0.0425..0.0488 rows=2 loops=1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> -&amp;gt; Single-row index lookup on e using PRIMARY (emp_no=mgr.emp_no) (cost=1.04 rows=1) (actual time=0.077..0.077 rows=1 loops=2)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>WHERE&lt;/code> 조건으로 처리한 쿼리가 &lt;code>Nested loop inner join&lt;/code>으로 실행되었습니다. &lt;code>dept_manager&lt;/code> 테이블을 드라이빙 테이블로 선택하였고, &lt;code>mgr.emp_no is not null&lt;/code> 조건을 통해 필터링한 후, &lt;code>dept_no='d001'&lt;/code> 조건을 통해 인덱스 스캔을 수행하였습니다.&lt;/p>
&lt;p>그리고 &lt;code>employees&lt;/code> 테이블에 대해 조인 컬럼인 &lt;code>emp_no=mgr.emp_no&lt;/code> 이용해 인덱스 탐색을 수행하여 조인을 완료하였습니다.&lt;/p>
&lt;p>&lt;code>dept_manager&lt;/code> 테이블에 대한 &lt;code>mgr.emp_no is not null&lt;/code> 필터 처리는 실행 계획 변경으로 발생할 수 있는 잘못된 데이터를 방지하는 차원에서 추가시키는 것이 아닌가 추측해봅니다.&lt;/p>
&lt;p>(참고로 드리븐 테이블의 모든 컬럼의 조건에서 같은 처리가 발생합니다.)&lt;/p>
&lt;h3 id="inner-join">INNER JOIN&lt;/h3>
&lt;p>책에서는 쿼리를 &lt;code>INNER JOIN&lt;/code>으로 변경하여 실행한다고 언급했는데, 실제로 그럴까요? &lt;code>INNER JOIN&lt;/code>으로 변경하여 실행 계획을 확인해보겠습니다.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ANALYZE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">employees&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">INNER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dept_manager&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mgr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mgr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emp_no&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">emp_no&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mgr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dept_no&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;d001&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">-&amp;gt; Nested loop inner join (cost=1.4 rows=2) (actual time=0.0411..0.0482 rows=2 loops=1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> -&amp;gt; Index lookup on mgr using PRIMARY (dept_no=&amp;#39;d001&amp;#39;) (cost=0.7 rows=2) (actual time=0.025..0.0287 rows=2 loops=1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> -&amp;gt; Single-row index lookup on e using PRIMARY (emp_no=mgr.emp_no) (cost=0.3 rows=1) (actual time=0.00877..0.00881 rows=1 loops=2)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>거의 같은 방식으로 처리되지만, &lt;code>INNER JOIN&lt;/code>으로 실행한 쿼리는 &lt;code>dept_manager&lt;/code> 테이블을 &lt;code>mgr.emp_no is not null&lt;/code> 조건으로 필터링하는 처리가 없다는 점이 다릅니다.&lt;/p>
&lt;h2 id="그래서-이유는">그래서 이유는?&lt;/h2>
&lt;p>&lt;img src="https://codemario318.github.io/post/db/where-on/img.png"
width="600"
height="472"
srcset="https://codemario318.github.io/post/db/where-on/img_hueb5b0420ddd46a8c4b832144c85adad4_141768_480x0_resize_box_3.png 480w, https://codemario318.github.io/post/db/where-on/img_hueb5b0420ddd46a8c4b832144c85adad4_141768_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="SQL Joins"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="305px"
>&lt;/p>
&lt;p>그림에서 보이듯 안티 조인이 아닌 아우터 조인(&lt;code>LEFT JOIN&lt;/code>,&lt;code>OUTER JOIN&lt;/code>)은 드라이빙 테이블의 레코드만 취하는 처리를 수행합니다. 따라서, 드라이빙 테이블의 조인되는 드리븐 테이블의 레코드가 존재하지 않을 경우 알 수 없다는 의미의 NULL을 채워 반환하게 됩니다.&lt;/p>
&lt;p>아우터 조인의 &lt;code>WHERE&lt;/code> 절에서 드리븐 테이블의 컬럼을 조건으로 사용한다는 것을 &lt;strong>&amp;ldquo;아우터 조인된 결과에서 특정 조건으로 필터링 처리를 한다&amp;rdquo;&lt;/strong> 라는 의미로 많이 해석되는 것 같은데 이는 사실 완벽하게 일치하는 표현은 아닙니다.&lt;/p>
&lt;p>결과적으로 조인 결과의 드리븐 테이블 컬럼에 대해 &lt;code>IS NULL&lt;/code>을 제외한 모든 조건이 존재한다는 자체가 아우터 조인으로 만들어지는 조인 결과물의 해당 컬럼 값이 조인 결과가 있어야 한다는 것을 가정하고, 이는 드라이빙 테이블과 드리븐 테이블의 교집합을 의미하는 &lt;code>INNER JOIN&lt;/code> 결과에 조건을 처리하는 것과 같은 결과를 만들게 됩니다.&lt;/p>
&lt;p>옵티마이저가 아우터 조인을 &lt;code>INNER JOIN&lt;/code>으로 변경하는 것은 아우터 조인으로 처리되어 드라이빙 테이블을 모두 읽고 교집합이 아닌 드리븐 테이블 영역에 대해서 NULL을 채워주는 처리 후 &lt;code>WHERE&lt;/code> 조건을 이용한 필터링으로 처리하는 방식보다 효율적이고, 조인 테이블 순서 변경에 의한 최적화도 가능하므로 합리적으로 보입니다.&lt;/p>
&lt;p>반대로 해당 컬럼이 NULL임을 확인해야하는 안티 조인은 아우터 조인 처리가 필요하므로 이너 조인으로 변경이 발생하지 않습니다.&lt;/p>
&lt;h2 id="정리">정리&lt;/h2>
&lt;ol>
&lt;li>아우터 조인의 목적은 드라이빙 테이블의 레코드를 조회하되, 드리븐 테이블 대상이 드라이빙 테이블에 없다면 NULL을 채우기 위함입니다.
&lt;ul>
&lt;li>예시 쿼리에서 &lt;code>ON&lt;/code>을 사용하여 아우터 조인으로 처리한 경우
&lt;ul>
&lt;li>직원들을 보는데 특정 부서를 제외한 관리자 여부까지 확인하고 싶어(NULL이 아니면 관리자 의미)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>아우터 조인의 드리븐 테이블 영역 컬럼에 &lt;code>IS NULL&lt;/code>을 제외한 모든 &lt;code>WHERE&lt;/code> 조건은 사실 조건에 해당하는 컬럼이 NULL이 아님을 의미합니다.&lt;/li>
&lt;li>이는 이너 조인으로 처리되어도 동일한 결과를 만들고, 더 효율적 처리할 여지가 있기 때문에 옵티마이저가 아우터 조인을 이너 조인으로 변경합니다.&lt;/li>
&lt;li>아우터 조인이 이너 조인으로 변경되게 되면 오작동을 예방하기 위한 처리로 성능에 손해가 있을 수 있고(추측), 잘못된 쿼리 해석 예방을 위해 드리븐 테이블의 &lt;code>WHERHE&lt;/code> 조건을 사용하는 &lt;code>OUTER JOIN&lt;/code> 쿼리는 모두 &lt;code>INNER JOIN&lt;/code>로 사용해야 합니다.&lt;/li>
&lt;/ol></description></item></channel></rss>